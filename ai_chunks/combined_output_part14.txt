sABC.roaming>`.
    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
    :returns: state directory tied to the user
    """
    return PlatformDirs(
        appname=appname,
        appauthor=appauthor,
        version=version,
        roaming=roaming,
        ensure_exists=ensure_exists,
    ).user_state_dir


def user_log_dir(
    appname: str | None = None,
    appauthor: str | None | Literal[False] = None,
    version: str | None = None,
    opinion: bool = True,  # noqa: FBT001, FBT002
    ensure_exists: bool = False,  # noqa: FBT001, FBT002
) -> str:
    """
    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
    :param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.
    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
    :returns: log directory tied to the user
    """
    return PlatformDirs(
        appname=appname,
        appauthor=appauthor,
        version=version,
        opinion=opinion,
        ensure_exists=ensure_exists,
    ).user_log_dir


def user_documents_dir() -> str:
    """:returns: documents directory tied to the user"""
    return PlatformDirs().user_documents_dir


def user_downloads_dir() -> str:
    """:returns: downloads directory tied to the user"""
    return PlatformDirs().user_downloads_dir


def user_pictures_dir() -> str:
    """:returns: pictures directory tied to the user"""
    return PlatformDirs().user_pictures_dir


def user_videos_dir() -> str:
    """:returns: videos directory tied to the user"""
    return PlatformDirs().user_videos_dir


def user_music_dir() -> str:
    """:returns: music directory tied to the user"""
    return PlatformDirs().user_music_dir


def user_desktop_dir() -> str:
    """:returns: desktop directory tied to the user"""
    return PlatformDirs().user_desktop_dir


def user_runtime_dir(
    appname: str | None = None,
    appauthor: str | None | Literal[False] = None,
    version: str | None = None,
    opinion: bool = True,  # noqa: FBT001, FBT002
    ensure_exists: bool = False,  # noqa: FBT001, FBT002
) -> str:
    """
    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
    :param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
    :returns: runtime directory tied to the user
    """
    return PlatformDirs(
        appname=appname,
        appauthor=appauthor,
        version=version,
        opinion=opinion,
        ensure_exists=ensure_exists,
    ).user_runtime_dir


def site_runtime_dir(
    appname: str | None = None,
    appauthor: str | None | Literal[False] = None,
    version: str | None = None,
    opinion: bool = True,  # noqa: FBT001, FBT002
    ensure_exists: bool = False,  # noqa: FBT001, FBT002
) -> str:
    """
    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
    :param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
    :returns: runtime directory shared by users
    """
    return PlatformDirs(
        appname=appname,
        appauthor=appauthor,
        version=version,
        opinion=opinion,
        ensure_exists=ensure_exists,
    ).site_runtime_dir


def user_data_path(
    appname: str | None = None,
    appauthor: str | None | Literal[False] = None,
    version: str | None = None,
    roaming: bool = False,  # noqa: FBT001, FBT002
    ensure_exists: bool = False,  # noqa: FBT001, FBT002
) -> Path:
    """
    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
    :param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.
    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
    :returns: data path tied to the user
    """
    return PlatformDirs(
        appname=appname,
        appauthor=appauthor,
        version=version,
        roaming=roaming,
        ensure_exists=ensure_exists,
    ).user_data_path


def site_data_path(
    appname: str | None = None,
    appauthor: str | None | Literal[False] = None,
    version: str | None = None,
    multipath: bool = False,  # noqa: FBT001, FBT002
    ensure_exists: bool = False,  # noqa: FBT001, FBT002
) -> Path:
    """
    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
    :param multipath: See `multipath <platformdirs.api.PlatformDirsABC.multipath>`.
    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
    :returns: data path shared by users
    """
    return PlatformDirs(
        appname=appname,
        appauthor=appauthor,
        version=version,
        multipath=multipath,
        ensure_exists=ensure_exists,
    ).site_data_path


def user_config_path(
    appname: str | None = None,
    appauthor: str | None | Literal[False] = None,
    version: str | None = None,
    roaming: bool = False,  # noqa: FBT001, FBT002
    ensure_exists: bool = False,  # noqa: FBT001, FBT002
) -> Path:
    """
    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
    :param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.
    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
    :returns: config path tied to the user
    """
    return PlatformDirs(
        appname=appname,
        appauthor=appauthor,
        version=version,
        roaming=roaming,
        ensure_exists=ensure_exists,
    ).user_config_path


def site_config_path(
    appname: str | None = None,
    appauthor: str | None | Literal[False] = None,
    version: str | None = None,
    multipath: bool = False,  # noqa: FBT001, FBT002
    ensure_exists: bool = False,  # noqa: FBT001, FBT002
) -> Path:
    """
    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
    :param multipath: See `roaming <platformdirs.api.PlatformDirsABC.multipath>`.
    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
    :returns: config path shared by the users
    """
    return PlatformDirs(
        appname=appname,
        appauthor=appauthor,
        version=version,
        multipath=multipath,
        ensure_exists=ensure_exists,
    ).site_config_path


def site_cache_path(
    appname: str | None = None,
    appauthor: str | None | Literal[False] = None,
    version: str | None = None,
    opinion: bool = True,  # noqa: FBT001, FBT002
    ensure_exists: bool = False,  # noqa: FBT001, FBT002
) -> Path:
    """
    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
    :param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
    :returns: cache directory tied to the user
    """
    return PlatformDirs(
        appname=appname,
        appauthor=appauthor,
        version=version,
        opinion=opinion,
        ensure_exists=ensure_exists,
    ).site_cache_path


def user_cache_path(
    appname: str | None = None,
    appauthor: str | None | Literal[False] = None,
    version: str | None = None,
    opinion: bool = True,  # noqa: FBT001, FBT002
    ensure_exists: bool = False,  # noqa: FBT001, FBT002
) -> Path:
    """
    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
    :param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.
    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
    :returns: cache path tied to the user
    """
    return PlatformDirs(
        appname=appname,
        appauthor=appauthor,
        version=version,
        opinion=opinion,
        ensure_exists=ensure_exists,
    ).user_cache_path


def user_state_path(
    appname: str | None = None,
    appauthor: str | None | Literal[False] = None,
    version: str | None = None,
    roaming: bool = False,  # noqa: FBT001, FBT002
    ensure_exists: bool = False,  # noqa: FBT001, FBT002
) -> Path:
    """
    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
    :param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.
    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
    :returns: state path tied to the user
    """
    return PlatformDirs(
        appname=appname,
        appauthor=appauthor,
        version=version,
        roaming=roaming,
        ensure_exists=ensure_exists,
    ).user_state_path


def user_log_path(
    appname: str | None = None,
    appauthor: str | None | Literal[False] = None,
    version: str | None = None,
    opinion: bool = True,  # noqa: FBT001, FBT002
    ensure_exists: bool = False,  # noqa: FBT001, FBT002
) -> Path:
    """
    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
    :param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.
    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
    :returns: log path tied to the user
    """
    return PlatformDirs(
        appname=appname,
        appauthor=appauthor,
        version=version,
        opinion=opinion,
        ensure_exists=ensure_exists,
    ).user_log_path


def user_documents_path() -> Path:
    """:returns: documents a path tied to the user"""
    return PlatformDirs().user_documents_path


def user_downloads_path() -> Path:
    """:returns: downloads path tied to the user"""
    return PlatformDirs().user_downloads_path


def user_pictures_path() -> Path:
    """:returns: pictures path tied to the user"""
    return PlatformDirs().user_pictures_path


def user_videos_path() -> Path:
    """:returns: videos path tied to the user"""
    return PlatformDirs().user_videos_path


def user_music_path() -> Path:
    """:returns: music path tied to the user"""
    return PlatformDirs().user_music_path


def user_desktop_path() -> Path:
    """:returns: desktop path tied to the user"""
    return PlatformDirs().user_desktop_path


def user_runtime_path(
    appname: str | None = None,
    appauthor: str | None | Literal[False] = None,
    version: str | None = None,
    opinion: bool = True,  # noqa: FBT001, FBT002
    ensure_exists: bool = False,  # noqa: FBT001, FBT002
) -> Path:
    """
    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
    :param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
    :returns: runtime path tied to the user
    """
    return PlatformDirs(
        appname=appname,
        appauthor=appauthor,
        version=version,
        opinion=opinion,
        ensure_exists=ensure_exists,
    ).user_runtime_path


def site_runtime_path(
    appname: str | None = None,
    appauthor: str | None | Literal[False] = None,
    version: str | None = None,
    opinion: bool = True,  # noqa: FBT001, FBT002
    ensure_exists: bool = False,  # noqa: FBT001, FBT002
) -> Path:
    """
    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
    :param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
    :returns: runtime path shared by users
    """
    return PlatformDirs(
        appname=appname,
        appauthor=appauthor,
        version=version,
        opinion=opinion,
        ensure_exists=ensure_exists,
    ).site_runtime_path


__all__ = [
    "AppDirs",
    "PlatformDirs",
    "PlatformDirsABC",
    "__version__",
    "__version_info__",
    "site_cache_dir",
    "site_cache_path",
    "site_config_dir",
    "site_config_path",
    "site_data_dir",
    "site_data_path",
    "site_runtime_dir",
    "site_runtime_path",
    "user_cache_dir",
    "user_cache_path",
    "user_config_dir",
    "user_config_path",
    "user_data_dir",
    "user_data_path",
    "user_desktop_dir",
    "user_desktop_path",
    "user_documents_dir",
    "user_documents_path",
    "user_downloads_dir",
    "user_downloads_path",
    "user_log_dir",
    "user_log_path",
    "user_music_dir",
    "user_music_path",
    "user_pictures_dir",
    "user_pictures_path",
    "user_runtime_dir",
    "user_runtime_path",
    "user_state_dir",
    "user_state_path",
    "user_videos_dir",
    "user_videos_path",
]

"""Base API."""

from __future__ import annotations

import os
from abc import ABC, abstractmethod
from pathlib import Path
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from typing import Iterator, Literal


class PlatformDirsABC(ABC):  # noqa: PLR0904
    """Abstract base class for platform directories."""

    def __init__(  # noqa: PLR0913, PLR0917
        self,
        appname: str | None = None,
        appauthor: str | None | Literal[False] = None,
        version: str | None = None,
        roaming: bool = False,  # noqa: FBT001, FBT002
        multipath: bool = False,  # noqa: FBT001, FBT002
        opinion: bool = True,  # noqa: FBT001, FBT002
        ensure_exists: bool = False,  # noqa: FBT001, FBT002
    ) -> None:
        """
        Create a new platform directory.

        :param appname: See `appname`.
        :param appauthor: See `appauthor`.
        :param version: See `version`.
        :param roaming: See `roaming`.
        :param multipath: See `multipath`.
        :param opinion: See `opinion`.
        :param ensure_exists: See `ensure_exists`.

        """
        self.appname = appname  #: The name of application.
        self.appauthor = appauthor
        """
        The name of the app author or distributing body for this application.

        Typically, it is the owning company name. Defaults to `appname`. You may pass ``False`` to disable it.

        """
        self.version = version
        """
        An optional version path element to append to the path.

        You might want to use this if you want multiple versions of your app to be able to run independently. If used,
        this would typically be ``<major>.<minor>``.

        """
        self.roaming = roaming
        """
        Whether to use the roaming appdata directory on Windows.

        That means that for users on a Windows network setup for roaming profiles, this user data will be synced on
        login (see
        `here <https://technet.microsoft.com/en-us/library/cc766489(WS.10).aspx>`_).

        """
        self.multipath = multipath
        """
        An optional parameter which indicates that the entire list of data dirs should be returned.

        By default, the first item would only be returned.

        """
        self.opinion = opinion  #: A flag to indicating to use opinionated values.
        self.ensure_exists = ensure_exists
        """
        Optionally create the directory (and any missing parents) upon access if it does not exist.

        By default, no directories are created.

        """

    def _append_app_name_and_version(self, *base: str) -> str:
        params = list(base[1:])
        if self.appname:
            params.append(self.appname)
            if self.version:
                params.append(self.version)
        path = os.path.join(base[0], *params)  # noqa: PTH118
        self._optionally_create_directory(path)
        return path

    def _optionally_create_directory(self, path: str) -> None:
        if self.ensure_exists:
            Path(path).mkdir(parents=True, exist_ok=True)

    def _first_item_as_path_if_multipath(self, directory: str) -> Path:
        if self.multipath:
            # If multipath is True, the first path is returned.
            directory = directory.split(os.pathsep)[0]
        return Path(directory)

    @property
    @abstractmethod
    def user_data_dir(self) -> str:
        """:return: data directory tied to the user"""

    @property
    @abstractmethod
    def site_data_dir(self) -> str:
        """:return: data directory shared by users"""

    @property
    @abstractmethod
    def user_config_dir(self) -> str:
        """:return: config directory tied to the user"""

    @property
    @abstractmethod
    def site_config_dir(self) -> str:
        """:return: config directory shared by the users"""

    @property
    @abstractmethod
    def user_cache_dir(self) -> str:
        """:return: cache directory tied to the user"""

    @property
    @abstractmethod
    def site_cache_dir(self) -> str:
        """:return: cache directory shared by users"""

    @property
    @abstractmethod
    def user_state_dir(self) -> str:
        """:return: state directory tied to the user"""

    @property
    @abstractmethod
    def user_log_dir(self) -> str:
        """:return: log directory tied to the user"""

    @property
    @abstractmethod
    def user_documents_dir(self) -> str:
        """:return: documents directory tied to the user"""

    @property
    @abstractmethod
    def user_downloads_dir(self) -> str:
        """:return: downloads directory tied to the user"""

    @property
    @abstractmethod
    def user_pictures_dir(self) -> str:
        """:return: pictures directory tied to the user"""

    @property
    @abstractmethod
    def user_videos_dir(self) -> str:
        """:return: videos directory tied to the user"""

    @property
    @abstractmethod
    def user_music_dir(self) -> str:
        """:return: music directory tied to the user"""

    @property
    @abstractmethod
    def user_desktop_dir(self) -> str:
        """:return: desktop directory tied to the user"""

    @property
    @abstractmethod
    def user_runtime_dir(self) -> str:
        """:return: runtime directory tied to the user"""

    @property
    @abstractmethod
    def site_runtime_dir(self) -> str:
        """:return: runtime directory shared by users"""

    @property
    def user_data_path(self) -> Path:
        """:return: data path tied to the user"""
        return Path(self.user_data_dir)

    @property
    def site_data_path(self) -> Path:
        """:return: data path shared by users"""
        return Path(self.site_data_dir)

    @property
    def user_config_path(self) -> Path:
        """:return: config path tied to the user"""
        return Path(self.user_config_dir)

    @property
    def site_config_path(self) -> Path:
        """:return: config path shared by the users"""
        return Path(self.site_config_dir)

    @property
    def user_cache_path(self) -> Path:
        """:return: cache path tied to the user"""
        return Path(self.user_cache_dir)

    @property
    def site_cache_path(self) -> Path:
        """:return: cache path shared by users"""
        return Path(self.site_cache_dir)

    @property
    def user_state_path(self) -> Path:
        """:return: state path tied to the user"""
        return Path(self.user_state_dir)

    @property
    def user_log_path(self) -> Path:
        """:return: log path tied to the user"""
        return Path(self.user_log_dir)

    @property
    def user_documents_path(self) -> Path:
        """:return: documents a path tied to the user"""
        return Path(self.user_documents_dir)

    @property
    def user_downloads_path(self) -> Path:
        """:return: downloads path tied to the user"""
        return Path(self.user_downloads_dir)

    @property
    def user_pictures_path(self) -> Path:
        """:return: pictures path tied to the user"""
        return Path(self.user_pictures_dir)

    @property
    def user_videos_path(self) -> Path:
        """:return: videos path tied to the user"""
        return Path(self.user_videos_dir)

    @property
    def user_music_path(self) -> Path:
        """:return: music path tied to the user"""
        return Path(self.user_music_dir)

    @property
    def user_desktop_path(self) -> Path:
        """:return: desktop path tied to the user"""
        return Path(self.user_desktop_dir)

    @property
    def user_runtime_path(self) -> Path:
        """:return: runtime path tied to the user"""
        return Path(self.user_runtime_dir)

    @property
    def site_runtime_path(self) -> Path:
        """:return: runtime path shared by users"""
        return Path(self.site_runtime_dir)

    def iter_config_dirs(self) -> Iterator[str]:
        """:yield: all user and site configuration directories."""
        yield self.user_config_dir
        yield self.site_config_dir

    def iter_data_dirs(self) -> Iterator[str]:
        """:yield: all user and site data directories."""
        yield self.user_data_dir
        yield self.site_data_dir

    def iter_cache_dirs(self) -> Iterator[str]:
        """:yield: all user and site cache directories."""
        yield self.user_cache_dir
        yield self.site_cache_dir

    def iter_runtime_dirs(self) -> Iterator[str]:
        """:yield: all user and site runtime directories."""
        yield self.user_runtime_dir
        yield self.site_runtime_dir

    def iter_config_paths(self) -> Iterator[Path]:
        """:yield: all user and site configuration paths."""
        for path in self.iter_config_dirs():
            yield Path(path)

    def iter_data_paths(self) -> Iterator[Path]:
        """:yield: all user and site data paths."""
        for path in self.iter_data_dirs():
            yield Path(path)

    def iter_cache_paths(self) -> Iterator[Path]:
        """:yield: all user and site cache paths."""
        for path in self.iter_cache_dirs():
            yield Path(path)

    def iter_runtime_paths(self) -> Iterator[Path]:
        """:yield: all user and site runtime paths."""
        for path in self.iter_runtime_dirs():
            yield Path(path)

"""Android."""

from __future__ import annotations

import os
import re
import sys
from functools import lru_cache
from typing import TYPE_CHECKING, cast

from .api import PlatformDirsABC


class Android(PlatformDirsABC):
    """
    Follows the guidance `from here <https://android.stackexchange.com/a/216132>`_.

    Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`, `version
    <platformdirs.api.PlatformDirsABC.version>`, `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.

    """

    @property
    def user_data_dir(self) -> str:
        """:return: data directory tied to the user, e.g. ``/data/user/<userid>/<packagename>/files/<AppName>``"""
        return self._append_app_name_and_version(cast(str, _android_folder()), "files")

    @property
    def site_data_dir(self) -> str:
        """:return: data directory shared by users, same as `user_data_dir`"""
        return self.user_data_dir

    @property
    def user_config_dir(self) -> str:
        """
        :return: config directory tied to the user, e.g. \
        ``/data/user/<userid>/<packagename>/shared_prefs/<AppName>``
        """
        return self._append_app_name_and_version(cast(str, _android_folder()), "shared_prefs")

    @property
    def site_config_dir(self) -> str:
        """:return: config directory shared by the users, same as `user_config_dir`"""
        return self.user_config_dir

    @property
    def user_cache_dir(self) -> str:
        """:return: cache directory tied to the user, e.g.,``/data/user/<userid>/<packagename>/cache/<AppName>``"""
        return self._append_app_name_and_version(cast(str, _android_folder()), "cache")

    @property
    def site_cache_dir(self) -> str:
        """:return: cache directory shared by users, same as `user_cache_dir`"""
        return self.user_cache_dir

    @property
    def user_state_dir(self) -> str:
        """:return: state directory tied to the user, same as `user_data_dir`"""
        return self.user_data_dir

    @property
    def user_log_dir(self) -> str:
        """
        :return: log directory tied to the user, same as `user_cache_dir` if not opinionated else ``log`` in it,
          e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>/log``
        """
        path = self.user_cache_dir
        if self.opinion:
            path = os.path.join(path, "log")  # noqa: PTH118
        return path

    @property
    def user_documents_dir(self) -> str:
        """:return: documents directory tied to the user e.g. ``/storage/emulated/0/Documents``"""
        return _android_documents_folder()

    @property
    def user_downloads_dir(self) -> str:
        """:return: downloads directory tied to the user e.g. ``/storage/emulated/0/Downloads``"""
        return _android_downloads_folder()

    @property
    def user_pictures_dir(self) -> str:
        """:return: pictures directory tied to the user e.g. ``/storage/emulated/0/Pictures``"""
        return _android_pictures_folder()

    @property
    def user_videos_dir(self) -> str:
        """:return: videos directory tied to the user e.g. ``/storage/emulated/0/DCIM/Camera``"""
        return _android_videos_folder()

    @property
    def user_music_dir(self) -> str:
        """:return: music directory tied to the user e.g. ``/storage/emulated/0/Music``"""
        return _android_music_folder()

    @property
    def user_desktop_dir(self) -> str:
        """:return: desktop directory tied to the user e.g. ``/storage/emulated/0/Desktop``"""
        return "/storage/emulated/0/Desktop"

    @property
    def user_runtime_dir(self) -> str:
        """
        :return: runtime directory tied to the user, same as `user_cache_dir` if not opinionated else ``tmp`` in it,
          e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>/tmp``
        """
        path = self.user_cache_dir
        if self.opinion:
            path = os.path.join(path, "tmp")  # noqa: PTH118
        return path

    @property
    def site_runtime_dir(self) -> str:
        """:return: runtime directory shared by users, same as `user_runtime_dir`"""
        return self.user_runtime_dir


@lru_cache(maxsize=1)
def _android_folder() -> str | None:  # noqa: C901
    """:return: base folder for the Android OS or None if it cannot be found"""
    result: str | None = None
    # type checker isn't happy with our "import android", just don't do this when type checking see
    # https://stackoverflow.com/a/61394121
    if not TYPE_CHECKING:
        try:
            # First try to get a path to android app using python4android (if available)...
            from android import mActivity  # noqa: PLC0415

            context = cast("android.content.Context", mActivity.getApplicationContext())  # noqa: F821
            result = context.getFilesDir().getParentFile().getAbsolutePath()
        except Exception:  # noqa: BLE001
            result = None
    if result is None:
        try:
            # ...and fall back to using plain pyjnius, if python4android isn't available or doesn't deliver any useful
            # result...
            from jnius import autoclass  # noqa: PLC0415

            context = autoclass("android.content.Context")
            result = context.getFilesDir().getParentFile().getAbsolutePath()
        except Exception:  # noqa: BLE001
            result = None
    if result is None:
        # and if that fails, too, find an android folder looking at path on the sys.path
        # warning: only works for apps installed under /data, not adopted storage etc.
        pattern = re.compile(r"/data/(data|user/\d+)/(.+)/files")
        for path in sys.path:
            if pattern.match(path):
                result = path.split("/files")[0]
                break
        else:
            result = None
    if result is None:
        # one last try: find an android folder looking at path on the sys.path taking adopted storage paths into
        # account
        pattern = re.compile(r"/mnt/expand/[a-fA-F0-9-]{36}/(data|user/\d+)/(.+)/files")
        for path in sys.path:
            if pattern.match(path):
                result = path.split("/files")[0]
                break
        else:
            result = None
    return result


@lru_cache(maxsize=1)
def _android_documents_folder() -> str:
    """:return: documents folder for the Android OS"""
    # Get directories with pyjnius
    try:
        from jnius import autoclass  # noqa: PLC0415

        context = autoclass("android.content.Context")
        environment = autoclass("android.os.Environment")
        documents_dir: str = context.getExternalFilesDir(environment.DIRECTORY_DOCUMENTS).getAbsolutePath()
    except Exception:  # noqa: BLE001
        documents_dir = "/storage/emulated/0/Documents"

    return documents_dir


@lru_cache(maxsize=1)
def _android_downloads_folder() -> str:
    """:return: downloads folder for the Android OS"""
    # Get directories with pyjnius
    try:
        from jnius import autoclass  # noqa: PLC0415

        context = autoclass("android.content.Context")
        environment = autoclass("android.os.Environment")
        downloads_dir: str = context.getExternalFilesDir(environment.DIRECTORY_DOWNLOADS).getAbsolutePath()
    except Exception:  # noqa: BLE001
        downloads_dir = "/storage/emulated/0/Downloads"

    return downloads_dir


@lru_cache(maxsize=1)
def _android_pictures_folder() -> str:
    """:return: pictures folder for the Android OS"""
    # Get directories with pyjnius
    try:
        from jnius import autoclass  # noqa: PLC0415

        context = autoclass("android.content.Context")
        environment = autoclass("android.os.Environment")
        pictures_dir: str = context.getExternalFilesDir(environment.DIRECTORY_PICTURES).getAbsolutePath()
    except Exception:  # noqa: BLE001
        pictures_dir = "/storage/emulated/0/Pictures"

    return pictures_dir


@lru_cache(maxsize=1)
def _android_videos_folder() -> str:
    """:return: videos folder for the Android OS"""
    # Get directories with pyjnius
    try:
        from jnius import autoclass  # noqa: PLC0415

        context = autoclass("android.content.Context")
        environment = autoclass("android.os.Environment")
        videos_dir: str = context.getExternalFilesDir(environment.DIRECTORY_DCIM).getAbsolutePath()
    except Exception:  # noqa: BLE001
        videos_dir = "/storage/emulated/0/DCIM/Camera"

    return videos_dir


@lru_cache(maxsize=1)
def _android_music_folder() -> str:
    """:return: music folder for the Android OS"""
    # Get directories with pyjnius
    try:
        from jnius import autoclass  # noqa: PLC0415

        context = autoclass("android.content.Context")
        environment = autoclass("android.os.Environment")
        music_dir: str = context.getExternalFilesDir(environment.DIRECTORY_MUSIC).getAbsolutePath()
    except Exception:  # noqa: BLE001
        music_dir = "/storage/emulated/0/Music"

    return music_dir


__all__ = [
    "Android",
]


"""Windows."""

from __future__ import annotations

import os
import sys
from functools import lru_cache
from typing import TYPE_CHECKING

from .api import PlatformDirsABC

if TYPE_CHECKING:
    from collections.abc import Callable


class Windows(PlatformDirsABC):
    """
    `MSDN on where to store app data files <https://learn.microsoft.com/en-us/windows/win32/shell/knownfolderid>`_.

    Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`, `appauthor
    <platformdirs.api.PlatformDirsABC.appauthor>`, `version <platformdirs.api.PlatformDirsABC.version>`, `roaming
    <platformdirs.api.PlatformDirsABC.roaming>`, `opinion <platformdirs.api.PlatformDirsABC.opinion>`, `ensure_exists
    <platformdirs.api.PlatformDirsABC.ensure_exists>`.

    """

    @property
    def user_data_dir(self) -> str:
        """
        :return: data directory tied to the user, e.g.
         ``%USERPROFILE%\\AppData\\Local\\$appauthor\\$appname`` (not roaming) or
         ``%USERPROFILE%\\AppData\\Roaming\\$appauthor\\$appname`` (roaming)
        """
        const = "CSIDL_APPDATA" if self.roaming else "CSIDL_LOCAL_APPDATA"
        path = os.path.normpath(get_win_folder(const))
        return self._append_parts(path)

    def _append_parts(self, path: str, *, opinion_value: str | None = None) -> str:
        params = []
        if self.appname:
            if self.appauthor is not False:
                author = self.appauthor or self.appname
                params.append(author)
            params.append(self.appname)
            if opinion_value is not None and self.opinion:
                params.append(opinion_value)
            if self.version:
                params.append(self.version)
        path = os.path.join(path, *params)  # noqa: PTH118
        self._optionally_create_directory(path)
        return path

    @property
    def site_data_dir(self) -> str:
        """:return: data directory shared by users, e.g. ``C:\\ProgramData\\$appauthor\\$appname``"""
        path = os.path.normpath(get_win_folder("CSIDL_COMMON_APPDATA"))
        return self._append_parts(path)

    @property
    def user_config_dir(self) -> str:
        """:return: config directory tied to the user, same as `user_data_dir`"""
        return self.user_data_dir

    @property
    def site_config_dir(self) -> str:
        """:return: config directory shared by the users, same as `site_data_dir`"""
        return self.site_data_dir

    @property
    def user_cache_dir(self) -> str:
        """
        :return: cache directory tied to the user (if opinionated with ``Cache`` folder within ``$appname``) e.g.
         ``%USERPROFILE%\\AppData\\Local\\$appauthor\\$appname\\Cache\\$version``
        """
        path = os.path.normpath(get_win_folder("CSIDL_LOCAL_APPDATA"))
        return self._append_parts(path, opinion_value="Cache")

    @property
    def site_cache_dir(self) -> str:
        """:return: cache directory shared by users, e.g. ``C:\\ProgramData\\$appauthor\\$appname\\Cache\\$version``"""
        path = os.path.normpath(get_win_folder("CSIDL_COMMON_APPDATA"))
        return self._append_parts(path, opinion_value="Cache")

    @property
    def user_state_dir(self) -> str:
        """:return: state directory tied to the user, same as `user_data_dir`"""
        return self.user_data_dir

    @property
    def user_log_dir(self) -> str:
        """:return: log directory tied to the user, same as `user_data_dir` if not opinionated else ``Logs`` in it"""
        path = self.user_data_dir
        if self.opinion:
            path = os.path.join(path, "Logs")  # noqa: PTH118
            self._optionally_create_directory(path)
        return path

    @property
    def user_documents_dir(self) -> str:
        """:return: documents directory tied to the user e.g. ``%USERPROFILE%\\Documents``"""
        return os.path.normpath(get_win_folder("CSIDL_PERSONAL"))

    @property
    def user_downloads_dir(self) -> str:
        """:return: downloads directory tied to the user e.g. ``%USERPROFILE%\\Downloads``"""
        return os.path.normpath(get_win_folder("CSIDL_DOWNLOADS"))

    @property
    def user_pictures_dir(self) -> str:
        """:return: pictures directory tied to the user e.g. ``%USERPROFILE%\\Pictures``"""
        return os.path.normpath(get_win_folder("CSIDL_MYPICTURES"))

    @property
    def user_videos_dir(self) -> str:
        """:return: videos directory tied to the user e.g. ``%USERPROFILE%\\Videos``"""
        return os.path.normpath(get_win_folder("CSIDL_MYVIDEO"))

    @property
    def user_music_dir(self) -> str:
        """:return: music directory tied to the user e.g. ``%USERPROFILE%\\Music``"""
        return os.path.normpath(get_win_folder("CSIDL_MYMUSIC"))

    @property
    def user_desktop_dir(self) -> str:
        """:return: desktop directory tied to the user, e.g. ``%USERPROFILE%\\Desktop``"""
        return os.path.normpath(get_win_folder("CSIDL_DESKTOPDIRECTORY"))

    @property
    def user_runtime_dir(self) -> str:
        """
        :return: runtime directory tied to the user, e.g.
         ``%USERPROFILE%\\AppData\\Local\\Temp\\$appauthor\\$appname``
        """
        path = os.path.normpath(os.path.join(get_win_folder("CSIDL_LOCAL_APPDATA"), "Temp"))  # noqa: PTH118
        return self._append_parts(path)

    @property
    def site_runtime_dir(self) -> str:
        """:return: runtime directory shared by users, same as `user_runtime_dir`"""
        return self.user_runtime_dir


def get_win_folder_from_env_vars(csidl_name: str) -> str:
    """Get folder from environment variables."""
    result = get_win_folder_if_csidl_name_not_env_var(csidl_name)
    if result is not None:
        return result

    env_var_name = {
        "CSIDL_APPDATA": "APPDATA",
        "CSIDL_COMMON_APPDATA": "ALLUSERSPROFILE",
        "CSIDL_LOCAL_APPDATA": "LOCALAPPDATA",
    }.get(csidl_name)
    if env_var_name is None:
        msg = f"Unknown CSIDL name: {csidl_name}"
        raise ValueError(msg)
    result = os.environ.get(env_var_name)
    if result is None:
        msg = f"Unset environment variable: {env_var_name}"
        raise ValueError(msg)
    return result


def get_win_folder_if_csidl_name_not_env_var(csidl_name: str) -> str | None:
    """Get a folder for a CSIDL name that does not exist as an environment variable."""
    if csidl_name == "CSIDL_PERSONAL":
        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Documents")  # noqa: PTH118

    if csidl_name == "CSIDL_DOWNLOADS":
        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Downloads")  # noqa: PTH118

    if csidl_name == "CSIDL_MYPICTURES":
        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Pictures")  # noqa: PTH118

    if csidl_name == "CSIDL_MYVIDEO":
        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Videos")  # noqa: PTH118

    if csidl_name == "CSIDL_MYMUSIC":
        return os.path.join(os.path.normpath(os.environ["USERPROFILE"]), "Music")  # noqa: PTH118
    return None


def get_win_folder_from_registry(csidl_name: str) -> str:
    """
    Get folder from the registry.

    This is a fallback technique at best. I'm not sure if using the registry for these guarantees us the correct answer
    for all CSIDL_* names.

    """
    shell_folder_name = {
        "CSIDL_APPDATA": "AppData",
        "CSIDL_COMMON_APPDATA": "Common AppData",
        "CSIDL_LOCAL_APPDATA": "Local AppData",
        "CSIDL_PERSONAL": "Personal",
        "CSIDL_DOWNLOADS": "{374DE290-123F-4565-9164-39C4925E467B}",
        "CSIDL_MYPICTURES": "My Pictures",
        "CSIDL_MYVIDEO": "My Video",
        "CSIDL_MYMUSIC": "My Music",
    }.get(csidl_name)
    if shell_folder_name is None:
        msg = f"Unknown CSIDL name: {csidl_name}"
        raise ValueError(msg)
    if sys.platform != "win32":  # only needed for mypy type checker to know that this code runs only on Windows
        raise NotImplementedError
    import winreg  # noqa: PLC0415

    key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders")
    directory, _ = winreg.QueryValueEx(key, shell_folder_name)
    return str(directory)


def get_win_folder_via_ctypes(csidl_name: str) -> str:
    """Get folder with ctypes."""
    # There is no 'CSIDL_DOWNLOADS'.
    # Use 'CSIDL_PROFILE' (40) and append the default folder 'Downloads' instead.
    # https://learn.microsoft.com/en-us/windows/win32/shell/knownfolderid

    import ctypes  # noqa: PLC0415

    csidl_const = {
        "CSIDL_APPDATA": 26,
        "CSIDL_COMMON_APPDATA": 35,
        "CSIDL_LOCAL_APPDATA": 28,
        "CSIDL_PERSONAL": 5,
        "CSIDL_MYPICTURES": 39,
        "CSIDL_MYVIDEO": 14,
        "CSIDL_MYMUSIC": 13,
        "CSIDL_DOWNLOADS": 40,
        "CSIDL_DESKTOPDIRECTORY": 16,
    }.get(csidl_name)
    if csidl_const is None:
        msg = f"Unknown CSIDL name: {csidl_name}"
        raise ValueError(msg)

    buf = ctypes.create_unicode_buffer(1024)
    windll = getattr(ctypes, "windll")  # noqa: B009 # using getattr to avoid false positive with mypy type checker
    windll.shell32.SHGetFolderPathW(None, csidl_const, None, 0, buf)

    # Downgrade to short path name if it has high-bit chars.
    if any(ord(c) > 255 for c in buf):  # noqa: PLR2004
        buf2 = ctypes.create_unicode_buffer(1024)
        if windll.kernel32.GetShortPathNameW(buf.value, buf2, 1024):
            buf = buf2

    if csidl_name == "CSIDL_DOWNLOADS":
        return os.path.join(buf.value, "Downloads")  # noqa: PTH118

    return buf.value


def _pick_get_win_folder() -> Callable[[str], str]:
    try:
        import ctypes  # noqa: PLC0415
    except ImportError:
        pass
    else:
        if hasattr(ctypes, "windll"):
            return get_win_folder_via_ctypes
    try:
        import winreg  # noqa: PLC0415, F401
    except ImportError:
        return get_win_folder_from_env_vars
    else:
        return get_win_folder_from_registry


get_win_folder = lru_cache(maxsize=None)(_pick_get_win_folder())

__all__ = [
    "Windows",
]

"""Main entry point."""

from __future__ import annotations

from pip._vendor.platformdirs import PlatformDirs, __version__

PROPS = (
    "user_data_dir",
    "user_config_dir",
    "user_cache_dir",
    "user_state_dir",
    "user_log_dir",
    "user_documents_dir",
    "user_downloads_dir",
    "user_pictures_dir",
    "user_videos_dir",
    "user_music_dir",
    "user_runtime_dir",
    "site_data_dir",
    "site_config_dir",
    "site_cache_dir",
    "site_runtime_dir",
)


def main() -> None:
    """Run the main entry point."""
    app_name = "MyApp"
    app_author = "MyCompany"

    print(f"-- platformdirs {__version__} --")  # noqa: T201

    print("-- app dirs (with optional 'version')")  # noqa: T201
    dirs = PlatformDirs(app_name, app_author, version="1.0")
    for prop in PROPS:
        print(f"{prop}: {getattr(dirs, prop)}")  # noqa: T201

    print("\n-- app dirs (without optional 'version')")  # noqa: T201
    dirs = PlatformDirs(app_name, app_author)
    for prop in PROPS:
        print(f"{prop}: {getattr(dirs, prop)}")  # noqa: T201

    print("\n-- app dirs (without optional 'appauthor')")  # noqa: T201
    dirs = PlatformDirs(app_name)
    for prop in PROPS:
        print(f"{prop}: {getattr(dirs, prop)}")  # noqa: T201

    print("\n-- app dirs (with disabled 'appauthor')")  # noqa: T201
    dirs = PlatformDirs(app_name, appauthor=False)
    for prop in PROPS:
        print(f"{prop}: {getattr(dirs, prop)}")  # noqa: T201


if __name__ == "__main__":
    main()

import platform
import ctypes


def windows_only(func):
    if platform.system() != 'Windows':
        return lambda *args, **kwargs: None
    return func


@windows_only
def hide_file(path):
    """
    Set the hidden attribute on a file or directory.

    From http://stackoverflow.com/questions/19622133/

    `path` must be text.
    """
    __import__('ctypes.wintypes')
    SetFileAttributes = ctypes.windll.kernel32.SetFileAttributesW
    SetFileAttributes.argtypes = ctypes.wintypes.LPWSTR, ctypes.wintypes.DWORD
    SetFileAttributes.restype = ctypes.wintypes.BOOL

    FILE_ATTRIBUTE_HIDDEN = 0x02

    ret = SetFileAttributes(path, FILE_ATTRIBUTE_HIDDEN)
    if not ret:
        raise ctypes.WinError()

class SetuptoolsDeprecationWarning(Warning):
    """
    Base class for warning deprecations in ``setuptools``

    This class is not derived from ``DeprecationWarning``, and as such is
    visible by default.
    """

"""PyPI and direct package downloading"""
import sys
import os
import re
import io
import shutil
import socket
import base64
import hashlib
import itertools
import warnings
import configparser
import html
import http.client
import urllib.parse
import urllib.request
import urllib.error
from functools import wraps

import setuptools
from pkg_resources import (
    CHECKOUT_DIST, Distribution, BINARY_DIST, normalize_path, SOURCE_DIST,
    Environment, find_distributions, safe_name, safe_version,
    to_filename, Requirement, DEVELOP_DIST, EGG_DIST,
)
from distutils import log
from distutils.errors import DistutilsError
from fnmatch import translate
from setuptools.wheel import Wheel
from setuptools.extern.more_itertools import unique_everseen


EGG_FRAGMENT = re.compile(r'^egg=([-A-Za-z0-9_.+!]+)$')
HREF = re.compile(r"""href\s*=\s*['"]?([^'"> ]+)""", re.I)
PYPI_MD5 = re.compile(
    r'<a href="([^"#]+)">([^<]+)</a>\n\s+\(<a (?:title="MD5 hash"\n\s+)'
    r'href="[^?]+\?:action=show_md5&amp;digest=([0-9a-f]{32})">md5</a>\)'
)
URL_SCHEME = re.compile('([-+.a-z0-9]{2,}):', re.I).match
EXTENSIONS = ".tar.gz .tar.bz2 .tar .zip .tgz".split()

__all__ = [
    'PackageIndex', 'distros_for_url', 'parse_bdist_wininst',
    'interpret_distro_name',
]

_SOCKET_TIMEOUT = 15

_tmpl = "setuptools/{setuptools.__version__} Python-urllib/{py_major}"
user_agent = _tmpl.format(
    py_major='{}.{}'.format(*sys.version_info), setuptools=setuptools)


def parse_requirement_arg(spec):
    try:
        return Requirement.parse(spec)
    except ValueError as e:
        raise DistutilsError(
            "Not a URL, existing file, or requirement spec: %r" % (spec,)
        ) from e


def parse_bdist_wininst(name):
    """Return (base,pyversion) or (None,None) for possible .exe name"""

    lower = name.lower()
    base, py_ver, plat = None, None, None

    if lower.endswith('.exe'):
        if lower.endswith('.win32.exe'):
            base = name[:-10]
            plat = 'win32'
        elif lower.startswith('.win32-py', -16):
            py_ver = name[-7:-4]
            base = name[:-16]
            plat = 'win32'
        elif lower.endswith('.win-amd64.exe'):
            base = name[:-14]
            plat = 'win-amd64'
        elif lower.startswith('.win-amd64-py', -20):
            py_ver = name[-7:-4]
            base = name[:-20]
            plat = 'win-amd64'
    return base, py_ver, plat


def egg_info_for_url(url):
    parts = urllib.parse.urlparse(url)
    scheme, server, path, parameters, query, fragment = parts
    base = urllib.parse.unquote(path.split('/')[-1])
    if server == 'sourceforge.net' and base == 'download':  # XXX Yuck
        base = urllib.parse.unquote(path.split('/')[-2])
    if '#' in base:
        base, fragment = base.split('#', 1)
    return base, fragment


def distros_for_url(url, metadata=None):
    """Yield egg or source distribution objects that might be found at a URL"""
    base, fragment = egg_info_for_url(url)
    for dist in distros_for_location(url, base, metadata):
        yield dist
    if fragment:
        match = EGG_FRAGMENT.match(fragment)
        if match:
            for dist in interpret_distro_name(
                url, match.group(1), metadata, precedence=CHECKOUT_DIST
            ):
                yield dist


def distros_for_location(location, basename, metadata=None):
    """Yield egg or source distribution objects based on basename"""
    if basename.endswith('.egg.zip'):
        basename = basename[:-4]  # strip the .zip
    if basename.endswith('.egg') and '-' in basename:
        # only one, unambiguous interpretation
        return [Distribution.from_location(location, basename, metadata)]
    if basename.endswith('.whl') and '-' in basename:
        wheel = Wheel(basename)
        if not wheel.is_compatible():
            return []
        return [Distribution(
            location=location,
            project_name=wheel.project_name,
            version=wheel.version,
            # Increase priority over eggs.
            precedence=EGG_DIST + 1,
        )]
    if basename.endswith('.exe'):
        win_base, py_ver, platform = parse_bdist_wininst(basename)
        if win_base is not None:
            return interpret_distro_name(
                location, win_base, metadata, py_ver, BINARY_DIST, platform
            )
    # Try source distro extensions (.zip, .tgz, etc.)
    #
    for ext in EXTENSIONS:
        if basename.endswith(ext):
            basename = basename[:-len(ext)]
            return interpret_distro_name(location, basename, metadata)
    return []  # no extension matched


def distros_for_filename(filename, metadata=None):
    """Yield possible egg or source distribution objects based on a filename"""
    return distros_for_location(
        normalize_path(filename), os.path.basename(filename), metadata
    )


def interpret_distro_name(
        location, basename, metadata, py_version=None, precedence=SOURCE_DIST,
        platform=None
):
    """Generate alternative interpretations of a source distro name

    Note: if `location` is a filesystem filename, you should call
    ``pkg_resources.normalize_path()`` on it before passing it to this
    routine!
    """
    # Generate alternative interpretations of a source distro name
    # Because some packages are ambiguous as to name/versions split
    # e.g. "adns-python-1.1.0", "egenix-mx-commercial", etc.
    # So, we generate each possible interpretation (e.g. "adns, python-1.1.0"
    # "adns-python, 1.1.0", and "adns-python-1.1.0, no version").  In practice,
    # the spurious interpretations should be ignored, because in the event
    # there's also an "adns" package, the spurious "python-1.1.0" version will
    # compare lower than any numeric version number, and is therefore unlikely
    # to match a request for it.  It's still a potential problem, though, and
    # in the long run PyPI and the distutils should go for "safe" names and
    # versions in distribution archive names (sdist and bdist).

    parts = basename.split('-')
    if not py_version and any(re.match(r'py\d\.\d$', p) for p in parts[2:]):
        # it is a bdist_dumb, not an sdist -- bail out
        return

    for p in range(1, len(parts) + 1):
        yield Distribution(
            location, metadata, '-'.join(parts[:p]), '-'.join(parts[p:]),
            py_version=py_version, precedence=precedence,
            platform=platform
        )


def unique_values(func):
    """
    Wrap a function returning an iterable such that the resulting iterable
    only ever yields unique items.
    """

    @wraps(func)
    def wrapper(*args, **kwargs):
        return unique_everseen(func(*args, **kwargs))

    return wrapper


REL = re.compile(r"""<([^>]*\srel\s{0,10}=\s{0,10}['"]?([^'" >]+)[^>]*)>""", re.I)
# this line is here to fix emacs' cruddy broken syntax highlighting


@unique_values
def find_external_links(url, page):
    """Find rel="homepage" and rel="download" links in `page`, yielding URLs"""

    for match in REL.finditer(page):
        tag, rel = match.groups()
        rels = set(map(str.strip, rel.lower().split(',')))
        if 'homepage' in rels or 'download' in rels:
            for match in HREF.finditer(tag):
                yield urllib.parse.urljoin(url, htmldecode(match.group(1)))

    for tag in ("<th>Home Page", "<th>Download URL"):
        pos = page.find(tag)
        if pos != -1:
            match = HREF.search(page, pos)
            if match:
                yield urllib.parse.urljoin(url, htmldecode(match.group(1)))


class ContentChecker:
    """
    A null content checker that defines the interface for checking content
    """

    def feed(self, block):
        """
        Feed a block of data to the hash.
        """
        return

    def is_valid(self):
        """
        Check the hash. Return False if validation fails.
        """
        return True

    def report(self, reporter, template):
        """
        Call reporter with information about the checker (hash name)
        substituted into the template.
        """
        return


class HashChecker(ContentChecker):
    pattern = re.compile(
        r'(?P<hash_name>sha1|sha224|sha384|sha256|sha512|md5)='
        r'(?P<expected>[a-f0-9]+)'
    )

    def __init__(self, hash_name, expected):
        self.hash_name = hash_name
        self.hash = hashlib.new(hash_name)
        self.expected = expected

    @classmethod
    def from_url(cls, url):
        "Construct a (possibly null) ContentChecker from a URL"
        fragment = urllib.parse.urlparse(url)[-1]
        if not fragment:
            return ContentChecker()
        match = cls.pattern.search(fragment)
        if not match:
            return ContentChecker()
        return cls(**match.groupdict())

    def feed(self, block):
        self.hash.update(block)

    def is_valid(self):
        return self.hash.hexdigest() == self.expected

    def report(self, reporter, template):
        msg = template % self.hash_name
        return reporter(msg)


class PackageIndex(Environment):
    """A distribution index that scans web pages for download URLs"""

    def __init__(
            self, index_url="https://pypi.org/simple/", hosts=('*',),
            ca_bundle=None, verify_ssl=True, *args, **kw
    ):
        Environment.__init__(self, *args, **kw)
        self.index_url = index_url + "/" [:not index_url.endswith('/')]
        self.scanned_urls = {}
        self.fetched_urls = {}
        self.package_pages = {}
        self.allows = re.compile('|'.join(map(translate, hosts))).match
        self.to_scan = []
        self.opener = urllib.request.urlopen

    # FIXME: 'PackageIndex.process_url' is too complex (14)
    def process_url(self, url, retrieve=False):  # noqa: C901
        """Evaluate a URL as a possible download, and maybe retrieve it"""
        if url in self.scanned_urls and not retrieve:
            return
        self.scanned_urls[url] = True
        if not URL_SCHEME(url):
            self.process_filename(url)
            return
        else:
            dists = list(distros_for_url(url))
            if dists:
                if not self.url_ok(url):
                    return
                self.debug("Found link: %s", url)

        if dists or not retrieve or url in self.fetched_urls:
            list(map(self.add, dists))
            return  # don't need the actual page

        if not self.url_ok(url):
            self.fetched_urls[url] = True
            return

        self.info("Reading %s", url)
        self.fetched_urls[url] = True  # prevent multiple fetch attempts
        tmpl = "Download error on %s: %%s -- Some packages may not be found!"
        f = self.open_url(url, tmpl % url)
        if f is None:
            return
        if isinstance(f, urllib.error.HTTPError) and f.code == 401:
            self.info("Authentication error: %s" % f.msg)
        self.fetched_urls[f.url] = True
        if 'html' not in f.headers.get('content-type', '').lower():
            f.close()  # not html, we can't process it
            return

        base = f.url  # handle redirects
        page = f.read()
        if not isinstance(page, str):
            # In Python 3 and got bytes but want str.
            if isinstance(f, urllib.error.HTTPError):
                # Errors have no charset, assume latin1:
                charset = 'latin-1'
            else:
                charset = f.headers.get_param('charset') or 'latin-1'
            page = page.decode(charset, "ignore")
        f.close()
        for match in HREF.finditer(page):
            link = urllib.parse.urljoin(base, htmldecode(match.group(1)))
            self.process_url(link)
        if url.startswith(self.index_url) and getattr(f, 'code', None) != 404:
            page = self.process_index(url, page)

    def process_filename(self, fn, nested=False):
        # process filenames or directories
        if not os.path.exists(fn):
            self.warn("Not found: %s", fn)
            return

        if os.path.isdir(fn) and not nested:
            path = os.path.realpath(fn)
            for item in os.listdir(path):
                self.process_filename(os.path.join(path, item), True)

        dists = distros_for_filename(fn)
        if dists:
            self.debug("Found: %s", fn)
            list(map(self.add, dists))

    def url_ok(self, url, fatal=False):
        s = URL_SCHEME(url)
        is_file = s and s.group(1).lower() == 'file'
        if is_file or self.allows(urllib.parse.urlparse(url)[1]):
            return True
        msg = (
            "\nNote: Bypassing %s (disallowed host; see "
            "http://bit.ly/2hrImnY for details).\n")
        if fatal:
            raise DistutilsError(msg % url)
        else:
            self.warn(msg, url)

    def scan_egg_links(self, search_path):
        dirs = filter(os.path.isdir, search_path)
        egg_links = (
            (path, entry)
            for path in dirs
            for entry in os.listdir(path)
            if entry.endswith('.egg-link')
        )
        list(itertools.starmap(self.scan_egg_link, egg_links))

    def scan_egg_link(self, path, entry):
        with open(os.path.join(path, entry)) as raw_lines:
            # filter non-empty lines
            lines = list(filter(None, map(str.strip, raw_lines)))

        if len(lines) != 2:
            # format is not recognized; punt
            return

        egg_path, setup_path = lines

        for dist in find_distributions(os.path.join(path, egg_path)):
            dist.location = os.path.join(path, *lines)
            dist.precedence = SOURCE_DIST
            self.add(dist)

    def _scan(self, link):
        # Process a URL to see if it's for a package page
        NO_MATCH_SENTINEL = None, None
        if not link.startswith(self.index_url):
            return NO_MATCH_SENTINEL

        parts = list(map(
            urllib.parse.unquote, link[len(self.index_url):].split('/')
        ))
        if len(parts) != 2 or '#' in parts[1]:
            return NO_MATCH_SENTINEL

        # it's a package page, sanitize and index it
        pkg = safe_name(parts[0])
        ver = safe_version(parts[1])
        self.package_pages.setdefault(pkg.lower(), {})[link] = True
        return to_filename(pkg), to_filename(ver)

    def process_index(self, url, page):
        """Process the contents of a PyPI page"""

        # process an index page into the package-page index
        for match in HREF.finditer(page):
            try:
                self._scan(urllib.parse.urljoin(url, htmldecode(match.group(1))))
            except ValueError:
                pass

        pkg, ver = self._scan(url)  # ensure this page is in the page index
        if not pkg:
            return ""  # no sense double-scanning non-package pages

        # process individual package page
        for new_url in find_external_links(url, page):
            # Process the found URL
            base, frag = egg_info_for_url(new_url)
            if base.endswith('.py') and not frag:
                if ver:
                    new_url += '#egg=%s-%s' % (pkg, ver)
                else:
                    self.need_version_info(url)
            self.scan_url(new_url)

        return PYPI_MD5.sub(
            lambda m: '<a href="%s#md5=%s">%s</a>' % m.group(1, 3, 2), page
        )

    def need_version_info(self, url):
        self.scan_all(
            "Page at %s links to .py file(s) without version info; an index "
            "scan is required.", url
        )

    def scan_all(self, msg=None, *args):
        if self.index_url not in self.fetched_urls:
            if msg:
                self.warn(msg, *args)
            self.info(
                "Scanning index of all packages (this may take a while)"
            )
        self.scan_url(self.index_url)

    def find_packages(self, requirement):
        self.scan_url(self.index_url + requirement.unsafe_name + '/')

        if not self.package_pages.get(requirement.key):
            # Fall back to safe version of the name
            self.scan_url(self.index_url + requirement.project_name + '/')

        if not self.package_pages.get(requirement.key):
            # We couldn't find the target package, so search the index page too
            self.not_found_in_index(requirement)

        for url in list(self.package_pages.get(requirement.key, ())):
            # scan each page that might be related to the desired package
            self.scan_url(url)

    def obtain(self, requirement, installer=None):
        self.prescan()
        self.find_packages(requirement)
        for dist in self[requirement.key]:
            if dist in requirement:
                return dist
            self.debug("%s does not match %s", requirement, dist)
        return super(PackageIndex, self).obtain(requirement, installer)

    def check_hash(self, checker, filename, tfp):
        """
        checker is a ContentChecker
        """
        checker.report(
            self.debug,
            "Validating %%s checksum for %s" % filename)
        if not checker.is_valid():
            tfp.close()
            os.unlink(filename)
            raise DistutilsError(
                "%s validation failed for %s; "
                "possible download problem?"
                % (checker.hash.name, os.path.basename(filename))
            )

    def add_find_links(self, urls):
        """Add `urls` to the list that will be prescanned for searches"""
        for url in urls:
            if (
                self.to_scan is None  # if we have already "gone online"
                or not URL_SCHEME(url)  # or it's a local file/directory
                or url.startswith('file:')
                or list(distros_for_url(url))  # or a direct package link
            ):
                # then go ahead and process it now
                self.scan_url(url)
            else:
                # otherwise, defer retrieval till later
                self.to_scan.append(url)

    def prescan(self):
        """Scan urls scheduled for prescanning (e.g. --find-links)"""
        if self.to_scan:
            list(map(self.scan_url, self.to_scan))
        self.to_scan = None  # from now on, go ahead and process immediately

    def not_found_in_index(self, requirement):
        if self[requirement.key]:  # we've seen at least one distro
            meth, msg = self.info, "Couldn't retrieve index page for %r"
        else:  # no distros seen for this name, might be misspelled
            meth, msg = (
                self.warn,
                "Couldn't find index page for %r (maybe misspelled?)")
        meth(msg, requirement.unsafe_name)
        self.scan_all()

    def download(self, spec, tmpdir):
        """Locate and/or download `spec` to `tmpdir`, returning a local path

        `spec` may be a ``Requirement`` object, or a string containing a URL,
        an existing local filename, or a project/version requirement spec
        (i.e. the string form of a ``Requirement`` object).  If it is the URL
        of a .py file with an unambiguous ``#egg=name-version`` tag (i.e., one
        that escapes ``-`` as ``_`` throughout), a trivial ``setup.py`` is
        automatically created alongside the downloaded file.

        If `spec` is a ``Requirement`` object or a string containing a
        project/version requirement spec, this method returns the location of
        a matching distribution (possibly after downloading it to `tmpdir`).
        If `spec` is a locally existing file or directory name, it is simply
        returned unchanged.  If `spec` is a URL, it is downloaded to a subpath
        of `tmpdir`, and the local filename is returned.  Various errors may be
        raised if a problem occurs during downloading.
        """
        if not isinstance(spec, Requirement):
            scheme = URL_SCHEME(spec)
            if scheme:
                # It's a url, download it to tmpdir
                found = self._download_url(scheme.group(1), spec, tmpdir)
                base, fragment = egg_info_for_url(spec)
                if base.endswith('.py'):
                    found = self.gen_setup(found, fragment, tmpdir)
                return found
            elif os.path.exists(spec):
                # Existing file or directory, just return it
                return spec
            else:
                spec = parse_requirement_arg(spec)
        return getattr(self.fetch_distribution(spec, tmpdir), 'location', None)

    def fetch_distribution(  # noqa: C901  # is too complex (14)  # FIXME
            self, requirement, tmpdir, force_scan=False, source=False,
            develop_ok=False, local_index=None):
        """Obtain a distribution suitable for fulfilling `requirement`

        `requirement` must be a ``pkg_resources.Requirement`` instance.
        If necessary, or if the `force_scan` flag is set, the requirement is
        searched for in the (online) package index as well as the locally
        installed packages.  If a distribution matching `requirement` is found,
        the returned distribution's ``location`` is the value you would have
        gotten from calling the ``download()`` method with the matching
        distribution's URL or filename.  If no matching distribution is found,
        ``None`` is returned.

        If the `source` flag is set, only source distributions and source
        checkout links will be considered.  Unless the `develop_ok` flag is
        set, development and system eggs (i.e., those using the ``.egg-info``
        format) will be ignored.
        """
        # process a Requirement
        self.info("Searching for %s", requirement)
        skipped = {}
        dist = None

        def find(req, env=None):
            if env is None:
                env = self
            # Find a matching distribution; may be called more than once

            for dist in env[req.key]:

                if dist.precedence == DEVELOP_DIST and not develop_ok:
                    if dist not in skipped:
                        self.warn(
                            "Skipping development or system egg: %s", dist,
                        )
                        skipped[dist] = 1
                    continue

                test = (
                    dist in req
                    and (dist.precedence <= SOURCE_DIST or not source)
                )
                if test:
                    loc = self.download(dist.location, tmpdir)
                    dist.download_location = loc
                    if os.path.exists(dist.download_location):
                        return dist

        if force_scan:
            self.prescan()
            self.find_packages(requirement)
            dist = find(requirement)

        if not dist and local_index is not None:
            dist = find(requirement, local_index)

        if dist is None:
            if self.to_scan is not None:
                self.prescan()
            dist = find(requirement)

        if dist is None and not force_scan:
            self.find_packages(requirement)
            dist = find(requirement)

        if dist is None:
            self.warn(
                "No local packages or working download links found for %s%s",
                (source and "a source distribution of " or ""),
                requirement,
            )
        else:
            self.info("Best match: %s", dist)
            return dist.clone(location=dist.download_location)

    def fetch(self, requirement, tmpdir, force_scan=False, source=False):
        """Obtain a file suitable for fulfilling `requirement`

        DEPRECATED; use the ``fetch_distribution()`` method now instead.  For
        backward compatibility, this routine is identical but returns the
        ``location`` of the downloaded distribution instead of a distribution
        object.
        """
        dist = self.fetch_distribution(requirement, tmpdir, force_scan, source)
        if dist is not None:
            return dist.location
        return None

    def gen_setup(self, filename, fragment, tmpdir):
        match = EGG_FRAGMENT.match(fragment)
        dists = match and [
            d for d in
            interpret_distro_name(filename, match.group(1), None) if d.version
        ] or []

        if len(dists) == 1:  # unambiguous ``#egg`` fragment
            basename = os.path.basename(filename)

            # Make sure the file has been downloaded to the temp dir.
            if os.path.dirname(filename) != tmpdir:
                dst = os.path.join(tmpdir, basename)
                from setuptools.command.easy_install import samefile
                if not samefile(filename, dst):
                    shutil.copy2(filename, dst)
                    filename = dst

            with open(os.path.join(tmpdir, 'setup.py'), 'w') as file:
                file.write(
                    "from setuptools import setup\n"
                    "setup(name=%r, version=%r, py_modules=[%r])\n"
                    % (
                        dists[0].project_name, dists[0].version,
                        os.path.splitext(basename)[0]
                    )
                )
            return filename

        elif match:
            raise DistutilsError(
                "Can't unambiguously interpret project/version identifier %r; "
                "any dashes in the name or version should be escaped using "
                "underscores. %r" % (fragment, dists)
            )
        else:
            raise DistutilsError(
                "Can't process plain .py files without an '#egg=name-version'"
                " suffix to enable automatic setup script generation."
            )

    dl_blocksize = 8192

    def _download_to(self, url, filename):
        self.info("Downloading %s", url)
        # Download the file
        fp = None
        try:
            checker = HashChecker.from_url(url)
            fp = self.open_url(url)
            if isinstance(fp, urllib.error.HTTPError):
                raise DistutilsError(
                    "Can't download %s: %s %s" % (url, fp.code, fp.msg)
                )
            headers = fp.info()
            blocknum = 0
            bs = self.dl_blocksize
            size = -1
            if "content-length" in headers:
                # Some servers return multiple Content-Length headers :(
                sizes = headers.get_all('Content-Length')
                size = max(map(int, sizes))
                self.reporthook(url, filename, blocknum, bs, size)
            with open(filename, 'wb') as tfp:
                while True:
                    block = fp.read(bs)
                    if block:
                        checker.feed(block)
                        tfp.write(block)
                        blocknum += 1
                        self.reporthook(url, filename, blocknum, bs, size)
                    else:
                        break
                self.check_hash(checker, filename, tfp)
            return headers
        finally:
            if fp:
                fp.close()

    def reporthook(self, url, filename, blocknum, blksize, size):
        pass  # no-op

    # FIXME:
    def open_url(self, url, warning=None):  # noqa: C901  # is too complex (12)
        if url.startswith('file:'):
            return local_open(url)
        try:
            return open_with_auth(url, self.opener)
        except (ValueError, http.client.InvalidURL) as v:
            msg = ' '.join([str(arg) for arg in v.args])
            if warning:
                self.warn(warning, msg)
            else:
                raise DistutilsError('%s %s' % (url, msg)) from v
        except urllib.error.HTTPError as v:
            return v
        except urllib.error.URLError as v:
            if warning:
                self.warn(warning, v.reason)
            else:
                raise DistutilsError("Download error for %s: %s"
                                     % (url, v.reason)) from v
        except http.client.BadStatusLine as v:
            if warning:
                self.warn(warning, v.line)
            else:
                raise DistutilsError(
                    '%s returned a bad status line. The server might be '
                    'down, %s' %
                    (url, v.line)
                ) from v
        except (http.client.HTTPException, socket.error) as v:
            if warning:
                self.warn(warning, v)
            else:
                raise DistutilsError("Download error for %s: %s"
                                     % (url, v)) from v

    def _download_url(self, scheme, url, tmpdir):
        # Determine download filename
        #
        name, fragment = egg_info_for_url(url)
        if name:
            while '..' in name:
                name = name.replace('..', '.').replace('\\', '_')
        else:
            name = "__downloaded__"  # default if URL has no path contents

        if name.endswith('.egg.zip'):
            name = name[:-4]  # strip the extra .zip before download

        filename = os.path.join(tmpdir, name)

        # Download the file
        #
        if scheme == 'svn' or scheme.startswith('svn+'):
            return self._download_svn(url, filename)
        elif scheme == 'git' or scheme.startswith('git+'):
            return self._download_git(url, filename)
        elif scheme.startswith('hg+'):
            return self._download_hg(url, filename)
        elif scheme == 'file':
            return urllib.request.url2pathname(urllib.parse.urlparse(url)[2])
        else:
            self.url_ok(url, True)  # raises error if not allowed
            return self._attempt_download(url, filename)

    def scan_url(self, url):
        self.process_url(url, True)

    def _attempt_download(self, url, filename):
        headers = self._download_to(url, filename)
        if 'html' in headers.get('content-type', '').lower():
            return self._download_html(url, headers, filename)
        else:
            return filename

    def _download_html(self, url, headers, filename):
        file = open(filename)
        for line in file:
            if line.strip():
                # Check for a subversion index page
                if re.search(r'<title>([^- ]+ - )?Revision \d+:', line):
                    # it's a subversion index page:
                    file.close()
                    os.unlink(filename)
                    return self._download_svn(url, filename)
                break  # not an index page
        file.close()
        os.unlink(filename)
        raise DistutilsError("Unexpected HTML page found at " + url)

    def _download_svn(self, url, filename):
        warnings.warn("SVN download support is deprecated", UserWarning)
        url = url.split('#', 1)[0]  # remove any fragment for svn's sake
        creds = ''
        if url.lower().startswith('svn:') and '@' in url:
            scheme, netloc, path, p, q, f = urllib.parse.urlparse(url)
            if not netloc and path.startswith('//') and '/' in path[2:]:
                netloc, path = path[2:].split('/', 1)
                auth, host = _splituser(netloc)
                if auth:
                    if ':' in auth:
                        user, pw = auth.split(':', 1)
                        creds = " --username=%s --password=%s" % (user, pw)
                    else:
                        creds = " --username=" + auth
                    netloc = host
                    parts = scheme, netloc, url, p, q, f
                    url = urllib.parse.urlunparse(parts)
        self.info("Doing subversion checkout from %s to %s", url, filename)
        os.system("svn checkout%s -q %s %s" % (creds, url, filename))
        return filename

    @staticmethod
    def _vcs_split_rev_from_url(url, pop_prefix=False):
        scheme, netloc, path, query, frag = urllib.parse.urlsplit(url)

        scheme = scheme.split('+', 1)[-1]

        # Some fragment identification fails
        path = path.split('#', 1)[0]

        rev = None
        if '@' in path:
            path, rev = path.rsplit('@', 1)

        # Also, discard fragment
        url = urllib.parse.urlunsplit((scheme, netloc, path, query, ''))

        return url, rev

    def _download_git(self, url, filename):
        filename = filename.split('#', 1)[0]
        url, rev = self._vcs_split_rev_from_url(url, pop_prefix=True)

        self.info("Doing git clone from %s to %s", url, filename)
        os.system("git clone --quiet %s %s" % (url, filename))

        if rev is not None:
            self.info("Checking out %s", rev)
            os.system("git -C %s checkout --quiet %s" % (
                filename,
                rev,
            ))

        return filename

    def _download_hg(self, url, filename):
        filename = filename.split('#', 1)[0]
        url, rev = self._vcs_split_rev_from_url(url, pop_prefix=True)

        self.info("Doing hg clone from %s to %s", url, filename)
        os.system("hg clone --quiet %s %s" % (url, filename))

        if rev is not None:
            self.info("Updating to %s", rev)
            os.system("hg --cwd %s up -C -r %s -q" % (
                filename,
                rev,
            ))

        return filename

    def debug(self, msg, *args):
        log.debug(msg, *args)

    def info(self, msg, *args):
        log.info(msg, *args)

    def warn(self, msg, *args):
        log.warn(msg, *args)


# This pattern matches a character entity reference (a decimal numeric
# references, a hexadecimal numeric reference, or a named reference).
entity_sub = re.compile(r'&(#(\d+|x[\da-fA-F]+)|[\w.:-]+);?').sub


def decode_entity(match):
    what = match.group(0)
    return html.unescape(what)


def htmldecode(text):
    """
    Decode HTML entities in the given text.

    >>> htmldecode(
    ...     'https://../package_name-0.1.2.tar.gz'
    ...     '?tokena=A&amp;tokenb=B">package_name-0.1.2.tar.gz')
    'https://../package_name-0.1.2.tar.gz?tokena=A&tokenb=B">package_name-0.1.2.tar.gz'
    """
    return entity_sub(decode_entity, text)


def socket_timeout(timeout=15):
    def _socket_timeout(func):
        def _socket_timeout(*args, **kwargs):
            old_timeout = socket.getdefaulttimeout()
            socket.setdefaulttimeout(timeout)
            try:
                return func(*args, **kwargs)
            finally:
                socket.setdefaulttimeout(old_timeout)

        return _socket_timeout

    return _socket_timeout


def _encode_auth(auth):
    """
    Encode auth from a URL suitable for an HTTP header.
    >>> str(_encode_auth('username%3Apassword'))
    'dXNlcm5hbWU6cGFzc3dvcmQ='

    Long auth strings should not cause a newline to be inserted.
    >>> long_auth = 'username:' + 'password'*10
    >>> chr(10) in str(_encode_auth(long_auth))
    False
    """
    auth_s = urllib.parse.unquote(auth)
    # convert to bytes
    auth_bytes = auth_s.encode()
    encoded_bytes = base64.b64encode(auth_bytes)
    # convert back to a string
    encoded = encoded_bytes.decode()
    # strip the trailing carriage return
    return encoded.replace('\n', '')


class Credential:
    """
    A username/password pair. Use like a namedtuple.
    """

    def __init__(self, username, password):
        self.username = username
        self.password = password

    def __iter__(self):
        yield self.username
        yield self.password

    def __str__(self):
        return '%(username)s:%(password)s' % vars(self)


class PyPIConfig(configparser.RawConfigParser):
    def __init__(self):
        """
        Load from ~/.pypirc
        """
        defaults = dict.fromkeys(['username', 'password', 'repository'], '')
        configparser.RawConfigParser.__init__(self, defaults)

        rc = os.path.join(os.path.expanduser('~'), '.pypirc')
        if os.path.exists(rc):
            self.read(rc)

    @property
    def creds_by_repository(self):
        sections_with_repositories = [
            section for section in self.sections()
            if self.get(section, 'repository').strip()
        ]

        return dict(map(self._get_repo_cred, sections_with_repositories))

    def _get_repo_cred(self, section):
        repo = self.get(section, 'repository').strip()
        return repo, Credential(
            self.get(section, 'username').strip(),
            self.get(section, 'password').strip(),
        )

    def find_credential(self, url):
        """
        If the URL indicated appears to be a repository defined in this
        config, return the credential for that repository.
        """
        for repository, cred in self.creds_by_repository.items():
            if url.startswith(repository):
                return cred


def open_with_auth(url, opener=urllib.request.urlopen):
    """Open a urllib2 request, handling HTTP authentication"""

    parsed = urllib.parse.urlparse(url)
    scheme, netloc, path, params, query, frag = parsed

    # Double scheme does not raise on macOS as revealed by a
    # failing test. We would expect "nonnumeric port". Refs #20.
    if netloc.endswith(':'):
        raise http.client.InvalidURL("nonnumeric port: ''")

    if scheme in ('http', 'https'):
        auth, address = _splituser(netloc)
    else:
        auth = None

    if not auth:
        cred = PyPIConfig().find_credential(url)
        if cred:
            auth = str(cred)
            info = cred.username, url
            log.info('Authenticating as %s for %s (from .pypirc)', *info)

    if auth:
        auth = "Basic " + _encode_auth(auth)
        parts = scheme, address, path, params, query, frag
        new_url = urllib.parse.urlunparse(parts)
        request = urllib.request.Request(new_url)
        request.add_header("Authorization", auth)
    else:
        request = urllib.request.Request(url)

    request.add_header('User-Agent', user_agent)
    fp = opener(request)

    if auth:
        # Put authentication info back into request URL if same host,
        # so that links found on the page will work
        s2, h2, path2, param2, query2, frag2 = urllib.parse.urlparse(fp.url)
        if s2 == scheme and h2 == address:
            parts = s2, netloc, path2, param2, query2, frag2
            fp.url = urllib.parse.urlunparse(parts)

    return fp


# copy of urllib.parse._splituser from Python 3.8
def _splituser(host):
    """splituser('user[:passwd]@host[:port]')
    --> 'user[:passwd]', 'host[:port]'."""
    user, delim, host = host.rpartition('@')
    return (user if delim else None), host


# adding a timeout to avoid freezing package_index
open_with_auth = socket_timeout(_SOCKET_TIMEOUT)(open_with_auth)


def fix_sf_url(url):
    return url  # backward compatibility


def local_open(url):
    """Read a local path, with special support for directories"""
    scheme, server, path, param, query, frag = urllib.parse.urlparse(url)
    filename = urllib.request.url2pathname(path)
    if os.path.isfile(filename):
        return urllib.request.urlopen(url)
    elif path.endswith('/') and os.path.isdir(filename):
        files = []
        for f in os.listdir(filename):
            filepath = os.path.join(filename, f)
            if f == 'index.html':
                with open(filepath, 'r') as fp:
                    body = fp.read()
                break
            elif os.path.isdir(filepath):
                f += '/'
            files.append('<a href="{name}">{name}</a>'.format(name=f))
        else:
            tmpl = (
                "<html><head><title>{url}</title>"
                "</head><body>{files}</body></html>")
            body = tmpl.format(url=url, files='\n'.join(files))
        status, message = 200, "OK"
    else:
        status, message, body = 404, "Path not found", "Not found"

    headers = {'content-type': 'text/html'}
    body_stream = io.StringIO(body)
    return urllib.error.HTTPError(url, status, message, headers, body_stream)

"""Utilities for extracting common archive formats"""

import zipfile
import tarfile
import os
import shutil
import posixpath
import contextlib
from distutils.errors import DistutilsError

from pkg_resources import ensure_directory

__all__ = [
    "unpack_archive", "unpack_zipfile", "unpack_tarfile", "default_filter",
    "UnrecognizedFormat", "extraction_drivers", "unpack_directory",
]


class UnrecognizedFormat(DistutilsError):
    """Couldn't recognize the archive type"""


def default_filter(src, dst):
    """The default progress/filter callback; returns True for all files"""
    return dst


def unpack_archive(
        filename, extract_dir, progress_filter=default_filter,
        drivers=None):
    """Unpack `filename` to `extract_dir`, or raise ``UnrecognizedFormat``

    `progress_filter` is a function taking two arguments: a source path
    internal to the archive ('/'-separated), and a filesystem path where it
    will be extracted.  The callback must return the desired extract path
    (which may be the same as the one passed in), or else ``None`` to skip
    that file or directory.  The callback can thus be used to report on the
    progress of the extraction, as well as to filter the items extracted or
    alter their extraction paths.

    `drivers`, if supplied, must be a non-empty sequence of functions with the
    same signature as this function (minus the `drivers` argument), that raise
    ``UnrecognizedFormat`` if they do not support extracting the designated
    archive type.  The `drivers` are tried in sequence until one is found that
    does not raise an error, or until all are exhausted (in which case
    ``UnrecognizedFormat`` is raised).  If you do not supply a sequence of
    drivers, the module's ``extraction_drivers`` constant will be used, which
    means that ``unpack_zipfile`` and ``unpack_tarfile`` will be tried, in that
    order.
    """
    for driver in drivers or extraction_drivers:
        try:
            driver(filename, extract_dir, progress_filter)
        except UnrecognizedFormat:
            continue
        else:
            return
    else:
        raise UnrecognizedFormat(
            "Not a recognized archive type: %s" % filename
        )


def unpack_directory(filename, extract_dir, progress_filter=default_filter):
    """"Unpack" a directory, using the same interface as for archives

    Raises ``UnrecognizedFormat`` if `filename` is not a directory
    """
    if not os.path.isdir(filename):
        raise UnrecognizedFormat("%s is not a directory" % filename)

    paths = {
        filename: ('', extract_dir),
    }
    for base, dirs, files in os.walk(filename):
        src, dst = paths[base]
        for d in dirs:
            paths[os.path.join(base, d)] = src + d + '/', os.path.join(dst, d)
        for f in files:
            target = os.path.join(dst, f)
            target = progress_filter(src + f, target)
            if not target:
                # skip non-files
                continue
            ensure_directory(target)
            f = os.path.join(base, f)
            shutil.copyfile(f, target)
            shutil.copystat(f, target)


def unpack_zipfile(filename, extract_dir, progress_filter=default_filter):
    """Unpack zip `filename` to `extract_dir`

    Raises ``UnrecognizedFormat`` if `filename` is not a zipfile (as determined
    by ``zipfile.is_zipfile()``).  See ``unpack_archive()`` for an explanation
    of the `progress_filter` argument.
    """

    if not zipfile.is_zipfile(filename):
        raise UnrecognizedFormat("%s is not a zip file" % (filename,))

    with zipfile.ZipFile(filename) as z:
        for info in z.infolist():
            name = info.filename

            # don't extract absolute paths or ones with .. in them
            if name.startswith('/') or '..' in name.split('/'):
                continue

            target = os.path.join(extract_dir, *name.split('/'))
            target = progress_filter(name, target)
            if not target:
                continue
            if name.endswith('/'):
                # directory
                ensure_directory(target)
            else:
                # file
                ensure_directory(target)
                data = z.read(info.filename)
                with open(target, 'wb') as f:
                    f.write(data)
            unix_attributes = info.external_attr >> 16
            if unix_attributes:
                os.chmod(target, unix_attributes)


def _resolve_tar_file_or_dir(tar_obj, tar_member_obj):
    """Resolve any links and extract link targets as normal files."""
    while tar_member_obj is not None and (
            tar_member_obj.islnk() or tar_member_obj.issym()):
        linkpath = tar_member_obj.linkname
        if tar_member_obj.issym():
            base = posixpath.dirname(tar_member_obj.name)
            linkpath = posixpath.join(base, linkpath)
            linkpath = posixpath.normpath(linkpath)
        tar_member_obj = tar_obj._getmember(linkpath)

    is_file_or_dir = (
        tar_member_obj is not None and
        (tar_member_obj.isfile() or tar_member_obj.isdir())
    )
    if is_file_or_dir:
        return tar_member_obj

    raise LookupError('Got unknown file type')


def _iter_open_tar(tar_obj, extract_dir, progress_filter):
    """Emit member-destination pairs from a tar archive."""
    # don't do any chowning!
    tar_obj.chown = lambda *args: None

    with contextlib.closing(tar_obj):
        for member in tar_obj:
            name = member.name
            # don't extract absolute paths or ones with .. in them
            if name.startswith('/') or '..' in name.split('/'):
                continue

            prelim_dst = os.path.join(extract_dir, *name.split('/'))

            try:
                member = _resolve_tar_file_or_dir(tar_obj, member)
            except LookupError:
                continue

            final_dst = progress_filter(name, prelim_dst)
            if not final_dst:
                continue

            if final_dst.endswith(os.sep):
                final_dst = final_dst[:-1]

            yield member, final_dst


def unpack_tarfile(filename, extract_dir, progress_filter=default_filter):
    """Unpack tar/tar.gz/tar.bz2 `filename` to `extract_dir`

    Raises ``UnrecognizedFormat`` if `filename` is not a tarfile (as determined
    by ``tarfile.open()``).  See ``unpack_archive()`` for an explanation
    of the `progress_filter` argument.
    """
    try:
        tarobj = tarfile.open(filename)
    except tarfile.TarError as e:
        raise UnrecognizedFormat(
            "%s is not a compressed or uncompressed tar file" % (filename,)
        ) from e

    for member, final_dst in _iter_open_tar(
            tarobj, extract_dir, progress_filter,
    ):
        try:
            # XXX Ugh
            tarobj._extract_member(member, final_dst)
        except tarfile.ExtractError:
            # chown/chmod/mkfifo/mknode/makedev failed
            pass

    return True


extraction_drivers = unpack_directory, unpack_zipfile, unpack_tarfile

"""
Re-implementation of find_module and get_frozen_object
from the deprecated imp module.
"""

import os
import importlib.util
import importlib.machinery

from .py34compat import module_from_spec


PY_SOURCE = 1
PY_COMPILED = 2
C_EXTENSION = 3
C_BUILTIN = 6
PY_FROZEN = 7


def find_spec(module, paths):
    finder = (
        importlib.machinery.PathFinder().find_spec
        if isinstance(paths, list) else
        importlib.util.find_spec
    )
    return finder(module, paths)


def find_module(module, paths=None):
    """Just like 'imp.find_module()', but with package support"""
    spec = find_spec(module, paths)
    if spec is None:
        raise ImportError("Can't find %s" % module)
    if not spec.has_location and hasattr(spec, 'submodule_search_locations'):
        spec = importlib.util.spec_from_loader('__init__.py', spec.loader)

    kind = -1
    file = None
    static = isinstance(spec.loader, type)
    if spec.origin == 'frozen' or static and issubclass(
            spec.loader, importlib.machinery.FrozenImporter):
        kind = PY_FROZEN
        path = None  # imp compabilty
        suffix = mode = ''  # imp compatibility
    elif spec.origin == 'built-in' or static and issubclass(
            spec.loader, importlib.machinery.BuiltinImporter):
        kind = C_BUILTIN
        path = None  # imp compabilty
        suffix = mode = ''  # imp compatibility
    elif spec.has_location:
        path = spec.origin
        suffix = os.path.splitext(path)[1]
        mode = 'r' if suffix in importlib.machinery.SOURCE_SUFFIXES else 'rb'

        if suffix in importlib.machinery.SOURCE_SUFFIXES:
            kind = PY_SOURCE
        elif suffix in importlib.machinery.BYTECODE_SUFFIXES:
            kind = PY_COMPILED
        elif suffix in importlib.machinery.EXTENSION_SUFFIXES:
            kind = C_EXTENSION

        if kind in {PY_SOURCE, PY_COMPILED}:
            file = open(path, mode)
    else:
        path = None
        suffix = mode = ''

    return file, path, (suffix, mode, kind)


def get_frozen_object(module, paths=None):
    spec = find_spec(module, paths)
    if not spec:
        raise ImportError("Can't find %s" % module)
    return spec.loader.get_code(module)


def get_module(module, paths, info):
    spec = find_spec(module, paths)
    if not spec:
        raise ImportError("Can't find %s" % module)
    return module_from_spec(spec)

import ast
import io
import os
import sys

import warnings
import functools
import importlib
from collections import defaultdict
from functools import partial
from functools import wraps
from glob import iglob
import contextlib

from distutils.errors import DistutilsOptionError, DistutilsFileError
from setuptools.extern.packaging.version import LegacyVersion, parse
from setuptools.extern.packaging.specifiers import SpecifierSet


class StaticModule:
    """
    Attempt to load the module by the name
    """

    def __init__(self, name):
        spec = importlib.util.find_spec(name)
        with open(spec.origin) as strm:
            src = strm.read()
        module = ast.parse(src)
        vars(self).update(locals())
        del self.self

    def __getattr__(self, attr):
        try:
            return next(
                ast.literal_eval(statement.value)
                for statement in self.module.body
                if isinstance(statement, ast.Assign)
                for target in statement.targets
                if isinstance(target, ast.Name) and target.id == attr
            )
        except Exception as e:
            raise AttributeError(
                "{self.name} has no attribute {attr}".format(**locals())
            ) from e


@contextlib.contextmanager
def patch_path(path):
    """
    Add path to front of sys.path for the duration of the context.
    """
    try:
        sys.path.insert(0, path)
        yield
    finally:
        sys.path.remove(path)


def read_configuration(filepath, find_others=False, ignore_option_errors=False):
    """Read given configuration file and returns options from it as a dict.

    :param str|unicode filepath: Path to configuration file
        to get options from.

    :param bool find_others: Whether to search for other configuration files
        which could be on in various places.

    :param bool ignore_option_errors: Whether to silently ignore
        options, values of which could not be resolved (e.g. due to exceptions
        in directives such as file:, attr:, etc.).
        If False exceptions are propagated as expected.

    :rtype: dict
    """
    from setuptools.dist import Distribution, _Distribution

    filepath = os.path.abspath(filepath)

    if not os.path.isfile(filepath):
        raise DistutilsFileError('Configuration file %s does not exist.' % filepath)

    current_directory = os.getcwd()
    os.chdir(os.path.dirname(filepath))

    try:
        dist = Distribution()

        filenames = dist.find_config_files() if find_others else []
        if filepath not in filenames:
            filenames.append(filepath)

        _Distribution.parse_config_files(dist, filenames=filenames)

        handlers = parse_configuration(
            dist, dist.command_options, ignore_option_errors=ignore_option_errors
        )

    finally:
        os.chdir(current_directory)

    return configuration_to_dict(handlers)


def _get_option(target_obj, key):
    """
    Given a target object and option key, get that option from
    the target object, either through a get_{key} method or
    from an attribute directly.
    """
    getter_name = 'get_{key}'.format(**locals())
    by_attribute = functools.partial(getattr, target_obj, key)
    getter = getattr(target_obj, getter_name, by_attribute)
    return getter()


def configuration_to_dict(handlers):
    """Returns configuration data gathered by given handlers as a dict.

    :param list[ConfigHandler] handlers: Handlers list,
        usually from parse_configuration()

    :rtype: dict
    """
    config_dict = defaultdict(dict)

    for handler in handlers:
        for option in handler.set_options:
            value = _get_option(handler.target_obj, option)
            config_dict[handler.section_prefix][option] = value

    return config_dict


def parse_configuration(distribution, command_options, ignore_option_errors=False):
    """Performs additional parsing of configuration options
    for a distribution.

    Returns a list of used option handlers.

    :param Distribution distribution:
    :param dict command_options:
    :param bool ignore_option_errors: Whether to silently ignore
        options, values of which could not be resolved (e.g. due to exceptions
        in directives such as file:, attr:, etc.).
        If False exceptions are propagated as expected.
    :rtype: list
    """
    options = ConfigOptionsHandler(distribution, command_options, ignore_option_errors)
    options.parse()

    meta = ConfigMetadataHandler(
        distribution.metadata,
        command_options,
        ignore_option_errors,
        distribution.package_dir,
    )
    meta.parse()

    return meta, options


class ConfigHandler:
    """Handles metadata supplied in configuration files."""

    section_prefix = None
    """Prefix for config sections handled by this handler.
    Must be provided by class heirs.

    """

    aliases = {}
    """Options aliases.
    For compatibility with various packages. E.g.: d2to1 and pbr.
    Note: `-` in keys is replaced with `_` by config parser.

    """

    def __init__(self, target_obj, options, ignore_option_errors=False):
        sections = {}

        section_prefix = self.section_prefix
        for section_name, section_options in options.items():
            if not section_name.startswith(section_prefix):
                continue

            section_name = section_name.replace(section_prefix, '').strip('.')
            sections[section_name] = section_options

        self.ignore_option_errors = ignore_option_errors
        self.target_obj = target_obj
        self.sections = sections
        self.set_options = []

    @property
    def parsers(self):
        """Metadata item name to parser function mapping."""
        raise NotImplementedError(
            '%s must provide .parsers property' % self.__class__.__name__
        )

    def __setitem__(self, option_name, value):
        unknown = tuple()
        target_obj = self.target_obj

        # Translate alias into real name.
        option_name = self.aliases.get(option_name, option_name)

        current_value = getattr(target_obj, option_name, unknown)

        if current_value is unknown:
            raise KeyError(option_name)

        if current_value:
            # Already inhabited. Skipping.
            return

        skip_option = False
        parser = self.parsers.get(option_name)
        if parser:
            try:
                value = parser(value)

            except Exception:
                skip_option = True
                if not self.ignore_option_errors:
                    raise

        if skip_option:
            return

        setter = getattr(target_obj, 'set_%s' % option_name, None)
        if setter is None:
            setattr(target_obj, option_name, value)
        else:
            setter(value)

        self.set_options.append(option_name)

    @classmethod
    def _parse_list(cls, value, separator=','):
        """Represents value as a list.

        Value is split either by separator (defaults to comma) or by lines.

        :param value:
        :param separator: List items separator character.
        :rtype: list
        """
        if isinstance(value, list):  # _get_parser_compound case
            return value

        if '\n' in value:
            value = value.splitlines()
        else:
            value = value.split(separator)

        return [chunk.strip() for chunk in value if chunk.strip()]

    @classmethod
    def _parse_list_glob(cls, value, separator=','):
        """Equivalent to _parse_list() but expands any glob patterns using glob().

        However, unlike with glob() calls, the results remain relative paths.

        :param value:
        :param separator: List items separator character.
        :rtype: list
        """
        glob_characters = ('*', '?', '[', ']', '{', '}')
        values = cls._parse_list(value, separator=separator)
        expanded_values = []
        for value in values:

            # Has globby characters?
            if any(char in value for char in glob_characters):
                # then expand the glob pattern while keeping paths *relative*:
                expanded_values.extend(sorted(
                    os.path.relpath(path, os.getcwd())
                    for path in iglob(os.path.abspath(value))))

            else:
                # take the value as-is:
                expanded_values.append(value)

        return expanded_values

    @classmethod
    def _parse_dict(cls, value):
        """Represents value as a dict.

        :param value:
        :rtype: dict
        """
        separator = '='
        result = {}
        for line in cls._parse_list(value):
            key, sep, val = line.partition(separator)
            if sep != separator:
                raise DistutilsOptionError(
                    'Unable to parse option value to dict: %s' % value
                )
            result[key.strip()] = val.strip()

        return result

    @classmethod
    def _parse_bool(cls, value):
        """Represents value as boolean.

        :param value:
        :rtype: bool
        """
        value = value.lower()
        return value in ('1', 'true', 'yes')

    @classmethod
    def _exclude_files_parser(cls, key):
        """Returns a parser function to make sure field inputs
        are not files.

        Parses a value after getting the key so error messages are
        more informative.

        :param key:
        :rtype: callable
        """

        def parser(value):
            exclude_directive = 'file:'
            if value.startswith(exclude_directive):
                raise ValueError(
                    'Only strings are accepted for the {0} field, '
                    'files are not accepted'.format(key)
                )
            return value

        return parser

    @classmethod
    def _parse_file(cls, value):
        """Represents value as a string, allowing including text
        from nearest files using `file:` directive.

        Directive is sandboxed and won't reach anything outside
        directory with setup.py.

        Examples:
            file: README.rst, CHANGELOG.md, src/file.txt

        :param str value:
        :rtype: str
        """
        include_directive = 'file:'

        if not isinstance(value, str):
            return value

        if not value.startswith(include_directive):
            return value

        spec = value[len(include_directive) :]
        filepaths = (os.path.abspath(path.strip()) for path in spec.split(','))
        return '\n'.join(
            cls._read_file(path)
            for path in filepaths
            if (cls._assert_local(path) or True) and os.path.isfile(path)
        )

    @staticmethod
    def _assert_local(filepath):
        if not filepath.startswith(os.getcwd()):
            raise DistutilsOptionError('`file:` directive can not access %s' % filepath)

    @staticmethod
    def _read_file(filepath):
        with io.open(filepath, encoding='utf-8') as f:
            return f.read()

    @classmethod
    def _parse_attr(cls, value, package_dir=None):
        """Represents value as a module attribute.

        Examples:
            attr: package.attr
            attr: package.module.attr

        :param str value:
        :rtype: str
        """
        attr_directive = 'attr:'
        if not value.startswith(attr_directive):
            return value

        attrs_path = value.replace(attr_directive, '').strip().split('.')
        attr_name = attrs_path.pop()

        module_name = '.'.join(attrs_path)
        module_name = module_name or '__init__'

        parent_path = os.getcwd()
        if package_dir:
            if attrs_path[0] in package_dir:
                # A custom path was specified for the module we want to import
                custom_path = package_dir[attrs_path[0]]
                parts = custom_path.rsplit('/', 1)
                if len(parts) > 1:
                    parent_path = os.path.join(os.getcwd(), parts[0])
                    module_name = parts[1]
                else:
                    module_name = custom_path
            elif '' in package_dir:
                # A custom parent directory was specified for all root modules
                parent_path = os.path.join(os.getcwd(), package_dir[''])

        with patch_path(parent_path):
            try:
                # attempt to load value statically
                return getattr(StaticModule(module_name), attr_name)
            except Exception:
                # fallback to simple import
                module = importlib.import_module(module_name)

        return getattr(module, attr_name)

    @classmethod
    def _get_parser_compound(cls, *parse_methods):
        """Returns parser function to represents value as a list.

        Parses a value applying given methods one after another.

        :param parse_methods:
        :rtype: callable
        """

        def parse(value):
            parsed = value

            for method in parse_methods:
                parsed = method(parsed)

            return parsed

        return parse

    @classmethod
    def _parse_section_to_dict(cls, section_options, values_parser=None):
        """Parses section options into a dictionary.

        Optionally applies a given parser to values.

        :param dict section_options:
        :param callable values_parser:
        :rtype: dict
        """
        value = {}
        values_parser = values_parser or (lambda val: val)
        for key, (_, val) in section_options.items():
            value[key] = values_parser(val)
        return value

    def parse_section(self, section_options):
        """Parses configuration file section.

        :param dict section_options:
        """
        for (name, (_, value)) in section_options.items():
            try:
                self[name] = value

            except KeyError:
                pass  # Keep silent for a new option may appear anytime.

    def parse(self):
        """Parses configuration file items from one
        or more related sections.

        """
        for section_name, section_options in self.sections.items():

            method_postfix = ''
            if section_name:  # [section.option] variant
                method_postfix = '_%s' % section_name

            section_parser_method = getattr(
                self,
                # Dots in section names are translated into dunderscores.
                ('parse_section%s' % method_postfix).replace('.', '__'),
                None,
            )

            if section_parser_method is None:
                raise DistutilsOptionError(
                    'Unsupported distribution option section: [%s.%s]'
                    % (self.section_prefix, section_name)
                )

            section_parser_method(section_options)

    def _deprecated_config_handler(self, func, msg, warning_class):
        """this function will wrap around parameters that are deprecated

        :param msg: deprecation message
        :param warning_class: class of warning exception to be raised
        :param func: function to be wrapped around
        """

        @wraps(func)
        def config_handler(*args, **kwargs):
            warnings.warn(msg, warning_class)
            return func(*args, **kwargs)

        return config_handler


class ConfigMetadataHandler(ConfigHandler):

    section_prefix = 'metadata'

    aliases = {
        'home_page': 'url',
        'summary': 'description',
        'classifier': 'classifiers',
        'platform': 'platforms',
    }

    strict_mode = False
    """We need to keep it loose, to be partially compatible with
    `pbr` and `d2to1` packages which also uses `metadata` section.

    """

    def __init__(
        self, target_obj, options, ignore_option_errors=False, package_dir=None
    ):
        super(ConfigMetadataHandler, self).__init__(
            target_obj, options, ignore_option_errors
        )
        self.package_dir = package_dir

    @property
    def parsers(self):
        """Metadata item name to parser function mapping."""
        parse_list = self._parse_list
        parse_file = self._parse_file
        parse_dict = self._parse_dict
        exclude_files_parser = self._exclude_files_parser

        return {
            'platforms': parse_list,
            'keywords': parse_list,
            'provides': parse_list,
            'requires': self._deprecated_config_handler(
                parse_list,
                "The requires parameter is deprecated, please use "
                "install_requires for runtime dependencies.",
                DeprecationWarning,
            ),
            'obsoletes': parse_list,
            'classifiers': self._get_parser_compound(parse_file, parse_list),
            'license': exclude_files_parser('license'),
            'license_file': self._deprecated_config_handler(
                exclude_files_parser('license_file'),
                "The license_file parameter is deprecated, "
                "use license_files instead.",
                DeprecationWarning,
            ),
            'license_files': parse_list,
            'description': parse_file,
            'long_description': parse_file,
            'version': self._parse_version,
            'project_urls': parse_dict,
        }

    def _parse_version(self, value):
        """Parses `version` option value.

        :param value:
        :rtype: str

        """
        version = self._parse_file(value)

        if version != value:
            version = version.strip()
            # Be strict about versions loaded from file because it's easy to
            # accidentally include newlines and other unintended content
            if isinstance(parse(version), LegacyVersion):
                tmpl = (
                    'Version loaded from {value} does not '
                    'comply with PEP 440: {version}'
                )
                raise DistutilsOptionError(tmpl.format(**locals()))

            return version

        version = self._parse_attr(value, self.package_dir)

        if callable(version):
            version = version()

        if not isinstance(version, str):
            if hasattr(version, '__iter__'):
                version = '.'.join(map(str, version))
            else:
                version = '%s' % version

        return version


class ConfigOptionsHandler(ConfigHandler):

    section_prefix = 'options'

    @property
    def parsers(self):
        """Metadata item name to parser function mapping."""
        parse_list = self._parse_list
        parse_list_semicolon = partial(self._parse_list, separator=';')
        parse_bool = self._parse_bool
        parse_dict = self._parse_dict
        parse_cmdclass = self._parse_cmdclass

        return {
            'zip_safe': parse_bool,
            'include_package_data': parse_bool,
            'package_dir': parse_dict,
            'scripts': parse_list,
            'eager_resources': parse_list,
            'dependency_links': parse_list,
            'namespace_packages': parse_list,
            'install_requires': parse_list_semicolon,
            'setup_requires': parse_list_semicolon,
            'tests_require': parse_list_semicolon,
            'packages': self._parse_packages,
            'entry_points': self._parse_file,
            'py_modules': parse_list,
            'python_requires': SpecifierSet,
            'cmdclass': parse_cmdclass,
        }

    def _parse_cmdclass(self, value):
        def resolve_class(qualified_class_name):
            idx = qualified_class_name.rfind('.')
            class_name = qualified_class_name[idx + 1 :]
            pkg_name = qualified_class_name[:idx]

            module = __import__(pkg_name)

            return getattr(module, class_name)

        return {k: resolve_class(v) for k, v in self._parse_dict(value).items()}

    def _parse_packages(self, value):
        """Parses `packages` option value.

        :param value:
        :rtype: list
        """
        find_directives = ['find:', 'find_namespace:']
        trimmed_value = value.strip()

        if trimmed_value not in find_directives:
            return self._parse_list(value)

        findns = trimmed_value == find_directives[1]

        # Read function arguments from a dedicated section.
        find_kwargs = self.parse_section_packages__find(
            self.sections.get('packages.find', {})
        )

        if findns:
            from setuptools import find_namespace_packages as find_packages
        else:
            from setuptools import find_packages

        return find_packages(**find_kwargs)

    def parse_section_packages__find(self, section_options):
        """Parses `packages.find` configuration file section.

        To be used in conjunction with _parse_packages().

        :param dict section_options:
        """
        section_data = self._parse_section_to_dict(section_options, self._parse_list)

        valid_keys = ['where', 'include', 'exclude']

        find_kwargs = dict(
            [(k, v) for k, v in section_data.items() if k in valid_keys and v]
        )

        where = find_kwargs.get('where')
        if where is not None:
            find_kwargs['where'] = where[0]  # cast list to single val

        return find_kwargs

    def parse_section_entry_points(self, section_options):
        """Parses `entry_points` configuration file section.

        :param dict section_options:
        """
        parsed = self._parse_section_to_dict(section_options, self._parse_list)
        self['entry_points'] = parsed

    def _parse_package_data(self, section_options):
        parsed = self._parse_section_to_dict(section_options, self._parse_list)

        root = parsed.get('*')
        if root:
            parsed[''] = root
            del parsed['*']

        return parsed

    def parse_section_package_data(self, section_options):
        """Parses `package_data` configuration file section.

        :param dict section_options:
        """
        self['package_data'] = self._parse_package_data(section_options)

    def parse_section_exclude_package_data(self, section_options):
        """Parses `exclude_package_data` configuration file section.

        :param dict section_options:
        """
        self['exclude_package_data'] = self._parse_package_data(section_options)

    def parse_section_extras_require(self, section_options):
        """Parses `extras_require` configuration file section.

        :param dict section_options:
        """
        parse_list = partial(self._parse_list, separator=';')
        self['extras_require'] = self._parse_section_to_dict(
            section_options, parse_list
        )

    def parse_section_data_files(self, section_options):
        """Parses `data_files` configuration file section.

        :param dict section_options:
        """
        parsed = self._parse_section_to_dict(section_options, self._parse_list_glob)
        self['data_files'] = [(k, v) for k, v in parsed.items()]

import pkg_resources

try:
    __version__ = pkg_resources.get_distribution('setuptools').version
except Exception:
    __version__ = 'unknown'

MZ       ÿÿ  ¸       @                                   à   º ´	Í!¸LÍ!This program cannot be run in DOS mode.

$       è
W^W^W^p¹ý^T^W^
^ê0^S^I-^s^I-^]^I-^:^I-^V^RichW^                PE  d ±Q        ð # 	  Ö   j      x+        @                      p                                                     ì (            ` ü	                                                                   ð                            .text   Ô      Ö                    `.rdata   )   ð   *   Ú              @  @.data   ä5                      @  À.pdata  ü	   `  
                @  @                                                                                                                                                                                                                                                                                                                                                                                        H\$Hl$Ht$H|$ ATAUAVHì LáHÉÿ3ÀIüº   ò®H÷ÑD	HyÿHcÈè@  3ö3íLcïÆ "HXLðÿ~e    A¶,ù\uÿÆë'ù"u ö~DÆ²\HËþèZ  Hß+öÆ\HÿÃë3öA¶,HÿÅHÿÃI;íCÿ|¸ö~DÆ²\HËþè%  HßHl$HHt$PH|$XÆ"ÆC H\$@IÆHÄ A^A]A\ÃÌÌÌÌÌÌÌÌÌH\$WHì`  H¼ H3ÄH$P  HÙHÁ¶	HúÉtHÿÀù/uÆ@ÿ\ÉuîH$@  L$@  LD$@HT$0HËHD$ è?  |$0 ®   |$@\£   H$@  L$@  LD$@HT$0HÏHD$ è  HÉÿ3ÀH|$@ò®HD$@H÷ÑHÿÈHÿÉHÈ9\uHÿÉ9\tHD$@H;ÈrÆ HÿÉ9\uëLD$@HT$0H$@  LËHÇD$     èÏ
  º   ¹  è|
  H$@  ëº   ¹  èc
  HÓA¸  HÈHøè«  HÇH$P  H3Ìèø  H$  HÄ`  _ÃÌÌÌÌÌÌÌH\$Hl$Ht$H|$ ATAUAVHì HÙHÉÿ3ÀLêHûPò®H÷ÑHÿÉèç	  3ÿHóA} ¾LðE3äHèU  ÀtD  ¾KHÿÃè@  Àuð¶+HÿÃ@ít[@¾Íè(  ÀtEätI@ý\uÿÇëÙ@ý"u@öÇu3ÀEäÀ@2íDàÑÿÿtLÇ²\HÎè¼	  H÷3ÿ@ít¢@.HÿÆëÿtLÇ²\HÎè	  H÷3ÿÆ AÿE IcE HÿÆI4Æ@ít&¾è¡  Àt¾KHÿÃè  Àuð; GÿÿÿH\$@Hl$HHt$PH|$XIÆHÄ A^A]A\ÃÌÌÌÌÌHì(Éu
! Ét3Òÿ6Ü  ¸   HÄ(ÃÌÌÌÌÌÌÌÌÌÌÌÌH\$WHìà   3À3ÿHÙHL$pDGh3Ò¼$ð   HD$PHD$XHD$`èÆ  WH
ÿÿÿÇD$ph   ÿîÛ  L\$PHD$pL\$HHD$@H|$8H|$0E3ÉE3ÀHÓ3É|$(ÇD$    ÿ«Û  Àu(èê  H«Þ  HH`èb  3ÀH$ø   HÄà   _ÃD$`HL$PÊÿ  ÿ_Û  HL$PH$ð   ÿDÛ  Àu(è  H,Þ  HH`è  3ÀH$ø   HÄà   _Ã$ð   H$ø   HÄà   _ÃÌÌÌÌÌÌÌÌH\$Hl$Ht$WATAUHì LéHÉÿ3À»   IýIcèò®H;ÝHòH÷ÑLËLQ}J<ÊHÉÿ3Àò®IÿÁH÷ÑDÑL;Í|æIcÊHÓè  HÌÝ  MÅHÈLàè  HÉÿ3ÀIýò®H;ÝH÷ÑLiÿ}0LÞIcÍHÝ  IÌèÕ  H<ÞHÉÿ3ÀHÿÃò®H÷ÑDéH;Ý|ÐH\$@Hl$HHt$PIÄHÄ A]A\_ÃÌÌÌ@SWAVAWHìX  H»
 H3ÄH$0  LòDD$ LcùHT$0A¸   3ÉÿúÙ  HÉÿ3ÀH|$0ò®H÷ÑHD/HL$0H;Áv 8.tHT$0Æ  HÿÈH;ÂwëÆ  3ÀHÉÿH|$03Òò®H:Ý  HL$0HGÿ·2Ý  fG¶)Ý  G	èë·  Øøÿu"è³  LD$0HïÜ  HH`è&  Céó  H$0  A¸   ÈH¬$  è1®  HcÈH¼0  Ëè_  H$0  HÿÊHÿÂH;×s¶Àt<
t<
uéÆ H$0  HsÜ  A¸   è  Àt%HMÜ  H$0  HDÜ  A¶>Ü  AHT$$H$2  èíúÿÿHT$0H8HØHÏèjùÿÿHèHÀu èÍ  HÎÛ  LÇHH`èB  Eé  H´$P  t$$L¤$H  L¬$@  E,7º   AEHcÈè¥  HÍLàèøÿÿþI$I|$~"HÃÿÎfHèø÷ÿÿHÇHÃHîHGøuæHL$0èÜ÷ÿÿ»   HÇI;ßHGø}IÞèÁ÷ÿÿHÿÃHÇI;ßHGø|ç|$  H´$P  HÇ    t*IÔHÍèÔ¤  èë  HÔÚ  HH`LÅè`   ¸   ëEÅIÔHÍèsüÿÿHÈè;ûÿÿL¤$H  L¬$@  H¬$  H$0  H3Ìès
  HÄX  A_A^_[ÃÌÌÌÌÌE3ÀéýÿÿHÄHPHHL@LH SVWATHì8Hù3ÛóÃH;ËÀ;Ãu'èL&  Ç    H\$ E3ÉE3À3Ò3Éèb%  Èÿé  ÃH;ÓÀ;Ãu'è&  Ç    H\$ E3ÉE3À3Ò3Éè/%  Èÿéâ   Ld$pèù  öG@   HÏè¢#  øÿt*øþt%HcÐHÊHÁùL×) âHkÒXIÈH
5
 ëH
,
 HÑL²) öB8u%øÿtøþtHcÈHÁHÁøáHkÉXIÀöA8t"èj%  Ç    H\$ E3ÉE3À3Ò3Éè$  Îÿ;óu*HÏè	  ØMÌE3ÀHT$hHÏè  ðH×Ëè¼  HÏè³  ÆHÄ8A\_^[ÃÌÌÌH Ã@SHì l; »   Àu¸   ë;ÃLÃHcÈº   I; èÀ%  H+ HÀu$PHË,; è£%  H + HÀu¸   ëx3ÉH+ HHÂ0HÁHët	HÒ* ëåE3ÀH" EHIÈLx( IÀHÁøáIÂHkÉXLIúÿtIúþtMÒuÇþÿÿÿIÿÀHÂ0Iéu¼3ÀHÄ [ÃÌÌHì(èC)  =4  tèÍ&  H
V* HÄ(é}&  Ì@SHì HÙH
| H;Ùr:H  H;Øw.HÓH¸«ªªªªªª*H+ÑH÷êHÁúHÊHÁé?Lèø*  ºkë
HK0ÿcÔ  HÄ [ÃÌ@SHì ùHÚ}ÁèÊ*  ºkë
HJ0ÿ5Ô  HÄ [ÃÌÌÌHì(Hñ H;Êr7Hu H;Èw+ºqH+ÊH¸«ªªªªªª*H÷éHÁúHÊHÁé?Lèk)  ë
HÁ0ÿãÓ  HÄ(ÃÌÌHì(ù}ºrÁèB)  ë
HJ0ÿºÓ  HÄ(ÃÌ@SHì d$@ LD$@è_*  HØHÀu9D$@tè¼"  HÀtè²"  L$@HÃHÄ [ÃÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌff     HÁIørS¶ÒI¹I¯ÑIø@rH÷ÙátL+ÁHHÈMÈIà?IÁéu9MÈIàIÁétfffHHÁIÿÉuôMÀt
HÿÁIÿÈuöÃ@ fffffIù   s0HHQHQHÁ@HQØHQàIÿÉHQèHQðHQøuØëfD  HÃHÃQHÃQHÁ@HÃQØHÃQàIÿÉHÃQèHÃQðHÃQøuÐð$ éTÿÿÿÌÌÌÌÌÌÌÌÌÌÌÌff     LÙMÀt$H+ÊöÂt(Àã   HÿÂIÿÈtöÂuæëIÃÃHHÂHIèr&I¹ÿþþþþþþ~LÈLÐIòÿM3ÑI¹ MÑtÉIÀ   À   HÿÂIÿÈtxä$tuHÿÂIÿÈtiHÁèÀtbHÿÂIÿÈtVä$tSHÿÂIÿÈtGHÁèÀt@HÿÂIÿÈt4ä$t1HÿÂIÿÈt%ÁèÀtHÿÂIÿÈtä$tHÿÂIÿÈ<ÿÿÿIÃÃHÊH3ÒIørEöÁt
HÿÁIÿÈëñIè rHHQHQHQHÁ Iè sçIÀ Ièr	HHÁëñIÀIèrHÿÁëóIÃÃÌÌ@SHì EHÚLÉAãøAö LÑtA@McP÷ØLÑHcÈL#ÑIcÃJHCHHKöAt¶AàðHLÈL3ÊIÉHÄ [é  ÌHì(MA8HÊIÑèÿÿÿ¸   HÄ(ÃÌÌÌHì8HD$`HD$(LL$ MÈLÂHÊÿè¾'  HÄ8ÃÌH\$LD$UVWATAUAVAWHì0L¤$¨   L¬$   HùLò3ÒMùÊT$pH;út
L;òuL;Ât¹   é¼  L;ÂtñL;ÊuH9$   uâë
H9$   tÖL;êuH9$    uÇë
H9$    t»L;âuH9$°   u¬ë
H9$°   t ¸   Hß8tHÿÈHÿÃH;Âwñ;:u,L;òt!Iø;  A¹   LÇHÊÿIÎèÏ(  3ÒH{ëL;òtAHêHòHß8te¾è(  3Ò;ÂtHÿÃë</t
<\t	<.u	HóëHkHÿÃ8uÏH;êt/L;út%LÍL+ÏL9$   ª   LÇHÊÿIÏèT(  3ÒHýëL;útAH;òtQH;÷rLL;êt!LÎL+ÏL9$    vqLÇHÊÿIÍè(  3ÒL;âtPH+ÞH9$°   vNLËLÆHÊÿIÌèñ'  ë/L;êt!H+ßH9$    v(LËLÇHÊÿIÍèË'  3ÒL;âtA$3Àé   ÊëL$pL$   L;òtL;ÂvAL;út
H9$   vAL;êtH9$    vAU L;âtH9$°   vA$H;úu%è  Hd$  »   E3ÉE3À3Ò3Éè.  Ãë;Êu×èñ  ¹"   ÁH\$xHÄ0A_A^A]A\_^]ÃÌÌÌH\$Ht$WHìPIØHúA¸   HñH$   HÁH÷ØIÁMÛM#ØH÷ØHÃMÒL\$@HL$8M#ÐH÷ØHÇHÒLT$0LL$(I#ÐH÷ØLËMÀHT$ H×AàHÎèÚüÿÿH\$`Ht$hHÄP_ÃÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌff     H;
y  uHÁÁf÷ÁÿÿuóÃHÁÉé]&  Ì@SHì HÙÆA HÒ   èñ4  HCHÀ   HH¸   HKH
 H;ÑtÈ   	 uèÅ2  HHs H9CtHCÈ   
e	 u	è¦)  HCHCöÈ   uÈ   ÆCëóoóHÃHÄ [ÃÌÌÌ@SHì@=  HcÙuHk
 ·XàëVHL$ 3Òè&ÿÿÿHD$ ¸  ~LD$ º   Ëèó5  DØëH@  D·XAã|$8 tHD$0 È   ýAÃHÄ@[ÃÌÌHT$LD$LL$ SHì`HÒu%è¾  Hd$  E3ÉE3À3Ò3ÉÇ    èÓ  ÈÿëUHÉtÖHL$@HL$0L$   HL$0E3ÀÇD$8ÿÿÿÇD$HB   èZ
  l$8Øx
HL$0Æ ëHT$03Éè;6  ÃHÄ`[ÃÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌff     MÀtuH+ÑLÊI» öÁtB	HÿÁ:ÂuWIÿÈtNÀtJH÷Á   uáJ	fâÿfúøwÑHJ	H;ÂuÅHÁIèIºÿþþþþþþ~vHðÿLÒI3ÂIÃtÁëH3ÀÃHÀHØÿÃÒt'öt#HÁêÒtötHÁêÒtötÁêÒtöuH3ÀÃÌÌÌ@SHì Ùè9  ËèÜ6  H
½ý  èì0  ¹ÿ   HÄ [HÿàÌÌÌ@SHì ÙH
¡Í  ÿÊ  HÀtHÍ  HÈÿþÉ  HÀtËÿÐHÄ [ÃÌÌÌ@SHì Ùè·ÿÿÿËÿßÉ  ÌÌÌ¹   é.   ÌÌ¹   é"  ÌÌH;Ês-H\$WHì HúHÙHHÀtÿÐHÃH;ßríH\$0HÄ _ÃÌH\$WHì 3ÀHúHÙH;ÊsÀuHHÉtÿÑHÃH;ßréH\$0HÄ _ÃÌÌÌH\$WHì H=  ÙtH
 èº:  ÀtËÿ~ èñ9  HË  H
[Ë  è~ÿÿÿÀuZH
9  èF9  H/Ë  H=0Ë  ëHHÀtÿÐHÃH;ßríH=3  tH
* èM:  ÀtE3À3ÉAPÿ 3ÀH\$0HÄ _ÃÌH\$Ht$DD$WATAUAVAWHì@EàÚDù¹   èÒ  =®
 ü   Ç
    D%
 ÛÏ   H
 èï.  HðHD$0HÀ   H
k èÒ.  HøHD$ LöHt$(LèHD$8HïH|$ H;þrè.  H9uëæH;þr\Hè.  HØè.  HÿÓH
 èz.  HØH
 èk.  L;óuL;èt LóH\$(HóH\$0LèHD$8HøHD$ ëHÊ  H
ýÉ  è¼ýÿÿHÊ  H
Ê  è©ýÿÿEät
¹   è¹  Eäu&Ç    AL$è   AÏèýÿÿAÏÿ3Ç  ÌH\$pHt$xHÄ@A_A^A]A\_ÃÌÌE3À3ÒéjþÿÿÌÌE3ÀAPé\þÿÿ3Ò3ÉDBéOþÿÿÌÌÌº   3ÉDÂé=þÿÿÌ@SHì èu-  HÈHØè=  HËèR=  HËèÊ  HËè:=  HËè*=  HËè:  HËè¦8  HËè8  H
ÿÿÿè-  H÷ù  HÄ [ÃÌH\$WHì0¸MZ  f9
ÖÿÿuVHc=ÖÿÿH
úÕÿÿHÁ8PE  t3Û\$@ë;¹  f9Ht3Û\$@ë(¸   w3Û\$@ë3Û9ø   Ã\$@ë3Û\$@¿   ÏèC  Àu"=E tè4  ¹   èl2  ¹ÿ   èÞûÿÿè=/  Àu"= tès4  ¹   èA2  ¹ÿ   è³ûÿÿè6  è  Ày
¹   è.ûÿÿÿÅ  H± èÜ@  H½
 èØ?  Ày
¹   èûÿÿèÅ<  Ày
¹	   èïúÿÿÏèôûÿÿÀtÈèÝúÿÿL>
 L?
 H 
 

 è¥íÿÿøD$ ÛuÈèôýÿÿèþÿÿëø|$@ uÈèéýÿÿÌèÿýÿÿÇH\$HHÄ0_ÃÌHì(è7B  HÄ(éVþÿÿÌÌHÄHXHhHp HPWATAUAVAWHì@MyM!Iq8M+çöAfMñHêLéÜ   3ÿHHÈL@Ð9>+  H^CøL;à§   CüL;à   {    ;tHL$0HÕIÇÿÐÀ   ~sA} csmàu(H=K  tH
B è5  Àtº   IÍÿ+ KA¸   HÕIÏèGB  IF@SMcM HD$(IF(I×MÅHÍHD$ ÿ×Ã  èJB  ÿÇHÃ;>sjé>ÿÿÿ3ÀëfIy 3íI+ÿ9.vTH^KôL;ár>CøL;às6H;ùrH;øsAöE u/; t	H;øt#ëHT$xIÇ±IDCüMÇAÿÐÿÅHÃ;.r°¸   L\$@I[0Ik@IsHIãA_A^A]A\_ÃÌÌÌH\$H|$ATHì HÙèè  ÈèA  À   èíÿÿHÀ0H;Øu3ÀëèòìÿÿHÀ`H;Øuw¸   ÿÂ ÷C  ucL%& HcøI<ü u+¹   èJ  IüHÀuHC HCH¸   C$CëIüÇC$   ÇC   HKHK  ¸   ë3ÀH\$0H|$8HÄ A\ÃÌÌÌÉt0SHì ºbHÚsHÊèÁ  cÿîÿÿc$ H# Hc HÄ [ÃÌÌÌ@SHì öB@IØtHz uAÿ ë&Bÿx
HHÿ¶Áë¾Éèæ,  øÿu	ëÿHÄ [ÃÌÒ~LH\$Hl$Ht$WHì IùIðÚ@éLÇHÖ@ÍÿËèÿÿÿ?ÿtÛçH\$0Hl$8Ht$@HÄ _ÃÌÌÌH\$Hl$Ht$WHì Aö@@IùIðÚHétIx uAë7Ò~3M LÇHÖÿËèÿÿÿHÿÅ?ÿuè=  8*uLÇHÖ±?èÿþÿÿÛÍH\$0Hl$8Ht$@HÄ _ÃÌÌH\$UVWATAUAVAWHìÐ  HJô  H3ÄH$È  3ÀHÙHL$hHúHL$xIÐMéD$`DàD$TDðD$HD$XD$Pè¨óÿÿE3ÒI;ÚuAè£  3ÛE3ÉE3À3Ò3ÉÇ    H\$ è·  8$   tH$    È   ýÈÿéý  AÏÿöC@L
ðÏÿÿº   HËè
  HËó  A;Çt(øþt#LcÀL
ÇÏÿÿIÈAàHÁùMkÀXMÉC ë
LÂL
¤ÏÿÿAö@8u)A;ÇtøþtHcÐHÂâHÁøHkÒXIÁC öB8tAè×  3ÛE3ÉE3À3Ò3ÉÇ    H\$ èë
  8$   tH$    È   ýAÇé1  E3ÒI;út·@/AòDT$@DT$DAÒL$   A:êê  H$¨   A»   HÿÇA;òH¼$°   È  Eà<XwH¾ÅB¾ðó  áëAÊHcÂHcÉHÈB¾
ô  ÁúT$\ÊA;Òy  é  é/  éë  éÚ  é   é  ù<  @¾Åød~    øA@  øCÐ   øE.  øG%  øStmøXä  øZtøa  øc§   éH  IE IÅI;Ât/HXI;Út&Aºä¿ sÇD$P   +ÂÑøé  DT$Pé  H¡ñ  éñ  A÷Ä0  uAºìI] E;÷AÆ¹ÿÿÿDÁIÅA÷Ä    I;ÚÇD$P   HD`ñ  HËéò   A÷Ä0  uAºìIÅA÷Ä  t,E·MøH$À   HL$DMÃè@  E3ÒA;ÂtÇD$X   ëAEøÇD$D   $À   H$À   éM  ÇD$p   @Å AÌ@E;òH$À   Aó-  A¾   ék  øe  øg~Ïøiñ   ønµ   øo   øpteøsõþÿÿøuÌ   øxÕ  ¸'   ëSÿÈfD9t	HÁA;ÂuïH+ËHÑùë!I;ÚHDFð  HËë
ÿÈD8tHÿÁA;Âuñ+ËL$Dé  A¾   Aºì¸   D$`A¹   Eäy`QÆD$L0AQòD$MëSA¹   EäyDAºì	ë=I} IÅè <  E3ÒA;ÂxüÿÿAöÄ tf7ë7ÇD$X   él  AÌ@A¹
   T$HAºärAºäs
ME IÅë.IÅAöÄ tAöÄ@tM¿EøëE·EøëAöÄ@tMcEøëEEøAöÄ@t
M;Â}I÷ØAºìAºär
AºärEÀE;ò}A¾   ëAä÷E;óEOóD|$`IÀH$¿  H÷ØÉ#ÊL$HAÎAÿÎA;ÊM;Ât 3ÒIÀIcÉH÷ñLÀB0ø9~AÇHÿËëÐH$¿  A¿ÿÿÿÿ+ÃHÿÃAºä	D$D  A;Ât	;0  HÿËÿD$DÆ0éü   u@ýguAA¾   ë9E;óEOóAþ£   ~)A¾]  HcÏèy
  H$   HÀtHØ÷ëA¾£   IE H
äú  IÅ@¾ýHcöH$¨   èP!  HL$xDÏHL$0L$pLÆL$(H$¨   HÓDt$ ÿÐAü3Àç   tD;ðuH
¡ú  è!  HT$xHËÿÐ3À@ýgu;øuH
wú  èæ   HT$xHËÿÐ;-uAºìHÿÃHËèÃ9  E3ÒD$DD9T$XK  AöÄ@t1AºäsÆD$L-ëAöÄtÆD$L+¿   |$HëAöÄtÆD$L ëè|$Ht$THl$h+t$D+÷AöÄuLL$@LÅÖ± èÔ÷ÿÿLL$@HL$LLÅ×èøÿÿAöÄtAöÄuLL$@LÅÖ±0è£÷ÿÿ|$D3À9D$Ptu;ø~qHëD·M H$À  H$    A¸   ÿÏHÅè¶;  E3ÒA;Âu2$    A;Òt&LD$hLL$@H$À  è÷ÿÿE3ÒA;úu§Hl$hë#Hl$hAÇD$@ëLL$@LÅ×HËèd÷ÿÿE3ÒD$@A;Â|AöÄtLL$@LÅÖ± èíöÿÿE3ÒH$   I;ÂtHÈèA
  E3ÒL$   H¼$°   t$@T$\L
/ÈÿÿA»   @/A:ê$ùÿÿD8$   tH$   ¡È   ýÆH$È  H3Ìè2ëÿÿH$   HÄÐ  A_A^A]A\_^]Ã@ýIt:@ýht+@ýlt
@ýwuAºìë?lu
HÿÇAºìëAÌéwÿÿÿAÌ énÿÿÿAºì<6u4uHÇAºìéOÿÿÿ<3u2uHÇAºôé7ÿÿÿ<d/ÿÿÿ<i'ÿÿÿ<oÿÿÿ<uÿÿÿ<xÿÿÿ<XÿÿÿDT$\HT$x@¶ÍDT$Pèl6  3ö;Æt!HT$hLD$@@Íè<õÿÿ@/HÿÇ@:î  HT$hLD$@@ÍèõÿÿE3Òéþÿÿ@ý*uEu IÅE;òþÿÿE÷éþÿÿC¶@¾ÅDtHÐé}þÿÿEòéuþÿÿ@ý*uAE IÅA;ÂD$TZþÿÿAÌ÷ØëD$T@¾ÅDHÐD$Té:þÿÿ@ý tA@ý#t1@ý+t"@ý-t@ý0þÿÿAÌéþÿÿAÌéþÿÿAÌéýýÿÿAºìéóýÿÿAÌéêýÿÿDT$pDT$XDT$TDT$HEâE÷DT$PéÆýÿÿèR  E3ÉE3À3Ò3ÉHt$ Ç    èh  @8´$   éwöÿÿÌÌÌHÄHXHpHxL` AUAVAWHì   HL$ ÿ¶  ºX   DbÈIÌèß  LØE3ÿI;ÇuÈÿé{  Hé AÌ
È H   L;ØsCE{IÿAÆC	
E{E{8AÆC9
AÆC:
E{PE{LIÃXH£ H   L;ØrÃ
z fD9|$bI  HD$hI;Ç;  LhHc0Iõ»   9L¿   ;Ë   L5P ºX   IÌè  LØI;ÇtiIþ AÄ I   L;ÙsAE{IÿAÆC	
E{Ac8AÆC9
AÆC:
E{PE{LIÃXIþH   L;ØrÅÃ HÿÇ;Ã|ë´ ëL5Ã AÿA;ß~~H>ÿtkH>þteAöE t^AöE uHÿ´  A;ÇtILcçIÄHÁøAäMkäXM$ÆHI$AE AD$IL$º   èÎ*  A;ÇtAÿD$ëÈÿéÕ   ÿÇIÿÅHÆ;û|EçIÿHßHkÛXH) H;ÿtH;þtKëÆCAD$ÿ÷ØÉÁõ¸öÿÿÿE;çDÈÿî³  HðHøÿtJI;ÇtEHÈÿß³  A;Çt7H3¶ÀøuK@ë	øuKHKº   è"*  A;ÇtÿCëÈÿë.K@HÇþÿÿÿAÿÄHÿÇHÿQÿÿÿ
j ÿl³  3ÀëÈÿL$   I[ Is(I{0Mc8IãA_A^A]ÃÌÌÌHì8HÉu%è*  Hd$  E3ÉE3À3Ò3ÉÇ    è?  ÈÿëAHÄ8ÃÌÌH
Yø  Ã@SHìà  d$p HL$t3ÒA¸   èPßÿÿL\$pH$  H$  L\$HHD$Pÿ³  H$  HT$@HËE3Àèq  HÀt;Hd$8 HT$@HL$`HL$0HL$XLÈHL$(H$  LÃHL$ 3Éè-  ë H$è  H$  H$è  H$¨  H$è  ÇD$p ÀÇD$t   H$   ÿe²  3ÉØÿS²  HL$Hÿ@²  ÀuÛuHèl4  ÿ"²  º ÀHÈÿ²  HÄà  [ÃÌÌÌH\$Hl$Ht$WHì0HéH
÷  AÙIøHòè@  HÀtLT$`DËLÇHÖHÍLT$ ÿÐë%¹   è÷3  L\$`DËLÇHÖHÍL\$ èhþÿÿH\$@Hl$HHt$PHÄ0_ÃÌÌÌL
)å  3ÀIÑD@;
t+ÿÀIÐø-ròAíøw¸
   ÃÁDÿÿÿ¸   ùAFÀÃHADÁÃÌHì(èw  HÀu	H;æ  ëHÀHÄ(ÃHì(èW  HÀu	Hæ  ëHÀHÄ(Ã@SHì Ùè3  HÀu	Hûå  ëHÀè  Lãå  HÀtLPËè;ÿÿÿAHÄ [ÃÌÌH\$Hl$Ht$WHì 3ÿHñÍÿHÎèØ2  HØHÀu(9®õ  v Ïÿ°  Dè  D;õ  AûGý;ýuÈHl$8Ht$@HÃH\$0HÄ _ÃHÄHXHhHpHx ATHì 3ÿHòHéAÌÿE3ÀHÖHÍèi  HØHÀu*93õ  v"Ïÿ¡¯  Dè  D;õ  AûAGüA;üuÀHl$8Ht$@H|$HHÃH\$0HÄ A\ÃÌHÄHXHhHpHx ATHì 3öHúHéAÌÿH×HÍè2  HØHÀu/Hÿt*9­ô  v"Îÿ¯  Dè  D;ô  AóAGôA;ôu¾Hl$8Ht$@H|$HHÃH\$0HÄ A\ÃÌÌÌH\$Hl$Ht$WATAUHì 3öIøHêAÍÿLáLÇHÕIÌèÛ2  HØHÀu/Hÿt*9 ô  v"Îÿ®  Dè  D;ô  AóAGõA;õu»Hl$HHt$PHÃH\$@HÄ A]A\_ÃHÉt7SHì LÁH
L  3ÒÿÔ®  ÀuèSýÿÿHØÿº®  ÈèûüÿÿHÄ [ÃÌÌÌH\$Ht$ATHì03öNèj  ^\$ ; }iLcãH\ J<à tPJàöAtè&3  øÿtÿÆt$$û|1H/ JàHÁ0ÿñ­  H
 JáèAÿÿÿL
 K$ã ÿÃ\$ ë¹   èç  ÆH\$@Ht$HHÄ0A\ÃH\$Ht$WHì A3öHÙ$<u?÷A  t69+yÿ~-èúÿÿHSDÇÈèV:  ;ÇuCÀyàýCëK ÎÿHKc ÆHt$8HH\$0HÄ _ÃÌÌÌ@SHì HÙHÉuè5   ë,èjÿÿÿÀtÈÿëºcsHËè¢ùÿÿÈè;  ÷ØÀë3ÀHÄ [ÃÌHt$H|$Ld$AUAVAWHì0DñE3ä3öNèç  3ÿ|$ AÏÿ;=    LcïHÒ J<è tjJèöBt`ÏèÎ×ÿÿH² JèöAt5Aþuè9ÿÿÿA;Çt%AÿÄDd$$ëEöuöAtèÿÿÿA;ÇAD÷t$(Hl JêÏèý×ÿÿÿÇ|$ énÿÿÿ¹   è@  AþADôÆHt$PH|$XLd$`HÄ0A_A^A]Ã¹   éÿÿÿÌÌH\$Ht$H|$ATHì L% á  3ö3ÿIÜ{u%HcÆº   ÿÆHHþð  HÈHè"  Àt-Hã  HÃÿÇH;Ø|Ã¸   H\$0Ht$8H|$@HÄ A\ÃHcÇHÀI$Ä 3ÀëÛÌÌH\$Hl$Ht$WHì Huà  H-®â  HûH7HöttHÎÿ$«  HÎè|üÿÿH' HÇH;ý|ÔHHÉt{uÿûª  HÃH;Ý|ãH\$0Hl$8Ht$@HÄ _ÃÌHcÉHà  HÉHÈHÿ%lª  H\$Ht$H|$AUHì HcÙ¾   H=_ü   uè  Nèè  ¹ÿ   èZàÿÿHûHÿL-©ß  I|ý  tÆë{¹(   èÃùÿÿHØHÀuè.ùÿÿÇ    3ÀëZ¹
   èf   I|ý  u/º   HËè   ÀuHËèûÿÿèóøÿÿÇ    3öëI\ý ë	HËèbûÿÿH
Êß  ÿ©  ÆH\$0Ht$8H|$@HÄ A]ÃH\$WHì HcÙH=øÞ  HÛH<ß uèõþÿÿÀuHèßÿÿHßH\$0HÄ _Hÿ%8©  H\$WHì0IØHúHÉt23ÒHBàH÷ñH;Çs$èHøÿÿHd$  E3ÉE3À3Ò3ÉÇ    è]÷ÿÿ3Àë]H¯ù¸   HÿHDø3ÀHÿàwH
òú  PLÇÿ~©  HÀu-=êú   tHÏè°  ÀuËHÛt²Ç   ëªHÛtÇ   H\$@HÄ0_ÃÌH\$Hl$Ht$WHì0HòHéHÉû   HÒò   3ÿHÙMÀt!A Àt¿   H;×¼   HYÆ:HÿÃIÑMÉtAA9 t;HÿÇH;þ   HÿÂHÿÃ: uåIÉèL8  8/t8\tHÿÇH;þsmÆ\HÿÃHL$`HÉtëHÿÇH;þsSHÿÃHÿÁ9 uéHL$hHÉt1Àt+<.t"HÿÇH;þs(Æ.HÿÃëHÿÇH;þsHÿÃHÿÁ9 uéHGH;ÆvÆE  è°öÿÿ»"   ëÆ 3Àë#èöÿÿ»   Hd$  E3ÉE3À3Ò3Éè±õÿÿÃH\$@Hl$HHt$PHÄ0_ÃÌÌH\$Ht$WHì@ÚHÑHL$ AùAðè<ÚÿÿHD$(D¶ÛA|uötHD$ H@  B·Y#Æë3ÀÀt¸   |$8 tHL$0¡È   ýH\$PHt$XHÄ@_ÃÌHÂÑA¹   HÈE3ÀénÿÿÿÌÌÑA¹   E3À3ÉéZÿÿÿÌÌHì8Hd$  èÍ6  HÄ8ÃHL$Hì   H
áî  ÿû¦  LÌï  L\$XE3ÀHT$`HL$XèKs  HD$PH|$P tAHÇD$8    HD$HHD$0HD$@HD$(Hî  HD$ LL$PLD$XHT$`3Éèùr  ë"H$   HXï  H$   HÀHåî  H>ï  H¯í  H$   H°î  Çí  	 ÀÇí     H%Ù  HD$hH!Ù  HD$pÿ¦  ðí  ¹   è"(  3Éÿæ¥  H
©  ÿÑ¥  =Êí   u
¹   èú'  ÿ°¥  º	 ÀHÈÿ¥  HÄ   ÃÌÌH\$Hl$Ht$WHì HYHé¾  HËLÆ3Òè«ÑÿÿE3ÛH}AKA·ÃD]D]D]fó«H=¦Ü  H+ýHÿÃHîuòH  º   9HÿÁHêuòH\$0Hl$8Ht$@HÄ _ÃÌÌH\$Ht$WHì  HØ  H3ÄH$p  HñIHT$Pÿ¥  »   À=  3ÀHT$pÿÀHÿÂ;ÃrõD$VÆD$p H|$Vë)¶WD¶ÀD;ÂwA+ÐIÀJLpDB² è½ÐÿÿHÇÀuÓFd$8 LD$pD$0FDËD$(H$p  º   3ÉHD$ è?  d$@ FVD$8H$p  \$0HD$(LL$pDÃ3É\$ èØ;  d$@ FVD$8H$p  \$0HD$(LL$pA¸   3É\$ è¢;  L$p  HN3ÒAöt	p  ëAöt	 p     ëÆ    HÿÁHÿÂIÃHëu¿ë?3ÒHNDBA@ øw	B ëAøw	 Bà   ëÆ    ÿÂHÿÁ;ÓrÇH$p  H3ÌèÖÕÿÿL$  I[Is Iã_ÃÌH\$WHì èÝ
  HøÈ   
ß  tH¸À    t	H¸   ën¹
   è÷øÿÿH¸   H\$0H;_Þ  tDHÛtðÿuHÚ  HL$0H;ÈtèüóÿÿH5Þ  H¸   H'Þ  HD$0ð H\$0¹
   è÷ÿÿHÛuK èÊ×ÿÿHÃH\$8HÄ _Ã@SHì@ÙHL$ 3ÒèÕÿÿ%)ï   ûþu%Çï     ÿ¢  |$8 tSHL$0¡È   ýëEûýuÇðî     ÿb¢  ëÔûüuHD$ ÇÔî     @ë»|$8 tHD$0 È   ýÃHÄ@[ÃH\$UVWATAUHì@HÝÔ  H3ÄHD$8HòèIÿÿÿ3Ûø;Ãu
HÎèüÿÿé  L-1Ý  ËHëIÅA¼   98'  AÌIìHÀ0ùréÿèý    ÿéý  ø   ·Ïÿ³¡  ;Ãç   HT$ Ïÿ¡  ;ÃÆ   HN3ÒA¸  è]Íÿÿ~^D9d$    HD$&8\$&t-8Xt(¶8¶H;ùw+ÏHT7AÌ
IÔI+ÌuõHÀ8uÓHF¹þ   IÄI+ÌuõNé¤  t(été
tA;ÌtÃë¸  ë¸  ë¸  ë¸  FDfë^H~·Ã¹   fó«éà   9Bí  ·þÿÿÈÿéÖ   HN3ÒA¸  èÌÿÿHlm LÏÛ  HíAº   MDíIÈA8t18Yt,¶¶A;ÐwLL2AAÔA¶AMÌ;ÐvìHÁ8uÏIÀMÜM+Ôu»~ï¤  Dft$ïtï
tA;üu»  ë»  ë»  ë»  ^HVI|í¹   ·HÇfHÂI+ÌuíHÎè|úÿÿ3ÀHL$8H3ÌèÒÿÿH$   HÄ@A]A\_^]ÃÌHÄHXHpHxL` AUHì0ùAÍÿè  HðèüÿÿH¸   Ïè¾üÿÿDà;C  ¹   è\îÿÿHØ3ÿH;Ç|  H¸   HÈA¸   èY:  ;HÓAÌèýÿÿDè;Ç$  H¸   ðÿuH¸   L%Ö  I;ÌtèüïÿÿëL%Ö  H¸   ðöÈ   	  öÛ  ü   ¹
   èôÿÿC^ë  CYë  CTë  ×T$ L«­ÿÿú}HcÊ·DKfAH= ÿÂT$ ëâ×T$ ú  }HcÊDB * ÿÂT$ ëá|$ ÿ   }HcÏ  B0+ ÿÇ|$ ëÞHkÙ  ð ÿuH
^Ù  I;ÌtèïÿÿHMÙ  ð¹
   èÃòÿÿë+øÿu&L%Õ  I;ÜtHËèäîÿÿèWìÿÿÇ    ë3ÿDïAÅH\$@Ht$HH|$PLd$XHÄ0A]ÃHì(=aò   u¹ýÿÿÿèñýÿÿÇKò     3ÀHÄ(ÃH\$Ht$WHì H(  HÙHÀtyH
ÇÞ  H;ÁtmH  HÀta8 u\H   HÉt9 uè;îÿÿH(  è·=  H  HÉt9 uèîÿÿH(  èM=  H  èîÿÿH(  èõíÿÿH0  HÀtG8 uBH8  Héþ   èÑíÿÿHH  ¿   H+Ïè½íÿÿHP  H+Ïè®íÿÿH0  è¢íÿÿHX  HtÜ  H;Èt¹`   uèÕ:  HX  èuíÿÿH{X¾   HµØ  H9GðtHHÉt
9 uèMíÿÿHø tHOHÉt
9 uè3íÿÿHÇ Hîu½HËH\$0Ht$8HÄ _éíÿÿÌÌðH  HÀtð H   HÀtð H  HÀtð H0  HÀtð HAXA¸   HØ  H9PðtHHÒtðHxø t
HPHÒtðHÀ IèuÉHX  ð`  ÃÌÌÌHÉ   AÉÿðD	H  HÀtðDH   HÀtðDH  HÀtðDH0  HÀtðDHAXA¸   Hf×  H9PðtHHÒtðD
Hxø t
HPHÒtðD
HÀ IèuÉHX  ðD`  HÁÃÌÌÌ@SHì HÚHÒtAHÉt<LL;Òt/HHÊèþÿÿMÒtIÊè%ÿÿÿA: uHðÖ  L;ÐtèúüÿÿHÃë3ÀHÄ [ÃÌ@SHì èé  HØÈ   
¦Ö  tH¸À    tèÉ  HÀ   ë+¹   èþïÿÿHÀ   Hë×  èVÿÿÿHØ¹   èÝîÿÿHÛuK èÏÿÿHÃHÄ [ÃÌÌÌHÿ%  Ì3ÉHÿ%  ÌÌÌHÿ%
  ÌHì(
º×  ùÿt
ÿ  
¨×  ÿHÄ(éÿíÿÿÌÌÌH\$WHì HúHÙH¥£  H    ÇA   ÇÈ      Æt  CÆ÷  CHÐ  H¸   ¹
   è+ïÿÿH¸   ð ¹
   èîÿÿ¹   èïÿÿH»À   HÿuHóÖ  HÀ   HÀ   èýÿÿ¹   èÙíÿÿH\$0HÄ _ÃÌÌH\$WHì ÿà  
ÒÖ  øÿ  HØHÀuHHºÈ  èAèÿÿHØHÀt3
§Ö  HÐÿö  HËÀt3Òèôþÿÿÿú  HKÿëèéÿÿ3ÛÏÿÚ  HÃH\$0HÄ _Ã@SHì èqÿÿÿHØHÀuHèqÍÿÿHÃHÄ [ÃHÉ+  H\$WHì HÙHI8HÉtè<éÿÿHKHHÉtè.éÿÿHKXHÉtè éÿÿHKhHÉtèéÿÿHKpHÉtèéÿÿHKxHÉtèöèÿÿH   HÉtèåèÿÿH    H×¡  H;ÈtèÍèÿÿ¹
   èíÿÿH¸   HL$0HÉtðÿuH´Î  HL$0H;Ètèèÿÿ¹
   èNìÿÿ¹   èDíÿÿH»À   Hÿt+HÏèóûÿÿH;=$Õ  tH»Ó  H;øt? u	HÏè½ùÿÿ¹   èìÿÿHËè6èÿÿH\$8HÄ _ÃÌÌÌ@SHì è¥ÏÿÿèÌêÿÿÀt`H
­þÿÿÿ_  áÔ  øÿtHºÈ  ¹   èYæÿÿHØHÀt1
¿Ô  HÐÿ  Àt3ÒHËèýÿÿÿ  HKÿ¸   ëèËüÿÿ3ÀHÄ [ÃÌÌÌHl$Ht$WHì`HcùêHL$@IÐèóÈÿÿD_Aû   wHD$@H@  ·yé   ÷HT$@Áþ@¶Îè²  º   Àt@´$   @¼$   Æ$    DJë@¼$   Æ$    DÊHL$@T$8L$   AD$0AHL$@D$(HD$pHD$ èa0  Àu8D$XtHD$P È   ý3Àë·D$p#Å|$X tHL$P¡È   ýL\$`IkIs Iã_ÃÌÌÌHÄHXHhHp HWHì HÊHÚè¶áÿÿKHcðöÁuèÞãÿÿÇ 	   K Èÿé4  öÁ@t
èÂãÿÿÇ "   ëâ3ÿöÁt{öÁ   HCáþHKC{àïÈC©  u/èw¾ÿÿHÀ0H;Øtèi¾ÿÿHÀ`H;ØuÎèÝ  ;ÇuHËèE;  ÷C     +HS+kHBHC$ÿÈ;ïC~DÅÎè2!  øëWÉ Ké?ÿÿÿþÿt#þþtHÎHÆHç  áHÁøHkÉXHÂëH
lÇ  öA t3ÒÎDBè9  HøÿïþÿÿHKD$0ë½   HT$0ÎDÅè·   ø;ýÅþÿÿ¶D$0H\$8Hl$@Ht$HHÄ _ÃÌÌÌH\$H|$Ll$ AVHì0L5ÜÑ  ù3ÛIÆ;tÿÃHÀûrñûÔ  ¹   ès<  ø|  ¹   è`<  Àu
=Æ  a  ÿü     H=là  A½  L_  HÏIÕèø5  ÀtHd$  E3ÉE3À3Ò3ÉèÛßÿÿHMà  A¸  3ÉÆBá   ÿw  Àu1Lü  H
&à  ºû  è§5  ÀtHd$  E3ÉE3À3Ò3ÉèßÿÿH
üß  è  HÿÀHø<vFH
çß  èù  HÖâ  L  HL8ÞA¹   H+Ñèt4  ÀtHd$  E3ÉE3À3Ò3Éè/ßÿÿLh  IÕHÏè½3  ÀtHd$  E3ÉE3À3Ò3ÉèßÿÿLcÃIÕHÏMÀODÆè3  ÀtHd$  E3ÉE3À3Ò3ÉèÕÞÿÿHæ  A¸  HÏèü8  ëE¹ôÿÿÿÿ»  HøHÀt2Høÿt,HcÛHÛILÞè%  ITÞHd$  LL$HLÀHÏÿY  H\$@H|$PLl$XHÄ0A^ÃÌÌÌHì(¹   è:  øt¹   ès:  Àu= Ä  u¹ü   è¤ýÿÿ¹ÿ   èýÿÿHÄ(ÃÌ@SHì º   JèõàÿÿHÈHØè~÷ÿÿH'æ  Hæ  HÛuCëH# 3ÀHÄ [ÃÌÌH\$Ht$H|$ATAUAVHì LñèÃÆÿÿH
ßå  è>÷ÿÿLàH
Èå  è/÷ÿÿHØI;Ä   HøI+üLoIý   IÌèó9  HðI;ÅsTº   H;ÂHBÐHÐH;ÐrIÌè¿àÿÿ3ÛH;Ãuë3ÛHV H;ÖrFIÌè£àÿÿH;Ãt9HÁÿHøHÈèöÿÿHGå  IÎèöÿÿHHKèöÿÿH$å  IÞë3ÛèÆÿÿHÃH\$@Ht$HH|$PHÄ A^A]A\ÃÌÌÌHì(èïþÿÿH÷ØÀ÷ØÿÈHÄ(ÃÌH\$WHì H¥  H=¥  ëHHÀtÿÐHÃH;ßríH\$0HÄ _ÃH\$WHì Ho¥  H=h¥  ëHHÀtÿÐHÃH;ßríH\$0HÄ _ÃH\$WHì HÏ  ¿
   HèªõÿÿHHÃHïuëH\$0HÄ _ÃÌÌHÁ¹MZ  f9t3ÀÃHcH<HÈ3À9PE  uº  f9QÀóÃÌLcA<E3ÉLÒLÁA·@E·XJL EÛtQL;Òr
AÂL;ÐrAÿÁHÁ(E;Ërâ3ÀÃHÁÃÌÌÌÌÌÌÌÌÌÌHì(LÁL
ÿÿIÉèjÿÿÿÀt"M+ÁIÐIÉèÿÿÿHÀt@$Áè÷Ðàë3ÀHÄ(ÃÌÌÌHì(è?öÿÿHÐ   HÉtÿÑë è8  HÄ(ÃÌHì(H
ÑÿÿÿèôÿÿHÞ  HÄ(ÃÂ  ÌH\$Hl$Ht$WHì HòùèbõÿÿE3ÛHØI;Ã  H    Lc	Î  HÑ9:tIÀHÂHÁàHÁH;ÐréIÀHÁàHÁH;Ðs9:tIÓI;ÓC  LBM;Ã6  Iøu
LZA@üé%  IøuÈÿé  H«¨   H³¨   Jùè   LcuÍ  
sÍ  AÊMÊD;Ñ}*IÁáH    AÿÂIÁM\ø
GÍ  EÍ  ÈD;Ñ|Ú:  À»°   uÇ°      ëv:  ÀuÇ°      ëb:  ÀuÇ°      ëN:  ÀuÇ°      ë::  ÀuÇ°      ë&:  ÀuÇ°      ë:  Àu
Ç°      °   ¹   AÿÐ»°   ëLZAÿÐH«¨   éãþÿÿ3ÀH\$0Hl$8Ht$@HÄ _ÃÌÌH
±Ü  H
²Ü  H
³Ü  H
´Ü  ÃÌÌÌH
¡Ü  é òÿÿH\$Ht$WATAUAVAWHì@Ù3ÿ|$p3öÑê	  ê¢   ê   ê   ê   êtMêt,út_è ÚÿÿÇ    H!t$ E3ÉE3À3Ò3Éè¶ÙÿÿÈÿéÑ  L%Ü  H
 Ü  ¿   |$péª   L%ûÛ  H
ôÛ  ¿   |$pé   L%×Û  H
ÐÛ  ¿   |$pëuè¨òÿÿHðHÀuÈÿék  H    HÊLcKË  9YtHÁIÀHÁàHÂH;ÈrèIÀHÁàHÂH;Ès9Yt3ÉLaM,$ëL%PÛ  H
IÛ  ¿   |$pèOñÿÿLèIýu3Àéö   Míu
AMèyÃÿÿÌÿt3ÉèÕàÿÿûtûtûtL|$8Dt$pë1L¾¨   L|$8H¦¨    ûuD¶°   Ç°      ëDt$pûu9
iÊ  ÑL$0aÊ  È;Ñ}*HcÊHÉH    HdÈ ÿÂT$0
8Ê  ëÓèðÿÿI$ÿt3Éè6ßÿÿ¿   ;ßu
°   ÏAÿÕëËAÿÕ;ßt
ûtûuL¾¨   ;ßuD¶°   3ÀL\$@I[8Is@IãA_A^A]A\_ÃÌÌÌH
9Ú  ÃH
AÚ  ÃH
AÚ  ÃHì8ÿf  DØD$ ë=  Àu¹   ÿ#  E3ÛD\$ AÃHÄ8ÃÌÌÌH
	Ú  Ã@SHì HÙH
øÙ  è¿ïÿÿHÀtHËÿÐÀt¸   ë3ÀHÄ [ÃÌÌHì(H8csmàu+xu%@ = t=!t="t= @uèúÿÿÌ3ÀHÄ(ÃÌÌÌHì(H
±ÿÿÿÿ÷  3ÀHÄ(ÃH\$Hl$Ht$WHì0=ÍÝ   uèZëÿÿH·Í  3ÿHÛuÈÿéÉ   <=tÿÇHËèú  H\ÀuçGº   HcÈè;ØÿÿHøH5Í  HÀtÀHiÍ  ; teHËè¼  ;=ptCHcîº   HÍè ØÿÿHHÀtrLÃHÕHÈè+  ÀtHd$  E3ÉE3À3Ò3ÉèåÔÿÿHÇHcÆHØ; u¢HÿÌ  HËèGÙÿÿH%ïÌ   H' ÇÑÜ     3ÀH\$@Hl$HHt$PHÄ0_ÃH
Ì  èÙÿÿH%vÌ   éÿÿÿÌHÄHXHhHpHx ATAUAVHì Ll$`MñIøAe  LâHÙAÇ   HÒtLIÄ3í;"u3Àí@¶"ÀHÿÃèë9AÿE HÿtHÿÇ¶3HÿÃÎè)àÿÿÀtAÿE HÿtHÿÇHÿÃ@ötíu­@þ t@þ	u¡Hÿt	ÆGÿ ëHÿË3ö; ã   ; t;	uHÿÃëñ; Ë   MätI<$IÄAÿº   3ÉëHÿÃÿÁ;\tö;"u6ÊuötHC8"uHØë3À3ÒöÀðÑéëÿÉHÿtÆ\HÿÇAÿE ÉuëÀtOöu< tG<	tCÒt7¾ÈèLßÿÿHÿtÀtHÿÃHÿÇAÿE HÿÇëÀtHÿÃAÿE AÿE HÿÃéYÿÿÿHÿtÆ HÿÇAÿE éÿÿÿMätI$$ AÿH\$@Hl$HHt$PH|$XHÄ A^A]A\ÃÌH\$Ht$ WHì0=ÒÚ   uè_èÿÿH=\Ö  A¸  3ÉH×ÆN×   ÿ,  HÚ  H=vÊ  HÛt; uHßHD$HLL$@E3À3ÒHËHD$ è½ýÿÿHct$@H¹ÿÿÿÿÿÿÿH;ñs\HcL$HHùÿsQHñH;ÑrHHÊèÔÿÿHøHÀt8LðHD$HLL$@H×HËHD$ ègýÿÿD\$@H=»É  AÿË3ÀD«É  ëÈÿH\$PHt$XHÄ0_ÃÌÌHÄHXHhHpHx ATHì@
qÖ  E3äIÜAt$A;Ìu2ÿ  HØI;ÄtÇIÖ     ë!ÿÑ  
;Ö  øxDÎ
/Ö  ùº   I;Üuÿ[  HØI;Äu3Àé  HûfD9#tHþfD9'u÷HþfD9'uîLd$8Ld$0H+ûHÑÿLÃ3ÒDO3ÉDd$(Ld$ ÿþ  HcèA;ìtAHÍè^ÓÿÿHðI;Ät1Ld$8Ld$0DOLÃ3Ò3Él$(HD$ ÿÂ  A;ÄuHÎè%ÕÿÿIôHËÿ¡  HÆës;Ît	A;ÌLÿÿÿÿ  HØI;Ä:ÿÿÿD8 tHÿÀD8 uøHÿÀD8 uð+ÃÿÀHcðHÎèÑÒÿÿHøI;ÄuHËÿ8  é ÿÿÿLÆHÓHÈèÍ  HËÿ  HÇH\$PHl$XHt$`H|$hHÄ@A\ÃÌÌL$Hì(E3Àº   3Éÿ  HÅÔ  HÀt#LD$0A¹   3ÒHÈÇD$0   ÿâ  ¸   HÄ(ÃH\$WHì H÷µ  Hd$0 H¿2¢ß-+  H;ÇtH÷ÐHàµ  ëvHL$0ÿÃ  H\$0ÿ°  DØI3Ûÿ4  DØI3Ûÿ  HL$8DØI3Ûÿw  L\$8L3ÛH¸ÿÿÿÿÿÿ  L#ØH¸3¢ß-+  L;ßLDØLjµ  I÷ÓLhµ  H\$@HÄ _ÃÌÌÌÌÌÌÌÌÌÌÌff     HìØ  M3ÀM3ÉHd$ LD$(èN  HÄØ  ÃÌÌÌÌÌÌfD  HL$HT$DD$IÇÁ ëÌÌÌÌÌÌfÃÌÌÌÌÌÌf     ÃÌÌÌHì8ùþu
èvÐÿÿÇ 	   ëRÉx.;
dÔ  s&HcÉHpÔ  HÁáHÁøHkÉXHÂ¾Dà@ë"è7ÐÿÿHd$  E3ÉE3À3Ò3ÉÇ 	   èLÏÿÿ3ÀHÄ8ÃÌ@SHì@ÙHL$ èú³ÿÿHD$ D¶ÛH@  B·Y%   |$8 tHL$0¡È   ýHÄ@[ÃÌÌÌ@SHì@ÙHL$ 3Òè°³ÿÿHD$ D¶ÛH@  B·Y%   |$8 tHL$0¡È   ýHÄ@[ÃÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌff     HÁH÷ÙH©   tfHÿÀÒt_¨uóI¸ÿþþþþþþ~I» HMÈHÀLÊH÷ÒI3ÑI#ÓtèHPøÒtQötGHÁêÒt9öt/HÁêÒt!ötÁêÒt
öu¹HDÿÃHDþÃHDýÃHDüÃHDûÃHDúÃHDùÃHDøÃH
³  3ÀHÉH9
Ñ  ÀÃH\$fDL$ UVWHì`3íIøHòHÙH;ÕuL;ÅvH;Ít)3Àé¤   H;Ít	ÿIøÿÿÿv$è]Îÿÿ»   E3ÉE3À3Ò3ÉHl$ èrÍÿÿÃëoH$    HL$@è$²ÿÿL\$@A9kÍ   ·$   ¹ÿ   f;ÁvLH;õtH;ýv
LÇ3ÒHÎèl«ÿÿèïÍÿÿÇ *   èäÍÿÿ @8l$XtHL$P¡È   ýH$   HÄ`_^]ÃH;õtCH;ýw<è°Íÿÿ»"   E3ÉE3À3Ò3ÉHl$ èÅÌÿÿ@8l$XHÿÿÿHL$P¡È   ýé7ÿÿÿH;ÝtÇ   @8l$XçþÿÿHD$P È   ýéÖþÿÿH$   ¬$   AKHD$8Hl$0L$   A¹   3Ò|$(Ht$ ÿ,  ;Åt9¬$   ÿÿÿH;Ýtëÿd~  øz÷þÿÿH;õtH;ýv
LÇ3ÒHÎèLªÿÿèÏÌÿÿ»"   E3ÉE3À3Ò3ÉHl$ èäËÿÿ@8l$XgþÿÿHD$P È   ýéVþÿÿHì8Hd$  èáýÿÿHÄ8Ã%yÐ   ÃH\$Ht$WHì HÙHùàw|¿   HÉHEùH
9Ï  HÉu èïëÿÿ¹   è½éÿÿ¹ÿ   è/³ÿÿH
Ï  LÇ3Òÿ¡}  HðHÀu,9Ï  tHËèÑóÿÿÀt
ë«èþËÿÿÇ    èóËÿÿÇ    HÆëè«óÿÿèÞËÿÿÇ    3ÀH\$0Ht$8HÄ _ÃÌÌH\$Ht$WHì HÚHùHÉu
HÊè&ÿÿÿëjHÒuèÎÿÿë\HúàwCH
oÎ  ¸   HÛHDØLÇ3ÒLËÿÅ}  HðHÀuo9WÎ  tPHËèóÿÿÀt+Hûàv½HËèóÿÿè>ËÿÿÇ    3ÀH\$0Ht$8HÄ _Ãè!ËÿÿHØÿ|  ÈèÉÊÿÿëÕèËÿÿHØÿo|  Èè°ÊÿÿHÆë»ÌH\$Ht$WHì03ÿHÚHñHÒt13ÒHGàH÷óI;Às#èÁÊÿÿH!|$ E3ÉE3À3Ò3ÉÇ    è×Éÿÿ3Àë=I¯ØHÉtè%  HøHÓHÎèÃþÿÿHðHÀtH;ûsH+ßH3ÒLÃèá§ÿÿHÆH\$@Ht$HHÄ0_ÃÌÌH\$WHì0ÏÿHÙHÉu#è:ÊÿÿH!\$ E3ÉE3À3Ò3ÉÇ    èPÉÿÿÇëFöAt:èÍÿÿHËøè*  HËèÇÇÿÿÈèè(  ÀyÏÿëHK(HÉt
èiÌÿÿHc( c ÇH\$@HÄ0_ÃÌÌÌH\$HL$WHì0HÙÏÿ3ÀHÉÀÀu$è¢ÉÿÿÇ    Hd$  E3ÉE3À3Ò3Éè·ÈÿÿÇë&öA@ta ëè~¥ÿÿHËèÿÿÿøHËèû¥ÿÿÇH\$HHÄ0_ÃÌÌH\$ UVWATAUAVAW¸0  èÞj  H+àH­  H3ÄH$   3í3ÿEèLâHcÙl$@EÀu3Àéç  HÒu.èÉÿÿ!8èóÈÿÿH!|$ E3ÉE3À3Ò3ÉÇ    è	ÈÿÿÈÿé´  LûLóHÜÌ  IÁþAçJðLt$PMkÿXAt8@ö@Ðþ@þt@þu	AÅ÷Ð¨tAöD t
3ÒËDBè  Ëèï÷ÿÿÀñ  H|Ì  JðAöDÚ  èSáÿÿ3ÛHT$XHÀ   HRÌ  9YJðIÃÿz  À¤  Ût	@ö  ÿkz  !|$LIÜD$XEíw  Dt$X½
   @ö  HT$PE3öù
H-èË  HTÕ AÆA|P t ADLL$]A¸   D$\AdP HT$\ëI¾ÉèË÷ÿÿÀt4IÅH+ÃIÄHøÏ  HL$DA¸   HÓè5*  øÿv  HÿÃëA¸   HÓHL$Dè*  øÿU  Hd$8 Hd$0 L$XHD$\LD$DA¹   3ÒÇD$(   HÿÃHD$ ÿ#y  èÀ  HD$PHd$  H
Ë  HÁLL$LHT$\IDÅÿ¼x  ÀB  ûA+ü|$@9l$LË   ½
   Eö¯   HD$PHd$  @l$\H
¬Ê  LL$LDEôHÁHT$\Iÿ`x  Àæ   |$L|{ÿD$@ÿÇëe@þt@þu·E3öfø
fD$DAÆHÃ@þt@þu6·L$Dèh&  f;D$D   ÇEötÍfl$DèI&  f;D$DuxÿÇÿD$@ÃA+ÄA;Åþÿÿ\$LLt$Pl$@ÿ¸  Ûz  ûe  èÃÅÿÿÇ 	   èØÅÿÿéØüÿÿLt$PÿÇJLõ ADLJDõ AÇDP   \$Lë¥ÿôv  Øë\$Lë¡HÉ  JðAöDÊ  3ÛIì@öÐ   Eíü  S
Dt$@H´$   3ÉÅA+ÄA;Ås&E HÿÅ<
uAÿÆHÿÆHÿÁHÿÁHÿÆHùÿ  rÐH!\$ H$   DÆD+ÀHÉ  Dt$@Lt$PLL$HH$   JðIÿ³v  Àt5|$HH$   H+ðHcD$HH;ÆÅþÿÿÅº
   A+ÄA;ÅNÿÿÿé­þÿÿÿüu  Øé þÿÿ@þÔ   Eí"  º
   Dt$@H´$   3ÉÅA+ÄA;Ås1·E HÅfø
ufAÆHÆHÁHÁfHÆHùþ  rÅH!\$ H$   DÆD+ÀH!È  Dt$@Lt$PLL$HH$   JðIÿÌu  ÀJÿÿÿ|$HH$   H+ðHcD$HH;ÆÚýÿÿÅº
   A+ÄA;Å?ÿÿÿéÂýÿÿEíN  A¸
   HL$p3ÒÅA+ÄA;Ås.·E HÅfø
ufDHÁHÂHÂfHÁHú¨  rÈHd$8 Hd$0 HD$p+ÈLD$pÇD$(U
  Á¹éý  +Â3ÒÑøDÈH$   HD$ ÿ-u  DðÀýÿÿ3öHD$PHd$  HcÎH   EÆH
 Ç  HÁLL$HD+ÆIÿºt  Àtt$HD;ö½ëÿ-t  ØD;öÈüÿÿýA¸
   A+üA;ýÿÿÿé¯üÿÿIH!|$ LL$HEÅIÔÿgt  Àt|$H3ÛéüÿÿÿÚs  ØéüÿÿËèÂÿÿé~ùÿÿHhÆ  JðAöD@tA<$.ùÿÿè4ÂÿÿÇ    èIÂÿÿ  éHùÿÿ+ýÇH$   H3Ìèå¥ÿÿH$  HÄ0  A_A^A]A\_^]ÃÌÌH\$Ht$L$WATAUAVAWHì0EàLêHcÙûþuèâÁÿÿ3ÿ8è¹ÁÿÿÇ 	   ÈÿéÔ   3ÿ;ß¡   ;Å     HóLóIÁþL=Å  æHköXK÷¾L0áu+èÁÿÿ8ècÁÿÿÇ 	   H|$ E3ÉE3À3Ò3ÉèyÀÿÿÈÿëmËèõ%  K÷öD0tEÄIÕËèÔ÷ÿÿøëèÁÿÿÇ 	   è0Áÿÿ8ÏÿËèd&  Çë)èÁÿÿ8èôÀÿÿÇ 	   H|$ E3ÉE3À3Ò3Éè
ÀÿÿÈÿH\$hHt$pHÄ0A_A^A]A\_ÃÌÌÌH\$L$VWATHì0HcùÿþuèÀÿÿÇ 	   ÈÿéÙ   É®   ;=Ä  ¢   HßH÷HÁþL%Ä  ãHkÛXIô¾Láu%èQÀÿÿÇ 	   Hd$  E3ÉE3À3Ò3Éèf¿ÿÿÈÿëzÏèâ$  IôöDt+ÏèK$  HÈÿ~r  Àu
ÿtq  Øë3ÛÛtèÀÿÿèî¿ÿÿÇ 	   ËÿÏè>%  Ãë#èÕ¿ÿÿÇ 	   Hd$  E3ÉE3À3Ò3Éèê¾ÿÿÈÿH\$`HÄ0A\_^ÃÌH\$WHìPHÚHùHÉu$è¿ÿÿHd$  E3ÉE3À3Ò3ÉÇ    è£¾ÿÿ3ÀëvHÒt×H;ÊsòHL$0IÐèP£ÿÿL\$8A{ u|$H HCÿtHHL$@¡È   ýë:HSÿHÿÊH;úw¶BöDuíHËH+ÊáH+Ù|$H tHL$@¡È   ýHCÿH\$`HÄP_ÃÌÌE3Àé<ÿÿÿH\$Hl$Ht$WATAUHìPE3íIùIðHêHÙM;ÍuI;ÍuI;Õu 3Àë>I;ÍtI;ÕvM;ÍuD)ëèM;Åu?D)è¾ÿÿ»   E3ÉE3À3Ò3ÉLl$ è½ÿÿÃL\$PI[ Ik(Is0IãA]A\_ÃH$   HL$0è8¢ÿÿL\$8HÕHËE9ku LÏLÆèX  D8l$Ht±HL$@¡È   ýë£HÿÿuHÿÆHÿÁA:Åt.Hêuëë&HÿÆHÿÁA:ÅtHêtHïuåI;ýuD)HÿÁI;Õ  D8.tHÿuYLaÿIôL;ãr¶HT$0è³ÇÿÿA;ÅtHÿÎH;ósæAÄ+Æ¨t*E,$è½ÿÿº*   D8l$HtHL$@¡È   ýÂéóþÿÿHÿÿu\HývOHt+þHþH;ór¶HT$0èMÇÿÿA;ÅtHÿÏH;ûsæÆ+Ç¨t D.D8l$HtHD$@ È   ý¸P   éþÿÿDl+ÿëÜD+èõ¼ÿÿ»"   E3ÉE3À3Ò3ÉLl$ è
¼ÿÿD8l$HaþÿÿHL$@¡È   ýéPþÿÿHÁH+ÃHø|YHqþHþH;ór¶HT$0è­ÆÿÿA;ÅtHÿÏH;ûsæÆ+Ç¨t+D.è|¼ÿÿº*   D8l$HÿÿÿHD$@ È   ýéóþÿÿD8l$H ýÿÿHD$@ È   ýéýÿÿÌ@UATAUAVAWHì`Hl$@H]PHuXH}`Hn   H3ÅHED¿  ¾   3ÿMÙLMDE DòUHÙDnÿD;×uOLax  EÍº   3É|$(H|$ ÿLn  ;ÇtEÕD-²¾  ëÿm  D£¾  øxDDÖD¾  L]DMpD;Ï~5AÉIÃA+Í@88t
IÅ;ÏuñÉÿAÁ+ÁA+ÅA;Á}
DHDMpëDÈEpD;Ö\  D;×S  E;Õ  D¥   ÷D;çuHD`÷   MÃAÌÒ|$(H|$ âAÕÿm  LcøD;ÿ<  H»ðÿÿÿÿÿÿA¾ÝÝ  A½   ~[3ÒHBàI÷÷HørLKL?I;Íw.HAH;ÁwHÃHàðèZ\  H+àH|$@Hÿå  ÇÌÌ  ëèîÿÿHøHÀtD0HÇHÿÀ  DMpLEº   AÌD|$(H|$ ÿÜl  3É;ÁK  U L$(HL$ MEÏLÇÿ¿l  E3ÀHcðA;ð!  DU Aºâ
s;   A;À  ;ðÿ   MD$(HExEÏLÇAÒHD$ ÿol  éÛ   A;ð~`3ÒHBàH÷öHørQHL6I;Íw*HAH;ÁwHÃHàðèW[  H+àH\$@I;ØtÇÌÌ  ëèíÿÿE3ÀHØI;ÀtD0HÃDU ëIØI;ØtnMEÏLÇAÒt$(H\$ ÿâk  3É;Át?   3ÒHL$8DÎLÃHL$0;ÁuL$(HL$ ë
D$(HExHD$ AÌÿ/k  ðHKðD91uè»ÿÿHOðD91uè»ÿÿÆéÍ  H÷LçD;÷uHDpDu½   ÿuHxAÎèh   Dèøÿu3Àé  L}xLE;Ç<  3ÛLMpÐÏ\$(H\$ è   HðH;ÃtÉDMpU LÀAÎ\$(H\$ ÿáj  LcÈDMD;Ëuûé  D;ËA¾ÝÝ  ~bIÉIùàwYHÁHù   w4HYH;Ùw
H»ðÿÿÿÿÿÿHãðHÃè¾Y  H+ãH\$@HÛt%ÇÌÌ  ëèëÿÿHØHÀtD0HÃDMHÛu3ÛëMcÁ3ÒHËèKÿÿD]DMpU MD\$(LÆH\$ ÿ*j  EÀu3ÿë.   LMLÃD$(×AÍL|$ è  }Là3ÀL;àDøHKðD91u(èó¹ÿÿë!   DMpU D$(AÎL|$ ÿÂi  ø3ÛH;ótHÎèÁ¹ÿÿL;ãt
M;ütIÌè¯¹ÿÿÇHMH3ÍèñÿÿH]PHuXH}`He A_A^A]A\]ÃÌÌÌH\$Ht$WHìpòHÑHL$PIÙAøèÐÿÿ$¸   D$À   HL$PD\$@D$8$°   D$0H$¨   LËHD$($    DÇÖD$ èOúÿÿ|$h tHL$`¡È   ýL\$pI[IsIã_ÃÌÌDL$ UATAUAVAWHì@Hl$0H]@HuHH}PH  H3ÅHED
,¹  ¿   3ÛMðDúLéwD;Ëu=LM Hr  DÇÏÿh  ;Ãt=ô¸  ë6ÿ\g  D
å¸  øxDDÎD
×¸  D;Î&  D;Ë  D;ÏC  uh;óuIE p÷]xDMXMÆÒÎ\$(âH\$ ×ÿh  LcàD;ã  A½ÝÝ  ~hH¸ðÿÿÿÿÿÿL;àwYKL$Hù   w5HAH;Áw
H¸ðÿÿÿÿÿÿHàðèçV  H+àH|$0H;ûµ   ÇÌÌ  ëè¥èÿÿHøH;ÃtD(HÇëHûH;û   MÄ3ÒHÏMÀèlÿÿDMXMÆº   ÎDd$(H|$ ÿVg  ;ÃtLM`DÀH×AÏÿWg  ØHOðD9)uè7·ÿÿÃé   DepHûD;ãuIE D`uh;óuIE pAÌè"  øÿu3ÀëU;Æt$LMXMÆÐÎ\$(H\$ èP  HøH;Ãt×LðHE`DMXMÆA×AÌHD$ ÿÁf  ðH;ûtHÏèª¶ÿÿÆHMH3ÍèìÿÿH]@HuHH}PHeA_A^A]A\]ÃÌÌH\$Ht$WHì`òHÑHL$@AÙIøèÌÿÿ$    D$¨   HL$@D\$8D$0$   D$(H$   DËLÇÖHD$ è.ýÿÿ|$X tHL$P¡È   ýH\$pHt$xHÄ`_ÃÌÌÌÌÌÌÌÌÌÌÌÌÌff     LÙH+Ñ  IøraöÁt6öÁt
IÿÈHÿÁöÁtf
IèfHÁöÁt

IèHÁMÈIÁéuQMÈIÁétH
HHÁIÿÉuðIàMÀuIÃÃ@ 
HÿÁIÿÈuóIÃÃfffffff     fffffIù    sBH
LT
HÁ HAàLQèHD
ðLT
øIÿÉHAðLQøuÔIàéqÿÿÿfff     fHú   rµ¸    
D
@HÁ   ÿÈuìHé   ¸@   L
LT
LÃ	LÃQLL
LT
LÃILÃQLL
 LT
(HÁ@LÃIàLÃQèLL
ðLT
øÿÈLÃIðLÃQøuªIè   Iø   qÿÿÿð$ é¹þÿÿffff     fffffffIÈIøraöÁt6öÁtHÿÉ
IÿÈöÁtHéf
IèföÁt
Hé
IèMÈIÁéuPMÈIÁétHéH
IÿÉHuðIàMÀuIÃÃ HÿÉ
IÿÈuóIÃÃfffffff     fffffIù    sBHD
øLT
ðHé HALQHD
L
IÿÉHALuÕIàésÿÿÿffff     fHú ðÿÿwµ¸    Hé   
D
@ÿÈuìHÁ   ¸@   LL
øLT
ðLÃIøLÃQðLL
èLT
àLÃIèLÃQàLL
ØLT
ÐHé@LÃILÃQLL
L
ÿÈLÃILÃuªIè   Iø   qÿÿÿð$ éºþÿÿHÉà  SHì HÙHIè²ÿÿHKè²ÿÿHKè²ÿÿHK èw²ÿÿHK(èn²ÿÿHK0èe²ÿÿHè]²ÿÿHK@èT²ÿÿHKHèK²ÿÿHKPèB²ÿÿHKXè9²ÿÿHK`è0²ÿÿHKhè'²ÿÿHK8è²ÿÿHKpè²ÿÿHKxè²ÿÿH   è ²ÿÿH   èô±ÿÿH   èè±ÿÿH   èÜ±ÿÿH    èÐ±ÿÿH¨   èÄ±ÿÿH°   è¸±ÿÿH¸   è¬±ÿÿHÀ   è ±ÿÿHÈ   è±ÿÿHÐ   è±ÿÿHØ   è|±ÿÿHà   èp±ÿÿHè   èd±ÿÿHð   èX±ÿÿHø   èL±ÿÿH   è@±ÿÿH  è4±ÿÿH  è(±ÿÿH  è±ÿÿH   è±ÿÿH(  è±ÿÿH0  èø°ÿÿH8  èì°ÿÿH@  èà°ÿÿHH  èÔ°ÿÿHP  èÈ°ÿÿHÄ [ÃÌÌHÉtBSHì HÙH	H;
	¡  tè¢°ÿÿHKH;
ÿ   tè°ÿÿHKH;
õ   tè~°ÿÿHÄ [ÃHÉ   SHì HÙHIH;
Ô   tèU°ÿÿHK H;
Ê   tèC°ÿÿHK(H;
À   tè1°ÿÿHK0H;
¶   tè°ÿÿHK8H;
¬   tè
°ÿÿHK@H;
¢   tèû¯ÿÿHKHH;
   tèé¯ÿÿHÄ [ÃÌÌÌ@SHì0LÉHÉt
HÒtMÀu,Dè8­ÿÿ»   Hd$  E3ÉE3À3Ò3ÉèL¬ÿÿÃHÄ0[Ã9 t	HÿÁHêuòHÒuAë¿A IÿÀHÿÁÀtHêuëHÒuAèÚ¬ÿÿ»"   ë 3ÀëµÌÌÌ@SHì0MØMÉuHÉuHÒu 3Àë?HÉtHÒtMÉuD	ëèMÀu,Dè¬ÿÿ»   Hd$  E3ÉE3À3Ò3Éè£«ÿÿÃHÄ0[ÃLÑLÂIùÿuAIÿÃAIÿÂÀt,Ièuêë$AIÿÃAIÿÂÀtIètIéuäMÉuE
MÀfÿÿÿIùÿuDDÿA@PëÆ è¬ÿÿ»"   émÿÿÿÌÌÌ@SHì0HÉt
HÒtMÀu,Dè×«ÿÿ»   Hd$  E3ÉE3À3Ò3ÉèëªÿÿÃHÄ0[ÃLÉA IÿÀAIÿÁÀtHêuêHÒuè«ÿÿ»"   ëµ3ÀëÊÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌff     H+ÑLÊöÁtB	:ÂuVHÿÁÀtWH÷Á   uæI» J	fâÿfúøwËHJ	H;Âu¿Iºÿþþþþþþ~LÒHðÿHÁI3ÂIÃtÇëHÀHØÿÃ3ÀÃfffÒt'öt#HÁêÒtötHÁêÒtötÁêÒtöu3ÀÃHÀHØÿÃÌÌÌÌÌÌff     H+ÑIør"öÁtf:
u,HÿÁIÿÈöÁuîMÈIÁéuMÀt:
uHÿÁIÿÈuñH3ÀÃÀØÿÃIÁét7HH;
u[HAH;D
uLHAH;D
u=HAH;D
u.HÁ IÿÉuÍIàMÈIÁétHH;
uHÁIÿÉuîIàëHÁHÁHÁHHÈHÉH;ÁÀØÿÃÌH\$WHì HcÙAøHT$8Ëèø
  Høÿuè¹©ÿÿÇ 	   HÈÿëWT$8LD$<DÏHÈÿ@\  D$8øÿuÿùZ  Àt	Èè¾©ÿÿëÉHËHÃH­  HÁøáHÂHkÉXdýHD$8H\$0HÄ _ÃÌÌÌH\$Ht$L$WATAUAVAWHì0EàLêHcÙûþuè:©ÿÿ3ÿ8è©ÿÿÇ 	   HÈÿéÙ   3ÿ;ß¥   ;ò¬     HóLóIÁþL=ó¬  æHköXK÷¾L0áu,èá¨ÿÿ8èº¨ÿÿÇ 	   H|$ E3ÉE3À3Ò3ÉèÐ§ÿÿHÈÿëqËèK
  K÷öD0tEÄIÕËèþÿÿHøëèp¨ÿÿÇ 	   è¨ÿÿ8HÏÿËè¸
  HÇë*èn¨ÿÿ8èG¨ÿÿÇ 	   H|$ E3ÉE3À3Ò3Éè]§ÿÿHÈÿH\$hHt$pHÄ0A_A^A]A\_ÃÌ@SHì ÿà  HÙ¹   è¨ÿÿHCHÀt
KÇC$   ëKHC ÇC$   HCHCc HHÄ [ÃÌH\$Hl$VWATAUAVHì@AèLêLñè(¿ÿÿ3ÛHøH9ª  Ð   H
ßm  ÿiY  HðHÀ  H¶m  HÈÿEX  HÀs  HÈèÔ¾ÿÿHm  HÎHCª  ÿX  HÈèµ¾ÿÿHNm  HÎH,ª  ÿþW  HÈè¾ÿÿHm  HÎHª  ÿßW  HÈèw¾ÿÿLØH
ª  HÀt!HÉl  HÎÿ¸W  HÈèP¾ÿÿHá©  ëHØ©  ëHÏ©  LÐ©  H;ÇtcL;ßt^HÈè2¾ÿÿH
·©  Hðè#¾ÿÿLàHöt?HÀt:ÿÖHÀt-H$   A¹   LD$0HL$ AQõHÈAÿÔÀtöD$8uºíë>H
I©  H;Ït2èË½ÿÿHÀt(ÿÐHØHÀtH
1©  H;Ïtè«½ÿÿHÀtHËÿÐHØH
©  è½ÿÿHÀtDÍMÅIÖHËÿÐë3ÀH\$pHl$xHÄ@A^A]A\_^ÃHì8Éx ù~
ùuø  ë1ð  
ê  ë#è¥ÿÿHd$  E3ÉE3À3Ò3ÉÇ    è°¤ÿÿÈÿHÄ8ÃHì8HÉu&èj¥ÿÿHd$  E3ÉE3À3Ò3ÉÇ    è¤ÿÿHÈÿëLÁH
'¨  3ÒÿçW  HÄ8ÃÌÌ¹   é¶ÿÿÌÌHì¨  ön  t
¹
   èÂÿÿèõÉÿÿHÀt
¹   èòÉÿÿöG  t_H$Ð   ÿGV  HL$03ÒA¸   èEÿÿH$¨  3ÉHD$@HD$0ÇD$0  @HD$ H$Ð   HD$(ÿáU  HL$ ÿÎU  ¹   èhÿÿÌÌÌÌHÄHXHhHpHx ATAUAVHìPLòHÑHHÈEáMèèFÿÿMítMu Möu*è;¤ÿÿHd$  E3ÉE3À3Ò3ÉÇ    èP£ÿÿ|$H éé  EätAü|ËAü$ÅA.LD$03ÿI^A¸  ~LD$0@¶Íº   è¾¾ÿÿLD$0ëI@  @¶Í·HàÀt@+HÿÃë¾´$   @ý-uÎë@ý+u@+HÿÃEäS  AüI  Aü$?  Eäu(@ý0tA¼
   ë8;xt
;XtA¼   ë&A¼   ëAüu@ý0u;xt;Xu@kHÃM@  3ÒÈÿA÷ôDÈ@¶ÍE·JAöÀt	@¾Íé0ëA÷À  t,E@¾Í<wé ÁÉA;ÌsÎA;ùr"u;ÊvÎMíuHÿË@öÆuMíIEÞ3ÿëYA¯üù@+HÿÃë½ÿÿÿ@öÆu@öÆu:Æàtÿ   wÀu';ýv#è¢ÿÿÇ "   @öÆtÏÿë
@Æ$öØÿ÷ßýMítI] @öÆt÷ß|$H tHL$@¡È   ýÇëMítMu @8|$HtHD$@ È   ý3ÀL\$PI[ Ik(Is0I{8IãA^A]A\ÃÌÌHì83ÀEÈLÂD$ HÑ9   u	H
2  ë3ÉèQýÿÿHÄ8ÃH\$WHì HcùÏèì  HøÿtYHÃ¥  ¹   ÿu	@¸¸   u
;ùuö@`tè½  ¹   HØè°  H;ÃtÏè¤  HÈÿT  Àu
ÿÍR  Øë3ÛÏèØ  LßHÏHÁùAãHS¥  HÊMkÛXBÆD ÛtËèb¡ÿÿÈÿë3ÀH\$0HÄ _ÃH\$Ht$ L$WATAUHì0HcÙûþuè¡ÿÿ3ÿ8èã ÿÿÇ 	   ÈÿéÉ   3ÿ;ß   ;Å¤     HóLãIÁüL-Æ¤  æHköXKDå ¾L0áu+è³ ÿÿ8è ÿÿÇ 	   H|$ E3ÉE3À3Ò3Éè¢ÿÿÈÿëaËè  KDå öD0tËèþÿÿøëèI ÿÿÇ 	   ÏÿËè  Çë)èP ÿÿ8è) ÿÿÇ 	   H|$ E3ÉE3À3Ò3Éè?ÿÿÈÿH\$`Ht$hHÄ0A]A\_Ã@SHì öAHÙt"öAtHIèb¢ÿÿc÷ûÿÿ3ÀHHCCHÄ [ÃÌHìhH
  H3ÄHD$P=   fL$@tfH
È  HùþuèÑ  H
¶  Hùÿ¹   Hd$  LL$DHT$@A¸   ÿ0R  À   =­     ÿµP  øxu}%   ÿûQ  Hd$8 Hd$0 ÈHD$HLD$@A¹   3ÒÇD$(   HD$ ÿQ  H
)  Hùÿt0Hd$  LL$DHT$HDÀÿQ  ÀtfD$@ëÇ!     ëí¸ÿÿ  HL$PH3ÌèÿÿHÄhÃH\$Hl$Ht$WHìP3íIðHúHÙH;ÕtL;Åt
@8*uH;Ítf)3ÀH\$`Hl$hHt$pHÄP_ÃHL$0IÑèJÿÿL\$0A9ku%H;Ýt¶f@8l$HtHD$@ È   ý¸   ë®¶HT$0èÎÿÿ;Å   HL$0D  Aù~0A;ñ|+IÅH;ÝÀLÇº	   D$(H\$ ÿTP  HL$0;ÅuHc  H;ðr(@8ot"  @8l$H4ÿÿÿHL$@¡È   ýé#ÿÿÿèÿÿÇ *   @8l$HtHD$@ È   ýÈÿéýþÿÿÅA¹   H;ÝÀAQLÇD$(HD$0H\$ HÿÅO  ;Åÿÿÿë¤ÌÌÌE3ÉéþÿÿÌÌÌÌÌÌÌÌH\$Hl$Ht$WHì HÚÉxi;
¡  saHcùH-¡  H÷çHÁþHkÿXHDõ H<ÿu==J  u'Ététùu¹ôÿÿÿë¹õÿÿÿë¹öÿÿÿÿO  HDõ H3ÀëèÿÿÇ 	   è´ÿÿ  ÈÿH\$0Hl$8Ht$@HÄ _ÃÌH\$Hl$WHì Éxs;
_   skHcÙH-k   HûãHÁÿHkÛXHDý öDtGH<ÿt@=  u)Ététùu¹ôÿÿÿë¹õÿÿÿë¹öÿÿÿ3ÒÿØN  HDý Hÿ3ÀëèíÿÿÇ 	   èÿÿ  ÈÿH\$0Hl$8HÄ _ÃHì8ùþuèÞÿÿ  è¶ÿÿÇ 	   ë]Éx1;
¤  s)HcÑH
°  HÂâHÁøHkÒXHÁöDtHë,èÿÿ  èlÿÿHd$  E3ÉE3À3Ò3ÉÇ 	   èÿÿHÈÿHÄ8ÃHÄHXHpHxL` AUHì HcÙLãIÁüL-6  ãHkÛXKtå ¿   |3 u3O	èJ¢ÿÿ|3 uHL3º   èoÂÿÿ÷ØÒ#úÿD3¹
   è¡ÿÿÿtKLå HLÿK  ÇH\$0Ht$8H|$@Ld$HHÄ A]ÃÌÌHcÑH
®  HÂâHÁøHkÒXHÁHLHÿ%HK  H\$H|$Ld$AUAVAWHì@IÌÿEìE3öAL$è¯ ÿÿÀuAÄéÉ  ¹   è¡ÿÿ3ÿ|$$H?  ÿ@  LcÿJøHÛ   H\$0JøH   H;ØÍ   öCª   { u;¹
   è(¡ÿÿ{ u HKº   èOÁÿÿÀuDpDt$(ëÿC¹
   è÷ÿÿEöu HKÿdJ  öCtHKÿ\J  ëHIÌÿEöu?ÆCL#L  K+øH¸£.ºè¢.H÷ëLêIÁýIÅHÁè?LèÇÁàDèDl$ ëHÃXH\$0IÌÿHF  é ÿÿÿE;ì   ÿÇ|$$H+  éçþÿÿºX   JÈèõÿÿHD$0HÀttHc×L  IÐâ   IÐHÁ   H;ÁsÆ@ L Æ@	
` HÀXHD$0ëÖÁç|$ HcÏHÁHÁøáHkÉXIÀÆDÏèHýÿÿÀADüDï|$ ¹   èÅÿÿAÅH\$`H|$hLd$pHÄ@A_A^A]ÃHì8H©|  H3ÄHD$(LD$ A¹   º  ÆD$& ÿÎJ  ÀuÈÿë
HL$ è  HL$(H3Ìèæ{ÿÿHÄ8ÃÌ@USVWATAUAVAWHì   Hl$@H@|  H3ÅHE0Lµ°   E!3ÿIØH÷} LMDêDùH];Ê  HUÿ4I  ;Ç   }   HUAÍÿI  ;Ç   }uzÇE    Aüÿt`Aüÿ©   HcÏH¸ðÿÿÿÿÿÿH;È   HL	Hù   wlHAH;Áw
H¸ðÿÿÿÿÿÿHàðèÏ8  H+àH\$@HÛt<ÇÌÌ  ëNHËè¢ÇÿÿxëEÌLÃº   AÏ|$(H|$ ÿhI  øÀoÿÿÿ3Àé7  èVÊÿÿHØHÀtÇ ÝÝ  HÃë3ÛHÛtÙLcÇ3ÒHËMÀètÿÿLEEÌº   AÏ|$(H\$ ÿ	I  E3ÿA;ÇÉ   M;÷t;¸   L|$8L|$0D$(DÏLÃ3ÒAÍLt$ ÿfH  A;Ç   Iöé   D9} u,L|$8L|$0DÏLÃ3ÒAÍD|$(L|$ ÿ*H  øA;ÇtWHc×¹   èòÿÿHðI;ÇtBL|$8L|$0DÏLÃ3ÒAÍ|$(HD$ ÿêG  A;Çu
HÎèMÿÿI÷ëAüÿtHMHKð9ÝÝ  uè+ÿÿHÆHM0H3ÍèlyÿÿHeHA_A^A]A\_^[]ÃÌÌÌ3ÒDB
éyóÿÿÌLÑMÀt<E¶
IÿÂAA¿øwAÁ ¶
HÿÂA¿øwÁ Ièt
EÉtD;ÉtËD+ÉAÁÃ3ÀÃÌHÄHXHhHpWHìPIøHòHéMÀÔ   HHØIÑèòxÿÿHíu=èðÿÿHd$  E3ÉE3À3Ò3ÉÇ    èÿÿ|$H tHD$@ È   ý¸ÿÿÿé   Höt¾HÿÿÿÿwµHD$0x u#LÇHÖHÍèÿÿÿ|$H tZHL$@¡È   ýëL¶M HT$0è  ¶HT$0ØHÿÅèð  HÿÆHïtÛt;ØtÏ+Ø|$H tHL$@¡È   ýÃë3ÀH\$`Hl$hHt$pHÄP_ÃÌÌÌHì8=E   uAHÉu'èÿÿHd$  E3ÉE3À3Ò3ÉÇ    èÿÿ¸ÿÿÿëHÒtÔIøÿÿÿwËèXþÿÿëE3ÉèþÿÿHÄ8ÃÌHìHHd$0 d$( A¸   H
PZ  E3Éº   @DD$ ÿmF  H¶  HÄHÃÌHì(H
¥  HùÿtHùþtÿF  H
  HùÿtHùþtÿF  HÄ(ÃÌH\$Ht$WHì =V   H  HñtmHÛuH9  t_è+  ÀuVHü  HÛtJHötEHÎèÃÿÿHøHHÉt2èzÃÿÿH;ÇvH<9=uLÇHÖèÝ  ÀtHÃëÐHHD8ë3ÀH\$0Ht$8HÄ _ÃÌÌÌH\$Ht$H|$ATHì0IðHÚHù¹   èÄÿÿ3ÀHÿÀÀu&èfÿÿ»   Hd$  E3ÉE3À3Ò3Éèzÿÿé¶   H' HÛtH# 3ÀHöÀÀu#è'ÿÿ»   Hd$  E3ÉE3À3Ò3Éè;ÿÿëzHÎè½þÿÿHðHÀu3ÛëfHÈèÂÿÿº   L$IÌèønÿÿHHÀuèÏÿÿÇ    èÄÿÿë1LÆIÔHÈè¾åÿÿÀtHd$  E3ÉE3À3Ò3Éè¡ÿÿHÛtL#3Û¹   èÑÿÿÃH\$@Ht$HH|$PHÄ0A\ÃÌHl$WHìpHcùHL$PèMuÿÿÿ   sbHT$Pº  ~LD$Pº   Ïè¬ÿÿHT$PëH@  ·xàÀtHH  ¶8éè   |$h tHD$` È   ýÇéá   HD$P¸  ~6ïHT$PÁý@¶Íè¶ÀÿÿÀt@¬$   @¼$   Æ$    º   ë è¢ÿÿº   Ç *   @¼$   Æ$    HL$PÇD$@   L$   AA¸   D$8H$   ÇD$0   HD$(T$ QHL$PèCÙÿÿÀ2ÿÿÿø¶$   t
¶$   ÁàÁ|$h tHL$`¡È   ýH¬$   HÄp_ÃHÄHXHhHpWHì`HñHúHHØIÑIéIØèÈsÿÿHÛu8\$XtHD$P È   ý3Àé¯   Höu:è¨ÿÿHd$  E3ÉE3À3Ò3ÉÇ    è½ÿÿ|$X tHD$P È   ý¸ÿÿÿëpHÿtÁHûÿÿÿw¸HL$Hy uLÍLÃH×HÎèÁ  ë1AQHL$@D$8\$0LÎA¸  H|$(\$ è	  ÀtÀþ|$X tHL$P¡È   ýL\$`I[IkIs Iã_ÃÌE3ÉéèþÿÿH\$Hl$WHì@Hd$P HÐ  HHÀª   ÍÿHd$8 Hd$0 d$( Hd$  DÍLÀ3Ò3Éÿª@  HcøÀ   HÏº   ènÿÿHD$PHÀtzHd$8 Hd$0 LDÍ3Ò3É|$(HD$ ÿc@  ÀtGHL$P3ÒèË  ÀyHL$PHÉtè°ÿÿHd$P HÃHHÀYÿÿÿ3ÀH\$XHl$`HÄ@_ÃHL$Pè~ÿÿÅëâÌÌ@USVWATAUAVAWHìhHl$0H+r  H3ÅHE(H½¨   DÒU ­  A»   3ÛMùDELñH}Ecÿ;ÓuOLJ  EÌ3Ò3ÉDd$(LD$ ÿm@  ;Ãt
AÔE\$ëÿÙ>  W  A»   øxADÓDU @  D    D;Ë~YAÉIÇA+ÌÎÿ8t	IÄ;ËuïÎÆ+ÁDÈD    D°   D;Ã~5AÈHÇA+Ì8t	IÄ;ËuòÎÆ+ÁDÀD°   ëÎÿD;Î}Æ3Àé¥  D;Æ|ôA;Ó¯  ;Ó§  A;ÔuÞD­¸   D;ëuIDiD;Ët	D;Ã«   E;ÈuAÃé\  E;Ä~AÄéO  E;Ì~
¸   é@  HUAÍÿî=  ;ÃtD    D;Ë~2}rÓ8]HEtÊ8XtÅA:r:HvHÀ8ëå¸   éñ  9°   ~+}r8]HEt8Xzÿÿÿ:r:HvËHÀ8ëâMÇº	   AÍ\$(H\$ ÿW>  LcðD;óìþÿÿI¸ðÿÿÿÿÿÿ~d3ÒHBàI÷öHørUKL6Hù   w.HAH;ÁwIÀHàðè5-  H+àHt$0H;óþÿÿÇÌÌ  ëèó¾ÿÿHðH;ÃtÇ ÝÝ  HÆëHóH;ópþÿÿD    MÇAÔAÍDt$(Ht$ ÿ¯=  ;Ãô   D°   LÇº	   AÍ\$(H\$ ÿ=  LcàD;ãÇ   ~g3ÒHBàI÷ôHørXKL$Hù   w1HAH;Áw
H¸ðÿÿÿÿÿÿHàðèg,  H+àH|$0H;ûtÇÌÌ  ëè)¾ÿÿHøH;ÃtÇ ÝÝ  HÇëHûH;ûtVD°   LEº   AÍDd$(H|$ ÿæ<  ;ÃtUM EÎLÆDd$(H|$ ÿ6=  ØHOð9ÝÝ  uè»ÿÿHNð9ÝÝ  uèªÿÿÃéè   HûLëD;ÓuIDPDU D¥¸   D;ãuID`AÊèñÿÿDð;Æ ýÿÿA;ÄteL    MÇÐAÌ\$(H\$ èµñÿÿHøH;ÃÒüÿÿLEL°   AÖAÌ\$(H\$ èñÿÿLèH;Ãu
HÏè
ÿÿéüÿÿLÿLÀëLE°   D    UM D$(LD$ MÇÿ4<  ðH;ûtHÏèÅÿÿIÍè½ÿÿÆHM(H3ÍèÿlÿÿHe8A_A^A]A\_^[]ÃÌÌH\$Ht$WHì`òHÑHL$@IÙAøèèlÿÿD$¨   $    HL$@D\$8D$0H$   HD$($   LËDÇÖD$ è¾úÿÿ|$X tHL$P¡È   ýH\$pHt$xHÄ`_ÃÌÌÌH\$Ht$WHì`HñHúHL$@IÑIØè[lÿÿHÛu8\$XtHD$P È   ý3ÀéÂ   Höu=è;ÿÿHd$  E3ÉE3À3Ò3ÉÇ    èPÿÿ|$X tHD$P È   ý¸ÿÿÿé   Hÿt¾HûÿÿÿwµHD$@PÒuLL$@LÃH×HÎèªòÿÿë>@HL$@LÎD$8\$0A¸  H|$(\$ èþÿÿÀuè¤ÿÿÇ    éyÿÿÿÀþ|$X tHL$P¡È   ýH\$pHt$xHÄ`_ÃÌÌÌH\$T$UVWATAUAVAWHì0E3íêLñAÝI;Íu$èCÿÿE3ÉE3À3Ò3ÉLl$ Ç    èYÿÿéê   L!M;åÓ   º=   IÌè³  HøHD$pI;Åµ   L;à¬   D8hH5Þ|  EýAÇH;5Ø|  upHîAÅI;õuIõëUHÆÿÀL9.uõÿÀº   HcÈè ÿÿHøHðI;Åu¹	   è'mÿÿëHÈèÍ  HHÇHÅHE I;ÅuäL/H|$pl$xH5^|  I;õ   A;ít9L9-Y|  t0èf÷ÿÿA;Åtjè@ÿÿÇ    ÈÿH$   HÄ0A_A^A]A\_^]ÃE;ýt3Àëß¹   èÿÿHý{  I;ÅtÆL(L9-þ{  u¹   èrÿÿHë{  I;Åt¤L(H5Ì{  HîI;õtHÇHþA+ÄLcèHÉt?HÑMÅIÌè¿öÿÿÀuHA| =¢   A8\    HÇHHÉuÈH5r{  H+þHÁÿ÷ßE3íA;ý   L9m    Hc÷HLõ èÖÿÿE;ýtfL9lõ tHLõHÿÇHÁHDõ HÿÆL9lõ uèHc×H¸ÿÿÿÿÿÿÿH;Ð   H
 {  A¸   èýÿÿI;Åt|ësH5çz  H+þHÁÿérÿÿÿLdõ M.ë]E;ý   A;ý}÷ßG;ÇþÿÿLcÀH¸ÿÿÿÿÿÿÿL;Ànþÿÿº   HÎèÿÿI;ÅXþÿÿHcÏL$ÈLlÈM.Htz  D9l$x   IÌèµÿÿº   HHèOÿÿHøI;ÅtlIÌèã´ÿÿMÄHÏHPèHØÿÿA;ÅtE3ÉE3À3Ò3ÉLl$ è+ÿÿH×HÏI+ÔHT$pD*HÿÂE;ýIEÕÿú6  A;ÅuËÿèõÿÿÇ *   HÏèoÿÿE;ýtIÌèbÿÿM.ÃéýÿÿIÌèPÿÿM.é¦ýÿÿH\$Ht$WHì0HÙHÉtFè<´ÿÿHðHHè·ÿÿHøHÀt-HVLÃHÈè×ÿÿÀtHd$  E3ÉE3À3Ò3ÉèpÿÿHÇë3ÀH\$@Ht$HHÄ0_ÃÌH\$Ht$WHìPHÙúHL$0IÐè'gÿÿ3öH;ÞuDè#ÿÿE3ÉE3À3Ò3ÉHt$ Ç    è9ÿÿ@8t$HtHD$@ È   ý3ÀH\$`Ht$hHÄP_ÃHT$89ru×HËè   @8t$HtÕHL$@¡È   ýëÇ¶f;Ît3¶ÁöDtHÿÃ@83t¶·ÉÁáÈ;ùu
HCÿë¼·Á;øtHÿÃëÅ·Á;ølÿÿÿ@8t$HtHD$@ È   ýHÃéfÿÿÿÌÌE3Àé ÿÿÿë:Ât
HÿÁÀuó:ÂuHÁÃ3ÀÃÿ%03  ÿ%3  ÿ%3  Hì8HÉu&èÿÿHd$  E3ÉE3À3Ò3ÉÇ    è+ÿÿHÈÿë9 tÕHÒtÐHHÀtÈ8 tÃE3Àè  HÄ8ÃÌHT$L$SUVWATAUAVAWHìXA¼þÿÿÿHcÁAØDd$4\$8A;Äuè¸ÿÿ3ÿ8èÿÿÇ 	   é  3ÿ;Çï  ;t  ã  HðLðL
ùAÿÿIÁþæKñC HköXD1¨·  ûÿÿÿvèUÿÿ8è.ÿÿÇ    éª  ï;ß  ¨  H;×tÒD|18A¸   EÿAÐÿA¾ÏétéuÃ÷Ð¨t«ãþLêëdÃ÷Ð¨tÑëA;ØABØËèMÿÿLèH;Çuè¸ÿÿÇ    èÍÿÿÇ    é=  $    3ÒDBè°ÖÿÿL
!AÿÿLØKñC L\0@KñC IÕA¸
   öD0H   L0	A:È   ;ß   AM KñC AÊÿAÚIUAh÷DD0	D:ÿtbKñC L09A:ÈtQ;ßtM
KñC AÚHÿÂAhøDD09Aÿu.KñC L0:A:Èt;ßt
KñC HÿÂAhùAÚDD0:KñC LL$0DÃH1H|$ ÿ¢2  ;ÇÏ  HcT$0;×Â  ÃH;Ð·  L@ÿÿêKðC öD0y  Aÿ¸  ;×tA} 
uL0ëd0ûHcÅIÝMåIÅHD$@L;è:  ½
   A$<
  @:Åt
HÿÃIÿÄéë   HD$@HÿÈL;àsID$8
u	IÄé   Làé½   KðC LL$0H$°   H1A¸   IÿÄH|$ ÿ³1  ;Çu
ÿ0  ;Çu{9|$0tuL0?ÿÿKðC öD0Ht"¼$°   
t'@+KðC $°   D1	ëGI;Ýu¼$°   
uÆ
ë3$    A¸   HÊÿè]Ôÿÿ¼$°   
LÆ>ÿÿtëL»>ÿÿ@+HÿÃL;d$@ìþÿÿëKðC öD0@uL0ë	A$HÿÃëA+íAÿð  ;ïè  A¿   I+ßöuIßé²   A×ëúI;ÝrI+ßA×¶B8¼ 4 tã¶B¾4 ;Çuè}ÿÿÇ *   AÌÿé  ÿÀ;ÂuHcÂHØë^KðC öD0Ht;IßúL0	|KðC IßD19úuKðC IßD1:HcÂH+Øë$    ÷ÚEÇHcÒè2ÓÿÿD$8L¼$¨   A+ÝÑèDËMÅD$(3Ò¹éý  L|$ ÿe/  è;ÇuÿI.  Èè}ÿÿAÌÿéä  Dd$4;ÃHS=ÿÿJðC @Çí|0Hé¿  ;×º
   tfA9U uL0ëd0ûHcÅIÝMåN<(M;ï{  ½
   A·$føE  f;ÅtfHÃIÄé%  IGþL;àsID$f9u	IÄéÂ   Làéú   KðC LL$0H$¸   H1A¸   IÄH|$ ÿ÷.  ;Çuÿ]-  ;Ç®   9|$0¤   Ll<ÿÿKðC öD0HtFº
   f9$¸   tKf+$¸   KðC D1	$¹   KðC D19KðC T0:ëWI;Ýuº
   f9$¸   ufë>$    HÇÂþÿÿÿDBèoÑÿÿº
   LÛ;ÿÿf9$¸   tëº
   LÃ;ÿÿf+HÃM;ç®þÿÿë"KðC öD0@uL0ëA·$fHÃëA+íDd$4L¼$¨   M;ïtIÍè`}ÿÿAüþDDåAÄëiÿ5,  øuè»zÿÿÇ 	   èÐzÿÿÇ    éýÿÿømuDçë®ÈèÔzÿÿéýÿÿ3Àë)è¦zÿÿ8èzÿÿÇ 	   E3ÉE3À3Ò3ÉH|$ èyÿÿÈÿHÄXA_A^A]A\_^][ÃÌH\$Ht$L$WATAUAVAWHì0AðLêHcùÿþuèBzÿÿ3ÛèzÿÿÇ 	   Èÿé  3Û;ûâ   ;=û}  Ö   LçL÷IÁþL=ü}  AäMkäXK÷B¾L áu.èèyÿÿèÁyÿÿÇ 	   H\$ E3ÉE3À3Ò3Éè×xÿÿÈÿé©   ÃAøÿÿÿÀ;Ãu+èªyÿÿèyÿÿÇ    H\$ E3ÉE3À3Ò3ÉèxÿÿÈÿënÏèÞÿÿK÷BöD tDÆIÕÏès÷ÿÿØëè:yÿÿÇ 	   èOyÿÿËÿÏèÞÿÿÃë)è:yÿÿèyÿÿÇ 	   H\$ E3ÉE3À3Ò3Éè)xÿÿÈÿH\$hHt$pHÄ0A_A^A]A\_ÃÌÌHÄHXL@HHUVWATAUAVAWHì   3ÿA´AñHÚÇ@¨   ox@¼$Ø   Hx°EÌtx¸A¶ël$pD÷HL$Tè©  ;ÇtE3ÉE3À3Ò3ÉH|$ èivÿÿºær÷Æ @ u
|$T   tE
ôÎA¸   ¸   ÀA#Èº   ;ÏtT+Ít:;Ít1è@xÿÿ8ÿèxÿÿ»   E3ÉE3À3Ò3ÉH|$ è+wÿÿÃéû  Døë@öÆt÷Æ   uíA¿   @ëDú$à   A¼   ét,ét#ététù@uD;úÏÁëAÈëAÌëÍëÏÆº   L$H#ÂtF=   t8=   t*=   t=   t*=   t&=   t;Âté/ÿÿÿAìë½   ë
½   ëAèºæA½   Dl$Psm  öÐ"$è   ¨AEDDèDl$P@öÆ@tAºíAºïÉDl$PL$Hºæs
AºíDl$P@öÆ tAºíë@öÆt
AºíDl$PèIÜÿÿøÿu!èÕvÿÿ8ÿè«vÿÿÇ    è vÿÿ é   H$À   DD$HH$Ð   H|$0LL$`A×Dl$(Ç    l$ ÿB)  HD$XHøÿ   ¹   ÀAÇ#Á;ÁuC¸   @ðt9DD$HH$Ð   H|$0Aº÷LL$`Dl$(A×l$ ÿí(  HD$XHøÿu;HcL-z  HÁáHÁøHkÉXIDÅ dþÿJ'  ÈèvÿÿèÎuÿÿ8éÌ  HÈÿÖ&  ;ÇuMHcL-Èy  HÁáHÁøHkÉXIDÅ dþÿ'  ÈØèÉuÿÿHL$Xÿ6(  ;ßu§èuuÿÿÇ 
   ëA;ÄuAÎ@ë	øuAÎHT$Xè%ØÿÿHcL-[y  HÁáº   HÁøD
òIDÅ HkÉXDtHcHÁáHÁøHkÉXIDÅ d8AÆ$HD$L   EöÂ  AôtxEÄÊÿè¦	  D$Døÿuèðtÿÿ8   tPèõÒÿÿééþÿÿHT$@A¸   @|$@èÕòÿÿ;Çu|$@uHcT$Dè¾  øÿtÁE3À3ÒèE	  øÿt°º   Eö<  ¹ @ ñuD$T#ÁuºîëðÆ#Á= @  tJ=   t,= @ t%=   t+= @ t$=   t= @ u($Ø   ë¹  Æ#Á;ÁuD¤$Ø   ë@¼$Ø   ÷Æ   º  |$DAöÆ@¬  AÇ%   À=   @$  =   t|=   À  ;ï  A;ìvýv8ýl  ¾$Ø   A¸   ïA+È   A;ÈP  ÇD$Dÿþ  é  EÄ3ÒèÉÿÿH;ÇtÀE3À3ÒènÉÿÿHøÿ|þÿÿHT$DA¸   èbñÿÿøÿaþÿÿA;Ät øuk|$Dï»¿ uD@þD$Ø   éÜ   ·D$D=þÿ  uè%Ñÿÿèìrÿÿ»   ûéã  =ÿþ  u#E3ÀAÔè  øÿùýÿÿD¤$Ø   é   E3À3Òèp  øÿë;;ïvqA;ìüþÿÿýêþÿÿEÄ3Òè¡ÈÿÿH;ÇÞþÿÿE3À3ÒèÈÿÿHøÿu8éýÿÿÇD$Dï»¿ A¼   HcÅEÄHTDD+ÅèN°ÿÿøÿmýÿÿèD;åÛA¸   Hc@¬$Ø   HÁá@åHÁøHkÉXIDÅ d8@l8HcHÂâHÁøHkÒXILÅ Æd8ÁèÀàD8@8|$Lu!@öÆtHcHÁáHÁøHkÉXIDÅ L AÇ%   À=   À   Að   HL$Xÿ>$  D$PDD$HH$Ð   H|$0D$(Aº÷LL$`ÇD$    A×ÿ1$  Høÿu6ÿµ"  Èè~qÿÿLcIÃAãHÁøMkÛXIDÅ Bdþè¢ÔÿÿéBûÿÿHcHÊâHÁùHkÒXILÍ H
ÇH$È   HÄ   A_A^A]A\_^]ÃÌÌHÄPL@LH VWHìXHØÿ`Ü E3ÀHÉAÀEÀu(è¬pÿÿÇ    Hd$  E3ÉE3À3Ò3ÉèÁoÿÿÈÿé   H$   HÀD@ød$0 DD$(ÇD$ @   DÊLÁHT$@HL$Dèv÷ÿÿðD$H|$D t9Àt(Hc|$@HÏHÇHÁøLCt  áHkÉXIÀdþë|$@ÏènÕÿÿë|$@ötèÿoÿÿ0ÈÿëÇHÄX_^ÃÌÌÌ@SHì0MÐHÂHÙHÉu&èÓoÿÿHd$  E3ÉE3À3Ò3ÉÇ    èènÿÿHÈÿëUHÀtÕHL$ LL$XLD$@IÒHÈèÏ  øÿtÖLL$XLD$@HÓ¹   èç  HL$@HØèòqÿÿHL$XèèqÿÿHÃHÄ0[ÃÌÌÌH\$LD$UVWATAUAVAWHì0E3öMàLêHéHñI;Îu(è"oÿÿE3ÉE3À3Ò3ÉLt$ Ç    è8nÿÿHÈÿé  D81tÓI;ÖtÎHI;ÆtÆD80tÁº\   èv  º/   HÍHøèf  A¿   I;Æ   I;þ    AW9HÍèRìÿÿHøI;Æ   HÍè.ÿÿI×HXHËè{oÿÿHðI;ÆsÿÿÿLL5  HÓHÈèuÂÿÿA;ÆtE3ÉE3À3Ò3ÉLt$ èXlÿÿLÅHÓHÎèêÀÿÿA;ÆtE3ÉE3À3Ò3ÉLt$ è1lÿÿH~ë
I;þtH;ÇvHøHËÿHÏS/è
  HÎI;Æt&3Òè  A;Æ÷   MÄIÕHÎèõýÿÿHØéá   èlÿÿI×L`IÌè¹nÿÿHøI;ÆÎ   LÆIÔHÈè·ÁÿÿA;ÆtE3ÉE3À3Ò3ÉLt$ èkÿÿHÎè"ÿÿL4èmÿÿM+æD8I<L%0c  HD$pM$HÐIÎèhÁÿÿÀtHd$  E3ÉE3À3Ò3ÉèKkÿÿ3ÒHÏèQ  ÀtHÖb  IìL;àHD$p}µëèmÿÿL$   IÕHÏD8èýÿÿHØHÏèoÿÿH;õtHÎèsoÿÿHÃH\$xHÄ0A_A^A]A\_^]ÃÌÌÌHÄHXHhHpHx ATAUAWHì Hê3ÿ3ÒDGñèÁÂÿÿLèHøÿtPDG3ÒÎè«ÂÿÿHøÿt=HÝH+ØH;ßÁ   ÿ  A¿   WHÈMÇÿÛ  HèH;Çu1èNlÿÿÇ    èClÿÿ H\$@Hl$HHt$PH|$XHÄ A_A]A\Ãº   Îèv  DàDÃI;ßHÕEMÇÎè¯¢ÿÿøÿtHH+ØH;ß~ëÛè	lÿÿ8uèßkÿÿÇ 
   HÏÿAÔÎè+  ÿÕ  LÅHÈ3Òÿ/  ëU}]E3ÀHÕÎèÆÁÿÿHøÿTÿÿÿÎèÉÏÿÿHÈÿ  ÷ØHÿH÷ßHÿÏHÿÿu%èvkÿÿÇ 
   èkÿÿHØÿÒ  HÿÿÿÿÿE3ÀIÕÎèiÁÿÿHøÿ÷þÿÿ3Àé÷þÿÿH\$Ht$WHì HcÙAøòËèNÏÿÿHøÿuèkÿÿÇ 	   ÈÿëRDÏE3ÀÖHÈÿ  øøÿuÿV  ë3ÀÀt	ÈèkÿÿëÌHËHÃHàn  HÁøáHÂHkÉXdýÇH\$0Ht$8HÄ _ÃÌÌH\$LcÁH©n  MÈAàIÁùMkÀXJËBD8F¶\ÀAã   D¾ÐAÑúú @  tXú   tHú   t(ú   t ú   uHBLJËBd 8BL 8ë0BLJËBd 8BL 8ëBdëBLJËBd8EÛu¸   ëA÷ÚÀ% À   @  H\$ÃÌÌHì8HÉu'èÂiÿÿHd$  E3ÉE3À3Ò3ÉÇ    è×hÿÿ¸   ë
m  3ÀHÄ8ÃÌLL$ HT$SUWATAUAVAWHìà   3ÿéGDgD÷Dï;Ïtùt~A;Ì~;ÈuAµMøë@èbiÿÿ8è;iÿÿE3ÉE3À3Ò3ÉÇ    H|$ èQhÿÿé@  IÿÀA88uøA8xtAÆ  IÿÀA88uæ»h   HL$p3ÒLÃèfFÿÿ\$päl  Lõl  ;ßt/SÿHcÊHÁáHÁøHkÉXIÀ@8|uÿËÿÊ;ßuÜ;ßÃ  ûq  ·  ·Ãº   fÁàLf$²   ·ÉèriÿÿH$¸   H;Ç  ;ßH$¸   LcÛHHIT~WLÇDËL^l  MÐIÀAâHÁøMkÒXMÃAB¨u
IHë@9H
ÿIÿÀHÿÁHÂIéuÁH$¸   LcÛD:ït2A;ÜHHITDLãD;ç~AÄ@9H
ÿHÂHÿÁHèuìA¾   èàgÿÿH$(  E3É8HD$PE3ÀHD$HHD$pI×HD$@H$8  H|$8HD$0Dt$(ÇD$    ÿ$  ØÿÜ  H$¸   Dàèäiÿÿ;ßu
AÌègÿÿërýu3Éè&QÿÿÌ;ïu+HL$PÊÿÿ×  HL$PH$   ÿ¼  Hc¼$   ë	¸   ;èu
HL$Pÿ¶  ëH|$PHL$Xÿ¤  HÇëèâfÿÿÇ    HÈÿHÄà   A_A^A]A\_][ÃÌ@SUVWATAUAVAWHì   HK  H3ÄHD$xHz-  E3öHêHT$hEfMéH·f-  LL$XfBY-  MøB
HHL$`AöDt$0Lt$8Dt$4HÙAüëHÈè×ÿÿHÃ|HI;ÆuèÇº   ÏHD$HègÿÿII;Æu"Mu èfÿÿÇ    è fÿÿÇ    Èÿéé  LD$hHL$83ÒèAÓÿÿA;Ætø   E3ÉE3À3Ò3ÉLt$ èÇcÿÿëtHL$hèKÿÿHL$8A<H|$PI;Îtè3ÿÿøH|$PI;îZ  HE HÝëHÈèÿÿHÃEdHI;ÆuçH[  I;Öu+è¨ÿÿHÐH[  I;ÆuIÎÿèÆgÿÿM7Mu é   Eî³=D82t(HÊ:Ãtè²ÿÿHK[  ElIcÅHA:ÆuÝEõIcÍë/@8qt0y:u*8Yu%AFHcÈHÊèpÿÿH	[  EtIcÎHÊ8tÊAÆHÝA+ÅDàDd$@H9u t'HL$hè9ÿÿHHT$hLÀèõ  ÀtRHÃH93uÙDçAÌº   èheÿÿHL$XHHÀuKIèçfÿÿE3öM7èTdÿÿÇ    èidÿÿÎÿÇ    é	  ÇD$4   ë°Dd$0Mu Dl$0Dt$0ëDd$@H|$`ILMÀuHÿÃë8HT$HHËè¸ÿÿÀtH!t$ E3ÉE3À3Ò3ÉèåaÿÿHèmÿÿÿÀHHØHÇHHÀtVHt$HILÀHËH+ÓHÖèµ·ÿÿÀtHd$  E3ÉE3À3Ò3ÉèaÿÿHè ÿÿHÇHcÈHÙÆ HHÿÃHÀu³t$0L|$XÆCÿ Æ I?Hí  E+õIcÕHÏH|Y  IcÞLÃèá¯ÿÿE3öHûL9u tKAÜLE HÓHÏH+×Iè!·ÿÿA;ÆtE3ÉE3À3Ò3ÉLt$ èaÿÿHM èÿÿHÅÿÀHHøL9u u¸D9t$4   Hc\$PLD$hHÏHÓèÎ¶ÿÿA;ÆtE3ÉE3À3Ò3ÉLt$ è±`ÿÿL:  HÓHÏè?µÿÿA;ÆtE3ÉE3À3Ò3ÉLt$ è`ÿÿHL$8I;Ît'LÁHÓHÏèµÿÿA;ÆtE3ÉE3À3Ò3ÉLt$ èU`ÿÿHûëE3öI;þtI;?uD7HÿÇD7H
cX  I;Îtè©dÿÿHL$8L5MX  I;ÎtèdÿÿÆHL$xH3ÌèÔEÿÿHÄ   A_A^A]A\_^][Ã@SHì0ÚHÉu-èöaÿÿ  èÎaÿÿHd$  »   E3ÉE3À3Ò3Éèâ`ÿÿÃëP÷ÂùÿÿÿuËÿ¸  øÿuÿ  ÈèÎaÿÿèaÿÿ ë'¨u!¨töÃtèaÿÿÇ    èhaÿÿÇ 
   ëÒ3ÀHÄ0[ÃH\$Ht$WHìPHÙòHL$0IÐ3ÿè-EÿÿHÛu6è+aÿÿH!|$ E3ÉE3À3Ò3ÉÇ    èA`ÿÿ@8|$HtHD$@ È   ý3ÀëLD$8A9xuÖHËèQ  @8|$HtcHL$@¡È   ýëU¶HÑBöDt%HÿÃÉtÁâ¶ÁÐ;òuH{ÿëHÿuHûë;ñHDûHÿÃÉuÀ8L$HtHL$@¡È   ýHÇH\$`Ht$hHÄP_ÃÌÌÌE3ÀéÿÿÿH\$Hl$Ht$WHìP3íIðHúHÙL;Åu3Àé  HL$0IÑè DÿÿL\$8A9kuLÆH×HËè÷ËÿÿéE  H;Ýu<è `ÿÿE3ÉE3À3Ò3ÉHl$ Ç    è_ÿÿ@8l$HtHD$@ È   ý¸ÿÿÿé  H;ýt¿¶HÿÎHÿÃBöDtA@8+ufÍëK¶fÁáHÿÃfÈfA;KrfA;KwfAKë)fA;Kr"fA;KwfAKë·ÁBöDt	B¶  ¶HÿÇBöDtA@8/ufÕëK¶fÁâHÿÇfÐfA;SrfA;SwfASë)fA;Sr"fA;SwfASë·ÂBöDt	B¶  f;Ñu*f;Ít	H;õ$ÿÿÿ@8l$H¡þÿÿHD$@ È   ýéþÿÿÀàÿÈ@8l$HtHL$@¡È   ýH\$`Hl$hHt$pHÄP_ÃÌE3Éé4þÿÿLÉE3ÀHÿÁA:ÀuöHÿÉI;Ét8uô8LDÁIÀÃÌÌÌÌÌÌÌÌÌÌÌÌff     HìL$L\$M3ÛLT$L+ÐMBÓeL%   M;ÓsfAâ ðM ðÿÿAÆ M;ÓuðL$L\$HÄÃÌÌ@UHì0HêHM`è:ÿÿHÄ0]Ã@UHì Hê½    t
¹   è dÿÿHÄ ]Ã@UHì HêHHÑè¸ÿÿHÄ ]Ã@UHì Hê¹   èëcÿÿHÄ ]Ã@UHì HêHcM HÁHÚc  HÊèm:ÿÿHÄ ]ÃÌÌÌÌÌÌÌÌÌÌ@UHì Hê¹   è¢cÿÿHÄ ]Ã@UHì HêH
8D  ÿ
  HÄ ]Ã@UHì Hê¹
   èmcÿÿHÄ ]Ã@UHì Hê¹   èTcÿÿHÄ ]Ã@UHì Hê¹
   è;cÿÿHÄ ]ÃÌÌÌÌÌÌÌ@UHì Hê¹   ècÿÿHÄ ]Ã@UHì HêèÛCÿÿHÄ ]ÃÌÌÌÌÌÌÌÌÌÌÌÌÌ@UHì HêH3É8  ÀÁÁÁHÄ ]Ã@UHì0Hê}p t3Éè½bÿÿHÄ0]Ã@UHì HêHE3Û8  ÀAÃAÃHÄ ]Ã@UHì0HêHM@èÓ8ÿÿHÄ0]Ã@UHì0HêMPèÁÿÿHÄ0]Ã@UHì0HêM`èiÁÿÿHÄ0]Ã@UHì Hê¹
   è<bÿÿHÄ ]Ã@UHì Hê¹
   è#bÿÿHÄ ]ÃÌÌÌÌÌÌÌ@UHì Hê¹   èbÿÿHÄ ]Ã@UHì0Hê¹   èêaÿÿHÄ0]Ã@UHì@Hê}D t7}H t'HcU@HÊHÂHÁøL_  áHkÉXIÀdþëU@Êè²ÀÿÿHÄ@]Ã                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ¨     Ä     Ú     ð               0     H     `     t     |               ®     ¼     Î     Þ     ì     þ          *     >     Z     x                º     Î     Þ     ê     ö                    *     :     J     X     f     p               ¢     ®     ¾     æ                2     H     b     x                °     Æ     à     î     þ          $     4     J     Z     l     ~          ¢     ®     ¼     Ì     â     ò               "     4     \     h     x                                          h @   <S @   T_ @   ¨g @                   è« @   L @                           failed to get exit code from process.
  failed to create process.
   %s %s      Could not exec %s       Cannot find Python executable %s
       #!python.exe    #!      Cannot open %s
 -script.py      CorExitProcess  m s c o r e e . d l l   ( n u l l )     (null)                 EEE50 P    ( 8PX 700WP        `h````  xpxxxx              8@   °8@   	

 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ =       runtime error   
      TLOSS error
   SING error
    DOMAIN error
  R6034
An application has made an attempt to load the C runtime library incorrectly.
Please contact the application's support team for more information.
      R6033
- Attempt to use MSIL code from this assembly during native code initialization
This indicates a bug in your application. It is most likely the result of calling an MSIL-compiled (/clr) function from a native constructor or from DllMain.
  R6032
- not enough space for locale information
      R6031
- Attempt to initialize the CRT more than once.
This indicates a bug in your application.
      R6030
- CRT not initialized
  R6028
- unable to initialize heap
    R6027
- not enough space for lowio initialization
    R6026
- not enough space for stdio initialization
    R6025
- pure virtual function call
   R6024
- not enough space for _onexit/atexit table
    R6019
- unable to open console device
        R6018
- unexpected heap error
        R6017
- unexpected multithread lock error
    R6016
- not enough space for thread data
             
This application has requested the Runtime to terminate it in an unusual way.
Please contact the application's support team for more information.
   R6009
- not enough space for environment
     R6008
- not enough space for arguments
       R6002
- floating point support not loaded
    Microsoft Visual C++ Runtime Library    

  ... <program name unknown>  Runtime Error!

Program:          À             À             À             À             À             À             À             À             À             À             EEE  00P  ('8PW  700PP    (   `h`hhhxppwpp                                                                                                                                                                                                                                                                                             ( ( ( ( (                                     H                                                                                                                                                                                                                                                                                                                                                                                     h ( ( ( (                                     H                                                                                                             H                                               ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ 	

 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ 	

 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿHH:mm:ss        dddd, MMMM dd, yyyy     MM/dd/yy    PM  AM      December        November        October September   August  July    June    April   March       February        January Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan Saturday    Friday      Thursday        Wednesday       Tuesday Monday  Sunday  Sat Fri Thu Wed Tue Mon Sun     GetProcessWindowStation GetUserObjectInformationA       GetLastActivePopup      GetActiveWindow MessageBoxA     USER32.DLL      SunMonTueWedThuFriSat   JanFebMarAprMayJunJulAugSepOctNovDec    CONOUT$ .com    .exe    .bat    .cmd    .\      SystemRoot                                       t d
 T	 4 2àÐÀ 
4 
 p  ¨  P  
 
4 
 p  
 d
 T	 4 2ÐÀp!   ð  Ú  < !   Ú  ®  ( !   ÔH  ÄI Ú  ®  ( ! ÔH ÄI dJ Ú  ®  ( ! TR ð  Ú  <   K ðàp0¨  0   bÀp`0  +     |  I  `á      
 4 RðàÐÀ
p`P r0 ²0 20 4 2p
 d 4 rðàÐÀp+     ã'  ì(  xá      	
 
4	 
Rp+     ·*  S+  á  S+   B     d  T  4  rðàÐÀp t 4 2À	 	20 d T 4 2p) 4d Z ðàÐ
Àp`P  ¨  È  	 
  Ä  t  d  4   ðàÐ  +     `:  l:     =  	 	¼ 0  
 t	 d T 4 2À
 
20 d	 4 RÀ+     KB  ÃB  ¶á      
 Ä t d
 RðàÐ+     D  MD  Ïá      ÎC  jD  ÿá       t d 4 2À d T 4 2p t d 4 2Ð+     OF  F  â      
 
4 
Rp d
 T	 4 Rp d 4
 rp  $ d´ 4³ ° p  ¨  p  
 
4 
2p+     ¾M  N  4â       4 rÐ
Àp`P¨  8   
 Ä t
 d	 4 RÐ+     -R  çR  4â       20+     ·V  ÍV  Mâ      
 
4 
2p+     W  W  fâ      ªW  ÑW  â       4 2p+     .Y  \Y  fâ      qY  ¨Y  â       d T ²p d	 T 4 2p Ô t
 4 Rà
 t
 d	 4 2àÐÀ+     º_  {`  â       2P	 B  +     ça  b  Àâ  b  	 B  +     9b  =b     =b  
 d 4 rðàÐ
Àp+     àe  sf  áâ      	 b  +     ôf  g  ýâ  g   t d
 T	 4 2àÐÀ d 4
 Rp
 t
 d T 4
 rÀ B  
 
4 
2p       b   4 ²p
`P d	 4 Rp 4	 Rp+     ÷u  v  ã      / 4qfðàÐ
Àp`P  ¨     
 d 4
 RðàÐÀp+     ,~  ]~  Nã       4 R
Àp
`+     ?    7ã      
 
4 
p
 d T 4 ÐÀp-
Et d 4 C²
ðàÐÀP  ¨  X    d 4 Òp1
5#t d 4 3rðà
ÐÀP  ¨  8    d 4 ²p 2
0 R0
 d 4
 RðàÐÀp+     Ö  	  Nã      
 T 4 ràÐÀp` µ  t d T 4 àÐÀ
 
4 
2p d
 4 RÐÀp+       (  7ã       Â  ¨  P       T 4 2p
 Ä	 t d 4 2Ð+     k¤  ¤  eã      
 Ä t
 4 rðàÐ+     ¥  ³¥  ~ã      4¥  å¦  ã       b  ¨  (   'EC 
ðà	ÐÀp`0P  ¨  p       RP t
 d	 4 RÀ+     ñ¬  Ù­  ·ã      
 
T 
Òp d T 4 ²p T 4 rp$
53Â
ðà	ÐÀp`0P¨  X   
 4 RðàÐÀp`
P	 ¢ðàÐÀ
p`P
0  
 d 4
 RðàÐÀp+     Æ  >Æ  Nã      !
 !4 !òðàÐÀp`P rP ¢p`  +     ïÎ  Ï  Ðã       t d
 T	 4 2ðÐÀ d 4 2p 4 	  ðàÐÀ
pP0  #
  
ðà	ÐÀp`P0¨  x    d
 4 p d T
 4 p         N  ð                          ¨     Ä     Ú     ð               0     H     `     t     |               ®     ¼     Î     Þ     ì     þ          *     >     Z     x                º     Î     Þ     ê     ö                    *     :     J     X     f     p               ¢     ®     ¾     æ                2     H     b     x                °     Æ     à     î     þ          $     4     J     Z     l     ~          ¢     ®     ¼     Ì     â     ò               "     4     \     h     x                  SGenerateConsoleCtrlEvent  ÇGetExitCodeProcess  rWaitForSingleObject  CreateProcessA  ´SetConsoleCtrlHandler õGetModuleFileNameA  Û EnterCriticalSection  îLeaveCriticalSection  úGetModuleHandleW  /Sleep "GetProcAddress  ExitProcess qGetCommandLineA RtlUnwindEx ôSetHandleCount  >GetStdHandle  ÙGetFileType <GetStartupInfoA À DeleteCriticalSection ;TerminateProcess  «GetCurrentProcess LUnhandledExceptionFilter  #SetUnhandledExceptionFilter ÐIsDebuggerPresent RtlVirtualUnwind  RtlLookupFunctionEntry  RtlCaptureContext çGetLastError  ¦HeapFree  ¢HeapAlloc ]GetCPInfo TGetACP  GetOEMCP  ÚIsValidCodePage × EncodePointer ¹ DecodePointer @FlsGetValue AFlsSetValue ?FlsFree øSetLastError  ¯GetCurrentThreadId  >FlsAlloc  WriteFile ðLoadLibraryA  ºInitializeCriticalSectionAndSpinCount LFreeEnvironmentStringsA ÁGetEnvironmentStrings MFreeEnvironmentStringsW WideCharToMultiByte ÃGetEnvironmentStringsW  ªHeapSetInformation  ¤HeapCreate  SQueryPerformanceCounter jGetTickCount  ¬GetCurrentProcessId SGetSystemTimeAsFileTime ©HeapReAlloc GetConsoleCP  GetConsoleMode  CFlushFileBuffers  àLCMapStringA  MultiByteToWideChar âLCMapStringW  @GetStringTypeA  CGetStringTypeW  éGetLocaleInfoA  ìSetFilePointer  «HeapSize  D CloseHandle WriteConsoleA GetConsoleOutputCP  WriteConsoleW 
SetStdHandle  z CreateFileA S CompareStringA  V CompareStringW  ÝSetEnvironmentVariableA KERNEL32.dll  hReadFile  ÚSetEndOfFile  &GetProcessHeap  ËGetFileAttributesA                                                                                                  àE@           àE@                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    2¢ß-+  Í] ÒfÔÿÿL) @           ô @   ðó @   ÿÿÿÿÿÿÿÿ
                                                                                                                 
      	               	      
                  
               
               !   
   5      A   
   C      P      R   
   S   
   W      Y      l   
   m       p      r   	            
      
      	            
      )      
   ¡      ¤      §   
   ·      Î      ×                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       abcdefghijklmnopqrstuvwxyz      ABCDEFGHIJKLMNOPQRSTUVWXYZ                                                                                                                                                                                                                                                                                                                                                                                                                                                               abcdefghijklmnopqrstuvwxyz      ABCDEFGHIJKLMNOPQRSTUVWXYZ                                                                                                                                      (@       ¤  `y!       ¦ß      ¡¥      àü    @~ü    ¨  Á£Ú£                        þ      @þ      µ  Á£Ú£                        þ      Aþ      ¶  Ï¢ä¢ å¢è¢[                 þ      @~¡þ    Q  QÚ^Ú  _ÚjÚ2                 ÓØÞàù  1~þ    ôþ @   þÿÿÿ    C                                                                                                                      @-@                           @-@                           @-@                           @-@                           @-@                                                         P2@                   ðü @   @    @   Ð0@   P-@          P-@    (@   ÿÿÿÿ                   Xú @          (ú @   	       øù @   
       `ù @          (ù @          øø @          Ðø @           ø @          hø @          @ø @          ø @          Ð÷ @          ¨÷ @          ÷ @           ÷ @           èö @   !       ðõ @   "       Põ @   x       @õ @   y       0õ @   z        õ @   ü       õ @   ÿ       õ @   8 @   8 @   8 @   8 @   8 @   8 @   8 @   8 @   8 @   8 @             
                  ðü @   òþ @   P@   L@   H@   D@   @@   <@   8@   0@   (@    @   @    @   ô@   è@   ä@   à@   Ü@   Ø@   Ô@   Ð@   Ì@   È@   Ä@   À@   ¼@   ¸@   °@    @   @   @   Ô@   @   |@   t@   h@   `@   P@   @@   8@   4@   (@   @    @   	             Ð0@   .               @2@   lB@   lB@   lB@   lB@   lB@   lB@   lB@   lB@   lB@   P2@      .                        p     ðñÿÿ    PST                                                             PDT                                                             à2@    3@   ÿÿÿÿ            ÿÿÿÿ            þÿÿÿÿÿÿÿþÿÿÿÿÿÿÿÿÿÿÿ   ;   Z   x      µ   Ô   ó     0  N  m      ÿÿÿÿ   :   Y   w      ´   Ó   ò     /  M  l                                                                                                                                                                                                              8@   0@   (@    @                                                                                                                                                                                                                     ç  x ð  Y   `  «  x °  Ô   à    ¬   í  ¼ ð  Ú  < Ú  ®  ( ®  e   e  µ  ô µ  ½  ä ½  Û  Ô è  ]  T h  J  ¤ L  s   t  Ó  ¤ Ô    ¤   Z   \       Å  ¤ D  §  ¤ ¨  Å   È  ï  P ð  "  | "  &#  È `#  	$  ¤ $  $   $  %%   ø%  %&  ¤ (&  a&  ¤ d&  z&  ¤ &  Ç&  ¬ È&  '  ( '  ³'  ( ´'  >)  ¸ x)  ß)  ¤ à)  w+  è x+  +   +  --   0-  .  0 .  9.  @ <.  .  ¤ .  Õ.  H Ø.  V/  `	 X/  =:  \ @:  -=   0=  f=  P p=  >  ¸ >  ?  ¬	 h?  ?   ?  ¨?   ¨?  î?  ¤ ð?  \@  `	 \@  ß@  Ä à@  eA  Ä hA  ðA  ¼ ðA  -B  Ü 0B  àB  ä àB  YC  x \C  £C  ¤ ¤C  D  	 ¤D  .E  L	 0E  ³E  `	 ÌE  ´F  t	 ´F  øF  ( øF  §G   	 ¨G  þH  ¬	  I  {I  À	 ¨I  ¼I  P ¼I  K  Ð	 K  K  `	 K  M  Ø	 M  <N  ô	 <N  ÌN   ÌN  CQ  
 DQ  <S  4
 <S  dS   dS  ÞT  x  V  wV  ¤ xV  íV  d
 W  1W   4W  æW  
 èW  lX  ( lX  X  ¤ X  ÅY  ¸
 ÈY  IZ  ¤ LZ  U[  ì
 X[  å\  ü
 è\  
_   _  S_   T_  _  ¤ _  `  $  `  ·`   ¸`  ð`  ( ð`  (a  ( (a  ^a  ( àa  !b  \ $b  Gb  | Hb  db   hb  6d  `	 dd  Õf   ðf  %g  Ì 0g  bg  ¤ dg  ¥g   ¨g  Àg   Àg  ïh  ¬	 ðh  ¿j  ì Àj  ¶k   ¸k  jm   lm  ¸m  0 ¸m  kn  8 n  ¤n  H än  So  P To  o   o  ão   Àp  Ðr  X Ðr  är  P ìr  ¢s  x ¤s  wt  x xt  u  h u  u   	  u  v  x v  v}   x}  ©~  À ¬~  ¿  ð À  z  
   +  $
 ,  i  <
 l    d
   n  t
 p  ù  
 D  .  ¬
 0  x  Ü x  
  ¬
     ´
   q  ´
 t  å  ´
     (    W  ¼
 X  «  ¤ ¬     ì
    ð  P ð  6  P D  å   è  j   l    P   X  ( X  p  4 p  §  ¤ ¨  ¼   ` ¼   -¢  Ø @¢  ï¢  `	 ð¢  £  x £   ¤  P  ¤  Æ¤   ð¤  §  ¸ §  _§  ø `§  å©   <ª  M«  Ø P«  ««  P ¬«  ç«  , è«  #¬   $¬  Å¬  x È¬  û­  < ü­  l¯  h l¯  {°  t °  v±   x±  R¶   T¶  Ý¶  
 à¶  õ·  
 ø·  ¨»  ¸ ¨»  ¼  h ¼  ½  È D½  ½  P ½  Å  Ð Å  Æ  è Æ  Î   Î  yÏ  8 |Ï  Ð  ´
 Ð  Ò  | Ò  0Ô  \ 0Ô  ÆÔ  x ÈÔ  Õ   Õ  ×Õ  P ØÕ  £Ø   ¤Ø  Ý  ¨ Ý  Þ  ´
 Þ  ýÞ  È ß  Ëà  Ø á  ^á  p `á  xá  4 xá  á  T á  ¶á  T ¶á  Ïá  T Ïá  õá  T ÿá  â  T â  4â  T 4â  Mâ  T Mâ  fâ  T fâ  â  T â  â  T â  ³â  T Àâ  áâ  T áâ  ýâ  4 ýâ  ã  T ã  7ã  4 7ã  Nã  4 Nã  eã  4 eã  ~ã  T ~ã  ã  T ã  ·ã  T ·ã  Ðã  4 Ðã  ä  0     
MZ       ÿÿ  ¸       @                                   Ø   º ´	Í!¸LÍ!This program cannot be run in DOS mode.

$       #^¤g?ÊÈg?ÊÈg?ÊÈ@ù±Èd?ÊÈg?ËÈ:?ÊÈÚp\Èc?ÊÈymNÈC?ÊÈym_Èm?ÊÈymIÈ	?ÊÈym[Èf?ÊÈRichg?ÊÈ        PE  d ±Q        ð # 	  Ö   l      Ì+        @                      p                                                      (            ` 
                                                                   ð                            .text   üÔ      Ö                    `.rdata  ¸)   ð   *   Ú              @  @.data   ä5                      @  À.pdata  
   `                  @  @                                                                                                                                                                                                                                                                                                                                                                                                H\$Hl$Ht$H|$ ATAUAVHì LáHÉÿ3ÀIüº   ò®H÷ÑD	HyÿHcÈèP  3ö3íLcïÆ "HXLðÿ~e    A¶,ù\uÿÆë'ù"u ö~DÆ²\HËþèj  Hß+öÆ\HÿÃë3öA¶,HÿÅHÿÃI;íCÿ|¸ö~DÆ²\HËþè5  HßHl$HHt$PH|$XÆ"ÆC H\$@IÆHÄ A^A]A\ÃÌÌÌÌÌÌÌÌÌH\$WHì`  H¼ H3ÄH$P  HÙHÁ¶	HúÉtHÿÀù/uÆ@ÿ\ÉuîH$@  L$@  LD$@HT$0HËHD$ èO  |$0 ®   |$@\£   H$@  L$@  LD$@HT$0HÏHD$ è  HÉÿ3ÀH|$@ò®HD$@H÷ÑHÿÈHÿÉHÈ9\uHÿÉ9\tHD$@H;ÈrÆ HÿÉ9\uëLD$@HT$0H$@  LËHÇD$     èß
  º   ¹  è
  H$@  ëº   ¹  ès
  HÓA¸  HÈHøè»  HÇH$P  H3Ìè  H$  HÄ`  _ÃÌÌÌÌÌÌÌH\$Hl$Ht$H|$ ATAUAVHì HÙHÉÿ3ÀLêHûPò®H÷ÑHÿÉè÷	  3ÿHóA} ¾LðE3äHèe  ÀtD  ¾KHÿÃèP  Àuð¶+HÿÃ@ít[@¾Íè8  ÀtEätI@ý\uÿÇëÙ@ý"u@öÇu3ÀEäÀ@2íDàÑÿÿtLÇ²\HÎèÌ	  H÷3ÿ@ít¢@.HÿÆëÿtLÇ²\HÎè©	  H÷3ÿÆ AÿE IcE HÿÆI4Æ@ít&¾è±  Àt¾KHÿÃè   Àuð; GÿÿÿH\$@Hl$HHt$PH|$XIÆHÄ A^A]A\ÃÌÌÌÌÌHì(Éu
! Ét3Òÿ6Ü  ¸   HÄ(ÃÌÌÌÌÌÌÌÌÌÌÌÌH\$WHìà   3À3ÿHÙHL$pDGh3Ò¼$ð   HD$PHD$XHD$`èÖ  WH
ÿÿÿÇD$ph   ÿîÛ  L\$PHD$pL\$HHD$@H|$8H|$0E3ÉE3ÀHÓ3É|$(ÇD$    ÿ«Û  Àu(èú  H«Þ  HH`èr  3ÀH$ø   HÄà   _ÃD$`HL$PÊÿ  ÿ_Û  HL$PH$ð   ÿDÛ  Àu(è£  H,Þ  HH`è  3ÀH$ø   HÄà   _Ã$ð   H$ø   HÄà   _ÃÌÌÌÌÌÌÌÌH\$Hl$Ht$WATAUHì LéHÉÿ3À»   IýIcèò®H;ÝHòH÷ÑLËLQ}J<ÊHÉÿ3Àò®IÿÁH÷ÑDÑL;Í|æIcÊHÓè  HÌÝ  MÅHÈLàè  HÉÿ3ÀIýò®H;ÝH÷ÑLiÿ}0LÞIcÍHÝ  IÌèå  H<ÞHÉÿ3ÀHÿÃò®H÷ÑDéH;Ý|ÐH\$@Hl$HHt$PIÄHÄ A]A\_ÃÌÌÌ@SWAVAWHìX  H»
 H3ÄH$0  LòDD$ LcùHT$0A¸   3ÉÿúÙ  HÉÿ3ÀH|$0ò®H÷ÑHD/HL$0H;Áv 8.tHT$0Æ  HÿÈH;ÂwëÆ  3ÀHÉÿH|$03Òò®H:Ý  HL$0HGÿ3Ý  Gè×¸  Øøÿu"èÏ  LD$0HûÜ  HH`èB  Céù  H$0  A¸   ÈH¬$  è¯  HcÈH¼0  ËèK  H$0  HÿÊHÿÂH;×s¶Àt<
t<
uéÆ H$0  HÜ  A¸   è$  Àt%HYÜ  H$0  HPÜ  A¶JÜ  AHT$$H$2  èùúÿÿHT$0H8HØHÏèvùÿÿHèHÀu èé  HÚÛ  LÇHH`è^  Eé
  H´$P  t$$L¤$H  L¬$@  E,7º   AEHcÈèÁ  HÍLàè"øÿÿþI$I|$~ HÃÿÎHèøÿÿHÇHÃHîHGøuæHL$0èê÷ÿÿ»   HÇI;ßHGø}!     IÞèÇ÷ÿÿHÿÃHÇI;ßHGø|ç|$  H´$P  HÇ    t*IÔHÍèº¥  è  HÚÚ  HH`LÅèv   ¸   ëEÅIÔHÍèyüÿÿHÈèAûÿÿL¤$H  L¬$@  H¬$  H$0  H3Ìè
  HÄX  A_A^_[ÃÌÌÌÌÌÌÌÌÌÌÌHi 
_ A¸   éøüÿÿHÄHPHHL@LH SVWATHì8Hù3ÛóÃH;ËÀ;Ãu'è&  Ç    H\$ E3ÉE3À3Ò3Éè¦%  Èÿé  ÃH;ÓÀ;Ãu'è]&  Ç    H\$ E3ÉE3À3Ò3Éès%  Èÿéâ   Ld$pèù  öG@   HÏèæ#  øÿt*øþt%HcÐHÊHÁùLÇ) âHkÒXIÈH
%
 ëH

 HÑL¢) öB8u%øÿtøþtHcÈHÁHÁøáHkÉXIÀöA8t"è®%  Ç    H\$ E3ÉE3À3Ò3ÉèÄ$  Îÿ;óu*HÏèM  ØMÌE3ÀHT$hHÏè`  ðH×Ëè   HÏè³  ÆHÄ8A\_^[ÃÌÌÌH Ã@SHì \; »   Àu¸   ë;ÃLÃHcÈº   9; è&  H
+ HÀu$PHË; èç%  Hð* HÀu¸   ëx3ÉH HHÂ0HÁHët	HÂ* ëåE3ÀH EHIÈLh( IÀHÁøáIÂHkÉXLIúÿtIúþtMÒuÇþÿÿÿIÿÀHÂ0Iéu¼3ÀHÄ [ÃÌÌHì(è)  =$  tè'  H
F* HÄ(éÁ&  Ì@SHì HÙH
l H;Ùr:Hð H;Øw.HÓH¸«ªªªªªª*H+ÑH÷êHÁúHÊHÁé?Lè<+  ºkë
HK0ÿSÔ  HÄ [ÃÌ@SHì ùHÚ}Áè+  ºkë
HJ0ÿ%Ô  HÄ [ÃÌÌÌHì(Há H;Êr7He H;Èw+ºqH+ÊH¸«ªªªªªª*H÷éHÁúHÊHÁé?Lè¯)  ë
HÁ0ÿÓÓ  HÄ(ÃÌÌHì(ù}ºrÁè)  ë
HJ0ÿªÓ  HÄ(ÃÌ@SHì d$@ LD$@è£*  HØHÀu9D$@tè #  HÀtèö"  L$@HÃHÄ [ÃÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌff     HÁIørS¶ÒI¹I¯ÑIø@rH÷ÙátL+ÁHHÈMÈIà?IÁéu9MÈIàIÁétfffHHÁIÿÉuôMÀt
HÿÁIÿÈuöÃ@ fffffIù   s0HHQHQHÁ@HQØHQàIÿÉHQèHQðHQøuØëfD  HÃHÃQHÃQHÁ@HÃQØHÃQàIÿÉHÃQèHÃQðHÃQøuÐð$ éTÿÿÿÌÌÌÌÌÌÌÌÌÌÌÌff     LÙMÀt$H+ÊöÂt(Àã   HÿÂIÿÈtöÂuæëIÃÃHHÂHIèr&I¹ÿþþþþþþ~LÈLÐIòÿM3ÑI¹ MÑtÉIÀ   À   HÿÂIÿÈtxä$tuHÿÂIÿÈtiHÁèÀtbHÿÂIÿÈtVä$tSHÿÂIÿÈtGHÁèÀt@HÿÂIÿÈt4ä$t1HÿÂIÿÈt%ÁèÀtHÿÂIÿÈtä$tHÿÂIÿÈ<ÿÿÿIÃÃHÊH3ÒIørEöÁt
HÿÁIÿÈëñIè rHHQHQHQHÁ Iè sçIÀ Ièr	HHÁëñIÀIèrHÿÁëóIÃÃÌÌ@SHì EHÚLÉAãøAö LÑtA@McP÷ØLÑHcÈL#ÑIcÃJHCHHKöAt¶AàðHLÈL3ÊIÉHÄ [é  ÌHì(MA8HÊIÑèÿÿÿ¸   HÄ(ÃÌÌÌHì8HD$`HD$(LL$ MÈLÂHÊÿè(  HÄ8ÃÌH\$LD$UVWATAUAVAWHì0L¤$¨   L¬$   HùLò3ÒMùÊT$pH;út
L;òuL;Ât¹   é¼  L;ÂtñL;ÊuH9$   uâë
H9$   tÖL;êuH9$    uÇë
H9$    t»L;âuH9$°   u¬ë
H9$°   t ¸   Hß8tHÿÈHÿÃH;Âwñ;:u,L;òt!Iø;  A¹   LÇHÊÿIÎè)  3ÒH{ëL;òtAHêHòHß8te¾èÚ(  3Ò;ÂtHÿÃë</t
<\t	<.u	HóëHkHÿÃ8uÏH;êt/L;út%LÍL+ÏL9$   ª   LÇHÊÿIÏè(  3ÒHýëL;útAH;òtQH;÷rLL;êt!LÎL+ÏL9$    vqLÇHÊÿIÍè[(  3ÒL;âtPH+ÞH9$°   vNLËLÆHÊÿIÌè5(  ë/L;êt!H+ßH9$    v(LËLÇHÊÿIÍè(  3ÒL;âtA$3Àé   ÊëL$pL$   L;òtL;ÂvAL;út
H9$   vAL;êtH9$    vAU L;âtH9$°   vA$H;úu%è^  Hd$  »   E3ÉE3À3Ò3Éèr  Ãë;Êu×è5  ¹"   ÁH\$xHÄ0A_A^A]A\_^]ÃÌÌÌH\$Ht$WHìPIØHúA¸   HñH$   HÁH÷ØIÁMÛM#ØH÷ØHÃMÒL\$@HL$8M#ÐH÷ØHÇHÒLT$0LL$(I#ÐH÷ØLËMÀHT$ H×AàHÎèÚüÿÿH\$`Ht$hHÄP_ÃÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌff     H;
i  uHÁÁf÷ÁÿÿuóÃHÁÉé¡&  Ì@SHì HÙÆA HÒ   è55  HCHÀ   HH¸   HKH
 H;ÑtÈ   |	 uè	3  HHc H9CtHCÈ   
U	 u	èê)  HCHCöÈ   uÈ   ÆCëóoóHÃHÄ [ÃÌÌÌ@SHì@=w  HcÙuH[
 ·XàëVHL$ 3Òè&ÿÿÿHD$ ¸  ~LD$ º   Ëè76  DØëH@  D·XAã|$8 tHD$0 È   ýAÃHÄ@[ÃÌÌHT$LD$LL$ SHì`HÒu%è  Hd$  E3ÉE3À3Ò3ÉÇ    è  ÈÿëUHÉtÖHL$@HL$0L$   HL$0E3ÀÇD$8ÿÿÿÇD$HB   è
  l$8Øx
HL$0Æ ëHT$03Éè6  ÃHÄ`[ÃÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌff     MÀtuH+ÑLÊI» öÁtB	HÿÁ:ÂuWIÿÈtNÀtJH÷Á   uáJ	fâÿfúøwÑHJ	H;ÂuÅHÁIèIºÿþþþþþþ~vHðÿLÒI3ÂIÃtÁëH3ÀÃHÀHØÿÃÒt'öt#HÁêÒtötHÁêÒtötÁêÒtöuH3ÀÃÌÌÌ@SHì ÙèO9  Ëè 7  H
­ý  è01  ¹ÿ   HÄ [HÿàÌÌÌ@SHì ÙH
Í  ÿóÉ  HÀtHoÍ  HÈÿîÉ  HÀtËÿÐHÄ [ÃÌÌÌ@SHì Ùè·ÿÿÿËÿÏÉ  ÌÌÌ¹   ér   ÌÌ¹   éf  ÌÌH;Ês-H\$WHì HúHÙHHÀtÿÐHÃH;ßríH\$0HÄ _ÃÌH\$WHì 3ÀHúHÙH;ÊsÀuHHÉtÿÑHÃH;ßréH\$0HÄ _ÃÌÌÌH\$WHì H=  ÙtH
 è
;  ÀtËÿn è5:  HzË  H
KË  è~ÿÿÿÀuZH
ß9  è9  HË  H= Ë  ëHHÀtÿÐHÃH;ßríH=#  tH
 è:  ÀtE3À3ÉAPÿ 3ÀH\$0HÄ _ÃÌH\$Ht$DD$WATAUAVAWHì@EàÚDù¹   è  =
 ü   Ç
    D%
 ÛÏ   H
 è3/  HðHD$0HÀ   H
[ è/  HøHD$ LöHt$(LèHD$8HïH|$ H;þrèß.  H9uëæH;þr\Hè×.  HØèÃ.  HÿÓH
 è¾.  HØH
ô è¯.  L;óuL;èt LóH\$(HóH\$0LèHD$8HøHD$ ëHÊ  H
íÉ  è¼ýÿÿH	Ê  H
úÉ  è©ýÿÿEät
¹   èý  Eäu&Ç~    AL$èä  AÏèýÿÿAÏÿ#Ç  ÌH\$pHt$xHÄ@A_A^A]A\_ÃÌÌE3À3ÒéjþÿÿÌÌE3ÀAPé\þÿÿ3Ò3ÉDBéOþÿÿÌÌÌº   3ÉDÂé=þÿÿÌ@SHì è¹-  HÈHØèê=  HËè¢=  HËè  HËè=  HËèz=  HËèÒ:  HËèö8  HËèÒ8  H
ÿÿÿèb-  Hçù  HÄ [ÃÌH\$Ht$WHì    HL$0ÿ[Æ  ¸MZ  f9æÕÿÿubHcÖÿÿH5ÖÕÿÿHÆ8PE  t3Û$°   ëN¹  f9Ht3Û$°   ë8¸   w3Û$°   ë$3Û9ø   Ã$°   ë3Û$°   H5rÕÿÿ¿   Ïè®C  Àu!9= uè¹4  ¹   è2  ¹ÿ   èµûÿÿèX/  Àu!9=â
 uè4  ¹   è]2  ¹ÿ   èûÿÿè6  è   Ày
¹   èûÿÿÿXÅ  Hy èA  H
 è|@  Ày
¹   èÚúÿÿèi=  Ày
¹	   èÇúÿÿÏèÌûÿÿÀtÈèµúÿÿèÈ<  @|$l·T$pA¹
   DEÊLÀ3ÒHÎègíÿÿøD$ ÛuÈèÆýÿÿèÙýÿÿëø¼$°    uÈè¸ýÿÿÌèÎýÿÿÇë¸ÿ   L$    I[Is Iã_ÃÌÌÌHì(è¿B  HÄ(éþÿÿÌÌHÄHXHhHp HPWATAUAVAWHì@MyM!Iq8M+çöAfMñHêLéÜ   3ÿHHÈL@Ð9>+  H^CøL;à§   CüL;à   {    ;tHL$0HÕIÇÿÐÀ   ~sA} csmàu(H=÷  tH
î è©5  Àtº   IÍÿ× KA¸   HÕIÏèÓB  IF@SMcM HD$(IF(I×MÅHÍHD$ ÿÃ  èÖB  ÿÇHÃ;>sjé>ÿÿÿ3ÀëfIy 3íI+ÿ9.vTH^KôL;ár>CøL;às6H;ùrH;øsAöE u/; t	H;øt#ëHT$xIÇ±IDCüMÇAÿÐÿÅHÃ;.r°¸   L\$@I[0Ik@IsHIãA_A^A]A\_ÃÌÌÌH\$H|$ATHì HÙèè  Èè!B  À   èÀìÿÿHÀ0H;Øu3Àëè®ìÿÿHÀ`H;Øuw¸   ÿn ÷C  ucL%Ò HcøI<ü u+¹   èJ  IüHÀuHC HCH¸   C$CëIüÇC$   ÇC   HKHK  ¸   ë3ÀH\$0H|$8HÄ A\ÃÌÌÌÉt0SHì ºbHÚsHÊèÁ  cÿîÿÿc$ H# Hc HÄ [ÃÌÌÌ@SHì öB@IØtHz uAÿ ë&Bÿx
HHÿ¶Áë¾Éèæ,  øÿu	ëÿHÄ [ÃÌÒ~LH\$Hl$Ht$WHì IùIðÚ@éLÇHÖ@ÍÿËèÿÿÿ?ÿtÛçH\$0Hl$8Ht$@HÄ _ÃÌÌÌH\$Hl$Ht$WHì Aö@@IùIðÚHétIx uAë7Ò~3M LÇHÖÿËèÿÿÿHÿÅ?ÿuè=  8*uLÇHÖ±?èÿþÿÿÛÍH\$0Hl$8Ht$@HÄ _ÃÌÌH\$UVWATAUAVAWHìÐ  Höó  H3ÄH$È  3ÀHÙHL$hHúHL$xIÐMéD$`DàD$TDðD$HD$XD$PèdóÿÿE3ÒI;ÚuAè£  3ÛE3ÉE3À3Ò3ÉÇ    H\$ è·  8$   tH$    È   ýÈÿéý  AÏÿöC@L
Ïÿÿº   HËè
  Hwó  A;Çt(øþt#LcÀL
sÏÿÿIÈAàHÁùMkÀXMÉC ë
LÂL
PÏÿÿAö@8u)A;ÇtøþtHcÐHÂâHÁøHkÒXIÁC öB8tAè×  3ÛE3ÉE3À3Ò3ÉÇ    H\$ èë
  8$   tH$    È   ýAÇé1  E3ÒI;út·@/AòDT$@DT$DAÒL$   A:êê  H$¨   A»   HÿÇA;òH¼$°   È  Eà<XwH¾ÅB¾ðó  áëAÊHcÂHcÉHÈB¾
ô  ÁúT$\ÊA;Òy  é  é/  éë  éÚ  é   é  ù<  @¾Åød~    øA@  øCÐ   øE.  øG%  øStmøXä  øZtøa  øc§   éH  IE IÅI;Ât/HXI;Út&Aºä¿ sÇD$P   +ÂÑøé  DT$Pé  HMñ  éñ  A÷Ä0  uAºìI] E;÷AÆ¹ÿÿÿDÁIÅA÷Ä    I;ÚÇD$P   HDñ  HËéò   A÷Ä0  uAºìIÅA÷Ä  t,E·MøH$À   HL$DMÃè@  E3ÒA;ÂtÇD$X   ëAEøÇD$D   $À   H$À   éM  ÇD$p   @Å AÌ@E;òH$À   Aó-  A¾   ék  øe  øg~Ïøiñ   ønµ   øo   øpteøsõþÿÿøuÌ   øxÕ  ¸'   ëSÿÈfD9t	HÁA;ÂuïH+ËHÑùë!I;ÚHDòï  HËë
ÿÈD8tHÿÁA;Âuñ+ËL$Dé  A¾   Aºì¸   D$`A¹   Eäy`QÆD$L0AQòD$MëSA¹   EäyDAºì	ë=I} IÅè,=  E3ÒA;ÂxüÿÿAöÄ tf7ë7ÇD$X   él  AÌ@A¹
   T$HAºärAºäs
ME IÅë.IÅAöÄ tAöÄ@tM¿EøëE·EøëAöÄ@tMcEøëEEøAöÄ@t
M;Â}I÷ØAºìAºär
AºärEÀE;ò}A¾   ëAä÷E;óEOóD|$`IÀH$¿  H÷ØÉ#ÊL$HAÎAÿÎA;ÊM;Ât 3ÒIÀIcÉH÷ñLÀB0ø9~AÇHÿËëÐH$¿  A¿ÿÿÿÿ+ÃHÿÃAºä	D$D  A;Ât	;0  HÿËÿD$DÆ0éü   u@ýguAA¾   ë9E;óEOóAþ£   ~)A¾]  HcÏèy
  H$   HÀtHØ÷ëA¾£   IE H
ú  IÅ@¾ýHcöH$¨   èP!  HL$xDÏHL$0L$pLÆL$(H$¨   HÓDt$ ÿÐAü3Àç   tD;ðuH
Mú  è!  HT$xHËÿÐ3À@ýgu;øuH
#ú  èæ   HT$xHËÿÐ;-uAºìHÿÃHËèO:  E3ÒD$DD9T$XK  AöÄ@t1AºäsÆD$L-ëAöÄtÆD$L+¿   |$HëAöÄtÆD$L ëè|$Ht$THl$h+t$D+÷AöÄuLL$@LÅÖ± èÔ÷ÿÿLL$@HL$LLÅ×èøÿÿAöÄtAöÄuLL$@LÅÖ±0è£÷ÿÿ|$D3À9D$Ptu;ø~qHëD·M H$À  H$    A¸   ÿÏHÅèB<  E3ÒA;Âu2$    A;Òt&LD$hLL$@H$À  è÷ÿÿE3ÒA;úu§Hl$hë#Hl$hAÇD$@ëLL$@LÅ×HËèd÷ÿÿE3ÒD$@A;Â|AöÄtLL$@LÅÖ± èíöÿÿE3ÒH$   I;ÂtHÈèA
  E3ÒL$   H¼$°   t$@T$\L
ÛÇÿÿA»   @/A:ê$ùÿÿD8$   tH$   ¡È   ýÆH$È  H3ÌèîêÿÿH$   HÄÐ  A_A^A]A\_^]Ã@ýIt:@ýht+@ýlt
@ýwuAºìë?lu
HÿÇAºìëAÌéwÿÿÿAÌ énÿÿÿAºì<6u4uHÇAºìéOÿÿÿ<3u2uHÇAºôé7ÿÿÿ<d/ÿÿÿ<i'ÿÿÿ<oÿÿÿ<uÿÿÿ<xÿÿÿ<XÿÿÿDT$\HT$x@¶ÍDT$Pèø6  3ö;Æt!HT$hLD$@@Íè<õÿÿ@/HÿÇ@:î  HT$hLD$@@ÍèõÿÿE3Òéþÿÿ@ý*uEu IÅE;òþÿÿE÷éþÿÿC¶@¾ÅDtHÐé}þÿÿEòéuþÿÿ@ý*uAE IÅA;ÂD$TZþÿÿAÌ÷ØëD$T@¾ÅDHÐD$Té:þÿÿ@ý tA@ý#t1@ý+t"@ý-t@ý0þÿÿAÌéþÿÿAÌéþÿÿAÌéýýÿÿAºìéóýÿÿAÌéêýÿÿDT$pDT$XDT$TDT$HEâE÷DT$PéÆýÿÿèR  E3ÉE3À3Ò3ÉHt$ Ç    èh  @8´$   éwöÿÿÌÌÌHÄHXHpHxL` AUAVAWHì   HL$ ÿ©µ  ºX   DbÈIÌèß  LØE3ÿI;ÇuÈÿé{  H AÌ
t H   L;ØsCE{IÿAÆC	
E{E{8AÆC9
AÆC:
E{PE{LIÃXHO H   L;ØrÃ
& fD9|$bI  HD$hI;Ç;  LhHc0Iõ»   9L¿   ;Ë   L5ü ºX   IÌè  LØI;ÇtiIþÅ AÄ¼ I   L;ÙsAE{IÿAÆC	
E{Ac8AÆC9
AÆC:
E{PE{LIÃXIþH   L;ØrÅo HÿÇ;Ã|ë` ëL5o AÿA;ß~~H>ÿtkH>þteAöE t^AöE uHÿL´  A;ÇtILcçIÄHÁøAäMkäXM$ÆHI$AE AD$IL$º   èÚ*  A;ÇtAÿD$ëÈÿéÕ   ÿÇIÿÅHÆ;û|EçIÿHßHkÛXHÕ H;ÿtH;þtKëÆCAD$ÿ÷ØÉÁõ¸öÿÿÿE;çDÈÿ¢³  HðHøÿtJI;ÇtEHÈÿ³  A;Çt7H3¶ÀøuK@ë	øuKHKº   è.*  A;ÇtÿCëÈÿë.K@HÇþÿÿÿAÿÄHÿÇHÿQÿÿÿ
 ÿ ³  3ÀëÈÿL$   I[ Is(I{0Mc8IãA_A^A]ÃÌÌÌHì8HÉu%è*  Hd$  E3ÉE3À3Ò3ÉÇ    è?  ÈÿëAHÄ8ÃÌÌH
ø  Ã@SHìà  d$p HL$t3ÒA¸   èßÿÿL\$pH$  H$  L\$HHD$PÿÇ²  H$  HT$@HËE3Àèý  HÀt;Hd$8 HT$@HL$`HL$0HL$XLÈHL$(H$  LÃHL$ 3Éè¹  ë H$è  H$  H$è  H$¨  H$è  ÇD$p ÀÇD$t   H$   ÿ²  3ÉØÿÿ±  HL$Hÿì±  ÀuÛuHèø4  ÿÎ±  º ÀHÈÿ¸±  HÄà  [ÃÌÌÌH\$Hl$Ht$WHì0HéH
¾ö  AÙIøHòè@  HÀtLT$`DËLÇHÖHÍLT$ ÿÐë%¹   è4  L\$`DËLÇHÖHÍL\$ èhþÿÿH\$@Hl$HHt$PHÄ0_ÃÌÌÌL
Õä  3ÀIÑD@;
t+ÿÀIÐø-ròAíøw¸
   ÃÁDÿÿÿ¸   ùAFÀÃHADÁÃÌHì(èw  HÀu	Hçå  ëHÀHÄ(ÃHì(èW  HÀu	HËå  ëHÀHÄ(Ã@SHì Ùè3  HÀu	H§å  ëHÀè  Lå  HÀtLPËè;ÿÿÿAHÄ [ÃÌÌH\$Hl$Ht$WHì 3ÿHñÍÿHÎèd3  HØHÀu(9Zõ  v ÏÿÈ¯  Dè  D;Bõ  AûGý;ýuÈHl$8Ht$@HÃH\$0HÄ _ÃHÄHXHhHpHx ATHì 3ÿHòHéAÌÿE3ÀHÖHÍèi  HØHÀu*9ßô  v"ÏÿM¯  Dè  D;Çô  AûAGüA;üuÀHl$8Ht$@H|$HHÃH\$0HÄ A\ÃÌHÄHXHhHpHx ATHì 3öHúHéAÌÿH×HÍè 3  HØHÀu/Hÿt*9Yô  v"ÎÿÇ®  Dè  D;Aô  AóAGôA;ôu¾Hl$8Ht$@H|$HHÃH\$0HÄ A\ÃÌÌÌH\$Hl$Ht$WATAUHì 3öIøHêAÍÿLáLÇHÕIÌèg3  HØHÀu/Hÿt*9Ìó  v"Îÿ:®  Dè  D;´ó  AóAGõA;õu»Hl$HHt$PHÃH\$@HÄ A]A\_ÃHÉt7SHì LÁH
øÿ  3Òÿ®  ÀuèSýÿÿHØÿf®  ÈèûüÿÿHÄ [ÃÌÌÌH\$Ht$ATHì03öNèj  ^\$ ;4 }iLcãH J<à tPJàöAtè²3  øÿtÿÆt$$û|1HÛ JàHÁ0ÿ­  H
Æ JáèAÿÿÿL¶ K$ã ÿÃ\$ ë¹   èç  ÆH\$@Ht$HHÄ0A\ÃH\$Ht$WHì A3öHÙ$<u?÷A  t69+yÿ~-èúÿÿHSDÇÈèâ:  ;ÇuCÀyàýCëK ÎÿHKc ÆHt$8HH\$0HÄ _ÃÌÌÌ@SHì HÙHÉuè5   ë,èjÿÿÿÀtÈÿëºcsHËè¢ùÿÿÈè£;  ÷ØÀë3ÀHÄ [ÃÌHt$H|$Ld$AUAVAWHì0DñE3ä3öNèç  3ÿ|$ AÏÿ;=®    LcïH~ J<è tjJèöBt`Ïè×ÿÿH^ JèöAt5Aþuè9ÿÿÿA;Çt%AÿÄDd$$ëEöuöAtèÿÿÿA;ÇAD÷t$(H JêÏè¹×ÿÿÿÇ|$ énÿÿÿ¹   è@  AþADôÆHt$PH|$XLd$`HÄ0A_A^A]Ã¹   éÿÿÿÌÌH\$Ht$H|$ATHì L%¬à  3ö3ÿIÜ{u%HcÆº   ÿÆHHªð  HÈHè"  Àt-H³â  HÃÿÇH;Ø|Ã¸   H\$0Ht$8H|$@HÄ A\ÃHcÇHÀI$Ä 3ÀëÛÌÌH\$Hl$Ht$WHì H!à  H-Zâ  HûH7HöttHÎÿÐª  HÎè|üÿÿH' HÇH;ý|ÔHHÉt{uÿ§ª  HÃH;Ý|ãH\$0Hl$8Ht$@HÄ _ÃÌHcÉH®ß  HÉHÈHÿ%ª  H\$Ht$H|$AUHì HcÙ¾   H=ü   uè  Nèè  ¹ÿ   èàÿÿHûHÿL-Uß  I|ý  tÆë{¹(   èÃùÿÿHØHÀuè.ùÿÿÇ    3ÀëZ¹
   èf   I|ý  u/º   HËè   ÀuHËèûÿÿèóøÿÿÇ    3öëI\ý ë	HËèbûÿÿH
vß  ÿH©  ÆH\$0Ht$8H|$@HÄ A]ÃH\$WHì HcÙH=¤Þ  HÛH<ß uèõþÿÿÀuHèÑÞÿÿHßH\$0HÄ _Hÿ%ä¨  H\$WHì0IØHúHÉt23ÒHBàH÷ñH;Çs$èHøÿÿHd$  E3ÉE3À3Ò3ÉÇ    è]÷ÿÿ3Àë]H¯ù¸   HÿHDø3ÀHÿàwH
ú  PLÇÿ*©  HÀu-=ú   tHÏè¼  ÀuËHÛt²Ç   ëªHÛtÇ   H\$@HÄ0_ÃÌH\$Hl$Ht$WHì0HòHéHÉû   HÒò   3ÿHÙMÀt!A Àt¿   H;×¼   HYÆ:HÿÃIÑMÉtAA9 t;HÿÇH;þ   HÿÂHÿÃ: uåIÉèØ8  8/t8\tHÿÇH;þsmÆ\HÿÃHL$`HÉtëHÿÇH;þsSHÿÃHÿÁ9 uéHL$hHÉt1Àt+<.t"HÿÇH;þs(Æ.HÿÃëHÿÇH;þsHÿÃHÿÁ9 uéHGH;ÆvÆE  è°öÿÿ»"   ëÆ 3Àë#èöÿÿ»   Hd$  E3ÉE3À3Ò3Éè±õÿÿÃH\$@Hl$HHt$PHÄ0_ÃÌÌH\$Ht$WHì@ÚHÑHL$ AùAðèøÙÿÿHD$(D¶ÛA|uötHD$ H@  B·Y#Æë3ÀÀt¸   |$8 tHL$0¡È   ýH\$PHt$XHÄ@_ÃÌHÂÑA¹   HÈE3ÀénÿÿÿÌÌÑA¹   E3À3ÉéZÿÿÿÌÌHì8Hd$  èY7  HÄ8ÃHL$Hì   H
î  ÿ§¦  Lxï  L\$XE3ÀHT$`HL$Xè×s  HD$PH|$P tAHÇD$8    HD$HHD$0HD$@HD$(H8î  HD$ LL$PLD$XHT$`3Éès  ë"H$   Hï  H$   HÀHî  Hêî  H[í  H$   H\î  Ç2í  	 ÀÇ,í     HÑØ  HD$hHÍØ  HD$pÿ²¥  í  ¹   è®(  3Éÿ¥  H
K©  ÿ}¥  =ví   u
¹   è(  ÿ\¥  º	 ÀHÈÿF¥  HÄ   ÃÌÌH\$Hl$Ht$WHì HYHé¾  HËLÆ3ÒègÑÿÿE3ÛH}AKA·ÃD]D]D]fó«H=RÜ  H+ýHÿÃHîuòH  º   9HÿÁHêuòH\$0Hl$8Ht$@HÄ _ÃÌÌH\$Ht$WHì  H·×  H3ÄH$p  HñIHT$PÿË¤  »   À=  3ÀHT$pÿÀHÿÂ;ÃrõD$VÆD$p H|$Vë)¶WD¶ÀD;ÂwA+ÐIÀJLpDB² èyÐÿÿHÇÀuÓFd$8 LD$pD$0FDËD$(H$p  º   3ÉHD$ è?  d$@ FVD$8H$p  \$0HD$(LL$pDÃ3É\$ èd<  d$@ FVD$8H$p  \$0HD$(LL$pA¸   3É\$ è.<  L$p  HN3ÒAöt	p  ëAöt	 p     ëÆ    HÿÁHÿÂIÃHëu¿ë?3ÒHNDBA@ øw	B ëAøw	 Bà   ëÆ    ÿÂHÿÁ;ÓrÇH$p  H3ÌèÕÿÿL$  I[Is Iã_ÃÌH\$WHì èÝ
  HøÈ   
Fß  tH¸À    t	H¸   ën¹
   è÷øÿÿH¸   H\$0H;Þ  tDHÛtðÿuHÇÙ  HL$0H;ÈtèüóÿÿHáÝ  H¸   HÓÝ  HD$0ð H\$0¹
   è÷ÿÿHÛuK è×ÿÿHÃH\$8HÄ _Ã@SHì@ÙHL$ 3ÒèÌÔÿÿ%Õî   ûþu%ÇÆî     ÿ@¢  |$8 tSHL$0¡È   ýëEûýuÇî     ÿ¢  ëÔûüuHD$ Çî     @ë»|$8 tHD$0 È   ýÃHÄ@[ÃH\$UVWATAUHì@HÔ  H3ÄHD$8HòèIÿÿÿ3Ûø;Ãu
HÎèüÿÿé  L-ÝÜ  ËHëIÅA¼   98'  AÌIìHÀ0ùréÿèý    ÿéý  ø   ·Ïÿ_¡  ;Ãç   HT$ Ïÿ2¡  ;ÃÆ   HN3ÒA¸  èÍÿÿ~^D9d$    HD$&8\$&t-8Xt(¶8¶H;ùw+ÏHT7AÌ
IÔI+ÌuõHÀ8uÓHF¹þ   IÄI+ÌuõNé¤  t(été
tA;ÌtÃë¸  ë¸  ë¸  ë¸  FDfë^H~·Ã¹   fó«éà   9îì  ·þÿÿÈÿéÖ   HN3ÒA¸  è?ÌÿÿHlm L{Û  HíAº   MDíIÈA8t18Yt,¶¶A;ÐwLL2AAÔA¶AMÌ;ÐvìHÁ8uÏIÀMÜM+Ôu»~ï¤  Dft$ïtï
tA;üu»  ë»  ë»  ë»  ^HVI|í¹   ·HÇfHÂI+ÌuíHÎè|úÿÿ3ÀHL$8H3ÌèÍÑÿÿH$   HÄ@A]A\_^]ÃÌHÄHXHpHxL` AUHì0ùAÍÿè  HðèüÿÿH¸   Ïè¾üÿÿDà;C  ¹   è\îÿÿHØ3ÿH;Ç|  H¸   HÈA¸   èå:  ;HÓAÌèýÿÿDè;Ç$  H¸   ðÿuH¸   L%ÂÕ  I;ÌtèüïÿÿëL%¯Õ  H¸   ðöÈ   	  öÈÚ  ü   ¹
   èôÿÿC
ë  Cë  C ë  ×T$ LW­ÿÿú}HcÊ·DKfAH= ÿÂT$ ëâ×T$ ú  }HcÊDB * ÿÂT$ ëá|$ ÿ   }HcÏ  B0+ ÿÇ|$ ëÞHÙ  ð ÿuH
Ù  I;ÌtèïÿÿHùØ  ð¹
   èÃòÿÿë+øÿu&L%­Ô  I;ÜtHËèäîÿÿèWìÿÿÇ    ë3ÿDïAÅH\$@Ht$HH|$PLd$XHÄ0A]ÃHì(=
ò   u¹ýÿÿÿèñýÿÿÇ÷ñ     3ÀHÄ(ÃH\$Ht$WHì H(  HÙHÀtyH
sÞ  H;ÁtmH  HÀta8 u\H   HÉt9 uè;îÿÿH(  èC>  H  HÉt9 uèîÿÿH(  èÙ=  H  èîÿÿH(  èõíÿÿH0  HÀtG8 uBH8  Héþ   èÑíÿÿHH  ¿   H+Ïè½íÿÿHP  H+Ïè®íÿÿH0  è¢íÿÿHX  H Ü  H;Èt¹`   uèa;  HX  èuíÿÿH{X¾   HaØ  H9GðtHHÉt
9 uèMíÿÿHø tHOHÉt
9 uè3íÿÿHÇ Hîu½HËH\$0Ht$8HÄ _éíÿÿÌÌðH  HÀtð H   HÀtð H  HÀtð H0  HÀtð HAXA¸   H·×  H9PðtHHÒtðHxø t
HPHÒtðHÀ IèuÉHX  ð`  ÃÌÌÌHÉ   AÉÿðD	H  HÀtðDH   HÀtðDH  HÀtðDH0  HÀtðDHAXA¸   H×  H9PðtHHÒtðD
Hxø t
HPHÒtðD
HÀ IèuÉHX  ðD`  HÁÃÌÌÌ@SHì HÚHÒtAHÉt<LL;Òt/HHÊèþÿÿMÒtIÊè%ÿÿÿA: uHÖ  L;ÐtèúüÿÿHÃë3ÀHÄ [ÃÌ@SHì èé  HØÈ   
RÖ  tH¸À    tèÉ  HÀ   ë+¹   èþïÿÿHÀ   H×  èVÿÿÿHØ¹   èÝîÿÿHÛuK èÐÎÿÿHÃHÄ [ÃÌÌÌHÿ%Å  Ì3ÉHÿ%»  ÌÌÌHÿ%¹  ÌHì(
f×  ùÿt
ÿ»  
T×  ÿHÄ(éÿíÿÿÌÌÌH\$WHì HúHÙHQ£  H    ÇA   ÇÈ      Æt  CÆ÷  CH4Ð  H¸   ¹
   è+ïÿÿH¸   ð ¹
   èîÿÿ¹   èïÿÿH»À   HÿuHÖ  HÀ   HÀ   èýÿÿ¹   èÙíÿÿH\$0HÄ _ÃÌÌH\$WHì ÿ  
~Ö  øÿÆ  HØHÀuHHºÈ  èAèÿÿHØHÀt3
SÖ  HÐÿ¢  HËÀt3Òèôþÿÿÿ¦  HKÿëèéÿÿ3ÛÏÿ  HÃH\$0HÄ _Ã@SHì èqÿÿÿHØHÀuHè-ÍÿÿHÃHÄ [ÃHÉ+  H\$WHì HÙHI8HÉtè<éÿÿHKHHÉtè.éÿÿHKXHÉtè éÿÿHKhHÉtèéÿÿHKpHÉtèéÿÿHKxHÉtèöèÿÿH   HÉtèåèÿÿH    H¡  H;ÈtèÍèÿÿ¹
   èíÿÿH¸   HL$0HÉtðÿuH`Î  HL$0H;Ètèèÿÿ¹
   èNìÿÿ¹   èDíÿÿH»À   Hÿt+HÏèóûÿÿH;=ÐÔ  tHgÓ  H;øt? u	HÏè½ùÿÿ¹   èìÿÿHËè6èÿÿH\$8HÄ _ÃÌÌÌ@SHì èaÏÿÿèÌêÿÿÀt`H
­þÿÿÿ  Ô  øÿtHºÈ  ¹   èYæÿÿHØHÀt1
kÔ  HÐÿº  Àt3ÒHËèýÿÿÿ¾  HKÿ¸   ëèËüÿÿ3ÀHÄ [ÃÌÌÌHl$Ht$WHì`HcùêHL$@IÐè¯ÈÿÿD_Aû   wHD$@H@  ·yé   ÷HT$@Áþ@¶Îè>  º   Àt@´$   @¼$   Æ$    DJë@¼$   Æ$    DÊHL$@T$8L$   AD$0AHL$@D$(HD$pHD$ èí0  Àu8D$XtHD$P È   ý3Àë·D$p#Å|$X tHL$P¡È   ýL\$`IkIs Iã_ÃÌÌÌHÄHXHhHp HWHì HÊHÚè¶áÿÿKHcðöÁuèÞãÿÿÇ 	   K Èÿé4  öÁ@t
èÂãÿÿÇ "   ëâ3ÿöÁt{öÁ   HCáþHKC{àïÈC©  u/è3¾ÿÿHÀ0H;Øtè%¾ÿÿHÀ`H;ØuÎèi  ;ÇuHËèÑ;  ÷C     +HS+kHBHC$ÿÈ;ïC~DÅÎè¾!  øëWÉ Ké?ÿÿÿþÿt#þþtHÎHÆHÀæ  áHÁøHkÉXHÂëH
Ç  öA t3ÒÎDBè:  HøÿïþÿÿHKD$0ë½   HT$0ÎDÅèC!  ø;ýÅþÿÿ¶D$0H\$8Hl$@Ht$HHÄ _ÃÌÌÌH\$H|$Ll$ AVHì0L5Ñ  ù3ÛIÆ;tÿÃHÀûrñûÔ  ¹   èÿ<  ø|  ¹   èì<  Àu
=9Æ  a  ÿü     H=à  A½  L  HÏIÕè6  ÀtHd$  E3ÉE3À3Ò3ÉèÛßÿÿHùß  A¸  3ÉÆîà   ÿ#  Àu1L¨  H
Òß  ºû  è36  ÀtHd$  E3ÉE3À3Ò3ÉèßÿÿH
¨ß  è  HÿÀHø<vFH
ß  è  Hâ  LK  HL8ÞA¹   H+Ñè 5  ÀtHd$  E3ÉE3À3Ò3Éè/ßÿÿL  IÕHÏèI4  ÀtHd$  E3ÉE3À3Ò3ÉèßÿÿLcÃIÕHÏMÀODÆè4  ÀtHd$  E3ÉE3À3Ò3ÉèÕÞÿÿH  A¸  HÏè9  ëE¹ôÿÿÿÿo  HøHÀt2Høÿt,HcÛHÛILÞè±  ITÞHd$  LL$HLÀHÏÿ  H\$@H|$PLl$XHÄ0A^ÃÌÌÌHì(¹   è;  øt¹   èÿ:  Àu=LÄ  u¹ü   è¤ýÿÿ¹ÿ   èýÿÿHÄ(ÃÌ@SHì º   JèõàÿÿHÈHØè~÷ÿÿHÓå  HÄå  HÛuCëH# 3ÀHÄ [ÃÌÌH\$Ht$H|$ATAUAVHì LñèÆÿÿH
å  è>÷ÿÿLàH
tå  è/÷ÿÿHØI;Ä   HøI+üLoIý   IÌè:  HðI;ÅsTº   H;ÂHBÐHÐH;ÐrIÌè¿àÿÿ3ÛH;Ãuë3ÛHV H;ÖrFIÌè£àÿÿH;Ãt9HÁÿHøHÈèöÿÿHóä  IÎèöÿÿHHKèöÿÿHÐä  IÞë3ÛèÄÅÿÿHÃH\$@Ht$HH|$PHÄ A^A]A\ÃÌÌÌHì(èïþÿÿH÷ØÀ÷ØÿÈHÄ(ÃÌH\$WHì HC¥  H=<¥  ëHHÀtÿÐHÃH;ßríH\$0HÄ _ÃH\$WHì H¥  H=¥  ëHHÀtÿÐHÃH;ßríH\$0HÄ _ÃH\$WHì HÃÎ  ¿
   HèªõÿÿHHÃHïuëH\$0HÄ _ÃÌÌÌÌÌÌÌÌÌÌÌÌÌÌHÁ¹MZ  f9t3ÀÃHcH<HÈ3À9PE  uº  f9QÀóÃÌLcA<E3ÉLÒLÁA·@E·XJL EÛtQL;Òr
AÂL;ÐrAÿÁHÁ(E;Ërâ3ÀÃHÁÃÌÌÌÌÌÌÌÌÌÌHì(LÁL
²ÿÿIÉèjÿÿÿÀt"M+ÁIÐIÉèÿÿÿHÀt@$Áè÷Ðàë3ÀHÄ(ÃÌÌÌHì(è3öÿÿHÐ   HÉtÿÑë è8  HÄ(ÃÌHì(H
ÑÿÿÿèôÿÿH)Þ  HÄ(ÃÂ  ÌH\$Hl$Ht$WHì HòùèVõÿÿE3ÛHØI;Ã  H    Lc©Í  HÑ9:tIÀHÂHÁàHÁH;ÐréIÀHÁàHÁH;Ðs9:tIÓI;ÓC  LBM;Ã6  Iøu
LZA@üé%  IøuÈÿé  H«¨   H³¨   Jùè   LcÍ  
Í  AÊMÊD;Ñ}*IÁáH    AÿÂIÁM\ø
çÌ  åÌ  ÈD;Ñ|Ú:  À»°   uÇ°      ëv:  ÀuÇ°      ëb:  ÀuÇ°      ëN:  ÀuÇ°      ë::  ÀuÇ°      ë&:  ÀuÇ°      ë:  Àu
Ç°      °   ¹   AÿÐ»°   ëLZAÿÐH«¨   éãþÿÿ3ÀH\$0Hl$8Ht$@HÄ _ÃÌÌH
QÜ  H
RÜ  H
SÜ  H
TÜ  ÃÌÌÌH
AÜ  éòÿÿH\$Ht$WATAUAVAWHì@Ù3ÿ|$p3öÑê	  ê¢   ê   ê   ê   êtMêt,út_èÚÿÿÇ    H!t$ E3ÉE3À3Ò3ÉèªÙÿÿÈÿéÑ  L%§Û  H
 Û  ¿   |$péª   L%Û  H
Û  ¿   |$pé   L%wÛ  H
pÛ  ¿   |$pëuèòÿÿHðHÀuÈÿék  H    HÊLcëÊ  9YtHÁIÀHÁàHÂH;ÈrèIÀHÁàHÂH;Ès9Yt3ÉLaM,$ëL%ðÚ  H
éÚ  ¿   |$pèCñÿÿLèIýu3Àéö   Míu
AMè)ÃÿÿÌÿt3ÉèÉàÿÿûtûtûtL|$8Dt$pë1L¾¨   L|$8H¦¨    ûuD¶°   Ç°      ëDt$pûu9
	Ê  ÑL$0Ê  È;Ñ}*HcÊHÉH    HdÈ ÿÂT$0
ØÉ  ëÓè}ðÿÿI$ÿt3Éè*ßÿÿ¿   ;ßu
°   ÏAÿÕëËAÿÕ;ßt
ûtûuL¾¨   ;ßuD¶°   3ÀL\$@I[8Is@IãA_A^A]A\_ÃÌÌÌH
ÙÙ  ÃH
áÙ  ÃH
áÙ  ÃHì8ÿ  DØD$ ë=  Àu¹   ÿÃ  E3ÛD\$ AÃHÄ8ÃÌÌÌH
©Ù  Ã@SHì HÙH
Ù  è³ïÿÿHÀtHËÿÐÀt¸   ë3ÀHÄ [ÃÌÌHì(H8csmàu+xu%@ = t=!t="t= @uèúÿÿÌ3ÀHÄ(ÃÌÌÌHì(H
±ÿÿÿÿ  3ÀHÄ(ÃH\$WHì 3ÿ9=vÝ  uèWëÿÿHHÝ  H»  HÛHDØ; w	; t3ÿt);"u	3ÀÿÀø¶èváÿÿÀtHÿÃHÿÃëÐ< w	HÿÃÀuóHÃH\$0HÄ _ÃÌÌÌH\$Hl$Ht$WHì0=ñÜ   uèÒêÿÿHÛÌ  3ÿHÛuÈÿéÉ   <=tÿÇHËèþ  H\ÀuçGº   HcÈè³×ÿÿHøHYÌ  HÀtÀHÌ  ; teHËèÀ  ;=ptCHcîº   HÍèx×ÿÿHHÀtrLÃHÕHÈè+  ÀtHd$  E3ÉE3À3Ò3Éè]ÔÿÿHÇHcÆHØ; u¢H#Ì  HËè¿ØÿÿH%Ì   H' ÇõÛ     3ÀH\$@Hl$HHt$PHÄ0_ÃH
§Ë  èØÿÿH%Ë   éÿÿÿÌHÄHXHhHpHx ATAUAVHì Ll$`MñIøAe  LâHÙAÇ   HÒtLIÄ3í;"u3Àí@¶"ÀHÿÃèë9AÿE HÿtHÿÇ¶3HÿÃÎè¡ßÿÿÀtAÿE HÿtHÿÇHÿÃ@ötíu­@þ t@þ	u¡Hÿt	ÆGÿ ëHÿË3ö; ã   ; t;	uHÿÃëñ; Ë   MätI<$IÄAÿº   3ÉëHÿÃÿÁ;\tö;"u6ÊuötHC8"uHØë3À3ÒöÀðÑéëÿÉHÿtÆ\HÿÇAÿE ÉuëÀtOöu< tG<	tCÒt7¾ÈèÄÞÿÿHÿtÀtHÿÃHÿÇAÿE HÿÇëÀtHÿÃAÿE AÿE HÿÃéYÿÿÿHÿtÆ HÿÇAÿE éÿÿÿMätI$$ AÿH\$@Hl$HHt$PH|$XHÄ A^A]A\ÃÌH\$Ht$ WHì0=öÙ   uè×çÿÿH=Õ  A¸  3ÉH×ÆrÖ   ÿP  H©Ù  H=É  HÛt; uHßHD$HLL$@E3À3ÒHËHD$ è½ýÿÿHct$@H¹ÿÿÿÿÿÿÿH;ñs\HcL$HHùÿsQHñH;ÑrHHÊèÔÿÿHøHÀt8LðHD$HLL$@H×HËHD$ ègýÿÿD\$@H=ßÈ  AÿË3ÀDÏÈ  ëÈÿH\$PHt$XHÄ0_ÃÌÌHÄHXHhHpHx ATHì@
Õ  E3äIÜAt$A;Ìu2ÿ¿  HØI;ÄtÇmÕ     ë!ÿõ  
_Õ  øxDÎ
SÕ  ùº   I;Üuÿ  HØI;Äu3Àé  HûfD9#tHþfD9'u÷HþfD9'uîLd$8Ld$0H+ûHÑÿLÃ3ÒDO3ÉDd$(Ld$ ÿ"  HcèA;ìtAHÍèÖÒÿÿHðI;Ät1Ld$8Ld$0DOLÃ3Ò3Él$(HD$ ÿæ  A;ÄuHÎèÔÿÿIôHËÿÅ  HÆës;Ît	A;ÌLÿÿÿÿ¥  HØI;Ä:ÿÿÿD8 tHÿÀD8 uøHÿÀD8 uð+ÃÿÀHcðHÎèIÒÿÿHøI;ÄuHËÿ\  é ÿÿÿLÆHÓHÈèÑ  HËÿ@  HÇH\$PHl$XHt$`H|$hHÄ@A\ÃÌÌL$Hì(E3Àº   3Éÿ8  HéÓ  HÀt#LD$0A¹   3ÒHÈÇD$0   ÿ  ¸   HÄ(ÃH\$WHì Hµ  Hd$0 H¿2¢ß-+  H;ÇtH÷ÐHµ  ëvHL$0ÿç  H\$0ÿÔ  DØI3ÛÿX  DØI3Ûÿ´  HL$8DØI3Ûÿ  L\$8L3ÛH¸ÿÿÿÿÿÿ  L#ØH¸3¢ß-+  L;ßLDØL´  I÷ÓL´  H\$@HÄ _ÃÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌff     HìØ  M3ÀM3ÉHd$ LD$(èN  HÄØ  ÃÌÌÌÌÌÌfD  HL$HT$DD$IÇÁ ëÌÌÌÌÌÌfÃÌÌÌÌÌÌf     ÃÌÌÌHì8ùþu
èêÏÿÿÇ 	   ëRÉx.;
Ó  s&HcÉHÓ  HÁáHÁøHkÉXHÂ¾Dà@ë"è«ÏÿÿHd$  E3ÉE3À3Ò3ÉÇ 	   èÀÎÿÿ3ÀHÄ8ÃÌ@SHì@ÙHL$ è*³ÿÿHD$ D¶ÛH@  B·Y%   |$8 tHL$0¡È   ýHÄ@[ÃÌÌÌ@SHì@ÙHL$ 3Òèà²ÿÿHD$ D¶ÛH@  B·Y%   |$8 tHL$0¡È   ýHÄ@[ÃÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌff     HÁH÷ÙH©   tfHÿÀÒt_¨uóI¸ÿþþþþþþ~I» HMÈHÀLÊH÷ÒI3ÑI#ÓtèHPøÒtQötGHÁêÒt9öt/HÁêÒt!ötÁêÒt
öu¹HDÿÃHDþÃHDýÃHDüÃHDûÃHDúÃHDùÃHDøÃH
1²  3ÀHÉH9
¼Ð  ÀÃH\$fDL$ UVWHì`3íIøHòHÙH;ÕuL;ÅvH;Ít)3Àé¤   H;Ít	ÿIøÿÿÿv$èÑÍÿÿ»   E3ÉE3À3Ò3ÉHl$ èæÌÿÿÃëoH$    HL$@èT±ÿÿL\$@A9kÍ   ·$   ¹ÿ   f;ÁvLH;õtH;ýv
LÇ3ÒHÎèªÿÿècÍÿÿÇ *   èXÍÿÿ @8l$XtHL$P¡È   ýH$   HÄ`_^]ÃH;õtCH;ýw<è$Íÿÿ»"   E3ÉE3À3Ò3ÉHl$ è9Ìÿÿ@8l$XHÿÿÿHL$P¡È   ýé7ÿÿÿH;ÝtÇ   @8l$XçþÿÿHD$P È   ýéÖþÿÿH$   ¬$   AKHD$8Hl$0L$   A¹   3Ò|$(Ht$ ÿL~  ;Åt9¬$   ÿÿÿH;Ýtëÿ}  øz÷þÿÿH;õtH;ýv
LÇ3ÒHÎè|©ÿÿèCÌÿÿ»"   E3ÉE3À3Ò3ÉHl$ èXËÿÿ@8l$XgþÿÿHD$P È   ýéVþÿÿHì8Hd$  èáýÿÿHÄ8Ã%Ï   ÃH\$Ht$WHì HÙHùàw|¿   HÉHEùH
YÎ  HÉu ècëÿÿ¹   è1éÿÿ¹ÿ   è_²ÿÿH
4Î  LÇ3ÒÿÁ|  HðHÀu,9+Î  tHËèQóÿÿÀt
ë«èrËÿÿÇ    ègËÿÿÇ    HÆëè+óÿÿèRËÿÿÇ    3ÀH\$0Ht$8HÄ _ÃÌÌH\$Ht$WHì HÚHùHÉu
HÊè&ÿÿÿëjHÒuèÍÿÿë\HúàwCH
Í  ¸   HÛHDØLÇ3ÒLËÿå|  HðHÀuo9wÍ  tPHËèòÿÿÀt+Hûàv½HËèòÿÿè²ÊÿÿÇ    3ÀH\$0Ht$8HÄ _ÃèÊÿÿHØÿ¨{  Èè=ÊÿÿëÕè|ÊÿÿHØÿ{  Èè$ÊÿÿHÆë»ÌH\$Ht$WHì03ÿHÚHñHÒt13ÒHGàH÷óI;Às#è5ÊÿÿH!|$ E3ÉE3À3Ò3ÉÇ    èKÉÿÿ3Àë=I¯ØHÉtè%  HøHÓHÎèÃþÿÿHðHÀtH;ûsH+ßH3ÒLÃè§ÿÿHÆH\$@Ht$HHÄ0_ÃÌÌH\$WHì0ÏÿHÙHÉu#è®ÉÿÿH!\$ E3ÉE3À3Ò3ÉÇ    èÄÈÿÿÇëFöAt:èýÌÿÿHËøè*  HËè;ÇÿÿÈèè(  ÀyÏÿëHK(HÉt
èÝËÿÿHc( c ÇH\$@HÄ0_ÃÌÌÌH\$HL$WHì0HÙÏÿ3ÀHÉÀÀu$èÉÿÿÇ    Hd$  E3ÉE3À3Ò3Éè+ÈÿÿÇë&öA@ta ëè®¤ÿÿHËèÿÿÿøHËè+¥ÿÿÇH\$HHÄ0_ÃÌÌH\$ UVWATAUAVAW¸0  èÞj  H+àH¤¬  H3ÄH$   3í3ÿEèLâHcÙl$@EÀu3Àéç  HÒu.èÈÿÿ!8ègÈÿÿH!|$ E3ÉE3À3Ò3ÉÇ    è}ÇÿÿÈÿé´  LûLóHüË  IÁþAçJðLt$PMkÿXAt8@ö@Ðþ@þt@þu	AÅ÷Ð¨tAöD t
3ÒËDBè  Ëèï÷ÿÿÀñ  HË  JðAöDÚ  èÇàÿÿ3ÛHT$XHÀ   HrË  9YJðIÃÿ®y  À¤  Ût	@ö  ÿy  !|$LIÜD$XEíw  Dt$X½
   @ö  HT$PE3öù
H-Ë  HTÕ AÆA|P t ADLL$]A¸   D$\AdP HT$\ëI¾ÉèË÷ÿÿÀt4IÅH+ÃIÄHøÏ  HL$DA¸   HÓè5*  øÿv  HÿÃëA¸   HÓHL$Dè*  øÿU  Hd$8 Hd$0 L$XHD$\LD$DA¹   3ÒÇD$(   HÿÃHD$ ÿCx  èÀ  HD$PHd$  H
'Ê  HÁLL$LHT$\IDÅÿÜw  ÀB  ûA+ü|$@9l$LË   ½
   Eö¯   HD$PHd$  @l$\H
ÌÉ  LL$LDEôHÁHT$\Iÿw  Àæ   |$L|{ÿD$@ÿÇëe@þt@þu·E3öfø
fD$DAÆHÃ@þt@þu6·L$Dèh&  f;D$D   ÇEötÍfl$DèI&  f;D$DuxÿÇÿD$@ÃA+ÄA;Åþÿÿ\$LLt$Pl$@ÿ¸  Ûz  ûe  è7ÅÿÿÇ 	   èLÅÿÿéØüÿÿLt$PÿÇJLõ ADLJDõ AÇDP   \$Lë¥ÿv  Øë\$Lë¡H«È  JðAöDÊ  3ÛIì@öÐ   Eíü  S
Dt$@H´$   3ÉÅA+ÄA;Ås&E HÿÅ<
uAÿÆHÿÆHÿÁHÿÁHÿÆHùÿ  rÐH!\$ H$   DÆD+ÀH(È  Dt$@Lt$PLL$HH$   JðIÿÓu  Àt5|$HH$   H+ðHcD$HH;ÆÅþÿÿÅº
   A+ÄA;ÅNÿÿÿé­þÿÿÿu  Øé þÿÿ@þÔ   Eí"  º
   Dt$@H´$   3ÉÅA+ÄA;Ås1·E HÅfø
ufAÆHÆHÁHÁfHÆHùþ  rÅH!\$ H$   DÆD+ÀHAÇ  Dt$@Lt$PLL$HH$   JðIÿìt  ÀJÿÿÿ|$HH$   H+ðHcD$HH;ÆÚýÿÿÅº
   A+ÄA;Å?ÿÿÿéÂýÿÿEíN  A¸
   HL$p3ÒÅA+ÄA;Ås.·E HÅfø
ufDHÁHÂHÂfHÁHú¨  rÈHd$8 Hd$0 HD$p+ÈLD$pÇD$(U
  Á¹éý  +Â3ÒÑøDÈH$   HD$ ÿMt  DðÀýÿÿ3öHD$PHd$  HcÎH   EÆH
 Æ  HÁLL$HD+ÆIÿÚs  Àtt$HD;ö½ëÿMs  ØD;öÈüÿÿýA¸
   A+üA;ýÿÿÿé¯üÿÿIH!|$ LL$HEÅIÔÿs  Àt|$H3Ûéüÿÿÿúr  ØéüÿÿËèÂÿÿé~ùÿÿHÅ  JðAöD@tA<$.ùÿÿè¨ÁÿÿÇ    è½Áÿÿ  éHùÿÿ+ýÇH$   H3Ìè¥ÿÿH$  HÄ0  A_A^A]A\_^]ÃÌÌH\$Ht$L$WATAUAVAWHì0EàLêHcÙûþuèVÁÿÿ3ÿ8è-ÁÿÿÇ 	   ÈÿéÔ   3ÿ;ß¡   ;»Ä     HóLóIÁþL=¼Ä  æHköXK÷¾L0áu+èþÀÿÿ8è×ÀÿÿÇ 	   H|$ E3ÉE3À3Ò3Éèí¿ÿÿÈÿëmËèõ%  K÷öD0tEÄIÕËèÔ÷ÿÿøëèÀÿÿÇ 	   è¤Àÿÿ8ÏÿËèd&  Çë)èÀÿÿ8èhÀÿÿÇ 	   H|$ E3ÉE3À3Ò3Éè~¿ÿÿÈÿH\$hHt$pHÄ0A_A^A]A\_ÃÌÌÌH\$L$VWATHì0HcùÿþuèÀÿÿÇ 	   ÈÿéÙ   É®   ;=¢Ã  ¢   HßH÷HÁþL%£Ã  ãHkÛXIô¾Láu%èÅ¿ÿÿÇ 	   Hd$  E3ÉE3À3Ò3ÉèÚ¾ÿÿÈÿëzÏèâ$  IôöDt+ÏèK$  HÈÿq  Àu
ÿp  Øë3ÛÛtè¿ÿÿèb¿ÿÿÇ 	   ËÿÏè>%  Ãë#èI¿ÿÿÇ 	   Hd$  E3ÉE3À3Ò3Éè^¾ÿÿÈÿH\$`HÄ0A\_^ÃÌH\$WHìPHÚHùHÉu$è¿ÿÿHd$  E3ÉE3À3Ò3ÉÇ    è¾ÿÿ3ÀëvHÒt×H;ÊsòHL$0IÐè¢ÿÿL\$8A{ u|$H HCÿtHHL$@¡È   ýë:HSÿHÿÊH;úw¶BöDuíHËH+ÊáH+Ù|$H tHL$@¡È   ýHCÿH\$`HÄP_ÃÌÌE3Àé<ÿÿÿH\$Hl$Ht$WATAUHìPE3íIùIðHêHÙM;ÍuI;ÍuI;Õu 3Àë>I;ÍtI;ÕvM;ÍuD)ëèM;Åu?D)èý½ÿÿ»   E3ÉE3À3Ò3ÉLl$ è½ÿÿÃL\$PI[ Ik(Is0IãA]A\_ÃH$   HL$0èh¡ÿÿL\$8HÕHËE9ku LÏLÆèX  D8l$Ht±HL$@¡È   ýë£HÿÿuHÿÆHÿÁA:Åt.Hêuëë&HÿÆHÿÁA:ÅtHêtHïuåI;ýuD)HÿÁI;Õ  D8.tHÿuYLaÿIôL;ãr¶HT$0è'ÇÿÿA;ÅtHÿÎH;ósæAÄ+Æ¨t*E,$èô¼ÿÿº*   D8l$HtHL$@¡È   ýÂéóþÿÿHÿÿu\HývOHt+þHþH;ór¶HT$0èÁÆÿÿA;ÅtHÿÏH;ûsæÆ+Ç¨t D.D8l$HtHD$@ È   ý¸P   éþÿÿDl+ÿëÜD+èi¼ÿÿ»"   E3ÉE3À3Ò3ÉLl$ è~»ÿÿD8l$HaþÿÿHL$@¡È   ýéPþÿÿHÁH+ÃHø|YHqþHþH;ór¶HT$0è!ÆÿÿA;ÅtHÿÏH;ûsæÆ+Ç¨t+D.èð»ÿÿº*   D8l$HÿÿÿHD$@ È   ýéóþÿÿD8l$H ýÿÿHD$@ È   ýéýÿÿÌ@UATAUAVAWHì`Hl$@H]PHuXH}`H  H3ÅHED$¾  ¾   3ÿMÙLMDE DòUHÙDnÿD;×uOLw  EÍº   3É|$(H|$ ÿlm  ;ÇtEÕD-Ò½  ëÿ>l  DÃ½  øxDDÖDµ½  L]DMpD;Ï~5AÉIÃA+Í@88t
IÅ;ÏuñÉÿAÁ+ÁA+ÅA;Á}
DHDMpëDÈEpD;Ö\  D;×S  E;Õ  D¥   ÷D;çuHD`÷   MÃAÌÒ|$(H|$ âAÕÿ¤l  LcøD;ÿ<  H»ðÿÿÿÿÿÿA¾ÝÝ  A½   ~[3ÒHBàI÷÷HørLKL?I;Íw.HAH;ÁwHÃHàðèZ\  H+àH|$@Hÿå  ÇÌÌ  ëèîÿÿHøHÀtD0HÇHÿÀ  DMpLEº   AÌD|$(H|$ ÿük  3É;ÁK  U L$(HL$ MEÏLÇÿßk  E3ÀHcðA;ð!  DU Aºâ
s;   A;À  ;ðÿ   MD$(HExEÏLÇAÒHD$ ÿk  éÛ   A;ð~`3ÒHBàH÷öHørQHL6I;Íw*HAH;ÁwHÃHàðèW[  H+àH\$@I;ØtÇÌÌ  ëèíÿÿE3ÀHØI;ÀtD0HÃDU ëIØI;ØtnMEÏLÇAÒt$(H\$ ÿk  3É;Át?   3ÒHL$8DÎLÃHL$0;ÁuL$(HL$ ë
D$(HExHD$ AÌÿOj  ðHKðD91uè»ÿÿHOðD91uèõºÿÿÆéÍ  H÷LçD;÷uHDpDu½   ÿuHxAÎèh   Dèøÿu3Àé  L}xLE;Ç<  3ÛLMpÐÏ\$(H\$ è   HðH;ÃtÉDMpU LÀAÎ\$(H\$ ÿj  LcÈDMD;Ëuûé  D;ËA¾ÝÝ  ~bIÉIùàwYHÁHù   w4HYH;Ùw
H»ðÿÿÿÿÿÿHãðHÃè¾Y  H+ãH\$@HÛt%ÇÌÌ  ëèëÿÿHØHÀtD0HÃDMHÛu3ÛëMcÁ3ÒHËè{ÿÿD]DMpU MD\$(LÆH\$ ÿJi  EÀu3ÿë.   LMLÃD$(×AÍL|$ è  }Là3ÀL;àDøHKðD91u(èg¹ÿÿë!   DMpU D$(AÎL|$ ÿâh  ø3ÛH;ótHÎè5¹ÿÿL;ãt
M;ütIÌè#¹ÿÿÇHMH3Íè!ÿÿH]PHuXH}`He A_A^A]A\]ÃÌÌÌH\$Ht$WHìpòHÑHL$PIÙAøè ÿÿ$¸   D$À   HL$PD\$@D$8$°   D$0H$¨   LËHD$($    DÇÖD$ èOúÿÿ|$h tHL$`¡È   ýL\$pI[IsIã_ÃÌÌDL$ UATAUAVAWHì@Hl$0H]@HuHH}PH²  H3ÅHED
L¸  ¿   3ÛMðDúLéwD;Ëu=LM H­q  DÇÏÿ¶g  ;Ãt=¸  ë6ÿ|f  D
¸  øxDDÎD
÷·  D;Î&  D;Ë  D;ÏC  uh;óuIE p÷]xDMXMÆÒÎ\$(âH\$ ×ÿ,g  LcàD;ã  A½ÝÝ  ~hH¸ðÿÿÿÿÿÿL;àwYKL$Hù   w5HAH;Áw
H¸ðÿÿÿÿÿÿHàðèçV  H+àH|$0H;ûµ   ÇÌÌ  ëè¥èÿÿHøH;ÃtD(HÇëHûH;û   MÄ3ÒHÏMÀèÿÿDMXMÆº   ÎDd$(H|$ ÿvf  ;ÃtLM`DÀH×AÏÿwf  ØHOðD9)uè«¶ÿÿÃé   DepHûD;ãuIE D`uh;óuIE pAÌè"  øÿu3ÀëU;Æt$LMXMÆÐÎ\$(H\$ èP  HøH;Ãt×LðHE`DMXMÆA×AÌHD$ ÿáe  ðH;ûtHÏè¶ÿÿÆHMH3ÍèÿÿH]@HuHH}PHeA_A^A]A\]ÃÌÌH\$Ht$WHì`òHÑHL$@AÙIøèüÿÿ$    D$¨   HL$@D\$8D$0$   D$(H$   DËLÇÖHD$ è.ýÿÿ|$X tHL$P¡È   ýH\$pHt$xHÄ`_ÃÌÌÌÌÌÌÌÌÌÌÌÌÌff     LÙH+Ñ  IøraöÁt6öÁt
IÿÈHÿÁöÁtf
IèfHÁöÁt

IèHÁMÈIÁéuQMÈIÁétH
HHÁIÿÉuðIàMÀuIÃÃ@ 
HÿÁIÿÈuóIÃÃfffffff     fffffIù    sBH
LT
HÁ HAàLQèHD
ðLT
øIÿÉHAðLQøuÔIàéqÿÿÿfff     fHú   rµ¸    
D
@HÁ   ÿÈuìHé   ¸@   L
LT
LÃ	LÃQLL
LT
LÃILÃQLL
 LT
(HÁ@LÃIàLÃQèLL
ðLT
øÿÈLÃIðLÃQøuªIè   Iø   qÿÿÿð$ é¹þÿÿffff     fffffffIÈIøraöÁt6öÁtHÿÉ
IÿÈöÁtHéf
IèföÁt
Hé
IèMÈIÁéuPMÈIÁétHéH
IÿÉHuðIàMÀuIÃÃ HÿÉ
IÿÈuóIÃÃfffffff     fffffIù    sBHD
øLT
ðHé HALQHD
L
IÿÉHALuÕIàésÿÿÿffff     fHú ðÿÿwµ¸    Hé   
D
@ÿÈuìHÁ   ¸@   LL
øLT
ðLÃIøLÃQðLL
èLT
àLÃIèLÃQàLL
ØLT
ÐHé@LÃILÃQLL
L
ÿÈLÃILÃuªIè   Iø   qÿÿÿð$ éºþÿÿHÉà  SHì HÙHIè²ÿÿHKèý±ÿÿHKèô±ÿÿHK èë±ÿÿHK(èâ±ÿÿHK0èÙ±ÿÿHèÑ±ÿÿHK@èÈ±ÿÿHKHè¿±ÿÿHKPè¶±ÿÿHKXè­±ÿÿHK`è¤±ÿÿHKhè±ÿÿHK8è±ÿÿHKpè±ÿÿHKxè±ÿÿH   èt±ÿÿH   èh±ÿÿH   è\±ÿÿH   èP±ÿÿH    èD±ÿÿH¨   è8±ÿÿH°   è,±ÿÿH¸   è ±ÿÿHÀ   è±ÿÿHÈ   è±ÿÿHÐ   èü°ÿÿHØ   èð°ÿÿHà   èä°ÿÿHè   èØ°ÿÿHð   èÌ°ÿÿHø   èÀ°ÿÿH   è´°ÿÿH  è¨°ÿÿH  è°ÿÿH  è°ÿÿH   è°ÿÿH(  èx°ÿÿH0  èl°ÿÿH8  è`°ÿÿH@  èT°ÿÿHH  èH°ÿÿHP  è<°ÿÿHÄ [ÃÌÌHÉtBSHì HÙH	H;
)   tè°ÿÿHKH;
   tè°ÿÿHKH;
   tèò¯ÿÿHÄ [ÃHÉ   SHì HÙHIH;
ô  tèÉ¯ÿÿHK H;
ê  tè·¯ÿÿHK(H;
à  tè¥¯ÿÿHK0H;
Ö  tè¯ÿÿHK8H;
Ì  tè¯ÿÿHK@H;
Â  tèo¯ÿÿHKHH;
¸  tè]¯ÿÿHÄ [ÃÌÌÌ@SHì0LÉHÉt
HÒtMÀu,Dè¬¬ÿÿ»   Hd$  E3ÉE3À3Ò3ÉèÀ«ÿÿÃHÄ0[Ã9 t	HÿÁHêuòHÒuAë¿A IÿÀHÿÁÀtHêuëHÒuAèN¬ÿÿ»"   ë 3ÀëµÌÌÌ@SHì0MØMÉuHÉuHÒu 3Àë?HÉtHÒtMÉuD	ëèMÀu,Dè¬ÿÿ»   Hd$  E3ÉE3À3Ò3Éè«ÿÿÃHÄ0[ÃLÑLÂIùÿuAIÿÃAIÿÂÀt,Ièuêë$AIÿÃAIÿÂÀtIètIéuäMÉuE
MÀfÿÿÿIùÿuDDÿA@PëÆ èu«ÿÿ»"   émÿÿÿÌÌÌ@SHì0HÉt
HÒtMÀu,DèK«ÿÿ»   Hd$  E3ÉE3À3Ò3Éè_ªÿÿÃHÄ0[ÃLÉA IÿÀAIÿÁÀtHêuêHÒuè«ÿÿ»"   ëµ3ÀëÊÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌff     H+ÑLÊöÁtB	:ÂuVHÿÁÀtWH÷Á   uæI» J	fâÿfúøwËHJ	H;Âu¿Iºÿþþþþþþ~LÒHðÿHÁI3ÂIÃtÇëHÀHØÿÃ3ÀÃfffÒt'öt#HÁêÒtötHÁêÒtötÁêÒtöu3ÀÃHÀHØÿÃÌÌÌÌÌÌff     H+ÑIør"öÁtf:
u,HÿÁIÿÈöÁuîMÈIÁéuMÀt:
uHÿÁIÿÈuñH3ÀÃÀØÿÃIÁét7HH;
u[HAH;D
uLHAH;D
u=HAH;D
u.HÁ IÿÉuÍIàMÈIÁétHH;
uHÁIÿÉuîIàëHÁHÁHÁHHÈHÉH;ÁÀØÿÃÌH\$WHì HcÙAøHT$8Ëèø
  Høÿuè-©ÿÿÇ 	   HÈÿëWT$8LD$<DÏHÈÿ`[  D$8øÿuÿZ  Àt	Èè2©ÿÿëÉHËHÃH§¬  HÁøáHÂHkÉXdýHD$8H\$0HÄ _ÃÌÌÌH\$Ht$L$WATAUAVAWHì0EàLêHcÙûþuè®¨ÿÿ3ÿ8è¨ÿÿÇ 	   HÈÿéÙ   3ÿ;ß¥   ;¬     HóLóIÁþL=¬  æHköXK÷¾L0áu,èU¨ÿÿ8è.¨ÿÿÇ 	   H|$ E3ÉE3À3Ò3ÉèD§ÿÿHÈÿëqËèK
  K÷öD0tEÄIÕËèþÿÿHøëèä§ÿÿÇ 	   èù§ÿÿ8HÏÿËè¸
  HÇë*èâ§ÿÿ8è»§ÿÿÇ 	   H|$ E3ÉE3À3Ò3ÉèÑ¦ÿÿHÈÿH\$hHt$pHÄ0A_A^A]A\_ÃÌ@SHì ÿ   HÙ¹   èó§ÿÿHCHÀt
KÇC$   ëKHC ÇC$   HCHCc HHÄ [ÃÌH\$Hl$VWATAUAVHì@AèLêLñè¾ÿÿ3ÛHøH9´©  Ð   H
ÿl  ÿX  HðHÀ  HÖl  HÈÿeW  HÀs  HÈèH¾ÿÿH¥l  HÎHc©  ÿ=W  HÈè)¾ÿÿHnl  HÎHL©  ÿW  HÈè
¾ÿÿH/l  HÎH5©  ÿÿV  HÈèë½ÿÿLØH-©  HÀt!Hék  HÎÿØV  HÈèÄ½ÿÿH©  ëHø¨  ëHï¨  Lð¨  H;ÇtcL;ßt^HÈè¦½ÿÿH
×¨  Hðè½ÿÿLàHöt?HÀt:ÿÖHÀt-H$   A¹   LD$0HL$ AQõHÈAÿÔÀtöD$8uºíë>H
i¨  H;Ït2è?½ÿÿHÀt(ÿÐHØHÀtH
Q¨  H;Ïtè½ÿÿHÀtHËÿÐHØH
#¨  è½ÿÿHÀtDÍMÅIÖHËÿÐë3ÀH\$pHl$xHÄ@A^A]A\_^ÃHì8Éx ù~
ùu  ë1  
  ë#è¥ÿÿHd$  E3ÉE3À3Ò3ÉÇ    è$¤ÿÿÈÿHÄ8ÃHì8HÉu&èÞ¤ÿÿHd$  E3ÉE3À3Ò3ÉÇ    èó£ÿÿHÈÿëLÁH
G§  3ÒÿW  HÄ8ÃÌÌ¹   éæÿÿÌÌHì¨  ö  t
¹
   èþÁÿÿèuÉÿÿHÀt
¹   èrÉÿÿög  t_H$Ð   ÿgU  HL$03ÒA¸   èuÿÿH$¨  3ÉHD$@HD$0ÇD$0  @HD$ H$Ð   HD$(ÿU  HL$ ÿîT  ¹   èÿÿÌÌÌÌHÄHXHhHpHx ATAUAVHìPLòHÑHHÈEáMèèvÿÿMítMu Möu*è¯£ÿÿHd$  E3ÉE3À3Ò3ÉÇ    èÄ¢ÿÿ|$H éé  EätAü|ËAü$ÅA.LD$03ÿI^A¸  ~LD$0@¶Íº   è2¾ÿÿLD$0ëI@  @¶Í·HàÀt@+HÿÃë¾´$   @ý-uÎë@ý+u@+HÿÃEäS  AüI  Aü$?  Eäu(@ý0tA¼
   ë8;xt
;XtA¼   ë&A¼   ëAüu@ý0u;xt;Xu@kHÃM@  3ÒÈÿA÷ôDÈ@¶ÍE·JAöÀt	@¾Íé0ëA÷À  t,E@¾Í<wé ÁÉA;ÌsÎA;ùr"u;ÊvÎMíuHÿË@öÆuMíIEÞ3ÿëYA¯üù@+HÿÃë½ÿÿÿ@öÆu@öÆu:Æàtÿ   wÀu';ýv#èõ¡ÿÿÇ "   @öÆtÏÿë
@Æ$öØÿ÷ßýMítI] @öÆt÷ß|$H tHL$@¡È   ýÇëMítMu @8|$HtHD$@ È   ý3ÀL\$PI[ Ik(Is0I{8IãA^A]A\ÃÌÌHì83ÀEÈLÂD$ HÑ9;  u	H
R  ë3ÉèQýÿÿHÄ8ÃH\$WHì HcùÏèì  HøÿtYHã¤  ¹   ÿu	@¸¸   u
;ùuö@`tè½  ¹   HØè°  H;ÃtÏè¤  HÈÿ?S  Àu
ÿíQ  Øë3ÛÏèØ  LßHÏHÁùAãHs¤  HÊMkÛXBÆD ÛtËèÖ ÿÿÈÿë3ÀH\$0HÄ _ÃH\$Ht$ L$WATAUHì0HcÙûþuè ÿÿ3ÿ8èW ÿÿÇ 	   ÈÿéÉ   3ÿ;ß   ;å£     HóLãIÁüL-æ£  æHköXKDå ¾L0áu+è' ÿÿ8è  ÿÿÇ 	   H|$ E3ÉE3À3Ò3ÉèÿÿÈÿëaËè  KDå öD0tËèþÿÿøëè½ÿÿÇ 	   ÏÿËè  Çë)èÄÿÿ8èÿÿÇ 	   H|$ E3ÉE3À3Ò3Éè³ÿÿÈÿH\$`Ht$hHÄ0A]A\_Ã@SHì öAHÙt"öAtHIèÖ¡ÿÿc÷ûÿÿ3ÀHHCCHÄ [ÃÌHìhH-  H3ÄHD$P="   fL$@tfH
è  HùþuèÑ  H
Ö  Hùÿ¹   Hd$  LL$DHT$@A¸   ÿPQ  À   =Í     ÿÕO  øxu}%µ   ÿQ  Hd$8 Hd$0 ÈHD$HLD$@A¹   3ÒÇD$(   HD$ ÿ8P  H
I  Hùÿt0Hd$  LL$DHT$HDÀÿºP  ÀtfD$@ëÇA     ëí¸ÿÿ  HL$PH3Ìè¹ÿÿHÄhÃH\$Hl$Ht$WHìP3íIðHúHÙH;ÕtL;Åt
@8*uH;Ítf)3ÀH\$`Hl$hHt$pHÄP_ÃHL$0IÑèzÿÿL\$0A9ku%H;Ýt¶f@8l$HtHD$@ È   ý¸   ë®¶HT$0èÎÿÿ;Å   HL$0D  Aù~0A;ñ|+IÅH;ÝÀLÇº	   D$(H\$ ÿtO  HL$0;ÅuHc  H;ðr(@8ot"  @8l$H4ÿÿÿHL$@¡È   ýé#ÿÿÿèÿÿÇ *   @8l$HtHD$@ È   ýÈÿéýþÿÿÅA¹   H;ÝÀAQLÇD$(HD$0H\$ HÿåN  ;Åÿÿÿë¤ÌÌÌE3ÉéþÿÿÌÌÌÌÌÌÌÌH\$Hl$Ht$WHì HÚÉxi;
'   saHcùH-3   H÷çHÁþHkÿXHDõ H<ÿu==j  u'Ététùu¹ôÿÿÿë¹õÿÿÿë¹öÿÿÿÿ©N  HDõ H3ÀëèÿÿÇ 	   è(ÿÿ  ÈÿH\$0Hl$8Ht$@HÄ _ÃÌH\$Hl$WHì Éxs;
  skHcÙH-  HûãHÁÿHkÛXHDý öDtGH<ÿt@=»  u)Ététùu¹ôÿÿÿë¹õÿÿÿë¹öÿÿÿ3ÒÿøM  HDý Hÿ3ÀëèaÿÿÇ 	   èvÿÿ  ÈÿH\$0Hl$8HÄ _ÃHì8ùþuèRÿÿ  è*ÿÿÇ 	   ë]Éx1;
Ä  s)HcÑH
Ð  HÂâHÁøHkÒXHÁöDtHë,èÿÿ  èàÿÿHd$  E3ÉE3À3Ò3ÉÇ 	   èõÿÿHÈÿHÄ8ÃHÄHXHpHxL` AUHì HcÙLãIÁüL-V  ãHkÛXKtå ¿   |3 u3O	è¾¡ÿÿ|3 uHL3º   èïÁÿÿ÷ØÒ#úÿD3¹
   è ÿÿÿtKLå HLÿ§J  ÇH\$0Ht$8H|$@Ld$HHÄ A]ÃÌÌHcÑH
Î  HÂâHÁøHkÒXHÁHLHÿ%hJ  H\$H|$Ld$AUAVAWHì@IÌÿEìE3öAL$è# ÿÿÀuAÄéÉ  ¹   èõ ÿÿ3ÿ|$$H_  ÿ@  LcÿJøHÛ   H\$0JøH   H;ØÍ   öCª   { u;¹
   è ÿÿ{ u HKº   èÏÀÿÿÀuDpDt$(ëÿC¹
   èkÿÿEöu HKÿI  öCtHKÿ|I  ëHIÌÿEöu?ÆCL#L«  K+øH¸£.ºè¢.H÷ëLêIÁýIÅHÁè?LèÇÁàDèDl$ ëHÃXH\$0IÌÿHf  é ÿÿÿE;ì   ÿÇ|$$HK  éçþÿÿºX   JÈèiÿÿHD$0HÀttHc×L%  IÐ   IÐHÁ   H;ÁsÆ@ L Æ@	
` HÀXHD$0ëÖÁç|$ HcÏHÁHÁøáHkÉXIÀÆDÏèHýÿÿÀADüDï|$ ¹   è9ÿÿAÅH\$`H|$hLd$pHÄ@A_A^A]ÃHì8HÉ{  H3ÄHD$(LD$ A¹   º  ÆD$& ÿîI  ÀuÈÿë
HL$ è  HL$(H3Ìè{ÿÿHÄ8ÃÌ@USVWATAUAVAWHì   Hl$@H`{  H3ÅHE0Lµ°   E!3ÿIØH÷} LMDêDùH];Ê  HUÿTH  ;Ç   }   HUAÍÿ5H  ;Ç   }uzÇE    Aüÿt`Aüÿ©   HcÏH¸ðÿÿÿÿÿÿH;È   HL	Hù   wlHAH;Áw
H¸ðÿÿÿÿÿÿHàðèÏ8  H+àH\$@HÛt<ÇÌÌ  ëNHËè¢ÇÿÿxëEÌLÃº   AÏ|$(H|$ ÿH  øÀoÿÿÿ3Àé7  èVÊÿÿHØHÀtÇ ÝÝ  HÃë3ÛHÛtÙLcÇ3ÒHËMÀèOsÿÿLEEÌº   AÏ|$(H\$ ÿ)H  E3ÿA;ÇÉ   M;÷t;¸   L|$8L|$0D$(DÏLÃ3ÒAÍLt$ ÿG  A;Ç   Iöé   D9} u,L|$8L|$0DÏLÃ3ÒAÍD|$(L|$ ÿJG  øA;ÇtWHc×¹   èfÿÿHðI;ÇtBL|$8L|$0DÏLÃ3ÒAÍ|$(HD$ ÿ
G  A;Çu
HÎèÁÿÿI÷ëAüÿtHMHKð9ÝÝ  uèÿÿHÆHM0H3ÍèxÿÿHeHA_A^A]A\_^[]ÃÌÌÌ3ÒDB
éyóÿÿÌLÑMÀt<E¶
IÿÂAA¿øwAÁ ¶
HÿÂA¿øwÁ Ièt
EÉtD;ÉtËD+ÉAÁÃ3ÀÃÌHÄHXHhHpWHìPIøHòHéMÀÔ   HHØIÑè"xÿÿHíu=èdÿÿHd$  E3ÉE3À3Ò3ÉÇ    èyÿÿ|$H tHD$@ È   ý¸ÿÿÿé   Höt¾HÿÿÿÿwµHD$0x u#LÇHÖHÍèÿÿÿ|$H tZHL$@¡È   ýëL¶M HT$0è  ¶HT$0ØHÿÅèð  HÿÆHïtÛt;ØtÏ+Ø|$H tHL$@¡È   ýÃë3ÀH\$`Hl$hHt$pHÄP_ÃÌÌÌHì8=e   uAHÉu'èuÿÿHd$  E3ÉE3À3Ò3ÉÇ    èÿÿ¸ÿÿÿëHÒtÔIøÿÿÿwËèXþÿÿëE3ÉèþÿÿHÄ8ÃÌHìHHd$0 d$( A¸   H
pY  E3Éº   @DD$ ÿE  HÖ  HÄHÃÌHì(H
Å  HùÿtHùþtÿ;E  H
¤  HùÿtHùþtÿ"E  HÄ(ÃÌH\$Ht$WHì =v   H?  HñtmHÛuH9>  t_è+  ÀuVH  HÛtJHötEHÎèÃÿÿHøHHÉt2èzÃÿÿH;ÇvH<9=uLÇHÖèÝ  ÀtHÃëÐHHD8ë3ÀH\$0Ht$8HÄ _ÃÌÌÌH\$Ht$H|$ATHì0IðHÚHù¹   è8ÿÿ3ÀHÿÀÀu&èÚÿÿ»   Hd$  E3ÉE3À3Ò3Éèîÿÿé¶   H' HÛtH# 3ÀHöÀÀu#èÿÿ»   Hd$  E3ÉE3À3Ò3Éè¯ÿÿëzHÎè½þÿÿHðHÀu3ÛëfHÈèÂÿÿº   L$IÌè(nÿÿHHÀuèCÿÿÇ    è8ÿÿë1LÆIÔHÈè¾åÿÿÀtHd$  E3ÉE3À3Ò3ÉèÿÿHÛtL#3Û¹   èEÿÿÃH\$@Ht$HH|$PHÄ0A\ÃÌHl$WHìpHcùHL$Pè}tÿÿÿ   sbHT$Pº  ~LD$Pº   Ïè«ÿÿHT$PëH@  ·xàÀtHH  ¶8éè   |$h tHD$` È   ýÇéá   HD$P¸  ~6ïHT$PÁý@¶Íè¶ÀÿÿÀt@¬$   @¼$   Æ$    º   ë èÿÿº   Ç *   @¼$   Æ$    HL$PÇD$@   L$   AA¸   D$8H$   ÇD$0   HD$(T$ QHL$PèCÙÿÿÀ2ÿÿÿø¶$   t
¶$   ÁàÁ|$h tHL$`¡È   ýH¬$   HÄp_ÃHÄHXHhHpWHì`HñHúHHØIÑIéIØèørÿÿHÛu8\$XtHD$P È   ý3Àé¯   Höu:èÿÿHd$  E3ÉE3À3Ò3ÉÇ    è1ÿÿ|$X tHD$P È   ý¸ÿÿÿëpHÿtÁHûÿÿÿw¸HL$Hy uLÍLÃH×HÎèÁ  ë1AQHL$@D$8\$0LÎA¸  H|$(\$ è	  ÀtÀþ|$X tHL$P¡È   ýL\$`I[IkIs Iã_ÃÌE3ÉéèþÿÿH\$Hl$WHì@Hd$P Hð  HHÀª   ÍÿHd$8 Hd$0 d$( Hd$  DÍLÀ3Ò3ÉÿÊ?  HcøÀ   HÏº   èâÿÿHD$PHÀtzHd$8 Hd$0 LDÍ3Ò3É|$(HD$ ÿ?  ÀtGHL$P3ÒèË  ÀyHL$PHÉtè$ÿÿHd$P HÃHHÀYÿÿÿ3ÀH\$XHl$`HÄ@_ÃHL$PèòÿÿÅëâÌÌ@USVWATAUAVAWHìhHl$0HKq  H3ÅHE(H½¨   DÒU Í  A»   3ÛMùDELñH}Ecÿ;ÓuOL8I  EÌ3Ò3ÉDd$(LD$ ÿ?  ;Ãt
AÔE\$ëÿù=  w  A»   øxADÓDU `  D    D;Ë~YAÉIÇA+ÌÎÿ8t	IÄ;ËuïÎÆ+ÁDÈD    D°   D;Ã~5AÈHÇA+Ì8t	IÄ;ËuòÎÆ+ÁDÀD°   ëÎÿD;Î}Æ3Àé¥  D;Æ|ôA;Ó¯  ;Ó§  A;ÔuÞD­¸   D;ëuIDiD;Ët	D;Ã«   E;ÈuAÃé\  E;Ä~AÄéO  E;Ì~
¸   é@  HUAÍÿ=  ;ÃtD    D;Ë~2}rÓ8]HEtÊ8XtÅA:r:HvHÀ8ëå¸   éñ  9°   ~+}r8]HEt8Xzÿÿÿ:r:HvËHÀ8ëâMÇº	   AÍ\$(H\$ ÿw=  LcðD;óìþÿÿI¸ðÿÿÿÿÿÿ~d3ÒHBàI÷öHørUKL6Hù   w.HAH;ÁwIÀHàðè5-  H+àHt$0H;óþÿÿÇÌÌ  ëèó¾ÿÿHðH;ÃtÇ ÝÝ  HÆëHóH;ópþÿÿD    MÇAÔAÍDt$(Ht$ ÿÏ<  ;Ãô   D°   LÇº	   AÍ\$(H\$ ÿ¦<  LcàD;ãÇ   ~g3ÒHBàI÷ôHørXKL$Hù   w1HAH;Áw
H¸ðÿÿÿÿÿÿHàðèg,  H+àH|$0H;ûtÇÌÌ  ëè)¾ÿÿHøH;ÃtÇ ÝÝ  HÇëHûH;ûtVD°   LEº   AÍDd$(H|$ ÿ<  ;ÃtUM EÎLÆDd$(H|$ ÿV<  ØHOð9ÝÝ  uè/ÿÿHNð9ÝÝ  uèÿÿÃéè   HûLëD;ÓuIDPDU D¥¸   D;ãuID`AÊèñÿÿDð;Æ ýÿÿA;ÄteL    MÇÐAÌ\$(H\$ èµñÿÿHøH;ÃÒüÿÿLEL°   AÖAÌ\$(H\$ èñÿÿLèH;Ãu
HÏè~ÿÿéüÿÿLÿLÀëLE°   D    UM D$(LD$ MÇÿT;  ðH;ûtHÏè9ÿÿIÍè1ÿÿÆHM(H3Íè/lÿÿHe8A_A^A]A\_^[]ÃÌÌH\$Ht$WHì`òHÑHL$@IÙAøèlÿÿD$¨   $    HL$@D\$8D$0H$   HD$($   LËDÇÖD$ è¾úÿÿ|$X tHL$P¡È   ýH\$pHt$xHÄ`_ÃÌÌÌH\$Ht$WHì`HñHúHL$@IÑIØèkÿÿHÛu8\$XtHD$P È   ý3ÀéÂ   Höu=è¯ÿÿHd$  E3ÉE3À3Ò3ÉÇ    èÄÿÿ|$X tHD$P È   ý¸ÿÿÿé   Hÿt¾HûÿÿÿwµHD$@PÒuLL$@LÃH×HÎèªòÿÿë>@HL$@LÎD$8\$0A¸  H|$(\$ èþÿÿÀuèÿÿÇ    éyÿÿÿÀþ|$X tHL$P¡È   ýH\$pHt$xHÄ`_ÃÌÌÌH\$T$UVWATAUAVAWHì0E3íêLñAÝI;Íu$è·ÿÿE3ÉE3À3Ò3ÉLl$ Ç    èÍÿÿéê   L!M;åÓ   º=   IÌè³  HøHD$pI;Åµ   L;à¬   D8hH5þ{  EýAÇH;5ø{  upHîAÅI;õuIõëUHÆÿÀL9.uõÿÀº   HcÈèÿÿHøHðI;Åu¹	   èWlÿÿëHÈèÍ  HHÇHÅHE I;ÅuäL/H|$pl$xH5~{  I;õ   A;ít9L9-y{  t0èf÷ÿÿA;Åtjè´ÿÿÇ    ÈÿH$   HÄ0A_A^A]A\_^]ÃE;ýt3Àëß¹   èÿÿH{  I;ÅtÆL(L9-{  u¹   èæÿÿH{  I;Åt¤L(H5ìz  HîI;õtHÇHþA+ÄLcèHÉt?HÑMÅIÌè¿öÿÿÀuHA| =¢   A8\    HÇHHÉuÈH5z  H+þHÁÿ÷ßE3íA;ý   L9m    Hc÷HLõ èJÿÿE;ýtfL9lõ tHLõHÿÇHÁHDõ HÿÆL9lõ uèHc×H¸ÿÿÿÿÿÿÿH;Ð   H
 z  A¸   èqÿÿI;Åt|ësH5z  H+þHÁÿérÿÿÿLdõ M.ë]E;ý   A;ý}÷ßG;ÇþÿÿLcÀH¸ÿÿÿÿÿÿÿL;Ànþÿÿº   HÎèÿÿI;ÅXþÿÿHcÏL$ÈLlÈM.Hy  D9l$x   IÌèµÿÿº   HHèÃÿÿHøI;ÅtlIÌèã´ÿÿMÄHÏHPèHØÿÿA;ÅtE3ÉE3À3Ò3ÉLl$ èÿÿH×HÏI+ÔHT$pD*HÿÂE;ýIEÕÿ6  A;ÅuËÿèiÿÿÇ *   HÏèãÿÿE;ýtIÌèÖÿÿM.ÃéýÿÿIÌèÄÿÿM.é¦ýÿÿH\$Ht$WHì0HÙHÉtFè<´ÿÿHðHHè·ÿÿHøHÀt-HVLÃHÈè×ÿÿÀtHd$  E3ÉE3À3Ò3ÉèäÿÿHÇë3ÀH\$@Ht$HHÄ0_ÃÌH\$Ht$WHìPHÙúHL$0IÐèWfÿÿ3öH;ÞuDèÿÿE3ÉE3À3Ò3ÉHt$ Ç    è­ÿÿ@8t$HtHD$@ È   ý3ÀH\$`Ht$hHÄP_ÃHT$89ru×HËè   @8t$HtÕHL$@¡È   ýëÇ¶f;Ît3¶ÁöDtHÿÃ@83t¶·ÉÁáÈ;ùu
HCÿë¼·Á;øtHÿÃëÅ·Á;ølÿÿÿ@8t$HtHD$@ È   ýHÃéfÿÿÿÌÌE3Àé ÿÿÿë:Ât
HÿÁÀuó:ÂuHÁÃ3ÀÃÿ%X2  ÿ%¢2  ÿ%¤2  Hì8HÉu&èÿÿHd$  E3ÉE3À3Ò3ÉÇ    èÿÿHÈÿë9 tÕHÒtÐHHÀtÈ8 tÃE3Àè  HÄ8ÃÌHT$L$SUVWATAUAVAWHìXA¼þÿÿÿHcÁAØDd$4\$8A;Äuè,ÿÿ3ÿ8èÿÿÇ 	   é  3ÿ;Çï  ;  ã  HðLðL
AÿÿIÁþæKñC HköXD1¨·  ûÿÿÿvèÉÿÿ8è¢ÿÿÇ    éª  ï;ß  ¨  H;×tÒD|18A¸   EÿAÐÿA¾ÏétéuÃ÷Ð¨t«ãþLêëdÃ÷Ð¨tÑëA;ØABØËèÁÿÿLèH;Çuè,ÿÿÇ    èAÿÿÇ    é=  $    3ÒDBè°ÖÿÿL
A@ÿÿLØKñC L\0@KñC IÕA¸
   öD0H   L0	A:È   ;ß   AM KñC AÊÿAÚIUAh÷DD0	D:ÿtbKñC L09A:ÈtQ;ßtM
KñC AÚHÿÂAhøDD09Aÿu.KñC L0:A:Èt;ßt
KñC HÿÂAhùAÚDD0:KñC LL$0DÃH1H|$ ÿÂ1  ;ÇÏ  HcT$0;×Â  ÃH;Ð·  L3?ÿÿêKðC öD0y  Aÿ¸  ;×tA} 
uL0ëd0ûHcÅIÝMåIÅHD$@L;è:  ½
   A$<
  @:Åt
HÿÃIÿÄéë   HD$@HÿÈL;àsID$8
u	IÄé   Làé½   KðC LL$0H$°   H1A¸   IÿÄH|$ ÿÓ0  ;Çu
ÿ9/  ;Çu{9|$0tuLP>ÿÿKðC öD0Ht"¼$°   
t'@+KðC $°   D1	ëGI;Ýu¼$°   
uÆ
ë3$    A¸   HÊÿè]Ôÿÿ¼$°   
Læ=ÿÿtëLÛ=ÿÿ@+HÿÃL;d$@ìþÿÿëKðC öD0@uL0ë	A$HÿÃëA+íAÿð  ;ïè  A¿   I+ßöuIßé²   A×ëúI;ÝrI+ßA×¶B8¼ 4 tã¶B¾4 ;Çuè}ÿÿÇ *   AÌÿé  ÿÀ;ÂuHcÂHØë^KðC öD0Ht;IßúL0	|KðC IßD19úuKðC IßD1:HcÂH+Øë$    ÷ÚEÇHcÒè2ÓÿÿD$8L¼$¨   A+ÝÑèDËMÅD$(3Ò¹éý  L|$ ÿ.  è;Çuÿi-  Èè|ÿÿAÌÿéä  Dd$4;ÃHs<ÿÿJðC @Çí|0Hé¿  ;×º
   tfA9U uL0ëd0ûHcÅIÝMåN<(M;ï{  ½
   A·$føE  f;ÅtfHÃIÄé%  IGþL;àsID$f9u	IÄéÂ   Làéú   KðC LL$0H$¸   H1A¸   IÄH|$ ÿ.  ;Çuÿ},  ;Ç®   9|$0¤   L;ÿÿKðC öD0HtFº
   f9$¸   tKf+$¸   KðC D1	$¹   KðC D19KðC T0:ëWI;Ýuº
   f9$¸   ufë>$    HÇÂþÿÿÿDBèoÑÿÿº
   Lû:ÿÿf9$¸   tëº
   Lã:ÿÿf+HÃM;ç®þÿÿë"KðC öD0@uL0ëA·$fHÃëA+íDd$4L¼$¨   M;ïtIÍèÔ|ÿÿAüþDDåAÄëiÿU+  øuè/zÿÿÇ 	   èDzÿÿÇ    éýÿÿømuDçë®ÈèHzÿÿéýÿÿ3Àë)èzÿÿ8èóyÿÿÇ 	   E3ÉE3À3Ò3ÉH|$ è	yÿÿÈÿHÄXA_A^A]A\_^][ÃÌH\$Ht$L$WATAUAVAWHì0AðLêHcùÿþuè¶yÿÿ3ÛèyÿÿÇ 	   Èÿé  3Û;ûâ   ;=}  Ö   LçL÷IÁþL=}  AäMkäXK÷B¾L áu.è\yÿÿè5yÿÿÇ 	   H\$ E3ÉE3À3Ò3ÉèKxÿÿÈÿé©   ÃAøÿÿÿÀ;Ãu+èyÿÿè÷xÿÿÇ    H\$ E3ÉE3À3Ò3Éè
xÿÿÈÿënÏèÞÿÿK÷BöD tDÆIÕÏès÷ÿÿØëè®xÿÿÇ 	   èÃxÿÿËÿÏèÞÿÿÃë)è®xÿÿèxÿÿÇ 	   H\$ E3ÉE3À3Ò3ÉèwÿÿÈÿH\$hHt$pHÄ0A_A^A]A\_ÃÌÌHÄHXL@HHUVWATAUAVAWHì   3ÿA´AñHÚÇ@¨   ox@¼$Ø   Hx°EÌtx¸A¶ël$pD÷HL$Tè©  ;ÇtE3ÉE3À3Ò3ÉH|$ èÝuÿÿºær÷Æ @ u
|$T   tE
ôÎA¸   ¸   ÀA#Èº   ;ÏtT+Ít:;Ít1è´wÿÿ8ÿèwÿÿ»   E3ÉE3À3Ò3ÉH|$ èvÿÿÃéû  Døë@öÆt÷Æ   uíA¿   @ëDú$à   A¼   ét,ét#ététù@uD;úÏÁëAÈëAÌëÍëÏÆº   L$H#ÂtF=   t8=   t*=   t=   t*=   t&=   t;Âté/ÿÿÿAìë½   ë
½   ëAèºæA½   Dl$Ps'l  öÐ"$è   ¨AEDDèDl$P@öÆ@tAºíAºïÉDl$PL$Hºæs
AºíDl$P@öÆ tAºíë@öÆt
AºíDl$PèIÜÿÿøÿu!èIvÿÿ8ÿèvÿÿÇ    èvÿÿ é   H$À   DD$HH$Ð   H|$0LL$`A×Dl$(Ç    l$ ÿb(  HD$XHøÿ   ¹   ÀAÇ#Á;ÁuC¸   @ðt9DD$HH$Ð   H|$0Aº÷LL$`Dl$(A×l$ ÿ
(  HD$XHøÿu;HcL-0y  HÁáHÁøHkÉXIDÅ dþÿj&  ÈèuÿÿèBuÿÿ8éÌ  HÈÿþ%  ;ÇuMHcL-èx  HÁáHÁøHkÉXIDÅ dþÿ"&  ÈØè=uÿÿHL$XÿV'  ;ßu§èétÿÿÇ 
   ëA;ÄuAÎ@ë	øuAÎHT$Xè%ØÿÿHcL-{x  HÁáº   HÁøD
òIDÅ HkÉXDtHcHÁáHÁøHkÉXIDÅ d8AÆ$HD$L   EöÂ  AôtxEÄÊÿè¦	  D$Døÿuèdtÿÿ8   tPèõÒÿÿééþÿÿHT$@A¸   @|$@èÕòÿÿ;Çu|$@uHcT$Dè¾  øÿtÁE3À3ÒèE	  øÿt°º   Eö<  ¹ @ ñuD$T#ÁuºîëðÆ#Á= @  tJ=   t,= @ t%=   t+= @ t$=   t= @ u($Ø   ë¹  Æ#Á;ÁuD¤$Ø   ë@¼$Ø   ÷Æ   º  |$DAöÆ@¬  AÇ%   À=   @$  =   t|=   À  ;ï  A;ìvýv8ýl  ¾$Ø   A¸   ïA+È   A;ÈP  ÇD$Dÿþ  é  EÄ3ÒèÉÿÿH;ÇtÀE3À3ÒènÉÿÿHøÿ|þÿÿHT$DA¸   èbñÿÿøÿaþÿÿA;Ät øuk|$Dï»¿ uD@þD$Ø   éÜ   ·D$D=þÿ  uè%Ñÿÿè`rÿÿ»   ûéã  =ÿþ  u#E3ÀAÔè  øÿùýÿÿD¤$Ø   é   E3À3Òèp  øÿë;;ïvqA;ìüþÿÿýêþÿÿEÄ3Òè¡ÈÿÿH;ÇÞþÿÿE3À3ÒèÈÿÿHøÿu8éýÿÿÇD$Dï»¿ A¼   HcÅEÄHTDD+ÅèN°ÿÿøÿmýÿÿèD;åÛA¸   Hc@¬$Ø   HÁá@åHÁøHkÉXIDÅ d8@l8HcHÂâHÁøHkÒXILÅ Æd8ÁèÀàD8@8|$Lu!@öÆtHcHÁáHÁøHkÉXIDÅ L AÇ%   À=   À   Að   HL$Xÿ^#  D$PDD$HH$Ð   H|$0D$(Aº÷LL$`ÇD$    A×ÿQ#  Høÿu6ÿÕ!  ÈèòpÿÿLcIÃAãHÁøMkÛXIDÅ Bdþè¢ÔÿÿéBûÿÿHcHÊâHÁùHkÒXILÍ H
ÇH$È   HÄ   A_A^A]A\_^]ÃÌÌHÄPL@LH VWHìXHØÿ`Ü E3ÀHÉAÀEÀu(è pÿÿÇ    Hd$  E3ÉE3À3Ò3Éè5oÿÿÈÿé   H$   HÀD@ød$0 DD$(ÇD$ @   DÊLÁHT$@HL$Dèv÷ÿÿðD$H|$D t9Àt(Hc|$@HÏHÇHÁøLcs  áHkÉXIÀdþë|$@ÏènÕÿÿë|$@ötèsoÿÿ0ÈÿëÇHÄX_^ÃÌÌÌ@SHì0MÐHÂHÙHÉu&èGoÿÿHd$  E3ÉE3À3Ò3ÉÇ    è\nÿÿHÈÿëUHÀtÕHL$ LL$XLD$@IÒHÈèÏ  øÿtÖLL$XLD$@HÓ¹   èç  HL$@HØèfqÿÿHL$Xè\qÿÿHÃHÄ0[ÃÌÌÌH\$LD$UVWATAUAVAWHì0E3öMàLêHéHñI;Îu(ènÿÿE3ÉE3À3Ò3ÉLt$ Ç    è¬mÿÿHÈÿé  D81tÓI;ÖtÎHI;ÆtÆD80tÁº\   èv  º/   HÍHøèf  A¿   I;Æ   I;þ    AW9HÍèRìÿÿHøI;Æ   HÍè.ÿÿI×HXHËèïnÿÿHðI;ÆsÿÿÿLl4  HÓHÈèuÂÿÿA;ÆtE3ÉE3À3Ò3ÉLt$ èÌkÿÿLÅHÓHÎèêÀÿÿA;ÆtE3ÉE3À3Ò3ÉLt$ è¥kÿÿH~ë
I;þtH;ÇvHøHËÿHÏS/è
  HÎI;Æt&3Òè  A;Æ÷   MÄIÕHÎèõýÿÿHØéá   èlÿÿI×L`IÌè-nÿÿHøI;ÆÎ   LÆIÔHÈè·ÁÿÿA;ÆtE3ÉE3À3Ò3ÉLt$ èkÿÿHÎè"ÿÿL4èõlÿÿM+æD8I<L%Pb  HD$pM$HÐIÎèhÁÿÿÀtHd$  E3ÉE3À3Ò3Éè¿jÿÿ3ÒHÏèQ  ÀtHöa  IìL;àHD$p}µëèlÿÿL$   IÕHÏD8èýÿÿHØHÏèônÿÿH;õtHÎèçnÿÿHÃH\$xHÄ0A_A^A]A\_^]ÃÌÌÌHÄHXHhHpHx ATAUAWHì Hê3ÿ3ÒDGñèÁÂÿÿLèHøÿtPDG3ÒÎè«ÂÿÿHøÿt=HÝH+ØH;ßÁ   ÿ   A¿   WHÈMÇÿû  HèH;Çu1èÂkÿÿÇ    è·kÿÿ H\$@Hl$HHt$PH|$XHÄ A_A]A\Ãº   Îèv  DàDÃI;ßHÕEMÇÎè¯¢ÿÿøÿtHH+ØH;ß~ëÛè}kÿÿ8uèSkÿÿÇ 
   HÏÿAÔÎè+  ÿõ  LÅHÈ3ÒÿO  ëU}]E3ÀHÕÎèÆÁÿÿHøÿTÿÿÿÎèÉÏÿÿHÈÿ´  ÷ØHÿH÷ßHÿÏHÿÿu%èêjÿÿÇ 
   èÿjÿÿHØÿò  HÿÿÿÿÿE3ÀIÕÎèiÁÿÿHøÿ÷þÿÿ3Àé÷þÿÿH\$Ht$WHì HcÙAøòËèNÏÿÿHøÿuèjÿÿÇ 	   ÈÿëRDÏE3ÀÖHÈÿ»  øøÿuÿv  ë3ÀÀt	ÈèjÿÿëÌHËHÃH n  HÁøáHÂHkÉXdýÇH\$0Ht$8HÄ _ÃÌÌH\$LcÁHÉm  MÈAàIÁùMkÀXJËBD8F¶\ÀAã   D¾ÐAÑúú @  tXú   tHú   t(ú   t ú   uHBLJËBd 8BL 8ë0BLJËBd 8BL 8ëBdëBLJËBd8EÛu¸   ëA÷ÚÀ% À   @  H\$ÃÌÌHì8HÉu'è6iÿÿHd$  E3ÉE3À3Ò3ÉÇ    èKhÿÿ¸   ë
²l  3ÀHÄ8ÃÌLL$ HT$SUWATAUAVAWHìà   3ÿéGDgD÷Dï;Ïtùt~A;Ì~;ÈuAµMøë@èÖhÿÿ8è¯hÿÿE3ÉE3À3Ò3ÉÇ    H|$ èÅgÿÿé@  IÿÀA88uøA8xtAÆ  IÿÀA88uæ»h   HL$p3ÒLÃèEÿÿ\$pl  Ll  ;ßt/SÿHcÊHÁáHÁøHkÉXIÀ@8|uÿËÿÊ;ßuÜ;ßÃ  ûq  ·  ·Ãº   fÁàLf$²   ·ÉèæhÿÿH$¸   H;Ç  ;ßH$¸   LcÛHHIT~WLÇDËL~k  MÐIÀAâHÁøMkÒXMÃAB¨u
IHë@9H
ÿIÿÀHÿÁHÂIéuÁH$¸   LcÛD:ït2A;ÜHHITDLãD;ç~AÄ@9H
ÿHÂHÿÁHèuìA¾   èTgÿÿH$(  E3É8HD$PE3ÀHD$HHD$pI×HD$@H$8  H|$8HD$0Dt$(ÇD$    ÿD  Øÿü  H$¸   DàèXiÿÿ;ßu
AÌègÿÿërýu3ÉèVPÿÿÌ;ïu+HL$PÊÿÿ÷  HL$PH$   ÿÜ  Hc¼$   ë	¸   ;èu
HL$PÿÖ  ëH|$PHL$XÿÄ  HÇëèVfÿÿÇ    HÈÿHÄà   A_A^A]A\_][ÃÌ@SUVWATAUAVAWHì   H!J  H3ÄHD$xH,  E3öHêHT$hEfMéH·,  LL$XfBy,  MøB
HHL$`AöDt$0Lt$8Dt$4HÙAüëHÈè×ÿÿHÃ|HI;ÆuèÇº   ÏHD$HèfÿÿII;Æu"Mu èeÿÿÇ    èeÿÿÇ    Èÿéé  LD$hHL$83ÒèAÓÿÿA;Ætø   E3ÉE3À3Ò3ÉLt$ è;cÿÿëtHL$hèKÿÿHL$8A<H|$PI;Îtè3ÿÿøH|$PI;îZ  HE HÝëHÈèÿÿHÃEdHI;ÆuçHºZ  I;Öu+è¤ÿÿHÐH¦Z  I;ÆuIÎÿè:gÿÿM7Mu é   Eî³=D82t(HÊ:Ãtè²ÿÿHkZ  ElIcÅHA:ÆuÝEõIcÍë/@8qt0y:u*8Yu%AFHcÈHÊèpÿÿH)Z  EtIcÎHÊ8tÊAÆHÝA+ÅDàDd$@H9u t'HL$hè9ÿÿHHT$hLÀèõ  ÀtRHÃH93uÙDçAÌº   èÜdÿÿHL$XHHÀuKIè[fÿÿE3öM7èÈcÿÿÇ    èÝcÿÿÎÿÇ    é	  ÇD$4   ë°Dd$0Mu Dl$0Dt$0ëDd$@H|$`ILMÀuHÿÃë8HT$HHËè¸ÿÿÀtH!t$ E3ÉE3À3Ò3ÉèYaÿÿHèmÿÿÿÀHHØHÇHHÀtVHt$HILÀHËH+ÓHÖèµ·ÿÿÀtHd$  E3ÉE3À3Ò3ÉèaÿÿHè ÿÿHÇHcÈHÙÆ HHÿÃHÀu³t$0L|$XÆCÿ Æ I?Hí  E+õIcÕHÏHX  IcÞLÃèá¯ÿÿE3öHûL9u tKAÜLE HÓHÏH+×Iè!·ÿÿA;ÆtE3ÉE3À3Ò3ÉLt$ èx`ÿÿHM èÿÿHÅÿÀHHøL9u u¸D9t$4   Hc\$PLD$hHÏHÓèÎ¶ÿÿA;ÆtE3ÉE3À3Ò3ÉLt$ è%`ÿÿLZ  HÓHÏè?µÿÿA;ÆtE3ÉE3À3Ò3ÉLt$ èú_ÿÿHL$8I;Ît'LÁHÓHÏèµÿÿA;ÆtE3ÉE3À3Ò3ÉLt$ èÉ_ÿÿHûëE3öI;þtI;?uD7HÿÇD7H
W  I;ÎtèdÿÿHL$8L5mW  I;ÎtèdÿÿÆHL$xH3ÌèEÿÿHÄ   A_A^A]A\_^][Ã@SHì0ÚHÉu-èjaÿÿ  èBaÿÿHd$  »   E3ÉE3À3Ò3ÉèV`ÿÿÃëP÷ÂùÿÿÿuËÿØ  øÿuÿ%  ÈèBaÿÿèý`ÿÿ ë'¨u!¨töÃtèaÿÿÇ    èÜ`ÿÿÇ 
   ëÒ3ÀHÄ0[ÃH\$Ht$WHìPHÙòHL$0IÐ3ÿè]DÿÿHÛu6è`ÿÿH!|$ E3ÉE3À3Ò3ÉÇ    èµ_ÿÿ@8|$HtHD$@ È   ý3ÀëLD$8A9xuÖHËèQ  @8|$HtcHL$@¡È   ýëU¶HÑBöDt%HÿÃÉtÁâ¶ÁÐ;òuH{ÿëHÿuHûë;ñHDûHÿÃÉuÀ8L$HtHL$@¡È   ýHÇH\$`Ht$hHÄP_ÃÌÌÌE3ÀéÿÿÿH\$Hl$Ht$WHìP3íIðHúHÙL;Åu3Àé  HL$0IÑèPCÿÿL\$8A9kuLÆH×HËè÷ËÿÿéE  H;Ýu<èt_ÿÿE3ÉE3À3Ò3ÉHl$ Ç    è^ÿÿ@8l$HtHD$@ È   ý¸ÿÿÿé  H;ýt¿¶HÿÎHÿÃBöDtA@8+ufÍëK¶fÁáHÿÃfÈfA;KrfA;KwfAKë)fA;Kr"fA;KwfAKë·ÁBöDt	B¶  ¶HÿÇBöDtA@8/ufÕëK¶fÁâHÿÇfÐfA;SrfA;SwfASë)fA;Sr"fA;SwfASë·ÂBöDt	B¶  f;Ñu*f;Ít	H;õ$ÿÿÿ@8l$H¡þÿÿHD$@ È   ýéþÿÿÀàÿÈ@8l$HtHL$@¡È   ýH\$`Hl$hHt$pHÄP_ÃÌE3Éé4þÿÿLÉE3ÀHÿÁA:ÀuöHÿÉI;Ét8uô8LDÁIÀÃÌÌÌÌÌÌÌÌÌÌÌÌff     HìL$L\$M3ÛLT$L+ÐMBÓeL%   M;ÓsfAâ ðM ðÿÿAÆ M;ÓuðL$L\$HÄÃÌÌ@UHì0HêHM`èÂ9ÿÿHÄ0]Ã@UHì Hê½    t
¹   ècÿÿHÄ ]Ã@UHì HêHHÑè8ÿÿHÄ ]Ã@UHì Hê¹   è_cÿÿHÄ ]Ã@UHì HêHcM HÁHúb  HÊè9ÿÿHÄ ]ÃÌÌÌÌÌÌÌÌÌÌ@UHì Hê¹   ècÿÿHÄ ]Ã@UHì HêH
XC  ÿ*
  HÄ ]Ã@UHì Hê¹
   èábÿÿHÄ ]Ã@UHì Hê¹   èÈbÿÿHÄ ]Ã@UHì Hê¹
   è¯bÿÿHÄ ]ÃÌÌÌÌÌÌÌ@UHì Hê¹   èbÿÿHÄ ]Ã@UHì HêèCÿÿHÄ ]ÃÌÌÌÌÌÌÌÌÌÌÌÌÌ@UHì HêH3É8  ÀÁÁÁHÄ ]Ã@UHì0Hê}p t3Éè1bÿÿHÄ0]Ã@UHì HêHE3Û8  ÀAÃAÃHÄ ]Ã@UHì0HêHM@è8ÿÿHÄ0]Ã@UHì0HêMPèÁÿÿHÄ0]Ã@UHì0HêM`èiÁÿÿHÄ0]Ã@UHì Hê¹
   è°aÿÿHÄ ]Ã@UHì Hê¹
   èaÿÿHÄ ]ÃÌÌÌÌÌÌÌ@UHì Hê¹   èwaÿÿHÄ ]Ã@UHì0Hê¹   è^aÿÿHÄ0]Ã@UHì@Hê}D t7}H t'HcU@HÊHÂHÁøL¦^  áHkÉXIÀdþëU@Êè²ÀÿÿHÄ@]Ã                                                                                                                                                                                                                                                                    À     Ü     ò               2     H     `     x               ¦     ´     Æ     Ø     æ     ø               .     B     V     r          ¤     ¸     Ò     æ     ö                    $     0     B     R     b     p     ~               ®     º     Æ     Ö     þ          0     J     `     z               ¸     È     Þ     ø               (     <     L     b     r               ¨     º     Æ     Ô     ä     ú     
          (     :     L     t               ¢                                     x @   S @   ¨_ @   h @                   È¬ @   \ @                           failed to get exit code from process.
  failed to create process.
   %s %s      Could not exec %s       Cannot find Python executable %s
       #!python.exe    #!      Cannot open %s
 -script.pyw     CorExitProcess  m s c o r e e . d l l   ( n u l l )     (null)                 EEE50 P    ( 8PX 700WP        `h````  xpxxxx              8@   °8@   	

 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ =       runtime error   
      TLOSS error
   SING error
    DOMAIN error
  R6034
An application has made an attempt to load the C runtime library incorrectly.
Please contact the application's support team for more information.
      R6033
- Attempt to use MSIL code from this assembly during native code initialization
This indicates a bug in your application. It is most likely the result of calling an MSIL-compiled (/clr) function from a native constructor or from DllMain.
  R6032
- not enough space for locale information
      R6031
- Attempt to initialize the CRT more than once.
This indicates a bug in your application.
      R6030
- CRT not initialized
  R6028
- unable to initialize heap
    R6027
- not enough space for lowio initialization
    R6026
- not enough space for stdio initialization
    R6025
- pure virtual function call
   R6024
- not enough space for _onexit/atexit table
    R6019
- unable to open console device
        R6018
- unexpected heap error
        R6017
- unexpected multithread lock error
    R6016
- not enough space for thread data
             
This application has requested the Runtime to terminate it in an unusual way.
Please contact the application's support team for more information.
   R6009
- not enough space for environment
     R6008
- not enough space for arguments
       R6002
- floating point support not loaded
    Microsoft Visual C++ Runtime Library    

  ... <program name unknown>  Runtime Error!

Program:          À             À             À             À             À             À             À             À             À             À             EEE  00P  ('8PW  700PP    (   `h`hhhxppwpp                                                                                                                                                                                                                                                                                             ( ( ( ( (                                     H                                                                                                                                                                                                                                                                                                                                                                                     h ( ( ( (                                     H                                                                                                             H                                               ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ 	

 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ 	

 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿHH:mm:ss        dddd, MMMM dd, yyyy     MM/dd/yy    PM  AM      December        November        October September   August  July    June    April   March       February        January Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan Saturday    Friday      Thursday        Wednesday       Tuesday Monday  Sunday  Sat Fri Thu Wed Tue Mon Sun     GetProcessWindowStation GetUserObjectInformationA       GetLastActivePopup      GetActiveWindow MessageBoxA     USER32.DLL      SunMonTueWedThuFriSat   JanFebMarAprMayJunJulAugSepOctNovDec    CONOUT$ .com    .exe    .bat    .cmd    .\      SystemRoot                                       t d
 T	 4 2àÐÀ 
4 
 p  ¸  P  
 
4 
 p  !   ð  Î  $ !   Î  ¢   !   ÔH  ÄI Î  ¢   ! ÔH ÄI dJ Î  ¢   ! TR ð  Î  $   K ðàp0¸  0   bÀp`0  à+       Y  @â      
 4 RðàÐÀ
p`P r0 ²0 4 2p
 
4 
2p
 d 4 rðàÐÀpà+     ó'  ü(  Xâ       2P	 d 4  p  à+     *  *     ¯+  ï*  +  zâ  +     d  T  4  rðàÐÀp t 4 2À	 	20 d T 4 2p d T 4 2p) 4d Z ðàÐ
Àp`P  ¸  È  	 
  Ä  t  d  4   ðàÐ  à+     ´:  À:     \=  	 	¼ 0  
 t	 d T 4 2À
 d
 T	 4 2ÐÀp
 
20 d	 4 RÀà+     B  C  â      
 Ä t d
 RðàÐà+     [D  ¡D  ¯â      "D  ¾D  ßâ       t d 4 2À t d 4 2Ðà+     £F  ãF  øâ       d
 T	 4 Rp d 4
 rp  $ d´ 4³ ° p  ¸  p  
 
4 
2pà+     N  kN  ã       4 rÐ
Àp`P¸  8   
 Ä t
 d	 4 RÐà+     R  ;S  ã       20à+     W  !W  -ã      
 
4 
2pà+     ÞW  éW  Fã      þW  %X  fã       4 2pà+     Y  °Y  Fã      ÅY  üY  fã       d T ²p d	 T 4 2p Ô t
 4 Rà
 t
 d	 4 2àÐÀà+     `  Ï`  ã       B  	 B  à+     Gb  zb   ã  zb  	 B  à+     b  b     b  
 d 4 rðàÐ
Àpà+     @f  Óf  Áã      	 b  à+     Tg  cg  Ýã  cg   t d
 T	 4 2àÐÀ d 4
 Rp
 t
 d T 4
 rÀ B  
 
4 
2p       4 ²p
`P d	 4 Rp
 
4 
Rp RP 4	 Rpà+     ×v  áv  ÿã      / 4qfðàÐ
Àp`P  ¸     
 d 4
 RðàÐÀpà+       =  .ä       4 R
Àp
`à+       c  ä      
 
4 
p
 d T 4 ÐÀp-
Et d 4 C²
ðàÐÀP  ¸  X    d 4 Òp1
5#t d 4 3rðà
ÐÀP  ¸  8    d 4 ²p 2
0
 d 4
 RðàÐÀpà+     ¶  é  .ä      
 T 4 ràÐÀp` µ  t d T 4 àÐÀ d
 4 RÐÀpà+     ã     ä       20 Â  ¸  P       T 4 2p
 Ä	 t d 4 2Ðà+     K¥  k¥  Eä      
 Ä t
 4 rðàÐà+     m¦  ¦  ^ä      ¦  Å§  ~ä       b  ¸  (   'EC 
ðà	ÐÀp`0P  ¸  p    b      t
 d	 4 RÀà+     Ñ­  ¹®  ä      
 
T 
Òp d T 4 ²p T 4 rp$
53Â
ðà	ÐÀp`0P¸  X   
 4 RðàÐÀp`
P d
 4 p	 ¢ðàÐÀ
p`P
0  
 d 4
 RðàÐÀpà+     ìÆ  Ç  .ä      !
 !4 !òðàÐÀp`P rP ¢p`  à+     ÏÏ  üÏ  °ä       R0 t d
 T	 4 2ðÐÀ d 4 2p 4 	  ðàÐÀ
pP0  #
  
ðà	ÐÀp`P0¸  x    d T
 4 p0         f  ð                          À     Ü     ò               2     H     `     x               ¦     ´     Æ     Ø     æ     ø               .     B     V     r          ¤     ¸     Ò     æ     ö                    $     0     B     R     b     p     ~               ®     º     Æ     Ö     þ          0     J     `     z               ¸     È     Þ     ø               (     <     L     b     r               ¨     º     Æ     Ô     ä     ú     
          (     :     L     t               ¢             SGenerateConsoleCtrlEvent  ÇGetExitCodeProcess  rWaitForSingleObject  CreateProcessA  ´SetConsoleCtrlHandler õGetModuleFileNameA  Û EnterCriticalSection  îLeaveCriticalSection  úGetModuleHandleW  /Sleep "GetProcAddress  ExitProcess qGetCommandLineA <GetStartupInfoA RtlUnwindEx ôSetHandleCount  >GetStdHandle  ÙGetFileType À DeleteCriticalSection ;TerminateProcess  «GetCurrentProcess LUnhandledExceptionFilter  #SetUnhandledExceptionFilter ÐIsDebuggerPresent RtlVirtualUnwind  RtlLookupFunctionEntry  RtlCaptureContext çGetLastError  ¦HeapFree  ¢HeapAlloc ]GetCPInfo TGetACP  GetOEMCP  ÚIsValidCodePage × EncodePointer ¹ DecodePointer @FlsGetValue AFlsSetValue ?FlsFree øSetLastError  ¯GetCurrentThreadId  >FlsAlloc  WriteFile ðLoadLibraryA  ºInitializeCriticalSectionAndSpinCount LFreeEnvironmentStringsA ÁGetEnvironmentStrings MFreeEnvironmentStringsW WideCharToMultiByte ÃGetEnvironmentStringsW  ªHeapSetInformation  ¤HeapCreate  SQueryPerformanceCounter jGetTickCount  ¬GetCurrentProcessId SGetSystemTimeAsFileTime ©HeapReAlloc GetConsoleCP  GetConsoleMode  CFlushFileBuffers  àLCMapStringA  MultiByteToWideChar âLCMapStringW  @GetStringTypeA  CGetStringTypeW  éGetLocaleInfoA  ìSetFilePointer  «HeapSize  D CloseHandle WriteConsoleA GetConsoleOutputCP  WriteConsoleW 
SetStdHandle  z CreateFileA S CompareStringA  V CompareStringW  ÝSetEnvironmentVariableA KERNEL32.dll  hReadFile  ÚSetEndOfFile  &GetProcessHeap  ËGetFileAttributesA                                                                          àE@           àE@                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    2¢ß-+  Í] ÒfÔÿÿ\) @           ô @   ðó @   ÿÿÿÿÿÿÿÿ
                                                                                                                 
      	               	      
                  
               
               !   
   5      A   
   C      P      R   
   S   
   W      Y      l   
   m       p      r   	            
      
      	            
      )      
   ¡      ¤      §   
   ·      Î      ×                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       abcdefghijklmnopqrstuvwxyz      ABCDEFGHIJKLMNOPQRSTUVWXYZ                                                                                                                                                                                                                                                                                                                                                                                                                                                               abcdefghijklmnopqrstuvwxyz      ABCDEFGHIJKLMNOPQRSTUVWXYZ                                                                                                                                      (@       ¤  `y!       ¦ß      ¡¥      àü    @~ü    ¨  Á£Ú£                        þ      @þ      µ  Á£Ú£                        þ      Aþ      ¶  Ï¢ä¢ å¢è¢[                 þ      @~¡þ    Q  QÚ^Ú  _ÚjÚ2                 ÓØÞàù  1~þ    ôþ @   þÿÿÿ    C                                                                                                                      @-@                           @-@                           @-@                           @-@                           @-@                                                         P2@                   ðü @   @    @   Ð0@   P-@          P-@    (@   ÿÿÿÿ                   Xú @          (ú @   	       øù @   
       `ù @          (ù @          øø @          Ðø @           ø @          hø @          @ø @          ø @          Ð÷ @          ¨÷ @          ÷ @           ÷ @           èö @   !       ðõ @   "       Põ @   x       @õ @   y       0õ @   z        õ @   ü       õ @   ÿ       õ @    @    @    @    @    @    @    @    @    @    @             
                  ðü @   òþ @   P@   L@   H@   D@   @@   <@   8@   0@   (@    @   @    @   ô@   è@   ä@   à@   Ü@   Ø@   Ô@   Ð@   Ì@   È@   Ä@   À@   ¼@   ¸@   °@    @   @   @   Ô@   @   |@   t@   h@   `@   P@   @@   8@   4@   (@   @    @   	             Ð0@   .               @2@   lB@   lB@   lB@   lB@   lB@   lB@   lB@   lB@   lB@   P2@      .                        p     ðñÿÿ    PST                                                             PDT                                                             à2@    3@   ÿÿÿÿ            ÿÿÿÿ            þÿÿÿÿÿÿÿþÿÿÿÿÿÿÿÿÿÿÿ   ;   Z   x      µ   Ô   ó     0  N  m      ÿÿÿÿ   :   Y   w      ´   Ó   ò     /  M  l                                                                                                                                                                                                              8@   0@   (@    @                                                                                                                                                                                                                     ç  x ð  Y   `  «  x °  Ô  d à    ¬   í  ô ð  Î  $ Î  ¢   ¢  _  ô _  ¯  Ü ¯  ·  Ì ·  Õ  ¼ ø  m  < x  Z  h \    d   ã  h ä    h   j  d l    d   Õ  h T  ·  h ¸  Õ  d Ø  ÿ  <     ¥"  d ¨"  6#  à p#  $  h $  $  | $  5%   &  5&  h 8&  q&  h t&  &  h ¤&  ×&   Ø&  '   '  Ã'   Ä'  N)  ¤ )  ï)  h ð)  É+  Ü Ì+  Þ+  d à+  -   -  U.  4 X.  .  D .  ×.  h Ø.  )/  L ,/  ª/  ` ¬/  :  t :  =   =  º=  < Ä=  é>  Ð ì>  q?  ¼	 ¼?  Ü?  d Ü?  ü?  d ü?  B@  h D@  °@  ` °@  3A  Ü 4A  ¹A  Ü ¼A  DB  ô DB  B  	 B  4C  	 4C  ­C    °C  ÷C  h øC  ìD  <	 øD  E  |	 E  F  `  F  G  	 G  LG   LG  ûG   üG  RI  ¼	 TI  ÏI  Ð	 üI  J  < J  ZK  à	 \K  îK  ` ðK  ÓM  è	 ÔM  N  
 N   O  |  O  Q  (
 Q  S  D
 S  ¸S  d ¸S  2U    tV  ËV  h ÌV  AW  t
 `W  W  d W  :X  
 <X  ÀX   ÀX  äX  h äX  Z  È
 Z  Z  h  Z  ©[  ü
 ¬[  9]   <]  a_    d_  §_  d ¨_  ê_  h ì_  ñ`  4 ô`  a  d a  Da   Da  |a   |a  ²a   @b  b  l b  §b   ¨b  Äb  d Èb  d  ` Äd  5g  ¬ Pg  g  Ü g  Âg  h Äg  h  d h   h  d  h  h   h  Ëi  ¼	 Ìi  k  ü k  l   l  Fn  ( Hn  n  @ n  Go  H `o  o  X Äo  3p  < 4p  yp  | |p  Ãp  |  q  °s  ` °s  Äs  < Ìs  t    t  Wu    Xu  òu  p ôu  }v   v  öv   øv  V~  ¸ X~    Ü     
    Z  4
 d    @
   I  X
 L  â  
 ä  N  
 P  Ù  ¸
 $    È
   X  	 X  í  È
 ð  y  | |  Q  | T  Å  | h  ý      7  Ð
 8    h         Ð  < Ð    < $  Å   È  J    L  |  < |  8   8  P   < P      h    ¡  p ¡  
£  ð  £  Ï£  ` Ð£  |¤   |¤   ¥  <  ¥  ¦¥   Ð¥  ì§  È ì§  ?¨   @¨  Åª   «  -¬  ð 0¬  ¬  < ¬  Ç¬  D È¬  ­  d ­  ¥­    ¨­  Û®  L Ü®  L°  x L°  [±   d±  V²   X²  2·  ¨ 4·  ½·  ¸
 À·  Õ¸  ¸
 Ø¸  ¼  È ¼  ÷¼  p ø¼  î½  à $¾  w¾  < x¾  ÷Å  ð øÅ  jÇ   lÇ  jÏ  8 lÏ  YÐ  X \Ð  ñÐ  | ôÐ  uÓ  d xÓ  Õ   Õ  ¦Õ    ¨Õ  vÖ  ° xÖ  ·Ö  < ¸Ö  Ù  ¸ Ù  `Þ  Ð `Þ  ðÞ  | ðÞ  Ýß  à èß  «á  ð ðá  >â   @â  Xâ   Xâ  zâ  Ô zâ  â  Ô â  ¯â  Ô ¯â  Õâ  Ô ßâ  øâ  Ô øâ  ã  Ô ã  -ã  Ô -ã  Fã  Ô Fã  _ã  Ô fã  ã  Ô ã  ã  Ô  ã  Áã  Ô Áã  Ýã   Ýã  ÿã  Ô ÿã  ä   ä  .ä   .ä  Eä   Eä  ^ä  Ô ^ä  wä  Ô ~ä  ä  Ô ä  °ä   °ä  üä  P                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
import sys
import marshal
import contextlib
import dis
from distutils.version import StrictVersion

from ._imp import find_module, PY_COMPILED, PY_FROZEN, PY_SOURCE
from . import _imp


__all__ = [
    'Require', 'find_module', 'get_module_constant', 'extract_constant'
]


class Require:
    """A prerequisite to building or installing a distribution"""

    def __init__(
            self, name, requested_version, module, homepage='',
            attribute=None, format=None):

        if format is None and requested_version is not None:
            format = StrictVersion

        if format is not None:
            requested_version = format(requested_version)
            if attribute is None:
                attribute = '__version__'

        self.__dict__.update(locals())
        del self.self

    def full_name(self):
        """Return full package/distribution name, w/version"""
        if self.requested_version is not None:
            return '%s-%s' % (self.name, self.requested_version)
        return self.name

    def version_ok(self, version):
        """Is 'version' sufficiently up-to-date?"""
        return self.attribute is None or self.format is None or \
            str(version) != "unknown" and version >= self.requested_version

    def get_version(self, paths=None, default="unknown"):
        """Get version number of installed module, 'None', or 'default'

        Search 'paths' for module.  If not found, return 'None'.  If found,
        return the extracted version attribute, or 'default' if no version
        attribute was specified, or the value cannot be determined without
        importing the module.  The version is formatted according to the
        requirement's version format (if any), unless it is 'None' or the
        supplied 'default'.
        """

        if self.attribute is None:
            try:
                f, p, i = find_module(self.module, paths)
                if f:
                    f.close()
                return default
            except ImportError:
                return None

        v = get_module_constant(self.module, self.attribute, default, paths)

        if v is not None and v is not default and self.format is not None:
            return self.format(v)

        return v

    def is_present(self, paths=None):
        """Return true if dependency is present on 'paths'"""
        return self.get_version(paths) is not None

    def is_current(self, paths=None):
        """Return true if dependency is present and up-to-date on 'paths'"""
        version = self.get_version(paths)
        if version is None:
            return False
        return self.version_ok(version)


def maybe_close(f):
    @contextlib.contextmanager
    def empty():
        yield
        return
    if not f:
        return empty()

    return contextlib.closing(f)


def get_module_constant(module, symbol, default=-1, paths=None):
    """Find 'module' by searching 'paths', and extract 'symbol'

    Return 'None' if 'module' does not exist on 'paths', or it does not define
    'symbol'.  If the module defines 'symbol' as a constant, return the
    constant.  Otherwise, return 'default'."""

    try:
        f, path, (suffix, mode, kind) = info = find_module(module, paths)
    except ImportError:
        # Module doesn't exist
        return None

    with maybe_close(f):
        if kind == PY_COMPILED:
            f.read(8)  # skip magic & date
            code = marshal.load(f)
        elif kind == PY_FROZEN:
            code = _imp.get_frozen_object(module, paths)
        elif kind == PY_SOURCE:
            code = compile(f.read(), path, 'exec')
        else:
            # Not something we can parse; we'll have to import it.  :(
            imported = _imp.get_module(module, paths, info)
            return getattr(imported, symbol, None)

    return extract_constant(code, symbol, default)


def extract_constant(code, symbol, default=-1):
    """Extract the constant value of 'symbol' from 'code'

    If the name 'symbol' is bound to a constant value by the Python code
    object 'code', return that value.  If 'symbol' is bound to an expression,
    return 'default'.  Otherwise, return 'None'.

    Return value is based on the first assignment to 'symbol'.  'symbol' must
    be a global, or at least a non-"fast" local in the code block.  That is,
    only 'STORE_NAME' and 'STORE_GLOBAL' opcodes are checked, and 'symbol'
    must be present in 'code.co_names'.
    """
    if symbol not in code.co_names:
        # name's not there, can't possibly be an assignment
        return None

    name_idx = list(code.co_names).index(symbol)

    STORE_NAME = 90
    STORE_GLOBAL = 97
    LOAD_CONST = 100

    const = default

    for byte_code in dis.Bytecode(code):
        op = byte_code.opcode
        arg = byte_code.arg

        if op == LOAD_CONST:
            const = code.co_consts[arg]
        elif arg == name_idx and (op == STORE_NAME or op == STORE_GLOBAL):
            return const
        else:
            const = default


def _update_globals():
    """
    Patch the globals to remove the objects not available on some platforms.

    XXX it'd be better to test assertions about bytecode instead.
    """

    if not sys.platform.startswith('java') and sys.platform != 'cli':
        return
    incompatible = 'extract_constant', 'get_module_constant'
    for name in incompatible:
        del globals()[name]
        __all__.remove(name)


_update_globals()

"""Extensions to the 'distutils' for large or complex distributions"""

from fnmatch import fnmatchcase
import functools
import os
import re

import _distutils_hack.override  # noqa: F401

import distutils.core
from distutils.errors import DistutilsOptionError
from distutils.util import convert_path

from ._deprecation_warning import SetuptoolsDeprecationWarning

import setuptools.version
from setuptools.extension import Extension
from setuptools.dist import Distribution
from setuptools.depends import Require
from . import monkey


__all__ = [
    'setup',
    'Distribution',
    'Command',
    'Extension',
    'Require',
    'SetuptoolsDeprecationWarning',
    'find_packages',
    'find_namespace_packages',
]

__version__ = setuptools.version.__version__

bootstrap_install_from = None


class PackageFinder:
    """
    Generate a list of all Python packages found within a directory
    """

    @classmethod
    def find(cls, where='.', exclude=(), include=('*',)):
        """Return a list all Python packages found within directory 'where'

        'where' is the root directory which will be searched for packages.  It
        should be supplied as a "cross-platform" (i.e. URL-style) path; it will
        be converted to the appropriate local path syntax.

        'exclude' is a sequence of package names to exclude; '*' can be used
        as a wildcard in the names, such that 'foo.*' will exclude all
        subpackages of 'foo' (but not 'foo' itself).

        'include' is a sequence of package names to include.  If it's
        specified, only the named packages will be included.  If it's not
        specified, all found packages will be included.  'include' can contain
        shell style wildcard patterns just like 'exclude'.
        """

        return list(
            cls._find_packages_iter(
                convert_path(where),
                cls._build_filter('ez_setup', '*__pycache__', *exclude),
                cls._build_filter(*include),
            )
        )

    @classmethod
    def _find_packages_iter(cls, where, exclude, include):
        """
        All the packages found in 'where' that pass the 'include' filter, but
        not the 'exclude' filter.
        """
        for root, dirs, files in os.walk(where, followlinks=True):
            # Copy dirs to iterate over it, then empty dirs.
            all_dirs = dirs[:]
            dirs[:] = []

            for dir in all_dirs:
                full_path = os.path.join(root, dir)
                rel_path = os.path.relpath(full_path, where)
                package = rel_path.replace(os.path.sep, '.')

                # Skip directory trees that are not valid packages
                if '.' in dir or not cls._looks_like_package(full_path):
                    continue

                # Should this package be included?
                if include(package) and not exclude(package):
                    yield package

                # Keep searching subdirectories, as there may be more packages
                # down there, even if the parent was excluded.
                dirs.append(dir)

    @staticmethod
    def _looks_like_package(path):
        """Does a directory look like a package?"""
        return os.path.isfile(os.path.join(path, '__init__.py'))

    @staticmethod
    def _build_filter(*patterns):
        """
        Given a list of patterns, return a callable that will be true only if
        the input matches at least one of the patterns.
        """
        return lambda name: any(fnmatchcase(name, pat=pat) for pat in patterns)


class PEP420PackageFinder(PackageFinder):
    @staticmethod
    def _looks_like_package(path):
        return True


find_packages = PackageFinder.find
find_namespace_packages = PEP420PackageFinder.find


def _install_setup_requires(attrs):
    # Note: do not use `setuptools.Distribution` directly, as
    # our PEP 517 backend patch `distutils.core.Distribution`.
    class MinimalDistribution(distutils.core.Distribution):
        """
        A minimal version of a distribution for supporting the
        fetch_build_eggs interface.
        """

        def __init__(self, attrs):
            _incl = 'dependency_links', 'setup_requires'
            filtered = {k: attrs[k] for k in set(_incl) & set(attrs)}
            distutils.core.Distribution.__init__(self, filtered)

        def finalize_options(self):
            """
            Disable finalize_options to avoid building the working set.
            Ref #2158.
            """

    dist = MinimalDistribution(attrs)

    # Honor setup.cfg's options.
    dist.parse_config_files(ignore_option_errors=True)
    if dist.setup_requires:
        dist.fetch_build_eggs(dist.setup_requires)


def setup(**attrs):
    # Make sure we have any requirements needed to interpret 'attrs'.
    _install_setup_requires(attrs)
    return distutils.core.setup(**attrs)


setup.__doc__ = distutils.core.setup.__doc__


_Command = monkey.get_unpatched(distutils.core.Command)


class Command(_Command):
    __doc__ = _Command.__doc__

    command_consumes_arguments = False

    def __init__(self, dist, **kw):
        """
        Construct the command for dist, updating
        vars(self) with any keyword parameters.
        """
        _Command.__init__(self, dist)
        vars(self).update(kw)

    def _ensure_stringlike(self, option, what, default=None):
        val = getattr(self, option)
        if val is None:
            setattr(self, option, default)
            return default
        elif not isinstance(val, str):
            raise DistutilsOptionError(
                "'%s' must be a %s (got `%s`)" % (option, what, val)
            )
        return val

    def ensure_string_list(self, option):
        r"""Ensure that 'option' is a list of strings.  If 'option' is
        currently a string, we split it either on /,\s*/ or /\s+/, so
        "foo bar baz", "foo,bar,baz", and "foo,   bar baz" all become
        ["foo", "bar", "baz"].
        """
        val = getattr(self, option)
        if val is None:
            return
        elif isinstance(val, str):
            setattr(self, option, re.split(r',\s*|\s+', val))
        else:
            if isinstance(val, list):
                ok = all(isinstance(v, str) for v in val)
            else:
                ok = False
            if not ok:
                raise DistutilsOptionError(
                    "'%s' must be a list of strings (got %r)" % (option, val)
                )

    def reinitialize_command(self, command, reinit_subcommands=0, **kw):
        cmd = _Command.reinitialize_command(self, command, reinit_subcommands)
        vars(cmd).update(kw)
        return cmd


def _find_all_simple(path):
    """
    Find all files under 'path'
    """
    results = (
        os.path.join(base, file)
        for base, dirs, files in os.walk(path, followlinks=True)
        for file in files
    )
    return filter(os.path.isfile, results)


def findall(dir=os.curdir):
    """
    Find all files under 'dir' and return the list of full filenames.
    Unless dir is '.', return full filenames with dir prepended.
    """
    files = _find_all_simple(dir)
    if dir == os.curdir:
        make_rel = functools.partial(os.path.relpath, start=dir)
        files = map(make_rel, files)
    return list(files)


class sic(str):
    """Treat this string as-is (https://en.wikipedia.org/wiki/Sic)"""


# Apply monkey patches
monkey.patch_all()

import glob
import os
import subprocess
import sys
import tempfile
from distutils import log
from distutils.errors import DistutilsError

import pkg_resources
from setuptools.wheel import Wheel


def _fixup_find_links(find_links):
    """Ensure find-links option end-up being a list of strings."""
    if isinstance(find_links, str):
        return find_links.split()
    assert isinstance(find_links, (tuple, list))
    return find_links


def fetch_build_egg(dist, req):  # noqa: C901  # is too complex (16)  # FIXME
    """Fetch an egg needed for building.

    Use pip/wheel to fetch/build a wheel."""
    # Warn if wheel is not available
    try:
        pkg_resources.get_distribution('wheel')
    except pkg_resources.DistributionNotFound:
        dist.announce('WARNING: The wheel package is not available.', log.WARN)
    # Ignore environment markers; if supplied, it is required.
    req = strip_marker(req)
    # Take easy_install options into account, but do not override relevant
    # pip environment variables (like PIP_INDEX_URL or PIP_QUIET); they'll
    # take precedence.
    opts = dist.get_option_dict('easy_install')
    if 'allow_hosts' in opts:
        raise DistutilsError('the `allow-hosts` option is not supported '
                             'when using pip to install requirements.')
    quiet = 'PIP_QUIET' not in os.environ and 'PIP_VERBOSE' not in os.environ
    if 'PIP_INDEX_URL' in os.environ:
        index_url = None
    elif 'index_url' in opts:
        index_url = opts['index_url'][1]
    else:
        index_url = None
    find_links = (
        _fixup_find_links(opts['find_links'][1])[:] if 'find_links' in opts
        else []
    )
    if dist.dependency_links:
        find_links.extend(dist.dependency_links)
    eggs_dir = os.path.realpath(dist.get_egg_cache_dir())
    environment = pkg_resources.Environment()
    for egg_dist in pkg_resources.find_distributions(eggs_dir):
        if egg_dist in req and environment.can_add(egg_dist):
            return egg_dist
    with tempfile.TemporaryDirectory() as tmpdir:
        cmd = [
            sys.executable, '-m', 'pip',
            '--disable-pip-version-check',
            'wheel', '--no-deps',
            '-w', tmpdir,
        ]
        if quiet:
            cmd.append('--quiet')
        if index_url is not None:
            cmd.extend(('--index-url', index_url))
        for link in find_links or []:
            cmd.extend(('--find-links', link))
        # If requirement is a PEP 508 direct URL, directly pass
        # the URL to pip, as `req @ url` does not work on the
        # command line.
        cmd.append(req.url or str(req))
        try:
            subprocess.check_call(cmd)
        except subprocess.CalledProcessError as e:
            raise DistutilsError(str(e)) from e
        wheel = Wheel(glob.glob(os.path.join(tmpdir, '*.whl'))[0])
        dist_location = os.path.join(eggs_dir, wheel.egg_name())
        wheel.install_as_egg(dist_location)
        dist_metadata = pkg_resources.PathMetadata(
            dist_location, os.path.join(dist_location, 'EGG-INFO'))
        dist = pkg_resources.Distribution.from_filename(
            dist_location, metadata=dist_metadata)
        return dist


def strip_marker(req):
    """
    Return a new requirement without the environment marker to avoid
    calling pip with something like `babel; extra == "i18n"`, which
    would always be ignored.
    """
    # create a copy to avoid mutating the input
    req = pkg_resources.Requirement.parse(str(req))
    req.marker = None
    return req

"""
Filename globbing utility. Mostly a copy of `glob` from Python 3.5.

Changes include:
 * `yield from` and PEP3102 `*` removed.
 * Hidden files are not ignored.
"""

import os
import re
import fnmatch

__all__ = ["glob", "iglob", "escape"]


def glob(pathname, recursive=False):
    """Return a list of paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la
    fnmatch. However, unlike fnmatch, filenames starting with a
    dot are special cases that are not matched by '*' and '?'
    patterns.

    If recursive is true, the pattern '**' will match any files and
    zero or more directories and subdirectories.
    """
    return list(iglob(pathname, recursive=recursive))


def iglob(pathname, recursive=False):
    """Return an iterator which yields the paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la
    fnmatch. However, unlike fnmatch, filenames starting with a
    dot are special cases that are not matched by '*' and '?'
    patterns.

    If recursive is true, the pattern '**' will match any files and
    zero or more directories and subdirectories.
    """
    it = _iglob(pathname, recursive)
    if recursive and _isrecursive(pathname):
        s = next(it)  # skip empty string
        assert not s
    return it


def _iglob(pathname, recursive):
    dirname, basename = os.path.split(pathname)
    glob_in_dir = glob2 if recursive and _isrecursive(basename) else glob1

    if not has_magic(pathname):
        if basename:
            if os.path.lexists(pathname):
                yield pathname
        else:
            # Patterns ending with a slash should match only directories
            if os.path.isdir(dirname):
                yield pathname
        return

    if not dirname:
        yield from glob_in_dir(dirname, basename)
        return
    # `os.path.split()` returns the argument itself as a dirname if it is a
    # drive or UNC path.  Prevent an infinite recursion if a drive or UNC path
    # contains magic characters (i.e. r'\\?\C:').
    if dirname != pathname and has_magic(dirname):
        dirs = _iglob(dirname, recursive)
    else:
        dirs = [dirname]
    if not has_magic(basename):
        glob_in_dir = glob0
    for dirname in dirs:
        for name in glob_in_dir(dirname, basename):
            yield os.path.join(dirname, name)


# These 2 helper functions non-recursively glob inside a literal directory.
# They return a list of basenames. `glob1` accepts a pattern while `glob0`
# takes a literal basename (so it only has to check for its existence).


def glob1(dirname, pattern):
    if not dirname:
        if isinstance(pattern, bytes):
            dirname = os.curdir.encode('ASCII')
        else:
            dirname = os.curdir
    try:
        names = os.listdir(dirname)
    except OSError:
        return []
    return fnmatch.filter(names, pattern)


def glob0(dirname, basename):
    if not basename:
        # `os.path.split()` returns an empty basename for paths ending with a
        # directory separator.  'q*x/' should match only directories.
        if os.path.isdir(dirname):
            return [basename]
    else:
        if os.path.lexists(os.path.join(dirname, basename)):
            return [basename]
    return []


# This helper function recursively yields relative pathnames inside a literal
# directory.


def glob2(dirname, pattern):
    assert _isrecursive(pattern)
    yield pattern[:0]
    for x in _rlistdir(dirname):
        yield x


# Recursively yields relative pathnames inside a literal directory.
def _rlistdir(dirname):
    if not dirname:
        if isinstance(dirname, bytes):
            dirname = os.curdir.encode('ASCII')
        else:
            dirname = os.curdir
    try:
        names = os.listdir(dirname)
    except os.error:
        return
    for x in names:
        yield x
        path = os.path.join(dirname, x) if dirname else x
        for y in _rlistdir(path):
            yield os.path.join(x, y)


magic_check = re.compile('([*?[])')
magic_check_bytes = re.compile(b'([*?[])')


def has_magic(s):
    if isinstance(s, bytes):
        match = magic_check_bytes.search(s)
    else:
        match = magic_check.search(s)
    return match is not None


def _isrecursive(pattern):
    if isinstance(pattern, bytes):
        return pattern == b'**'
    else:
        return pattern == '**'


def escape(pathname):
    """Escape all special characters.
    """
    # Escaping is done by wrapping any of "*?[" between square brackets.
    # Metacharacters do not work in the drive part and shouldn't be escaped.
    drive, pathname = os.path.splitdrive(pathname)
    if isinstance(pathname, bytes):
        pathname = magic_check_bytes.sub(br'[\1]', pathname)
    else:
        pathname = magic_check.sub(r'[\1]', pathname)
    return drive + pathname

import os
import sys
import tempfile
import operator
import functools
import itertools
import re
import contextlib
import pickle
import textwrap
import builtins

import pkg_resources
from distutils.errors import DistutilsError
from pkg_resources import working_set

if sys.platform.startswith('java'):
    import org.python.modules.posix.PosixModule as _os
else:
    _os = sys.modules[os.name]
try:
    _file = file
except NameError:
    _file = None
_open = open


__all__ = [
    "AbstractSandbox",
    "DirectorySandbox",
    "SandboxViolation",
    "run_setup",
]


def _execfile(filename, globals, locals=None):
    """
    Python 3 implementation of execfile.
    """
    mode = 'rb'
    with open(filename, mode) as stream:
        script = stream.read()
    if locals is None:
        locals = globals
    code = compile(script, filename, 'exec')
    exec(code, globals, locals)


@contextlib.contextmanager
def save_argv(repl=None):
    saved = sys.argv[:]
    if repl is not None:
        sys.argv[:] = repl
    try:
        yield saved
    finally:
        sys.argv[:] = saved


@contextlib.contextmanager
def save_path():
    saved = sys.path[:]
    try:
        yield saved
    finally:
        sys.path[:] = saved


@contextlib.contextmanager
def override_temp(replacement):
    """
    Monkey-patch tempfile.tempdir with replacement, ensuring it exists
    """
    os.makedirs(replacement, exist_ok=True)

    saved = tempfile.tempdir

    tempfile.tempdir = replacement

    try:
        yield
    finally:
        tempfile.tempdir = saved


@contextlib.contextmanager
def pushd(target):
    saved = os.getcwd()
    os.chdir(target)
    try:
        yield saved
    finally:
        os.chdir(saved)


class UnpickleableException(Exception):
    """
    An exception representing another Exception that could not be pickled.
    """

    @staticmethod
    def dump(type, exc):
        """
        Always return a dumped (pickled) type and exc. If exc can't be pickled,
        wrap it in UnpickleableException first.
        """
        try:
            return pickle.dumps(type), pickle.dumps(exc)
        except Exception:
            # get UnpickleableException inside the sandbox
            from setuptools.sandbox import UnpickleableException as cls

            return cls.dump(cls, cls(repr(exc)))


class ExceptionSaver:
    """
    A Context Manager that will save an exception, serialized, and restore it
    later.
    """

    def __enter__(self):
        return self

    def __exit__(self, type, exc, tb):
        if not exc:
            return

        # dump the exception
        self._saved = UnpickleableException.dump(type, exc)
        self._tb = tb

        # suppress the exception
        return True

    def resume(self):
        "restore and re-raise any exception"

        if '_saved' not in vars(self):
            return

        type, exc = map(pickle.loads, self._saved)
        raise exc.with_traceback(self._tb)


@contextlib.contextmanager
def save_modules():
    """
    Context in which imported modules are saved.

    Translates exceptions internal to the context into the equivalent exception
    outside the context.
    """
    saved = sys.modules.copy()
    with ExceptionSaver() as saved_exc:
        yield saved

    sys.modules.update(saved)
    # remove any modules imported since
    del_modules = (
        mod_name
        for mod_name in sys.modules
        if mod_name not in saved
        # exclude any encodings modules. See #285
        and not mod_name.startswith('encodings.')
    )
    _clear_modules(del_modules)

    saved_exc.resume()


def _clear_modules(module_names):
    for mod_name in list(module_names):
        del sys.modules[mod_name]


@contextlib.contextmanager
def save_pkg_resources_state():
    saved = pkg_resources.__getstate__()
    try:
        yield saved
    finally:
        pkg_resources.__setstate__(saved)


@contextlib.contextmanager
def setup_context(setup_dir):
    temp_dir = os.path.join(setup_dir, 'temp')
    with save_pkg_resources_state():
        with save_modules():
            with save_path():
                hide_setuptools()
                with save_argv():
                    with override_temp(temp_dir):
                        with pushd(setup_dir):
                            # ensure setuptools commands are available
                            __import__('setuptools')
                            yield


_MODULES_TO_HIDE = {
    'setuptools',
    'distutils',
    'pkg_resources',
    'Cython',
    '_distutils_hack',
}


def _needs_hiding(mod_name):
    """
    >>> _needs_hiding('setuptools')
    True
    >>> _needs_hiding('pkg_resources')
    True
    >>> _needs_hiding('setuptools_plugin')
    False
    >>> _needs_hiding('setuptools.__init__')
    True
    >>> _needs_hiding('distutils')
    True
    >>> _needs_hiding('os')
    False
    >>> _needs_hiding('Cython')
    True
    """
    base_module = mod_name.split('.', 1)[0]
    return base_module in _MODULES_TO_HIDE


def hide_setuptools():
    """
    Remove references to setuptools' modules from sys.modules to allow the
    invocation to import the most appropriate setuptools. This technique is
    necessary to avoid issues such as #315 where setuptools upgrading itself
    would fail to find a function declared in the metadata.
    """
    _distutils_hack = sys.modules.get('_distutils_hack', None)
    if _distutils_hack is not None:
        _distutils_hack.remove_shim()

    modules = filter(_needs_hiding, sys.modules)
    _clear_modules(modules)


def run_setup(setup_script, args):
    """Run a distutils setup script, sandboxed in its directory"""
    setup_dir = os.path.abspath(os.path.dirname(setup_script))
    with setup_context(setup_dir):
        try:
            sys.argv[:] = [setup_script] + list(args)
            sys.path.insert(0, setup_dir)
            # reset to include setup dir, w/clean callback list
            working_set.__init__()
            working_set.callbacks.append(lambda dist: dist.activate())

            with DirectorySandbox(setup_dir):
                ns = dict(__file__=setup_script, __name__='__main__')
                _execfile(setup_script, ns)
        except SystemExit as v:
            if v.args and v.args[0]:
                raise
            # Normal exit, just return


class AbstractSandbox:
    """Wrap 'os' module and 'open()' builtin for virtualizing setup scripts"""

    _active = False

    def __init__(self):
        self._attrs = [
            name
            for name in dir(_os)
            if not name.startswith('_') and hasattr(self, name)
        ]

    def _copy(self, source):
        for name in self._attrs:
            setattr(os, name, getattr(source, name))

    def __enter__(self):
        self._copy(self)
        if _file:
            builtins.file = self._file
        builtins.open = self._open
        self._active = True

    def __exit__(self, exc_type, exc_value, traceback):
        self._active = False
        if _file:
            builtins.file = _file
        builtins.open = _open
        self._copy(_os)

    def run(self, func):
        """Run 'func' under os sandboxing"""
        with self:
            return func()

    def _mk_dual_path_wrapper(name):
        original = getattr(_os, name)

        def wrap(self, src, dst, *args, **kw):
            if self._active:
                src, dst = self._remap_pair(name, src, dst, *args, **kw)
            return original(src, dst, *args, **kw)

        return wrap

    for name in ["rename", "link", "symlink"]:
        if hasattr(_os, name):
            locals()[name] = _mk_dual_path_wrapper(name)

    def _mk_single_path_wrapper(name, original=None):
        original = original or getattr(_os, name)

        def wrap(self, path, *args, **kw):
            if self._active:
                path = self._remap_input(name, path, *args, **kw)
            return original(path, *args, **kw)

        return wrap

    if _file:
        _file = _mk_single_path_wrapper('file', _file)
    _open = _mk_single_path_wrapper('open', _open)
    for name in [
        "stat",
        "listdir",
        "chdir",
        "open",
        "chmod",
        "chown",
        "mkdir",
        "remove",
        "unlink",
        "rmdir",
        "utime",
        "lchown",
        "chroot",
        "lstat",
        "startfile",
        "mkfifo",
        "mknod",
        "pathconf",
        "access",
    ]:
        if hasattr(_os, name):
            locals()[name] = _mk_single_path_wrapper(name)

    def _mk_single_with_return(name):
        original = getattr(_os, name)

        def wrap(self, path, *args, **kw):
            if self._active:
                path = self._remap_input(name, path, *args, **kw)
                return self._remap_output(name, original(path, *args, **kw))
            return original(path, *args, **kw)

        return wrap

    for name in ['readlink', 'tempnam']:
        if hasattr(_os, name):
            locals()[name] = _mk_single_with_return(name)

    def _mk_query(name):
        original = getattr(_os, name)

        def wrap(self, *args, **kw):
            retval = original(*args, **kw)
            if self._active:
                return self._remap_output(name, retval)
            return retval

        return wrap

    for name in ['getcwd', 'tmpnam']:
        if hasattr(_os, name):
            locals()[name] = _mk_query(name)

    def _validate_path(self, path):
        """Called to remap or validate any path, whether input or output"""
        return path

    def _remap_input(self, operation, path, *args, **kw):
        """Called for path inputs"""
        return self._validate_path(path)

    def _remap_output(self, operation, path):
        """Called for path outputs"""
        return self._validate_path(path)

    def _remap_pair(self, operation, src, dst, *args, **kw):
        """Called for path pairs like rename, link, and symlink operations"""
        return (
            self._remap_input(operation + '-from', src, *args, **kw),
            self._remap_input(operation + '-to', dst, *args, **kw),
        )


if hasattr(os, 'devnull'):
    _EXCEPTIONS = [os.devnull]
else:
    _EXCEPTIONS = []


class DirectorySandbox(AbstractSandbox):
    """Restrict operations to a single subdirectory - pseudo-chroot"""

    write_ops = dict.fromkeys(
        [
            "open",
            "chmod",
            "chown",
            "mkdir",
            "remove",
            "unlink",
            "rmdir",
            "utime",
            "lchown",
            "chroot",
            "mkfifo",
            "mknod",
            "tempnam",
        ]
    )

    _exception_patterns = []
    "exempt writing to paths that match the pattern"

    def __init__(self, sandbox, exceptions=_EXCEPTIONS):
        self._sandbox = os.path.normcase(os.path.realpath(sandbox))
        self._prefix = os.path.join(self._sandbox, '')
        self._exceptions = [
            os.path.normcase(os.path.realpath(path)) for path in exceptions
        ]
        AbstractSandbox.__init__(self)

    def _violation(self, operation, *args, **kw):
        from setuptools.sandbox import SandboxViolation

        raise SandboxViolation(operation, args, kw)

    if _file:

        def _file(self, path, mode='r', *args, **kw):
            if mode not in ('r', 'rt', 'rb', 'rU', 'U') and not self._ok(path):
                self._violation("file", path, mode, *args, **kw)
            return _file(path, mode, *args, **kw)

    def _open(self, path, mode='r', *args, **kw):
        if mode not in ('r', 'rt', 'rb', 'rU', 'U') and not self._ok(path):
            self._violation("open", path, mode, *args, **kw)
        return _open(path, mode, *args, **kw)

    def tmpnam(self):
        self._violation("tmpnam")

    def _ok(self, path):
        active = self._active
        try:
            self._active = False
            realpath = os.path.normcase(os.path.realpath(path))
            return (
                self._exempted(realpath)
                or realpath == self._sandbox
                or realpath.startswith(self._prefix)
            )
        finally:
            self._active = active

    def _exempted(self, filepath):
        start_matches = (
            filepath.startswith(exception) for exception in self._exceptions
        )
        pattern_matches = (
            re.match(pattern, filepath) for pattern in self._exception_patterns
        )
        candidates = itertools.chain(start_matches, pattern_matches)
        return any(candidates)

    def _remap_input(self, operation, path, *args, **kw):
        """Called for path inputs"""
        if operation in self.write_ops and not self._ok(path):
            self._violation(operation, os.path.realpath(path), *args, **kw)
        return path

    def _remap_pair(self, operation, src, dst, *args, **kw):
        """Called for path pairs like rename, link, and symlink operations"""
        if not self._ok(src) or not self._ok(dst):
            self._violation(operation, src, dst, *args, **kw)
        return (src, dst)

    def open(self, file, flags, mode=0o777, *args, **kw):
        """Called for low-level os.open()"""
        if flags & WRITE_FLAGS and not self._ok(file):
            self._violation("os.open", file, flags, mode, *args, **kw)
        return _os.open(file, flags, mode, *args, **kw)


WRITE_FLAGS = functools.reduce(
    operator.or_,
    [
        getattr(_os, a, 0)
        for a in "O_WRONLY O_RDWR O_APPEND O_CREAT O_TRUNC O_TEMPORARY".split()
    ],
)


class SandboxViolation(DistutilsError):
    """A setup script attempted to modify the filesystem outside the sandbox"""

    tmpl = textwrap.dedent(
        """
        SandboxViolation: {cmd}{args!r} {kwargs}

        The package setup script has attempted to modify files on your system
        that are not within the EasyInstall build area, and has been aborted.

        This package cannot be safely installed by EasyInstall, and may not
        support alternate installation locations even if you run its setup
        script by hand.  Please inform the package's author and the EasyInstall
        maintainers to find out if a fix or workaround is available.
        """
    ).lstrip()

    def __str__(self):
        cmd, args, kwargs = self.args
        return self.tmpl.format(**locals())

import importlib

try:
    import importlib.util
except ImportError:
    pass


try:
    module_from_spec = importlib.util.module_from_spec
except AttributeError:
    def module_from_spec(spec):
        return spec.loader.load_module(spec.name)

# EASY-INSTALL-SCRIPT: %(spec)r,%(script_name)r
__requires__ = %(spec)r
__import__('pkg_resources').run_script(%(spec)r, %(script_name)r)

"""
Launch the Python script on the command line after
setuptools is bootstrapped via import.
"""

# Note that setuptools gets imported implicitly by the
# invocation of this script using python -m setuptools.launch

import tokenize
import sys


def run():
    """
    Run the script in sys.argv[1] as if it had
    been invoked naturally.
    """
    __builtins__
    script_name = sys.argv[1]
    namespace = dict(
        __file__=script_name,
        __name__='__main__',
        __doc__=None,
    )
    sys.argv[:] = sys.argv[1:]

    open_ = getattr(tokenize, 'open', open)
    with open_(script_name) as fid:
        script = fid.read()
    norm_script = script.replace('\\r\\n', '\\n')
    code = compile(norm_script, script_name, 'exec')
    exec(code, namespace)


if __name__ == '__main__':
    run()

import re
import functools
import distutils.core
import distutils.errors
import distutils.extension

from .monkey import get_unpatched


def _have_cython():
    """
    Return True if Cython can be imported.
    """
    cython_impl = 'Cython.Distutils.build_ext'
    try:
        # from (cython_impl) import build_ext
        __import__(cython_impl, fromlist=['build_ext']).build_ext
        return True
    except Exception:
        pass
    return False


# for compatibility
have_pyrex = _have_cython

_Extension = get_unpatched(distutils.core.Extension)


class Extension(_Extension):
    """Extension that uses '.c' files in place of '.pyx' files"""

    def __init__(self, name, sources, *args, **kw):
        # The *args is needed for compatibility as calls may use positional
        # arguments. py_limited_api may be set only via keyword.
        self.py_limited_api = kw.pop("py_limited_api", False)
        _Extension.__init__(self, name, sources, *args, **kw)

    def _convert_pyx_sources_to_lang(self):
        """
        Replace sources with .pyx extensions to sources with the target
        language extension. This mechanism allows language authors to supply
        pre-converted sources but to prefer the .pyx sources.
        """
        if _have_cython():
            # the build has Cython, so allow it to compile the .pyx files
            return
        lang = self.language or ''
        target_ext = '.cpp' if lang.lower() == 'c++' else '.c'
        sub = functools.partial(re.sub, '.pyx$', target_ext)
        self.sources = list(map(sub, self.sources))


class Library(Extension):
    """Just like a regular Extension, but built as a library instead"""

import unicodedata
import sys


# HFS Plus uses decomposed UTF-8
def decompose(path):
    if isinstance(path, str):
        return unicodedata.normalize('NFD', path)
    try:
        path = path.decode('utf-8')
        path = unicodedata.normalize('NFD', path)
        path = path.encode('utf-8')
    except UnicodeError:
        pass  # Not UTF-8
    return path


def filesys_decode(path):
    """
    Ensure that the given path is decoded,
    NONE when no expected encoding works
    """

    if isinstance(path, str):
        return path

    fs_enc = sys.getfilesystemencoding() or 'utf-8'
    candidates = fs_enc, 'utf-8'

    for enc in candidates:
        try:
            return path.decode(enc)
        except UnicodeDecodeError:
            continue


def try_encode(string, enc):
    "turn unicode encoding into a functional routine"
    try:
        return string.encode(enc)
    except UnicodeEncodeError:
        return None

"""
Monkey patching of distutils.
"""

import sys
import distutils.filelist
import platform
import types
import functools
from importlib import import_module
import inspect

import setuptools

__all__ = []
"""
Everything is private. Contact the project team
if you think you need this functionality.
"""


def _get_mro(cls):
    """
    Returns the bases classes for cls sorted by the MRO.

    Works around an issue on Jython where inspect.getmro will not return all
    base classes if multiple classes share the same name. Instead, this
    function will return a tuple containing the class itself, and the contents
    of cls.__bases__. See https://github.com/pypa/setuptools/issues/1024.
    """
    if platform.python_implementation() == "Jython":
        return (cls,) + cls.__bases__
    return inspect.getmro(cls)


def get_unpatched(item):
    lookup = (
        get_unpatched_class if isinstance(item, type) else
        get_unpatched_function if isinstance(item, types.FunctionType) else
        lambda item: None
    )
    return lookup(item)


def get_unpatched_class(cls):
    """Protect against re-patching the distutils if reloaded

    Also ensures that no other distutils extension monkeypatched the distutils
    first.
    """
    external_bases = (
        cls
        for cls in _get_mro(cls)
        if not cls.__module__.startswith('setuptools')
    )
    base = next(external_bases)
    if not base.__module__.startswith('distutils'):
        msg = "distutils has already been patched by %r" % cls
        raise AssertionError(msg)
    return base


def patch_all():
    # we can't patch distutils.cmd, alas
    distutils.core.Command = setuptools.Command

    has_issue_12885 = sys.version_info <= (3, 5, 3)

    if has_issue_12885:
        # fix findall bug in distutils (http://bugs.python.org/issue12885)
        distutils.filelist.findall = setuptools.findall

    needs_warehouse = (
        sys.version_info < (2, 7, 13)
        or
        (3, 4) < sys.version_info < (3, 4, 6)
        or
        (3, 5) < sys.version_info <= (3, 5, 3)
    )

    if needs_warehouse:
        warehouse = 'https://upload.pypi.org/legacy/'
        distutils.config.PyPIRCCommand.DEFAULT_REPOSITORY = warehouse

    _patch_distribution_metadata()

    # Install Distribution throughout the distutils
    for module in distutils.dist, distutils.core, distutils.cmd:
        module.Distribution = setuptools.dist.Distribution

    # Install the patched Extension
    distutils.core.Extension = setuptools.extension.Extension
    distutils.extension.Extension = setuptools.extension.Extension
    if 'distutils.command.build_ext' in sys.modules:
        sys.modules['distutils.command.build_ext'].Extension = (
            setuptools.extension.Extension
        )

    patch_for_msvc_specialized_compiler()


def _patch_distribution_metadata():
    """Patch write_pkg_file and read_pkg_file for higher metadata standards"""
    for attr in ('write_pkg_file', 'read_pkg_file', 'get_metadata_version'):
        new_val = getattr(setuptools.dist, attr)
        setattr(distutils.dist.DistributionMetadata, attr, new_val)


def patch_func(replacement, target_mod, func_name):
    """
    Patch func_name in target_mod with replacement

    Important - original must be resolved by name to avoid
    patching an already patched function.
    """
    original = getattr(target_mod, func_name)

    # set the 'unpatched' attribute on the replacement to
    # point to the original.
    vars(replacement).setdefault('unpatched', original)

    # replace the function in the original module
    setattr(target_mod, func_name, replacement)


def get_unpatched_function(candidate):
    return getattr(candidate, 'unpatched')


def patch_for_msvc_specialized_compiler():
    """
    Patch functions in distutils to use standalone Microsoft Visual C++
    compilers.
    """
    # import late to avoid circular imports on Python < 3.5
    msvc = import_module('setuptools.msvc')

    if platform.system() != 'Windows':
        # Compilers only available on Microsoft Windows
        return

    def patch_params(mod_name, func_name):
        """
        Prepare the parameters for patch_func to patch indicated function.
        """
        repl_prefix = 'msvc9_' if 'msvc9' in mod_name else 'msvc14_'
        repl_name = repl_prefix + func_name.lstrip('_')
        repl = getattr(msvc, repl_name)
        mod = import_module(mod_name)
        if not hasattr(mod, func_name):
            raise ImportError(func_name)
        return repl, mod, func_name

    # Python 2.7 to 3.4
    msvc9 = functools.partial(patch_params, 'distutils.msvc9compiler')

    # Python 3.5+
    msvc14 = functools.partial(patch_params, 'distutils._msvccompiler')

    try:
        # Patch distutils.msvc9compiler
        patch_func(*msvc9('find_vcvarsall'))
        patch_func(*msvc9('query_vcvarsall'))
    except ImportError:
        pass

    try:
        # Patch distutils._msvccompiler._get_vc_env
        patch_func(*msvc14('_get_vc_env'))
    except ImportError:
        pass

    try:
        # Patch distutils._msvccompiler.gen_lib_options for Numpy
        patch_func(*msvc14('gen_lib_options'))
    except ImportError:
        pass

"""A PEP 517 interface to setuptools

Previously, when a user or a command line tool (let's call it a "frontend")
needed to make a request of setuptools to take a certain action, for
example, generating a list of installation requirements, the frontend would
would call "setup.py egg_info" or "setup.py bdist_wheel" on the command line.

PEP 517 defines a different method of interfacing with setuptools. Rather
than calling "setup.py" directly, the frontend should:

  1. Set the current directory to the directory with a setup.py file
  2. Import this module into a safe python interpreter (one in which
     setuptools can potentially set global variables or crash hard).
  3. Call one of the functions defined in PEP 517.

What each function does is defined in PEP 517. However, here is a "casual"
definition of the functions (this definition should not be relied on for
bug reports or API stability):

  - `build_wheel`: build a wheel in the folder and return the basename
  - `get_requires_for_build_wheel`: get the `setup_requires` to build
  - `prepare_metadata_for_build_wheel`: get the `install_requires`
  - `build_sdist`: build an sdist in the folder and return the basename
  - `get_requires_for_build_sdist`: get the `setup_requires` to build

Again, this is not a formal definition! Just a "taste" of the module.
"""

import io
import os
import sys
import tokenize
import shutil
import contextlib
import tempfile

import setuptools
import distutils

from pkg_resources import parse_requirements

__all__ = ['get_requires_for_build_sdist',
           'get_requires_for_build_wheel',
           'prepare_metadata_for_build_wheel',
           'build_wheel',
           'build_sdist',
           '__legacy__',
           'SetupRequirementsError']


class SetupRequirementsError(BaseException):
    def __init__(self, specifiers):
        self.specifiers = specifiers


class Distribution(setuptools.dist.Distribution):
    def fetch_build_eggs(self, specifiers):
        specifier_list = list(map(str, parse_requirements(specifiers)))

        raise SetupRequirementsError(specifier_list)

    @classmethod
    @contextlib.contextmanager
    def patch(cls):
        """
        Replace
        distutils.dist.Distribution with this class
        for the duration of this context.
        """
        orig = distutils.core.Distribution
        distutils.core.Distribution = cls
        try:
            yield
        finally:
            distutils.core.Distribution = orig


@contextlib.contextmanager
def no_install_setup_requires():
    """Temporarily disable installing setup_requires

    Under PEP 517, the backend reports build dependencies to the frontend,
    and the frontend is responsible for ensuring they're installed.
    So setuptools (acting as a backend) should not try to install them.
    """
    orig = setuptools._install_setup_requires
    setuptools._install_setup_requires = lambda attrs: None
    try:
        yield
    finally:
        setuptools._install_setup_requires = orig


def _get_immediate_subdirectories(a_dir):
    return [name for name in os.listdir(a_dir)
            if os.path.isdir(os.path.join(a_dir, name))]


def _file_with_extension(directory, extension):
    matching = (
        f for f in os.listdir(directory)
        if f.endswith(extension)
    )
    try:
        file, = matching
    except ValueError:
        raise ValueError(
            'No distribution was found. Ensure that `setup.py` '
            'is not empty and that it calls `setup()`.')
    return file


def _open_setup_script(setup_script):
    if not os.path.exists(setup_script):
        # Supply a default setup.py
        return io.StringIO(u"from setuptools import setup; setup()")

    return getattr(tokenize, 'open', open)(setup_script)


class _BuildMetaBackend(object):

    def _fix_config(self, config_settings):
        config_settings = config_settings or {}
        config_settings.setdefault('--global-option', [])
        return config_settings

    def _get_build_requires(self, config_settings, requirements):
        config_settings = self._fix_config(config_settings)

        sys.argv = sys.argv[:1] + ['egg_info'] + \
            config_settings["--global-option"]
        try:
            with Distribution.patch():
                self.run_setup()
        except SetupRequirementsError as e:
            requirements += e.specifiers

        return requirements

    def run_setup(self, setup_script='setup.py'):
        # Note that we can reuse our build directory between calls
        # Correctness comes first, then optimization later
        __file__ = setup_script
        __name__ = '__main__'

        with _open_setup_script(__file__) as f:
            code = f.read().replace(r'\r\n', r'\n')

        exec(compile(code, __file__, 'exec'), locals())

    def get_requires_for_build_wheel(self, config_settings=None):
        config_settings = self._fix_config(config_settings)
        return self._get_build_requires(
            config_settings, requirements=['wheel'])

    def get_requires_for_build_sdist(self, config_settings=None):
        config_settings = self._fix_config(config_settings)
        return self._get_build_requires(config_settings, requirements=[])

    def prepare_metadata_for_build_wheel(self, metadata_directory,
                                         config_settings=None):
        sys.argv = sys.argv[:1] + [
            'dist_info', '--egg-base', metadata_directory]
        with no_install_setup_requires():
            self.run_setup()

        dist_info_directory = metadata_directory
        while True:
            dist_infos = [f for f in os.listdir(dist_info_directory)
                          if f.endswith('.dist-info')]

            if (
                len(dist_infos) == 0 and
                len(_get_immediate_subdirectories(dist_info_directory)) == 1
            ):

                dist_info_directory = os.path.join(
                    dist_info_directory, os.listdir(dist_info_directory)[0])
                continue

            assert len(dist_infos) == 1
            break

        # PEP 517 requires that the .dist-info directory be placed in the
        # metadata_directory. To comply, we MUST copy the directory to the root
        if dist_info_directory != metadata_directory:
            shutil.move(
                os.path.join(dist_info_directory, dist_infos[0]),
                metadata_directory)
            shutil.rmtree(dist_info_directory, ignore_errors=True)

        return dist_infos[0]

    def _build_with_temp_dir(self, setup_command, result_extension,
                             result_directory, config_settings):
        config_settings = self._fix_config(config_settings)
        result_directory = os.path.abspath(result_directory)

        # Build in a temporary directory, then copy to the target.
        os.makedirs(result_directory, exist_ok=True)
        with tempfile.TemporaryDirectory(dir=result_directory) as tmp_dist_dir:
            sys.argv = (sys.argv[:1] + setup_command +
                        ['--dist-dir', tmp_dist_dir] +
                        config_settings["--global-option"])
            with no_install_setup_requires():
                self.run_setup()

            result_basename = _file_with_extension(
                tmp_dist_dir, result_extension)
            result_path = os.path.join(result_directory, result_basename)
            if os.path.exists(result_path):
                # os.rename will fail overwriting on non-Unix.
                os.remove(result_path)
            os.rename(os.path.join(tmp_dist_dir, result_basename), result_path)

        return result_basename

    def build_wheel(self, wheel_directory, config_settings=None,
                    metadata_directory=None):
        return self._build_with_temp_dir(['bdist_wheel'], '.whl',
                                         wheel_directory, config_settings)

    def build_sdist(self, sdist_directory, config_settings=None):
        return self._build_with_temp_dir(['sdist', '--formats', 'gztar'],
                                         '.tar.gz', sdist_directory,
                                         config_settings)


class _BuildMetaLegacyBackend(_BuildMetaBackend):
    """Compatibility backend for setuptools

    This is a version of setuptools.build_meta that endeavors
    to maintain backwards
    compatibility with pre-PEP 517 modes of invocation. It
    exists as a temporary
    bridge between the old packaging mechanism and the new
    packaging mechanism,
    and will eventually be removed.
    """
    def run_setup(self, setup_script='setup.py'):
        # In order to maintain compatibility with scripts assuming that
        # the setup.py script is in a directory on the PYTHONPATH, inject
        # '' into sys.path. (pypa/setuptools#1642)
        sys_path = list(sys.path)           # Save the original path

        script_dir = os.path.dirname(os.path.abspath(setup_script))
        if script_dir not in sys.path:
            sys.path.insert(0, script_dir)

        # Some setup.py scripts (e.g. in pygame and numpy) use sys.argv[0] to
        # get the directory of the source code. They expect it to refer to the
        # setup.py script.
        sys_argv_0 = sys.argv[0]
        sys.argv[0] = setup_script

        try:
            super(_BuildMetaLegacyBackend,
                  self).run_setup(setup_script=setup_script)
        finally:
            # While PEP 517 frontends should be calling each hook in a fresh
            # subprocess according to the standard (and thus it should not be
            # strictly necessary to restore the old sys.path), we'll restore
            # the original path so that the path manipulation does not persist
            # within the hook after run_setup is called.
            sys.path[:] = sys_path
            sys.argv[0] = sys_argv_0


# The primary backend
_BACKEND = _BuildMetaBackend()

get_requires_for_build_wheel = _BACKEND.get_requires_for_build_wheel
get_requires_for_build_sdist = _BACKEND.get_requires_for_build_sdist
prepare_metadata_for_build_wheel = _BACKEND.prepare_metadata_for_build_wheel
build_wheel = _BACKEND.build_wheel
build_sdist = _BACKEND.build_sdist


# The legacy backend
__legacy__ = _BuildMetaLegacyBackend()

MZ       ÿÿ  ¸       @                                   à   º ´	Í!¸LÍ!This program cannot be run in DOS mode.

$       YSþj292929:ôë92929F29 }929`9929`929`9m29`929Rich29                PE  L ø°Q        à 	  Ê   N      ç%      à    @                      @                                     ,ù  (                                                                   ô  @            à  @                          .text   ]É      Ê                    `.rdata  `    à   "   Î              @  @.data   Ä+        ð              @  À                                                                                                                                                                                                                                                                                                                                                                                                                                                QD$P@ÉuùSUV+ÂWèD-jPès
  Ä3ÿ3ÛD$Æ "pí~Wë    L$<\uGë <"uÿ~Wj\Vè
  Ä÷3ÿÆ\Fë3ÿT$CF;Ý|Ãÿ~Wj\VèV
  Ä÷D$_Æ"ÆF ^][YÃì  ¡A 3Ä$  V´$  W¼$  ÏÀtd$ A</uÆAÿ\Àuñ$  P$  QT$RD$PWè
  Ä|$ ¤   |$\   $  Q$  RD$PL$QVè^
  D$ ÄP@Éuù+Â|\Du
H8\td$ T$;Âr	Æ  H8\uïj WD$PL$Q$  Rèù
  jh  èÿ  ðh  $,  PVè´	  Ä(ëjh  èÙ  h  ðWVè	  Ä$  _Æ^3Ìè
  Ä  ÃÌÌÌÌÌÌÌÌÌìSUVW|$ÇP@Éuù+ÂjPè  l$(3ÛD$] 8¾P÷\$è
  ÄÀt¾OGQè
  ÄÀuîGL$Étg¾ÑRèm
  ÄÀt|$ tLD$<\uCëÓ<"uöÃu3À9D$ÆD$ ÀD$ÑûÛtSj\VèA  Äó3Û|$ tL$FëL$ÛtSj\Vè  L$(Äó3ÛT$Æ ÿE E F4Ét7¾RèÙ  ÄÀt¾GGPèÇ  ÄÀuî? 6ÿÿÿD$_^][ÄÃ_^]Â[ÄÃÌÌÌÌÌÌÌÌ|$ u¡  A Àt	j Pÿ à@ ¸   ÃÌìX3ÀjDPD$D$D$D$D$PÇD$    èf  Äjh0@ ÇD$D   ÿà@ D$\L$QT$Rj j j jj j Pj ÿà@ Àuh¨á@ è  À@Pèù  Ä3ÀÄXÃT$L$jÿR
  A ÿà@ L$$PQÿà@ Àuhá@ ë¸$ÄXÃÌÌÌSUVW|$ÇPI @Éuù\$+Â¹   ;Ùp~-¤$    D$x    @Òuù+ÇA;Ët|Þ|$jVè(  WèhÈá@ Uè{  ÇÄP@Éuù+Â¾   ;Þø~:L$±R/hÄá@ PèI  L$$±ÄPëI @Éuù+ÂF;ó||Æ_^Å][ÃÌÌÌÌÌÌÌì  ¡A 3Ä$  $   h   L$Qj D$ÿà@ D$P@Éuù+ÂDT$;ÂvI 8.tÆ  HL$;ÁwïÆ  D$H¤$    H@Éuø(â@ 
,â@ f0â@ H
2â@ VfPT$j RH
è´  ðÄþÿu4D$Phâ@ è>  À@Pè  ÄF^$  3Ìè!	  Ä  ÃWh   $   QVè«  V¼,  è¨  $,  ÄH@;ÇsÉt
ù
tù
uëj$   hâ@ RÆ  èT
  ÄÀt2¡â@ 
â@ â@ $   â@ $   $$  $(  L$Q$"  Rèûÿÿ0D$ D$$PVè$úÿÿøÄ|$ÿuVhàá@ éµ   S\$U¬$,  +D$@jPèå  ðWt$èCùÿÿ¿   ÄÆ;ß~ÿL$ ¹Rè#ùÿÿGÄÆ;û|æD$$Pèùÿÿ¿   ÄÆ;ï~L$¹RèîøÿÿGÄÆ;ý|æ¼$4   ]Ç    [tED$t$PVè$¤  ÄVhÌá@ è  À@Pèn   Ä_¸   ^$  3Ìès  Ä  ÃL$T$D$QRPèüÿÿPèÀûÿÿ$,  Ä_^3Ìè?  Ä  ÃÌÌÌÌÌÌD$L$j PQèýÿÿÄÃjhðô@ è  3öuä3À];ÞÀ;Æu è;  Ç    VVVVVèÃ  ÄÈÿéÍ   3À9uÀ;ÆtÔ]Sè  YuüöC@uwSè*  YøÿtøþtÐÁúÈáÁá *A ë¹A öA$u)øÿtøþtÈÁùàÁà *A ë¸A ö@$tè¡  Ç    VVVVVè)  ÄMäÿ9uäu#SèL
  øEPVÿuSè²  EäSWèÎ
  ÄÇEüþÿÿÿè	   Eäèß  ÃÿuèL  YÃ¸ A Ã¡À;A Vj^Àu¸   ë;Æ}Æ£À;A jPè   YY£¼+A ÀujV5À;A èz   YY£¼+A ÀujX^Ã3Ò¹ A ë¡¼+A Á ÂùA |êjþ^3Ò¹A WÂÁø *A úçÁçøÿt;ÆtÀu1Á BùpA |Î_3À^Ãè§#  =0 A  tèp!  ÿ5¼+A è×   YÃÿUìVu¸ A ;ðr"þ`A wÎ+ÈÁùÁQèç$  N   Yë
Æ Vÿà@ ^]ÃÿUìEø}ÀPèº$  EH   Y]ÃEÀ Pÿà@ ]ÃÿUìE¹ A ;Ár=`A w`ÿÿÿ+ÁÁøÀPè#  Y]ÃÀ Pÿà@ ]ÃÿUìMùE}`ÿÿÿÁQèh#  Y]ÃÀ Pÿà@ ]ÃÿUìQeü VEüPÿuÿuèL$  ðÄöu9Eütèa  Àt
èX  MüÆ^ÉÃÌÌÌÌÌÌÌÌÌÌT$L$Òti3ÀD$Àuú   r=*A  tée%  Wùúr1÷Ùát+ÑÇéuöÈÁàÁÈÁàÁÊâÁétó«Òt
ÇêuöD$_ÃD$ÃÌÌÌÌÌÌL$WÉ   VSÙt$÷Æ   |$uÁé   ë'ÆÇét+Àt/÷Æ   uåÙÁéuaãtÆÇÀt7ëuíD$[^_Ã÷Ç   tÇé   ÷Ç   uêÙÁéutÇëuö[^D$_ÃÇétºÿþþ~Ððÿ3ÂÆ© tÜÒt,öt÷Â  ÿ t÷Â   ÿuÄëâÿÿ  ëâÿ   ë3ÒÇ3Àét3ÀÇéuöãwÿÿÿD$[^_ÃÿUìÿuÿuÿuÿujÿÿuè %  Ä]ÃÿUìQQS3ÛVW]ø9]t}M;Ëu9]uqë9]tj9]u9]u`ë9]tY9]u9] uOë9] tH9]$u>9](u>u3À@8tHF;Ãwö>:u5;Ët}õ   jÿujÿQè%&  ÄFuë9](uÂÇEø   éÎ   ;Ëtu3ÿ]ü8tU¾PèØ%  YÀtFë</t
<\t	<.uuüë~F8uÔ;ût%9]tÇ+E9Ev}Pÿujÿÿuè¬%  Ä}ë	E;ÃtEü;ÃtJ;ErE9]t+E9E vEPÿujÿÿuèt%  Ä9]$«   +uü9u(v#Vÿuüjÿÿu$èR%  Äé   9]t+u9u wfE;Ãt9]vE;Ãt9]vE;Ãt9] vE$;Ãt9](vèØ  9]uj^SSSSS0è\  ÄÆë*9]øuåj"YÁëVÿujÿÿuèÉ$  ÄE$;Ãt3À_^[ÉÃÿUìM÷ÙÉ¸   #ÈQÿuM÷ÙÉ#ÈQMÿu÷ÙÉ#ÈEQÿu÷ØÀàPÿuÿuèÇýÿÿÄ$]Ã;
A uóÃéx$  ÿUìEVñÆF Àucè52  FHlHhN;
pA t
A HpuèÐ.  F;A tF
A HpuèD'  FFö@puHpÆFë
@FÆ^]Â ÿUììÿuMðèfÿÿÿEð¸¬   ~EðPjÿuèo4  ÄëÈ   M·Hà}ü tMøapýÉÃÿUì=è$A  uE
`A ·Aà]Ãj ÿuèÿÿÿYY]ÃÿUìì S3Û9]uè  SSSSSÇ    è   ÄÈÿëME;ÃtÜVEèEàEPSÿuEàPÇEäÿÿÿÇEìB   è  ÄÿMäðxEàëEàPSè`4  YYÆ^[ÉÃÿUìQeü S]Ûu3Àé   Wûru{üÿvnMEÀÁÒtR:QüuMPýÒt<:Qýu7PþÒt&:Qþu!PÿÒt:QÿuEü9}ürÂë?¶@ÿ¶IÿëF¶@þ¶Iþë<¶@ý¶Iýë2¶@ü¶Iüë(MEëÒt:u@AÿEü9]ürì3À_[ÉÃ¶ ¶	+ÁëòÿUìW¿è  Wÿ$à@ ÿuÿ à@ Çè  ÿ`ê  wÀtÞ_]ÃÿUìèm6  ÿuèº4  ÿ5A èq-  hÿ   ÿÐÄ]ÃÿUìhDâ@ ÿ à@ Àth4â@ Pÿ(à@ ÀtÿuÿÐ]ÃÿUìÿuèÈÿÿÿYÿuÿ,à@ Ìjèò  YÃjè  YÃÿUìVðëÀtÿÐÆ;urð^]ÃÿUìVu3ÀëÀuÉtÿÑÆ;urì^]ÃÿUì=´+A  th´+A è8  YÀt
ÿuÿ´+A YèO7  h`á@ hHá@ è¡ÿÿÿYYÀuBhxY@ èÍ6  ¸@á@ Ç$Dá@ ècÿÿÿ=¸+A  Yth¸+A è½7  YÀtj jj ÿ¸+A 3À]Ãjhõ@ è¼  jè  Yeü 3ÛC98 A Å   4 A E¢0 A }    ÿ5¬+A è ,  Yø}Øÿtxÿ5¨+A èë+  YðuÜ}äuàîuÜ;÷rWèÇ+  9tí;÷rJÿ6èÁ+  øè±+  ÿ×ÿ5¬+A è«+  øÿ5¨+A è+  Ä9}äu9Eàt}ä}ØEàðuÜ}Øëhpá@ ¸dá@ è_þÿÿYhxá@ ¸tá@ èOþÿÿYÇEüþÿÿÿè   } u(8 A jè<  Yÿuèüýÿÿ3ÛC} tjè#  YÃèâ  ÃÿUìj j ÿuèÃþÿÿÄ]ÃÿUìj jÿuè­þÿÿÄ]Ãjj j èþÿÿÄÃjjj èþÿÿÄÃÿVèÃ*  ðVè);  Vè´:  VèK  Vè:  Vè:  Vèl8  Vè7  Vèî6  hê#@ è*  Ä$£A ^ÃÿUì=D A tè\3  ÿuè©1  hÿ   è'ýÿÿYY]Ãjh0õ@ èÏ  ¸MZ  f9  @ u8¡< @ ¸  @ PE  u'¹  f9 @ u¸t @ v3É9è @ ÁMäëeä jèV?  YÀujènÿÿÿYè-  Àujè]ÿÿÿYè=4  eü èá
  À}jè;üÿÿYÿ0à@ £ +A è×=  £< A è=  À}jèüÿÿYè:  À}j	èüÿÿYjè»üÿÿYÀtPèñûÿÿY¡ A £ A Pÿ5 A ÿ5 A è òÿÿÄEà}ä uPè2þÿÿèYþÿÿë.Eì	MÜPQè5  YYÃeèEÜEà}ä uPèþÿÿè8þÿÿÇEüþÿÿÿEàèÏ  Ãè>  é¤þÿÿÿUìVuVèS  Pè?  YYÀt|èÐòÿÿÀ ;ðu3ÀëèÀòÿÿÀ@;ðu`3À@ÿ A ÷F  uNSW<H A ? »   u Sè	  YÀuFjFXFFë
?~>^^N  3À_@[ë3À^]ÃÿUì} t'Vu÷F   tVè  fÿîÿÿf & f Y^]ÃöA@ty t$ÿIxÿ¶Àë¾ÀQPèå-  YYøÿu	ÃÿÃÿUìVðëMEÿMèµÿÿÿ>ÿt} ç^]ÃÿUìöG@SVðÙt2 u,Eë+ÿMÏè}ÿÿÿC>ÿuèÕ  8*uÏ°?èdÿÿÿ} Õ^[]ÃÿUììx  ¡A 3ÅEüS]Vu3ÀW}ÿu¤ýÿÿµ´ýÿÿ½Üýÿÿ¸ýÿÿðýÿÿÌýÿÿèýÿÿÐýÿÿÀýÿÿÈýÿÿè#÷ÿÿöu5èM  Ç    3ÀPPPPPèÓ  Ä½°ýÿÿ t
¬ýÿÿ`pýÈÿéÈ
  öF@u^Vè@
  YºA øÿtøþtÈáðÁþÁáµ *A ëÊöA$uøÿtøþtÈàÁùÁà *A ëÂö@$gÿÿÿ3É;Ù]ÿÿÿØýÿÿàýÿÿ¼ýÿÿïýÿÿÒ
  C½Øýÿÿ Äýÿÿ
  Â, <Xw¾Â¾Xâ@ à3öë3ö3À¾Áxâ@ jÁøYýÿÿ;Á­	  ÿ$ß2@ èýÿÿÿµýÿÿµÀýÿÿµÌýÿÿµÐýÿÿµðýÿÿµÈýÿÿév	  ¾Âè tJèt6èt%HHtèW	  ðýÿÿéK	  ðýÿÿé?	  ðýÿÿé3	  ðýÿÿ   é$	  ðýÿÿé	  ú*u,Ç½Üýÿÿü;þ½Ìýÿÿù  ðýÿÿ÷Ìýÿÿéç  ÌýÿÿkÀ
¾ÊDÐÌýÿÿéÌ  µèýÿÿéÁ  ú*u&Ç½Üýÿÿü;þ½èýÿÿ¢  èýÿÿÿé  èýÿÿkÀ
¾ÊDÐèýÿÿé{  úItUúhtDúltúwc  ðýÿÿ   éT  ;luCðýÿÿ   Äýÿÿé9  ðýÿÿé-  ðýÿÿ é!  <6u{4uCCðýÿÿ   Äýÿÿéþ  <3u{2uCC¥ðýÿÿÿÿÿÄýÿÿéÝ  <dÕ  <iÍ  <oÅ  <u½  <xµ  <X­  µýÿÿ¤ýÿÿP¶ÂPµÈýÿÿè¤<  YÀïýÿÿYt"´ýÿÿµØýÿÿè¤ûÿÿCÄýÿÿÀ¤üÿÿ´ýÿÿµØýÿÿèûÿÿéM  ¾Âødè  y  øSò      èAtHHtXHHtHH  Â Çýÿÿ   ïýÿÿðýÿÿ@9µèýÿÿôýÿÿ¸   äýÿÿ ýÿÿH  Çèýÿÿ   é¥  ÷ðýÿÿ0     ðýÿÿ   é   ÷ðýÿÿ0  u
ðýÿÿ   èýÿÿùÿu¹ÿÿÿÇ÷ðýÿÿ  ½Üýÿÿü½äýÿÿ±  ;þu¡A äýÿÿäýÿÿÇÈýÿÿ   é  èXÚ  HHty+Á'ÿÿÿHH  Ç÷ðýÿÿ  ½Üýÿÿt0·GüPh   ôýÿÿPàýÿÿPèç:  ÄÀtÇÀýÿÿ   ëGüôýÿÿÇàýÿÿ   ôýÿÿäýÿÿé5  Ç½Üýÿÿ;Æt;H;Ît4÷ðýÿÿ   ¿ äýÿÿt+ÂÑøÇÈýÿÿ   éð  µÈýÿÿéå  ¡A äýÿÿPè^8  YéÎ  øpû  ã  øe¼  øg4þÿÿøitqønt(øo   öðýÿÿÇàýÿÿ   taðýÿÿ   ëU7Ç½Üýÿÿè×7  À/úÿÿöðýÿÿ tfØýÿÿfëØýÿÿÇÀýÿÿ   é¦  ðýÿÿ@Çàýÿÿ
   ðýÿÿ÷Á   ©  WÇéÕ  uúgueÇèýÿÿ   ëY9èýÿÿ~èýÿÿ½èýÿÿ£   ~?µèýÿÿÆ]  Vè  ïýÿÿY¼ýÿÿÀtäýÿÿµ ýÿÿØë
Çèýÿÿ£   3öÇýÿÿGüýÿÿ¤ýÿÿPÿµýÿÿ¾Âÿµèýÿÿ½ÜýÿÿPÿµ ýÿÿýÿÿSPÿ5XA è=   YÿÐ½ðýÿÿÄç   t 9µèýÿÿu¤ýÿÿPSÿ5dA è   YÿÐYY½ïýÿÿgu;þu¤ýÿÿPSÿ5`A èé  YÿÐYY;-uðýÿÿ   CäýÿÿSéþÿÿÇèýÿÿ   ¸ýÿÿë$ès¶üÿÿHHþÿÿè¶  Ç¸ýÿÿ'   öðýÿÿÇàýÿÿ   iþÿÿ¸ýÿÿQÆÔýÿÿ0ÕýÿÿÇÐýÿÿ   éEþÿÿ÷Á   KþÿÿÇöÁ t½ÜýÿÿöÁ@t¿Güë·GüëGüöÁ@të3Ò½ÜýÿÿöÁ@t;Ö|;Æs÷ØÒ ÷Úðýÿÿ   ÷ðýÿÿ   Úøu3Û½èýÿÿ }Çèýÿÿ   ë¥ðýÿÿ÷¸   9èýÿÿ~èýÿÿÇÃu!ÐýÿÿuóèýÿÿÿèýÿÿÀÇÃt-àýÿÿRPSWè7  Á0ù9 ýÿÿøÚ~¸ýÿÿNë½Eó+ÆF÷ðýÿÿ   àýÿÿµäýÿÿtaÀtÎ90tVÿäýÿÿäýÿÿÆ0@ë>If90t@@;Îuô+äýÿÿÑøë(;þu¡A äýÿÿäýÿÿëI8 t@;Îuõ+äýÿÿàýÿÿ½Àýÿÿ \  ðýÿÿ¨@t2©   t	ÆÔýÿÿ-ë¨t	ÆÔýÿÿ+ë¨tÆÔýÿÿ ÇÐýÿÿ   Ìýÿÿ+àýÿÿ+Ðýÿÿöðýÿÿuÿµ´ýÿÿØýÿÿSj èpõÿÿÄÿµÐýÿÿ½´ýÿÿØýÿÿÔýÿÿèvõÿÿöðýÿÿYtöðýÿÿuWSj0Øýÿÿè.õÿÿÄ½Èýÿÿ àýÿÿtfÀ~bµäýÿÿ ýÿÿ·ÿ ýÿÿPjEôPýÿÿFPFè5  ÄÀu(9ýÿÿt ÿµýÿÿØýÿÿMôèñôÿÿ½ ýÿÿ YuµëØýÿÿÿëäýÿÿPØýÿÿèÊôÿÿY½Øýÿÿ |öðýÿÿtWSj ØýÿÿèôÿÿÄ½¼ýÿÿ tÿµ¼ýÿÿè  ¥¼ýÿÿ YÄýÿÿïýÿÿÀtýÿÿ½ÜýÿÿÐéáõÿÿ½°ýÿÿ t
¬ýÿÿ`pýØýÿÿMü_^3Í[èìÿÿÉÃê*@ ë(@ )@ y)@ Å)@ Ð)@ *@ D+@ jThPõ@ èe  3ÿ}üEPÿ@à@ ÇEüþÿÿÿj@j ^Vèu  YY;Ç  £ *A 5*A    ë0Æ@ ÿÆ@
xÆ@$ Æ@%
Æ@&
x8Æ@4 À@
 *A Á   ;ÁrÌf9}Î
  EÐ;Çÿ   8X;Eä¾   ;þ|þÇEà   ë[j@j èç  YYÀtVMà *A *A     ë*Æ@ ÿÆ@
` `$Æ@%
Æ@&
`8 Æ@4 À@Ö;ÂrÒÿEà9=*A |ë=*A eà ÿ~mEäùÿtVùþtQ¨tK¨uQÿ<à@ Àt<uàÆÁøæÁæ4 *A Eä Fh   FPè*  YYÀÉ   ÿFÿEàCEä9}à|3ÛóÁæ5 *A øÿtøþtNërÆFÛujöXë
ÃH÷ØÀÀõPÿ8à@ øÿÿtCÿt?Wÿ<à@ Àt4>%ÿ   øuN@ë	øuNh   FPèê)  YYÀt7ÿFë
N@ÇþÿÿÿCûgÿÿÿÿ5*A ÿ4à@ 3Àë3À@ÃeèÇEüþÿÿÿÈÿèc  ÃÿUìEV3ö;Æuè½  VVVVVÇ    èE  ÄÈÿë@^]ÃÿUìE£P A ]ÃÿUìì(  ¡A 3ÅEü¥Øüÿÿ SjLÜüÿÿj PèåÿÿØüÿÿ(ýÿÿ0ýÿÿÄ,ýÿÿàýÿÿÜýÿÿØýÿÿÔýÿÿµÐýÿÿ½ÌýÿÿføýÿÿfìýÿÿfÈýÿÿfÄýÿÿf¥Àýÿÿf­¼ýÿÿðýÿÿEMÇ0ýÿÿ  èýÿÿôýÿÿIüäýÿÿÇØüÿÿ ÀÇÜüÿÿ   äüÿÿÿXà@ j ØÿTà@ (ýÿÿPÿPà@ ÀuÛujèé1  Yh ÀÿLà@ PÿHà@ Mü3Í[è(èÿÿÉÃÿUìÿ5P A è&  YÀt]ÿàjèª1  Y]é²þÿÿÿUìE3É;ÍØA tAù-rñHíùwj
X]ÃÍÜA ]ÃDÿÿÿjY;ÈÀ#ÁÀ]Ãè  Àu¸@A ÃÀÃè  Àu¸DA ÃÀÃÿUìVèâÿÿÿMQèÿÿÿYðè¼ÿÿÿ0^]ÃÌÌÌhÐ7@ dÿ5    D$l$l$+àSVW¡A 1Eü3ÅPeèÿuøEüÇEüþÿÿÿEøEðd£    ÃMðd
    Y__^[å]QÃÌÌÌÌÌÌÌÿUììS]Vs35A WÆEÿ ÇEô   {øþt
NÏ38èÙæÿÿNFÏ38èÉæÿÿEö@f  MUèSü[EèMìûþt_I [LDEð EøÉt×è$1  ÆEÿÀ|@GEøØøþuÎ}ÿ t$øþt
NÏ38èVæÿÿNVÏ3:èFæÿÿEô_^[å]ÃÇEô    ëÉM9csmàu)=*A  t h*A è!  ÄÀtUjRÿ*A ÄMèÇ0  E9XthA WÓÈèÊ0  EMøHøþt
NÏ38èÃåÿÿNVÏ3:è³åÿÿEðH×è]0  ºþÿÿÿ9SRÿÿÿhA WËèu0  éÿÿÿÿUìVW3öÿuèÅ0  øYÿu'9T A vVÿ$à@ è  ;T A vÈÿðøÿuÊÇ_^]ÃÿUìVW3öj ÿuÿuèE  øÄÿu'9T A vVÿ$à@ è  ;T A vÈÿðøÿuÃÇ_^]ÃÿUìVW3öÿuÿuèû0  øYYÿu,9Et'9T A vVÿ$à@ è  ;T A vÈÿðøÿuÁÇ_^]ÃÿUìVW3öÿuÿuÿuèÅ2  øÄÿu,9Et'9T A vVÿ$à@ è  ;T A vÈÿðøÿu½Ç_^]Ãjhpõ@ è×üÿÿuötu=*A uCjè  Yeü Vè×2  YEäÀt	VPèø2  YYÇEüþÿÿÿè   }ä u7ÿuë
jè  YÃVj ÿ5t)A ÿ`à@ Àuè üÿÿðÿ\à@ PèÐûÿÿYèüÿÿÃjhõ@ èIüÿÿ3Û]äjè  Y]üj_}à;=À;A }W÷Áæ¡¼+A Æ9tD ö@tPèj=  YøÿtÿEäÿ|(¡¼+A À PÿDà@ ¡¼+A ÿ4èýþÿÿY¡¼+A GëÇEüþÿÿÿè	   EäèüÿÿÃjè7  YÃÿUìSVuFÈá3Ûùu@©  t9FW>+øÿ~,WPVèeùÿÿYPèD  Ä;ÇuFÀyàýFëN Ëÿ_Ff ^Ã[]ÃÿUìVuöu	Vè5   Yë/Vè|ÿÿÿYÀtÈÿë÷F @  tVèüøÿÿPèûD  Y÷ØYÀë3À^]Ãjh°õ@ èúúÿÿ3ÿ}ä}ÜjèD  Y}ü3öuà;5À;A    ¡¼+A °98t^ ö@tVPVèDÝÿÿYY3ÒBUü¡¼+A °HöÁt/9UuPèJÿÿÿYøÿtÿEäë9}uöÁtPè/ÿÿÿYøÿu	EÜ}üè   Fë3ÿuà¡¼+A ÿ4°VèMÝÿÿYYÃÇEüþÿÿÿè   }EätEÜè{úÿÿÃjè­   YÃjèÿÿÿYÃÿVW3ö¿X A <õLA uõHA 8h   ÿ0Çè}!  YYÀtFþ$|Ò3À@_^Ã$õHA  3ÀëñÿSDà@ V¾HA W>ÿt~t
WÿÓWèÐüÿÿ& YÆþhA |Ü¾HA _Àt	~uPÿÓÆþhA |æ^[ÃÿUìEÿ4ÅHA ÿà@ ]ÃjhØõ@ è^ùÿÿ3ÿG}ä3Û9t)A uè´  jè  hÿ   èãÿÿYYu4õHA 9tÇënjè	ûÿÿYø;ûuèÅøÿÿÇ    3ÀëQj
èY   Y]ü9u,h   Wèt   YYÀuWèþûÿÿYèøÿÿÇ    ]äë>ëWèãûÿÿYÇEüþÿÿÿè	   EäèöøÿÿÃj
è(ÿÿÿYÃÿUìEV4ÅHA > uPè"ÿÿÿYÀujètâÿÿYÿ6ÿà@ ^]Ãjhøõ@ èhøÿÿM3ÿ;Ïv.jàX3Ò÷ñ;EÀ@uèÿ÷ÿÿÇ    WWWWWè÷ÿÿÄ3ÀéÕ   ¯Mñu;÷u3öF3Û]äþàwi=*A uKÆæðuE;p*A w7jèLÿÿÿY}üÿuèè5  YEäÇEüþÿÿÿè_   ]ä;ßtÿuWSè6ÛÿÿÄ;ßuaVjÿ5t)A ÿdà@ Ø;ßuL9=)A t3Vè  YÀrÿÿÿE;ÇPÿÿÿÇ    éEÿÿÿ3ÿujèðýÿÿYÃ;ßu
E;ÇtÇ    Ãè÷ÿÿÃUìì}ü}MÁéfïÀë¤$    ffGfG fG0fG@fGPfG`fGp¿   IuÐ}üå]ÃUìì}üEø3ú+úç3ú+úÿu<MÑâUô;Êt+ÊQPèsÿÿÿÄEUôÒtEE+ÂEø3À}øMôóªEë.÷ßÇ}ð3À}MðóªEðMUÈ+ÐRj Qè~ÿÿÿÄE}üå]Ãjhö@ èdöÿÿeü f(ÁÇEä   ë#Eì  =  Àt
=  Àt3ÀÃ3À@Ãeèeä ÇEüþÿÿÿEäèföÿÿÃÿUìì3ÀSEüEôEøSXÈ5    PZ+ÑtQ3À¢Eô]èUìMð¸   ¢UüEø[÷Eü   tè\ÿÿÿÀt3À@ë3À[ÉÃèÿÿÿ£*A 3ÀÃÿUìQSVu3ÛW;ót9]w èIõÿÿjYSSSSSñèÐôÿÿÄÆéÍ   E3ÿ;Ãt :Ãtj_9}   FÆ:FMÁ;Ët@8t<ë}üUG}ü;úsyF@8uèPQè@   YY</t<\tG;}sVÆ\Fë}üE;ÃtëG;}s>F@8uðE;Ãt':Ët!ù.tG;}sÆ.FëG;}sF@8uðG;}vEèlôÿÿj"éÿÿÿ3À_^[ÉÃÿUììÿuMðèÜÿÿ¶EMôUTu} tMðÈ   ·A#Eë3ÀÀt3À@}ü tMøapýÉÃÿUìjj ÿuÿuèÿÿÿÄ]ÃÿUìjj ÿuj èÿÿÿÄ]ÃÿUìj ÿuÿuÿuÿuè?  Ä]ÃÿUìì(  £°"A 
¬"A ¨"A ¤"A 5 "A ="A fÈ"A f
¼"A f"A f"A f%"A f-"A À"A E £´"A E£¸"A E£Ä"A àüÿÿÇ "A   ¡¸"A £´!A Ç¨!A 	 ÀÇ¬!A    ¡A Øüÿÿ¡A ÜüÿÿÿXà@ £ø!A jèO$  Yj ÿTà@ hÔâ@ ÿPà@ =ø!A  ujè+$  Yh	 ÀÿLà@ PÿHà@ ÉÃ-¤  t"ètè
tHt3ÀÃ¸  Ã¸  Ã¸  Ã¸  ÃÿVWðh  3ÿFWPè+Öÿÿ3À·ÈÁ~~~ÁáÁ~«««¹hA ÄF+Î¿  @Ou÷  ¾   @Nu÷_^ÃÿUìì  ¡A 3ÅEüSWèúÿÿPÿvÿhà@ ¿   Àû   3Àüþÿÿ@;ÇrôîúÿÿÆüþÿÿ Àt.ïúÿÿ¶È¶;Èw+Á@P
üþÿÿj RèhÕÿÿÄCCÀuØj ÿvüúÿÿÿvPWüþÿÿPjj èE  3ÛSÿvüýÿÿWPWüþÿÿPWÿvSèúB  ÄDSÿvüüÿÿWPWüþÿÿPh   ÿvSèÕB  Ä$3À·EüúÿÿöÁtLüýÿÿëöÁtL üüÿÿ  ëÆ   @;Çr¾ëV  Çäúÿÿÿÿÿ3É)äúÿÿäúÿÿ  ÐZ ûwLÑÂ ëúwL Ñê ëÆ  A;ÏrÂMü_3Í[èOØÿÿÉÃjh8ö@ èÏðÿÿè
  ø¡A Gptl twhöuj èÚÿÿYÆèçðÿÿÃj
èó÷ÿÿYeü whuä;5A t6ötVÿpà@ ÀuþhA tVèóÿÿY¡A Gh5A uäVÿlà@ ÇEüþÿÿÿè   ëuäj
è¸öÿÿYÃÿUììS3ÛSMðè¤×ÿÿÌ$A þþuÇÌ$A    ÿxà@ 8]ütEMøapýë<þýuÇÌ$A    ÿtà@ ëÛþüuEð@ÇÌ$A    ëÄ8]ütEø`pýÆ[ÉÃÿUìì ¡A 3ÅEüS]VuWèdÿÿÿø3ö};þuÃè·üÿÿ3Àé  uä3À9¸A    ÿEäÀ0=ð   rçÿèý  p  ÿéý  d  ·ÇPÿ|à@ ÀR  EèPWÿhà@ À3  h  CVPèÒÿÿ3ÒBÄ{s9Uèø   }î Ï   uïÉÂ   ¶Fÿ¶Éé¦   h  CVPèAÒÿÿMäÄkÉ0uà±¨A uäë*FÀt(¶>¶ÀëEàA D;¶FG;øvê}FF> uÑuäÿEàÆ}àuäréÇ{ÇC   ègûÿÿjCCA Zf1Af0A@@Juóóè×ûÿÿé·þÿÿL@;ÁvöFF~ÿ 4ÿÿÿC¹þ   @IuùCèûÿÿCSës3À·ÈÁÁáÁ{«««ë¨95Ì$A XþÿÿÈÿMü_^3Í[èJÕÿÿÉÃjhXö@ èÊíÿÿMàÿè  ø}ÜèÜüÿÿ_huèuýÿÿE;CW  h   èïÿÿYØÛF  ¹   whûó¥# Sÿuè¸ýÿÿYYEàÀü   uÜÿvhÿpà@ ÀuFh=hA tPècðÿÿY^hS=là@ ÿ×öFpê   öA Ý   j
ètôÿÿYeü C£Ü$A C£à$A C£ä$A 3ÀEäø}fLCfEÐ$A @ëè3ÀEä=  }
LA @ëé3ÀEä=   }  A @ëæÿ5A ÿpà@ Àu¡A =hA tPèªïÿÿYA Sÿ×ÇEüþÿÿÿè   ë0j
èíòÿÿYÃë%øÿu ûhA tSètïÿÿYèìÿÿÇ    ëeà EàèìÿÿÃ=°+A  ujýèVþÿÿYÇ°+A    3ÀÃÿUìSVu¼   3ÛW;Ãto=HA th°   ;Ãt^9uZ¸   ;Ãt9uPèûîÿÿÿ¶¼   è;A  YY´   ;Ãt9uPèÚîÿÿÿ¶¼   èÕ@  YYÿ¶°   èÂîÿÿÿ¶¼   è·îÿÿYYÀ   ;ÃtD9u@Ä   -þ   PèîÿÿÌ   ¿   +ÇPèîÿÿÐ   +ÇPèuîÿÿÿ¶À   èjîÿÿÄ¾Ô   =A t9´   uPè»>  ÿ7èCîÿÿYY~PÇE   øA t;Ãt9uPèîÿÿY9_ütG;Ãt9uPèîÿÿYÇÿMuÇVèøíÿÿY_^[]ÃÿUìSV5là@ W}WÿÖ°   ÀtPÿÖ¸   ÀtPÿÖ´   ÀtPÿÖÀ   ÀtPÿÖ_PÇE   {øA t	ÀtPÿÖ{ü t
CÀtPÿÖÃÿMuÖÔ   ´   PÿÖ_^[]ÃÿUìW}ÿ   SV5pà@ WÿÖ°   ÀtPÿÖ¸   ÀtPÿÖ´   ÀtPÿÖÀ   ÀtPÿÖ_PÇE   {øA t	ÀtPÿÖ{ü t
CÀtPÿÖÃÿMuÖÔ   ´   PÿÖ^[Ç_]Ãÿt7Àt3V0;÷t(W8èÁþÿÿYötVèEÿÿÿ> YuþA tVèYýÿÿYÇ^Ã3ÀÃjhxö@ ècéÿÿè,  ð¡A Fpt"~l tè  plöuj è-ÓÿÿYÆèvéÿÿÃjèðÿÿYeü Fl=pA èiÿÿÿEäÇEüþÿÿÿè   ëÁjè}ïÿÿYuäÃÿUìVÿ5A 5à@ ÿÖÀt!¡A øÿtPÿ5A ÿÖÿÐÀtø  ë'¾tã@ Vÿ à@ ÀuVènÒÿÿYÀthdã@ Pÿ(à@ ÀtÿuÿÐEE^]Ãj èÿÿÿYÃÿUìVÿ5A 5à@ ÿÖÀt!¡A øÿtPÿ5A ÿÖÿÐÀtü  ë'¾tã@ Vÿ à@ ÀuVèóÑÿÿYÀthã@ Pÿ(à@ ÀtÿuÿÐEE^]Ãÿà@ Â ÿVÿ5A ÿà@ ðöuÿ5%A èeÿÿÿYðVÿ5A ÿà@ Æ^Ã¡A øÿtPÿ5%A è;ÿÿÿYÿÐ
A ÿ¡A øÿtPÿà@ 
A ÿéºíÿÿjhö@ èçÿÿ¾tã@ Vÿ à@ ÀuVè4ÑÿÿYEäuÇF\é@ 3ÿG~Àt$hdã@ P(à@ ÿÓø  hã@ ÿuäÿÓü  ~pÆÈ   CÆK  CÇFhhA j
ènîÿÿYeü ÿvhÿlà@ ÇEüþÿÿÿè>   jèMîÿÿY}üEFlÀu¡pA FlÿvlèüÿÿYÇEüþÿÿÿè   è	çÿÿÃ3ÿGuj
è5íÿÿYÃjè,íÿÿYÃÿVWÿ\à@ ÿ5A øèþÿÿÿÐðöuNh  jè±èÿÿðYYöt:Vÿ5A ÿ5%A èèýÿÿYÿÐÀtj VèÅþÿÿYYÿà@ Nÿë	Vè^éÿÿY3öWÿà@ _Æ^ÃÿVèÿÿÿðöujèÐÿÿYÆ^ÃjhÀö@ èæÿÿuöø   F$ÀtPèéÿÿYF,ÀtPèéÿÿYF4ÀtPèõèÿÿYF<ÀtPèçèÿÿYF@ÀtPèÙèÿÿYFDÀtPèËèÿÿYFHÀtPè½èÿÿYF\=é@ tPè¬èÿÿYj
èàìÿÿYeü ~hÿtWÿpà@ ÀuÿhA tWèèÿÿYÇEüþÿÿÿèW   jè§ìÿÿYÇEü   ~lÿt#WèóúÿÿY;=pA tÿA t? uWèÿøÿÿYÇEüþÿÿÿè   Vè'èÿÿYèIåÿÿÂ uj
èvëÿÿYÃujèjëÿÿYÃÿVW¾tã@ Vÿ à@ ÀuVèÎÿÿYøÿ^  5(à@ hÀã@ WÿÖh´ã@ W£%A ÿÖh¨ã@ W£%A ÿÖh ã@ W£%A ÿÖ=%A  5à@ £%A t=%A  t
=%A  tÀu$¡à@ £%A ¡à@ Ç%A dO@ 5%A £%A ÿà@ £A øÿÌ   ÿ5%A PÿÖÀ»   èÅÐÿÿÿ5%A èûÿÿÿ5%A £%A èûÿÿÿ5%A £%A èóúÿÿÿ5%A £%A èãúÿÿÄ£%A è¬éÿÿÀtehXQ@ ÿ5%A è=ûÿÿYÿÐ£A øÿtHh  jèÓåÿÿðYYöt4Vÿ5A ÿ5%A è
ûÿÿYÿÐÀtj VèçûÿÿYYÿà@ Nÿ3À@ëèûÿÿ3À_^ÃÿUììSÿuMèèÉÊÿÿ]C=   wEèÈ   ·Xëu]Á}EèPE%ÿ   PèG  YYÀtEjEø]ùÆEú Yë
3É]øÆEù AEèjÿpÿpEüPQEøPEèjPè6  Ä Àu8EôtEð`pý3Àë·Eü#E}ô tMðapý[ÉÃÿUìQVuVèwàÿÿEFY¨uè8âÿÿÇ 	   N Èÿé/  ¨@t
èâÿÿÇ "   ëãS3Û¨t^¨   NàþFFàïÈF^]ü©  u,èÃÿÿÀ ;ðtèÃÿÿÀ@;ðu
ÿuè©  YÀuVè¾?  Y÷F  W   F>HN+øI;ûN~WPÿuèÜ*  ÄEüëMÈ FÈÿëyMùÿtùþtÁàÑÁúÁà *A ë¸A ö@ tjSSQè*>  #ÂÄøÿt%FMë3ÿGWEPÿuèm*  ÄEü9}üt	N ÈÿëE%ÿ   _[^ÉÃÿUìQQS]VW3ö3ÿ}ü;ýA t	G}üÿrîÿw  jèz@  Yø4  jèi@  YÀu
=A   ûü   A  hpé@ »  S¿ %A Wè08  ÄÀt
VVVVVèØÞÿÿÄh  ¾9%A Vj Æ=&A  ÿà@ Àu&hXé@ hû  Vèî7  ÄÀt3ÀPPPPPèÞÿÿÄVè  @Yø<v8Vèz  î;Æj¹4(A hTé@ +ÈQPèö6  ÄÀt3öVVVVVèQÞÿÿÄë3öhPé@ SWè6  ÄÀt
VVVVVè-ÞÿÿÄEüÿ4ÅA SWèë5  ÄÀt
VVVVVèÞÿÿÄh  h(é@ WèØ=  Äë2jôÿ8à@ Ø;Þt$ûÿtj EøP4ýA ÿ6èÅ
  YPÿ6Sÿà@ _^[ÉÃjèþ>  Yøtjèñ>  YÀu=A uhü   è)þÿÿhÿ   èþÿÿYYÃÿUìQSVWÿ5¬+A èÊöÿÿÿ5¨+A ø}üèºöÿÿðYY;÷   Þ+ßCørwWèÕ>  øCY;øsH¸   ;øsÇÇ;ÇrPÿuüèsáÿÿYYÀuG;Çr@Pÿuüè]áÿÿYYÀt1ÁûP4èÕõÿÿY£¬+A ÿuèÇõÿÿÆVè¼õÿÿY£¨+A EYë3À_^[ÉÃÿVjj èÇàÿÿðVèõÿÿÄ£¬+A £¨+A öujX^Ã& 3À^Ãjhèö@ èeÞÿÿèÀÈÿÿeü ÿuèøþÿÿYEäÇEüþÿÿÿè	   EäèÞÿÿÃèÈÿÿÃÿUìÿuè·ÿÿÿ÷ØÀ÷ØYH]ÃÿV¸àô@ ¾àô@ Wø;ÆsÀtÿÐÇ;þrñ_^ÃÿV¸èô@ ¾èô@ Wø;ÆsÀtÿÐÇ;þrñ_^ÃÿVW3ÿ·@A ÿ6èÆôÿÿÇYÿ(rè_^ÃÌÿUìM¸MZ  f9t3À]ÃA<Á8PE  uï3Ò¹  f9HÂÂ]ÃÌÌÌÌÌÌÌÌÌÌÌÿUìEH<È·ASV·q3ÒWDöv}H;ùr	XÙ;ûr
BÀ(;Örè3À_^[]ÃÌÌÌÌÌÌÌÌÌÌÌÌÿUìjþh÷@ hÐ7@ d¡    PìSVW¡A 1Eø3ÅPEðd£    eèÇEü    h  @ è*ÿÿÿÄÀtUE-  @ Ph  @ èPÿÿÿÄÀt;@$Áè÷ÐàÇEüþÿÿÿMðd
    Y_^[å]ÃEì3Ò=  ÀÂÂÃeèÇEüþÿÿÿ3ÀMðd
    Y_^[å]Ãjh(÷@ èWÜÿÿè öÿÿ@xÀteü ÿÐë3À@ÃeèÇEüþÿÿÿè<  èpÜÿÿÃh
[@ è'óÿÿY£4(A ÃÃÿUìQQVè`õÿÿðöF  V\¡tA W}ÊS99tØkÛÁÚ;ËrîkÀÂ;Ès99uÁë3ÀÀt
X]üÛu3Àéû   ûu` 3À@éê   ûÞ   N`MøMN`Hù¸   
hA =lA Ñù;×}$kÉ~\d9 =hA lA BßÁ;Ó|â]ü ~d=  Àu	ÇFd   ë^=  Àu	ÇFd   ëN=  Àu	ÇFd   ë>=  Àu	ÇFd   ë.=  Àu	ÇFd   ë=  Àu	ÇFd   ë=  ÀuÇFd   ÿvdjÿÓY~dë` QÿÓEøYF`Èÿ[_^ÉÃÿUìE£8(A £<(A £@(A £D(A ]ÃÿUìE
tA V9PtñköuÀ;ÆrìkÉM^;Ás9Pt3À]Ãÿ5@(A èÚñÿÿYÃj hH÷@ èJÚÿÿ3ÿ}ä}Ø]ûLtÃjY+Át"+Át+Átd+ÁuDèsóÿÿø}ØÿuÈÿéa  ¾8(A ¡8(A ë`ÿw\Óè]ÿÿÿðÆëZÃèt<èt+HtèÙÿÿÇ    3ÀPPPPPèÙÿÿÄë®¾@(A ¡@(A ë¾<(A ¡<(A ë
¾D(A ¡D(A ÇEä   PèñÿÿEàY3À}àØ   9EàujèòÅÿÿ9EätPèÆàÿÿY3ÀEüût
ûtûuO`MÔG`ûu@OdMÐÇGd   ûu.
hA MÜ
lA hA Ê9MÜ}MÜkÉW\DÿEÜëÛè~ðÿÿÇEüþÿÿÿè   ûuÿwdSÿUàYë]}Ø}ä tj èTßÿÿYÃSÿUàYût
ûtûuEÔG`ûuEÐGd3ÀèìØÿÿÃÿUìE£L(A ]ÃÿUìE£X(A ]ÃÿUìE£\(A ]Ãjhh÷@ èmØÿÿeü ÿuÿuÿ à@ Eäë/Eì  Eà3É=  ÀÁÁÃeè}à  Àujÿà@ eä ÇEüþÿÿÿEäè_ØÿÿÃÿUìE£`(A ]ÃÿUìÿ5`(A è|ïÿÿYÀtÿuÿÐYÀt3À@]Ã3À]ÃÿUìE 8csmàu*xu$@= t=!t="t= @uèCûÿÿ3À]Â h_@ ÿTà@ 3ÀÃ=°+A  uèHëÿÿV5< A W3ÿöuÈÿé    <=tGVè  YtÀuêjGWèÙÿÿøYY= A ÿtË5< A SëBVèR  ØC>=Yt1jSèRÙÿÿYYÀtNVSPè|.  ÄÀt3ÀPPPPPè"ÕÿÿÄÇó> u¹ÿ5< A èÚÿÿ%< A  ' Ç¤+A    3ÀY[_^Ãÿ5 A èÝÙÿÿ% A  ÈÿëäÿUìQMS3ÀVòUÇ   9Et	]EEü>"u3À9Eü³"ÀFEüë<ÿÒtBU¶ÃPFèâÿÿYÀtÿ} t
MÿEFUMÛt2}ü u©û tû	uÒtÆBÿ eü > é   < t<	uFëóNëã> Ð   } t	EEÿ3ÛC3ÉëFA>\tù>"u&öÁu}ü tF8"uðë
3À3Û9EüÀEüÑéÉtIÒtÆ\BÿÉuñUÀtU}ü u< tK<	tGÛt=¾ÀPÒt#è9áÿÿYÀt
MÿEFÿMÿEë
èáÿÿYÀtFÿÿUFéVÿÿÿÒtÆ BUÿMéÿÿÿE^[Àt  ÿÉÃÿUììS3ÛVW9°+A uèÄèÿÿh  ¾h(A VSl)A ÿà@ ¡ +A 5( A ;ÃtEü8uuüUüEøPSS}ôè
þÿÿEøÄ=ÿÿÿ?sJMôùÿsBøÁç;Ár6PèÖÿÿðY;ót)UüEøPþWV}ôèÉýÿÿEøÄH£ A 5 A 3ÀëÈÿ_^[ÉÃÿUì¡p)A ìSV5´à@ W3Û3ÿ;Ãu.ÿÖø;ûtÇp)A    ë#ÿ\à@ øxu
jX£p)A ë¡p)A ø   ;ûuÿÖø;ûu3ÀéÊ   Çf9t@@f9uù@@f9uò5°à@ SSS+ÇSÑø@PWSSEôÿÖEø;Ãt/Pè©ÕÿÿYEü;Ãt!SSÿuøPÿuôWSSÿÖÀuÿuüè¸ÖÿÿY]ü]üWÿ¬à@ Ãë\øt;Ãuÿ¨à@ ð;órÿÿÿ8t
@8uû@8uö+Æ@PEøèBÕÿÿøY;ûuVÿ¤à@ éEÿÿÿÿuøVWè©+  ÄVÿ¤à@ Ç_^[ÉÃÿUì3À9Ej Àh   Pÿ¸à@ £t)A Àu]Ã3À@£*A ]ÃÿUìì¡A eø eü SW¿Næ@»»  ÿÿ;Çt
Ãt	÷Ð£A ë`VEøPÿÌà@ uü3uøÿÈà@ 3ðÿà@ 3ðÿÄà@ 3ðEðPÿÀà@ Eô3Eð3ð;÷u¾Oæ@»ëóuÆÁàð5A ÷Ö5A ^_[ÉÃÿUìEøþuèÒÿÿÇ 	   3À]ÃV3ö;Æ|;*A rèæÑÿÿVVVVVÇ 	   ènÑÿÿÄ3ÀëÈàÁù *A Áà¾Dà@^]Ã¡A È3É9x)A ÁÁÃÌÌÌÌÌÌÌÌL$÷Á   t$ÁÀtN÷Á   uï    ¤$    ¤$    ºÿþþ~Ððÿ3ÂÁ© tèAüÀt2ät$©  ÿ t©   ÿtëÍAÿL$+ÁÃAþL$+ÁÃAýL$+ÁÃAüL$+ÁÃÿUììSVu3ÛW};óu;ûvE;Ãt3Àé   E;ÃtÿÿÿÿÿvèÇÐÿÿj^SSSSS0èPÐÿÿÄÆëVÿuMðès¸ÿÿEð9X   fE¹ÿ   f;Áv6;ót;ûvWSVè8´ÿÿÄètÐÿÿÇ *   èiÐÿÿ 8]ütMøapý_^[ÉÃ;ót2;ûw,èIÐÿÿj"^SSSSS0èÒÏÿÿÄ8]üyÿÿÿEø`pýémÿÿÿE;ÃtÇ    8]ü%ÿÿÿEø`pýéÿÿÿMQSWVjMQS]ÿpÿ°à@ ;Ãt9]^ÿÿÿM;Ët½ë¹ÿ\à@ øzDÿÿÿ;ógÿÿÿ;û_ÿÿÿWSVèa³ÿÿÄéOÿÿÿÿUìj ÿuÿuÿuÿuè|þÿÿÄ]ÃÿUììÿuMðè:·ÿÿ¶EMðÈ   ·A%   }ü tMøapýÉÃÿUìj ÿuè¹ÿÿÿYY]ÃÌVD$Àu(L$D$3Ò÷ñØD$÷ñðÃ÷d$ÈÆ÷d$ÑëGÈ\$T$D$ÑéÑÛÑêÑØÉuô÷óð÷d$ÈD$÷æÑr;T$wr;D$v	N+D$T$3Û+D$T$÷Ú÷ØÚ ÊÓÙÈÆ^Â %*A  ÃÌÌÌSVWT$D$L$URPQQh i@ dÿ5    ¡A 3ÄD$d%    D$0XL$,3pþþt;T$4úþt;òv.4v\³H{ uÌh  Cè1  ¹   Cè1  ë°d    Ä_^[ÃL$÷A   ¸   t3D$H3Èè¢µÿÿUhÿpÿpÿpè>ÿÿÿÄ]D$T$¸   ÃUL$)ÿqÿqÿq(èÿÿÿÄ]Â UVWSê3À3Û3Ò3ö3ÿÿÑ[_^]ÃêñÁjè_0  3À3Û3É3Ò3ÿÿæUìSVWj j hÇi@ QèQ  _^[]ÃUl$RQÿt$è´þÿÿÄ]Â jh÷@ èÍÿÿeä u;5p*A w"jèÄÔÿÿYeü Vèa  YEäÇEüþÿÿÿè	   EäèÍÿÿÃjè¿ÓÿÿYÃÿUìVuþà¡   SW=dà@ =t)A  uèíÿÿjèÏëÿÿhÿ   èM·ÿÿYY¡*A øuötÆë3À@PëøuVèSÿÿÿYÀuöuFÆæðVj ÿ5t)A ÿ×ØÛu.j^9)A tÿuè¢ôÿÿYÀtué{ÿÿÿèNÌÿÿ0èGÌÿÿ0_Ã[ëVè{ôÿÿYè3ÌÿÿÇ    3À^]Ãjh¨÷@ èhÌÿÿ]ÛuÿuèÿÿÿYéÌ  uöuSècÏÿÿYé·  =*A   3ÿ}äþà  jèwÓÿÿY}üSè6  YEà;Ç   ;5p*A wIVSPè  ÄÀt]äë5Vèç	  YEä;Çt'CüH;ÆrÆPSÿuäè:$  Sèæ  EàSPè  Ä9}äuH;÷u3öFuÆæðuVWÿ5t)A ÿdà@ Eä;Çt CüH;ÆrÆPSÿuäèæ#  Sÿuàè¿  ÄÇEüþÿÿÿè.   }à u1öuFÆæðuVSj ÿ5t)A ÿÔà@ øëu]jè¨ÑÿÿYÃ}äÿ¿   9=)A t,VèóÿÿYÀÒþÿÿè´Êÿÿ9}àulðÿ\à@ Pè_ÊÿÿYë_ÿ   èÊÿÿ9}àthÇ    ëqöuFVSj ÿ5t)A ÿÔà@ øÿuV9)A t4VèòÿÿYÀtþàvÍVèòÿÿYèCÊÿÿÇ    3ÀèÇÊÿÿÃè0Êÿÿé|ÿÿÿÿuè"Êÿÿðÿ\à@ PèÒÉÿÿYÇëÒÿUìMS3Û;Ëv(jà3ÒX÷ñ;EsèíÉÿÿSSSSSÇ    èuÉÿÿÄ3ÀëA¯MVWñ9]tÿuèÈ)  YØVÿuèýÿÿøYYÿt;Þs+óVj ßSèX­ÿÿÄÇ_^[]ÃÿUì
h*A ¡l*A kÉÈëU+Pú   r	À;Árë3À]ÃÿUììMAVuWþ+yÆüÁïÏiÉ  D  MðIMüöÁÓ  S1UôVüUøUô]öÂutÁúJú?vj?ZK;KuB»   ú sÊÓëL÷Ó!\¸Dþ	u#M!ëJàÓëL÷Ó!¸Ä   þ	uM!Y]S[MüMôZUZRSMüÑÁúJú?vj?Z]øã]ô   +uø]øÁûj?uK^;ÞvÞMøÑÁúJMü;ÖvÖ;Út^Mq;qu;¾   û sËÓî÷Ö!t¸DþLu!M!1ëKàÓî÷Ö!´¸Ä   þLuM!qMqINMqINuë]}ô u;Ú   MðÑYN^qNqN;Nu`LMþÁLú s%} uÊ»   ÓëM	»   ÊÓëD¸D	ë)} uJà»   ÓëM	YJàº   Óê¸Ä   	EüD0üEðÿó   ¡|)A ÀØ   
|*A 5¼à@ h @  ÁáH»   SQÿÖ
|*A ¡|)A º   Óê	P¡|)A @
|*A ¤Ä    ¡|)A @þHC¡|)A HyC u	`þ¡|)A xÿueSj ÿpÿÖ¡|)A ÿpj ÿ5t)A ÿ`à@ 
h*A ¡|)A kÉl*A +ÈLìQHQPèí+  EÄÿ
h*A ;|)A vm¡l*A £t*A E£|)A =|*A [_^ÉÃ¡x*A V5h*A W3ÿ;ðu4ÀkÀPÿ5l*A Wÿ5t)A ÿÔà@ ;Çu3Àëxx*A 5h*A £l*A kö5l*A hÄA  jÿ5t)A ÿdà@ F;ÇtÇjh    h   WÿØà@ F;ÇuÿvWÿ5t)A ÿ`à@ ëNÿ>~ÿh*A FÿÆ_^ÃÿUìQQMASVqW3ÛëÀCÀ}ùÃiÀ  0D  j?EøZ@@ÀJuôjûh   Áçyh   WÿØà@ ÀuÈÿé    p  Uü;úwCÊ+ÏÁéGAHøÿì  ÿü  üïÿÿÇ@üð  PÇè  ð     IuËUüEøø  OHAJHAdD 3ÿG¼Ä   FCÈþÁÀENCu	xº   ËÓê÷Ò!PÃ_^[ÉÃÿUììMASVuW}×+QÆÁêÊiÉ  D  MôOüæðI;ñ|9üM]üU  öÃE  Ù;ó;  MüÁùIMøù?vj?YMø_;_uC»   ù sÓëMøL÷Ó!\Dþ	u&M!ëÁàÓëMøL÷Ó!Ä   þ	uM!YO_YOyM+ÎMü}ü ¥   }üMÁÿOL1üÿ?vj?_]ôû][Y]YKYKY;YuWLMþÁLÿ s} uÏ»   ÓëM	DDÏë } uOà»   ÓëM	YÄ   Oàº   Óê	UMüD2üLüëUFBüD2øé<  3Àé8  /  ])uNKü\3üuÁþN]Küþ?vj?^öEü   uüÁþNþ?vj?^O;OuB»   þ sÎÓët÷Ó!\Dþu#M!ëNàÓëL÷Ó!Ä   þ	uM!Y]OwqwOquuüuÁþNþ?vj?^MôñyK{YKYK;KuWLMþÁLþ s} uÎ¿   ÓïM	9DDÎë } uNà¿   ÓïM	yÄ   Nàº   Óê	EDü3À@_^[ÉÃÿUìì¡h*A MkÀl*A ÁáðMðÁùSIù VW}ÎÿÓîMøÿë
ÁàÊÿ3öÓêUø
t*A ÙëS;#Uø#þ×u
Ã];Ørè;Øul*A ëS;#Uø#þ×u
Ã];Ùrè;Ùu[ë{ u
Ã];Ørð;Øu1l*A ë	{ u
Ã];Ùrð;Ùuè úÿÿØ]Ûu3Àé	  Sè:ûÿÿYKC8ÿtåt*A CUüúÿtÄ   |D#Mø#þÏu)eü Ä   HD9#Uø#þ×uÿEü   ÁëçUüÊiÉ  D  MôLD3ÿ#ÎuÄ   #Møj _ëÉGÉ}ùMôTù
+MðñÁþNþ?Mø~j?^;÷  J;Ju\ÿ »   }&ÏÓëMü|8÷Ó]ì#\D\Dþu3Mì]!ë,OàÓëMüÄ   |8÷Ó!þ]ìu]Mì!Kë]}ø JzyJzy   MôñyJzQJQJ;Ju^LMþÁþ L}#} u¿   ÎÓï	;Î¿   ÓïMü	|Dë)} u
Nà¿   Óï	{Mü¼Ä   Nà¾   Óî	7MøÉt
LüëMøuðÑN
L2üuôy>Éu;|)A uMü;
|*A u%|)A  MüB_^[ÉÃÿUìSVuW3ÿËÿ;÷uèµ¾ÿÿWWWWWÇ    è=¾ÿÿÄÃëBöFt7Vè(ÃÿÿVØèÄ(  Vè³¼ÿÿPèë'  ÄÀ}ËÿëF;Çt
PèÎÁÿÿY~~Ã_^[]ÃjhÈ÷@ è¾ÿÿMäÿ3Àu3ÿ;÷À;Çuè2¾ÿÿÇ    WWWWWèº½ÿÿÄÈÿëöF@t~Eäè¾ÿÿÃVè ÿÿY}üVè*ÿÿÿYEäÇEüþÿÿÿè   ëÕuVèä ÿÿYÃÿUì¸ä  è8*  ¡A 3ÅEüEV3ö4åÿÿµ8åÿÿµ0åÿÿ9uu3Àéé  ;Æu'è¨½ÿÿ0è½ÿÿVVVVVÇ    è½ÿÿÄÈÿé¾  SW}ÇÁø4 *A çÁçÇX$ÛÐûµ(åÿÿ'åÿÿûtûu0M÷ÑöÁu&è?½ÿÿ3ö0è#½ÿÿVVVVVÇ    è«¼ÿÿÄéC  ö@ tjj j ÿuèc  ÄÿuèÖêÿÿYÀ  öD  èëÖÿÿ@l3É9HåÿÿÁPÿ4 åÿÿÿàà@ À`  3É9 åÿÿtÛP  ÿÜà@ 4åÿÿåÿÿ3À<åÿÿ9EB  Dåÿÿ'åÿÿÀg  µ(åÿÿ3Àù
À åÿÿÇx8 tP4UôMõ`8 jEôPëK¾ÁPè×ìÿÿYÀt:4åÿÿ+ËM3À@;È¥  j@åÿÿSPè<(  Äøÿ±  CÿDåÿÿëjS@åÿÿPè(  Äøÿ  3ÀPPjMôQj@åÿÿQPÿµåÿÿCÿDåÿÿÿ°à@ ðö\  j <åÿÿPVEôP(åÿÿ ÿ4ÿà@ À)  Dåÿÿ0åÿÿÁ9µ<åÿÿ8åÿÿ  ½ åÿÿ Í   j <åÿÿPjEôP(åÿÿ ÆEô
ÿ4ÿà@ ÀÐ  ½<åÿÿÏ  ÿ0åÿÿÿ8åÿÿé   <t<u!·33Éfþ
ÁCCDåÿÿµ@åÿÿ åÿÿ<t<uRÿµ@åÿÿè%%  Yf;@åÿÿh  8åÿÿ½ åÿÿ t)j
XP@åÿÿèø$  Yf;@åÿÿ;  ÿ8åÿÿÿ0åÿÿE9Dåÿÿùýÿÿé'  ÿ8åÿÿT4D8é  3ÉÇö@¿  4åÿÿ@åÿÿÛÊ   <åÿÿ9M   ëµ(åÿÿ<åÿÿ¥Dåÿÿ +4åÿÿHåÿÿ;Ms9<åÿÿÿ<åÿÿAú
uÿ0åÿÿÆ 
@ÿDåÿÿ@ÿDåÿÿ½Dåÿÿÿ  rÂØHåÿÿ+Øj ,åÿÿPSHåÿÿPÿ4ÿà@ ÀB  ,åÿÿ8åÿÿ;Ã:  <åÿÿ+4åÿÿ;ELÿÿÿé   DåÿÿûÑ   9MM  ëµ(åÿÿDåÿÿ¥<åÿÿ +4åÿÿHåÿÿ;MsFDåÿÿDåÿÿ·AAfú
u0åÿÿj
[f@@<åÿÿ<åÿÿf@@½<åÿÿþ  rµØHåÿÿ+Øj ,åÿÿPSHåÿÿPÿ4ÿà@ Àb  ,åÿÿ8åÿÿ;ÃZ  Dåÿÿ+4åÿÿ;E?ÿÿÿé@  9M|  Dåÿÿ¥<åÿÿ +4åÿÿjHùÿÿ^;Ms<Dåÿÿ·µDåÿÿÎfú
uj
[fÆµ<åÿÿµ<åÿÿfÆ½<åÿÿ¨  r¿3öVVhU
  ðëÿÿQHùÿÿ+Á+ÂÑøPÁPVhéý  ÿ°à@ Ø;Þ   j ,åÿÿPÃ+ÆP5ðëÿÿP(åÿÿ ÿ4ÿà@ Àtµ,åÿÿ;ÞËëÿ\à@ @åÿÿ;Þ\Dåÿÿ+4åÿÿ8åÿÿ;E
ÿÿÿë?j ,åÿÿQÿuÿµ4åÿÿÿ0ÿà@ Àt,åÿÿ¥@åÿÿ 8åÿÿëÿ\à@ @åÿÿ½8åÿÿ ul½@åÿÿ t-j^9µ@åÿÿuè·ÿÿÇ 	   è·ÿÿ0ë?ÿµ@åÿÿè"·ÿÿYë1µ(åÿÿöD@t4åÿÿ8u3Àë$èÖ¶ÿÿÇ    èÞ¶ÿÿ  Èÿë8åÿÿ+0åÿÿ_[Mü3Í^èhÿÿÉÃjhè÷@ èè¶ÿÿEøþuè¢¶ÿÿ  è¶ÿÿÇ 	   Èÿé   3ÿ;Ç|;*A r!èy¶ÿÿ8è_¶ÿÿÇ 	   WWWWWèçµÿÿÄëÉÈÁù *A ðæÁæ¾L1át¿Pè9$  Y}üöD0tÿuÿuÿuè.øÿÿÄEäëèüµÿÿÇ 	   è¶ÿÿ8MäÿÇEüþÿÿÿè	   Eäèh¶ÿÿÃÿuè$  YÃjhø@ è¶ÿÿEøþuè³µÿÿÇ 	   Èÿéª   3Û;Ã|;*A rèµÿÿÇ 	   SSSSSèµÿÿÄëÐÈÁù< *A ðæÁæ¾LátÆPèl#  Y]üöDt1ÿuèà"  YPÿäà@ Àuÿ\à@ Eäë]ä9]ätè1µÿÿMäèµÿÿÇ 	   MäÿÇEüþÿÿÿè	   EäèµÿÿÃÿuè¢#  YÃÿUììS3Û9]uèÖ´ÿÿSSSSSÇ    è^´ÿÿÄ3ÀëjVu;óuè²´ÿÿSSSSSÇ    è:´ÿÿÄë9ur3Àë>ÿuMðèVÿÿMôFÿ9YtH9Ew
¶öD
uðÎ+Èá+ñNÆ8]ütMøapý^[ÉÃÿUìj ÿuÿuèUÿÿÿÄ]ÃÿUììS3ÛVu9]u;óu9]u3Àéç  ;ót9]wè	´ÿÿj^SSSSS0è³ÿÿÄÆéÀ  9]uëÉW};ûuèØ³ÿÿj^SSSSS0èa³ÿÿÄé(  ÿuMìèÿÿEð9XuÿuWÿuVè£
  ÄéL  }ÿUÆu@G:ËtJuóë@G:ËtJtÿMuî9]u@;ÓÈ   8t}u5xÿ}ü;þrEìPEü¶ Pè0¿ÿÿYYÀtÿMü9uüsâÇ+Eü¨Ã   }ÿuZEøv:|þ};þr!EìPE¶ Pèì¾ÿÿYYÀtÿM9usâEÏ+MöÁtë\ÿ8]øtEô`pýjPXé   è·²ÿÿj"^SSSSS0è@²ÿÿÄ8]øtEô`pýÆëdÈ+Îù|Mxþ};þrEìPE¶ Pèi¾ÿÿYYÀtÿM9usâÇ+E¨tèT²ÿÿÈj*X8]øtMôapýë8]øtEô`pý3À_^[ÉÃÿUìEÀtè8ÝÝ  uPèxµÿÿY]ÃÿUìì¡A 3ÅEüSV3ÛWñ9)A u8SS3ÿGWhdê@ h   Sÿðà@ Àt=)A ëÿ\à@ øxu
Ç)A    9]~"MEI8t@;ËuöÉÿE+ÁH;E}@E¡)A ø¬  ;Ã¤  øÌ  ]ø9] u@E 5ìà@ 3À9]$SSÿuÀÿuÅ   Pÿu ÿÖø;û  ~Cjà3ÒX÷÷ør7D?=   wè#  Ä;ÃtÇ ÌÌ  ëPèäÿÿY;Ãt	Ç ÝÝ  ÀEôë]ô9]ô>  Wÿuôÿuÿujÿu ÿÖÀã   5ðà@ SSWÿuôÿuÿuÿÖÈMø;ËÂ   ÷E   t)9]°   ;M§   ÿuÿuWÿuôÿuÿuÿÖé   ;Ë~Ejà3ÒX÷ñør9D	=   wèÏ"  ô;ótjÇÌÌ  ÆëPèJãÿÿY;Ãt	Ç ÝÝ  Àðë3ö;ótAÿuøVWÿuôÿuÿuÿðà@ Àt"SS9]uSSëÿuÿuÿuøVSÿu ÿ°à@ EøVè¸ýÿÿYÿuôè¯ýÿÿEøYéY  ]ô]ð9]u@E9] u@E ÿuè    YEìøÿu3Àé!  ;E Û   SSMQÿuPÿu è>   ÄEô;ÃtÔ5èà@ SSÿuPÿuÿuÿÖEø;Ãu3öé·   ~=øàw8À=   wè¹!  ü;ûtÝÇÌÌ  ÇëPè4âÿÿY;Ãt	Ç ÝÝ  Àøë3ÿ;ût´ÿuøSWèÀÿÿÄÿuøWÿuÿuôÿuÿuÿÖEø;Ãu3öë%ÿuEøÿuPWÿu ÿuìè  ðuðÄ÷Þö#uøWèüÿÿYëÿuÿuÿuÿuÿuÿuÿèà@ ð9]ôt	ÿuôèø±ÿÿYEð;Ãt9EtPèå±ÿÿYÆeà_^[Mü3Íè'ÿÿÉÃÿUììÿuMðè!ÿÿÿu(Mðÿu$ÿu ÿuÿuÿuÿuÿuè(üÿÿÄ }ü tMøapýÉÃÿUìQQ¡A 3ÅEü¡)A SV3ÛWù;Ãu:EøP3öFVhdê@ Vÿøà@ Àt5)A ë4ÿ\à@ øxu
jX£)A ë¡)A øÏ   ;ÃÇ   øè   ]ø9]u@E5ìà@ 3À9] SSÿuÀÿuÅ   PÿuÿÖø;û«   ~<ÿðÿÿw4D?=   wèÒ  Ä;ÃtÇ ÌÌ  ëPèPàÿÿY;Ãt	Ç ÝÝ  ÀØÛti?Pj SèÞÿÿÄWSÿuÿujÿuÿÖÀtÿuPSÿuÿøà@ EøSèÉúÿÿEøYëu3ö9]u@E9]u@EÿuèA  Yøÿu3ÀëG;EtSSMQÿuPÿuèi  ðÄ;ótÜuÿuÿuÿuÿuÿuÿôà@ ø;ótVèæ¯ÿÿYÇeì_^[Mü3Íè(ÿÿÉÃÿUììÿuMðè"ÿÿÿu$Mðÿu ÿuÿuÿuÿuÿuèþÿÿÄ}ü tMøapýÉÃÿUìVuö  ÿvèv¯ÿÿÿvèn¯ÿÿÿvèf¯ÿÿÿvè^¯ÿÿÿvèV¯ÿÿÿvèN¯ÿÿÿ6èG¯ÿÿÿv è?¯ÿÿÿv$è7¯ÿÿÿv(è/¯ÿÿÿv,è'¯ÿÿÿv0è¯ÿÿÿv4è¯ÿÿÿvè¯ÿÿÿv8è¯ÿÿÿv<èÿ®ÿÿÄ@ÿv@èô®ÿÿÿvDèì®ÿÿÿvHèä®ÿÿÿvLèÜ®ÿÿÿvPèÔ®ÿÿÿvTèÌ®ÿÿÿvXèÄ®ÿÿÿv\è¼®ÿÿÿv`è´®ÿÿÿvdè¬®ÿÿÿvhè¤®ÿÿÿvlè®ÿÿÿvpè®ÿÿÿvtè®ÿÿÿvxè®ÿÿÿv|è|®ÿÿÄ@ÿ¶   èn®ÿÿÿ¶   èc®ÿÿÿ¶   èX®ÿÿÿ¶   èM®ÿÿÿ¶   èB®ÿÿÿ¶   è7®ÿÿÿ¶   è,®ÿÿÿ¶   è!®ÿÿÿ¶    è®ÿÿÿ¶¤   è®ÿÿÿ¶¨   è ®ÿÿÄ,^]ÃÿUìVuöt5;HA tPèÝ­ÿÿYF;LA tPèË­ÿÿYv;5PA tVè¹­ÿÿY^]ÃÿUìVuöt~F;TA tPè­ÿÿYF;XA tPè­ÿÿYF;\A tPès­ÿÿYF;`A tPèa­ÿÿYF;dA tPèO­ÿÿYF ;hA tPè=­ÿÿYv$;5lA tVè+­ÿÿY^]ÃÿUìES3ÛVW;Ãt};ûwè¡©ÿÿj^0SSSSSè*©ÿÿÄÆë<u;óuëÚÐ8tBOuø;ûtî
BF:ËtOuó;ûuèZ©ÿÿj"Yñëµ3À_^[]ÃÌÌÌÌÌÌUìV3ÀPPPPPPPPUI 
Àt	Â«$ëñuÉÿI Á
Àt	Æ£$sîÁÄ ^ÉÃÿUìSVu3ÛW9]u;óu9]u3À_^[]Ã;ót};ûwèÌ¨ÿÿj^0SSSSSèU¨ÿÿÄÆëÕ9]uëÊU;ÓuëÑ}ÿÆu
@B:ËtOuóë
@B:ËtOtÿMuî9]u;ûu}ÿuEjP\ÿXéxÿÿÿèR¨ÿÿj"YñëÿUìMS3ÛVW;Ët};ûwè,¨ÿÿj^0SSSSSèµ§ÿÿÄÆë0u;óuëÚÑBF:ÃtOuó;ûuèñ§ÿÿj"YñëÁ3À_^[]ÃÌÌÌÌÌÌÌÌÌÌÌÌÌT$L$÷Â   u<:u.
Àt&:au%
ätÁè:Au
Àt:auÁÂ
äuÒÿ3ÀÃÀÑàÀÃ÷Â   tÂ:uçÁ
ÀtÜ÷Â   t¤fÂ:uÎ
ÀtÆ:auÅ
ät½ÁëÌÌÌÌÌÌÌÌUìWVuM}ÁÑÆ;þv;ø¤  ù   r=*A  tWVçæ;þ^_u^_]é,  ÷Ç   uÁéâùr*ó¥ÿ$T@ Çº   éràÈÿ$h@ ÿ$d@ ÿ$è@ x@ ¤@ È@ #ÑFGFÁéGÆÇùrÌó¥ÿ$T@ I #ÑFÁéGÆÇùr¦ó¥ÿ$T@ #ÑÆÁéÇùró¥ÿ$T@ I K@ 8@ 0@ (@  @ @ @ @ DäDäDèDèDìDìDðDðDôDôDøDøDüDü    ðøÿ$T@ ÿd@ l@ x@ @ E^_ÉÃE^_ÉÃFGE^_ÉÃI FGFGE^_ÉÃt1ü|9ü÷Ç   u$Áéâùr
ýó¥üÿ$ð@ ÿ÷Ùÿ$ @ I Çº   ùrà+Èÿ$ô@ ÿ$ð@ @ (@ P@ F#ÑGîÁéïùr²ýó¥üÿ$ð@ I F#ÑGFÁéGîïùrýó¥üÿ$ð@ F#ÑGFGFÁéGîïùVÿÿÿýó¥üÿ$ð@ I ¤@ ¬@ ´@ ¼@ Ä@ Ì@ Ô@ ç@ DDDDDDDDDDDDDD    ðøÿ$ð@ ÿ @ @ @ ,@ E^_ÉÃFGE^_ÉÃI FGFGE^_ÉÃFGFGFGE^_ÉÃÌÌÌÌÌÌÌÌÌÌÌUìV3ÀPPPPPPPPUI 
Àt	Â«$ëñuÿ
ÀtÆ£$sñFÿÄ ^ÉÃÿUìQQEVuEøEWVEüè  ÏÿY;Çuèi£ÿÿÇ 	   Ç×ëJÿuMüQÿuøPÿ á@ Eø;Çuÿ\à@ Àt	Pè[£ÿÿYëÏÆÁø *A æÁæD0 ýEøUü_^ÉÃjh(ø@ èO£ÿÿÎÿuÜuàEøþuè £ÿÿ  èå¢ÿÿÇ 	   ÆÖéÐ   3ÿ;Ç|;*A r!èÖ¢ÿÿ8è¼¢ÿÿÇ 	   WWWWWèD¢ÿÿÄëÈÈÁù *A ðæÁæ¾L1áu&è¢ÿÿ8è{¢ÿÿÇ 	   WWWWWè¢ÿÿÄÊÿÂë[Pèp  Y}üöD0tÿuÿuÿuÿuè©þÿÿÄEÜUàëè-¢ÿÿÇ 	   è5¢ÿÿ8MÜÿMàÿÇEüþÿÿÿè   EÜUàè¢ÿÿÃÿuè­  YÃÿUìÿ A h   è¤ÿÿYMAÀt
IÇA   ëIAAÇA   Aa ]ÃÿUììSVWèb¹ÿÿeü =)A  Ø   h ô@ ÿà@ øÿ*  5(à@ hôó@ WÿÖÀ  Pè¬¸ÿÿÇ$äó@ W£)A ÿÖPè¸ÿÿÇ$Ðó@ W£)A ÿÖPè¸ÿÿÇ$´ó@ W£)A ÿÖPèm¸ÿÿY£ )A Àthó@ WÿÖPèU¸ÿÿY£)A ¡)A ;ÃtO9 )A tGPè³¸ÿÿÿ5 )A ðè¦¸ÿÿYYøöt,ÿt(ÿÖÀtMøQjMìQjPÿ×ÀtöEôu	M    ë9¡)A ;Ãt0Pèc¸ÿÿYÀt%ÿÐEüÀt¡)A ;ÃtPèF¸ÿÿYÀtÿuüÿÐEüÿ5)A è.¸ÿÿYÀtÿuÿuÿuÿuüÿÐë3À_^[ÉÃÿUìMV3ö;Î|ù~ùu¡D A ë(¡D A 
D A ëè ÿÿVVVVVÇ    èÿÿÄÈÿ^]ÃjhHø@ è9 ÿÿ3À]3ÿ;ßÀ;ÇuèØÿÿÇ    WWWWWè`ÿÿÄÈÿëS=*A u8jèU§ÿÿY}üSèÖÿÿYEà;Çtsüî	uäëuäÇEüþÿÿÿè%   9}àuSWÿ5t)A ÿá@ ðÆèùÿÿÃ3ÿ]uäjè#¦ÿÿYÃjèÿÿYÃÿUìì(  ¡A 3ÅEüöA Vtj
è3¾ÿÿYè
ÅÿÿÀtjèÅÿÿYöA Ê   àýÿÿÜýÿÿØýÿÿÔýÿÿµÐýÿÿ½ÌýÿÿføýÿÿfìýÿÿfÈýÿÿfÄýÿÿf¥Àýÿÿf­¼ýÿÿðýÿÿuEôýÿÿÇ0ýÿÿ  µèýÿÿ@üjPäýÿÿØüÿÿj Pè:ÿÿØüÿÿÄ(ýÿÿ0ýÿÿj ÇØüÿÿ  @µäüÿÿ,ýÿÿÿTà@ (ýÿÿPÿPà@ jèýÿÿÌÌÌUìSVWUj j h@ ÿuèV"  ]_^[å]ÃL$÷A   ¸   t2D$Hü3Èè²ÿÿUhP(RP$Rè   Ä]D$T$¸   ÃSVWD$UPjþh@ dÿ5    ¡A 3ÄPD$d£    D$(Xpþÿt:|$,ÿt;t$,v-4v³L$H|³ uh  D³èI   D³è_   ë·L$d
    Ä_^[Ã3Àd
    y@ uQR9Qu¸   ÃSQ»A ëSQ»A L$KCkUQPXY]Y[Â ÿÐÃÿUììVWÿuMìèµÿÿEu3ÿ;Çt0;÷u,èÑÿÿWWWWWÇ    èYÿÿÄ}ø tEô`pý3ÀéØ  9}t}|É}$ÃMìS}ü~¹¬   ~EìP¶ÃjPèe¹ÿÿMìÄëÈ   ¶Ã·BàÀtGëÇû-uMëû+uGEÀK  øB  ø$9  Àu*û0t	ÇE
   ë4<xt
<Xt	ÇE   ë!ÇE   ë
øuû0u<xt<XuGG±È   ¸ÿÿÿÿ3Ò÷u¶Ë·NöÁt¾Ëé0ë÷Á  t1Ëéaù¾Ëwé ÁÉ;MsM9Eür'u;Êv!M} u#EO¨u } t}eü ë[]ü¯]Ù]üGë¾ÿÿÿ¨u¨u=àt	}ü   w	Àu+9uüv&è0ÿÿöEÇ "   tMüÿëöEj XÀÆEüEÀt8öEt÷]ü}ø tEô`pýEüëEÀt0}ø tEô`pý3À[_^ÉÃÿUì3ÀPÿuÿuÿu9è$A uhxA ëPè«ýÿÿÄ]ÃÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌUìWVuM}ÁÑÆ;þv;ø¤  ù   r=*A  tWVçæ;þ^_u^_]é|
  ÷Ç   uÁéâùr*ó¥ÿ$@ Çº   éràÈÿ$@ ÿ$@ ÿ$@ (@ T@ x@ #ÑFGFÁéGÆÇùrÌó¥ÿ$@ I #ÑFÁéGÆÇùr¦ó¥ÿ$@ #ÑÆÁéÇùró¥ÿ$@ I û@ è@ à@ Ø@ Ð@ È@ À@ ¸@ DäDäDèDèDìDìDðDðDôDôDøDøDüDü    ðøÿ$@ ÿ@ @ (@ <@ E^_ÉÃE^_ÉÃFGE^_ÉÃI FGFGE^_ÉÃt1ü|9ü÷Ç   u$Áéâùr
ýó¥üÿ$ @ ÿ÷Ùÿ$P@ I Çº   ùrà+Èÿ$¤@ ÿ$ @ ´@ Ø@  @ F#ÑGîÁéïùr²ýó¥üÿ$ @ I F#ÑGFÁéGîïùrýó¥üÿ$ @ F#ÑGFGFÁéGîïùVÿÿÿýó¥üÿ$ @ I T@ \@ d@ l@ t@ |@ @ @ DDDDDDDDDDDDDD    ðøÿ$ @ ÿ°@ ¸@ È@ Ü@ E^_ÉÃFGE^_ÉÃI FGFGE^_ÉÃFGFGFGE^_ÉÃÿUìVuWVè½  YøÿtP¡ *A þu	ö   uþuö@Dtjè  jøè  YY;ÇtVè}  YPÿá@ Àu
ÿ\à@ øë3ÿVèÙ  ÆÁø *A æÁæYÆD0 ÿtWèÅÿÿYÈÿë3À_^]Ãjhhø@ èÓÿÿEøþuèÿÿ  èrÿÿÇ 	   Èÿé   3ÿ;Ç|;*A r!èdÿÿ8èJÿÿÇ 	   WWWWWèÒÿÿÄëÉÈÁù *A ðæÁæ¾L1át¿Pè$  Y}üöD0tÿuèËþÿÿYEäëèïÿÿÇ 	   MäÿÇEüþÿÿÿè	   EäèbÿÿÃÿuè}  YÃÿUìVuF¨t¨tÿvèÿÿf÷ûÿÿ3ÀYFF^]ÃÿUìì¡A 3ÅEüV3ö95°A tO=tA þuèâ
  ¡tA øÿu¸ÿÿ  ëpVMðQjMQPÿá@ Àug=°A uÚÿ\à@ øxuÏ5°A VVjEôPjEPVÿá@ Pÿ°à@ 
tA ùÿt¢VUðRPEôPQÿá@ ÀtfEMü3Í^è|ÿÿÉÃÇ°A    ëãÿUììSVu3Û;ót9]t8uE;Ãt3Éf3À^[ÉÃÿuMðèd|ÿÿEð9XuE;Ãtf¶f8]ütEø`pý3À@ëÊEðP¶PèãÄÿÿYYÀt}Eð¬   ù~%9M| 3Ò9]ÂRÿuQVj	ÿpÿìà@ ÀEðuM;¬   r 8^t¬   8]üeÿÿÿMøapýéYÿÿÿèúÿÿÇ *   8]ütEø`pýÈÿé:ÿÿÿ3À9]ÀPÿuEðjVj	ÿpÿìà@ À:ÿÿÿëºÿUìj ÿuÿuÿuèÔþÿÿÄ]ÃÌÌÌÌÌÌÌÌÌÌÌQL$+ÈÀ÷Ð#ÈÄ% ðÿÿ;Èr
ÁY $Ã-    ëéÿUìEVWÀ|Y;*A sQÈÁùðæ< *A Áæ<ÿu5=A S]uè tHtHuSjôëSjõëSjöÿá@ 3À[ëèýÿÿÇ 	   èÿÿ  Èÿ_^]ÃÿUìMS3Û;ËVW|[;
*A sSÁÁøñ< *A æÁæÆö@t58ÿt0=A u+ËtItIuSjôëSjõëSjöÿá@ ÿ3ÀëèwÿÿÇ 	   èÿÿÈÿ_^[]ÃÿUìEøþuècÿÿ  èHÿÿÇ 	   Èÿ]ÃV3ö;Æ|";*A sÈàÁù *A ÁàÁö@u$è"ÿÿ0èÿÿVVVVVÇ 	   èÿÿÄÈÿë ^]Ãjhø@ è+ÿÿ}ÇÁø÷æÁæ4 *A ÇEä   3Û9^u6j
èXÿÿY]ü9^uh   FPèo¹ÿÿYYÀu]äÿFÇEüþÿÿÿè0   9]ätÇÁøçÁç *A D8Pÿà@ EäèëÿÿÃ3Û}j
èÿÿYÃÿUìEÈàÁù *A ÁàDPÿà@ ]Ãjh¨ø@ èdÿÿMäÿ3ÿ}ÜjèêÿÿYÀuÈÿéb  jèÿÿY}ü}Øÿ@<  4½ *A öº   uà½ *A    ;ð   öFu\~ u9j
èPÿÿY3ÛC]ü~ uh   FPèc¸ÿÿYYÀu]ÜëÿFeü è(   }Ü u^Sÿà@ öFtSÿà@ Æ@ë}Øuàj
èÿÿYÃ}Ü uæÆFÿ+4½ *A ÁþÇÁàðuä}äÿuyGé+ÿÿÿj@j èÿÿYYEàÀta½ *A *A  Â   ;ÂsÆ@ ÿÆ@
` À@EàëÝÁç}äÇÁøÏáÁá *A ÆDWèÆýÿÿYÀuMäÿÇEüþÿÿÿè	   Eäè%ÿÿÃjèWÿÿYÃÿUìì¡A 3ÅEüjEôPh  ÿuÆEú ÿüà@ ÀuÈÿë
EôPè`  YMü3ÍèwÿÿÉÃÿUìì4¡A 3ÅEüEMEØESEÐ VEÜEW3ÿMÌ}à}Ô;E_  5hà@ MèQPÿÖìà@ Àt^}èuXEèPÿuÿÖÀtK}èuEuÜÇEÔ   þÿuÿuØè&½ÿÿðYF;÷~[þðÿÿwSD6=   w/è  Ä;Çt8Ç ÌÌ  ë-WWÿuÜÿuØjÿuÿÓð;÷uÃ3ÀéÑ   PèxÁÿÿY;Çt	Ç ÝÝ  ÀEäë}ä9}ätØ6PWÿuäèþqÿÿÄVÿuäÿuÜÿuØjÿuÿÓÀt]Ì;ßtWWÿuSVÿuäWÿuÿ°à@ Àt`]àë[°à@ 9}ÔuWWWWVÿuäWÿuÿÓð;÷t<Vjè\ÿÿYYEà;Çt+WWVPVÿuäWÿuÿÓ;Çuÿuàè%ÿÿY}àë}ÜÿtMÐÿuäèwÛÿÿYEàeÀ_^[Mü3ÍèMuÿÿÉÃÌÌÌÌÌÌÌÌÌQL$+ÈáÁÉÁYéÚùÿÿQL$+ÈáÁÉÁYéÄùÿÿUìì}üuøu}MÁéë    fofoNfoV fo^0ffOfW f_0fof@fonPfov`fo~pfg@foPfw`fp¶   ¿   Iu£uø}üå]ÃUìì}ôuø]ü]ÃÈE3Ê+Êá3Ê+Êø3ú+úç3ú+úÑ×uJuÎáMè;ñt+ñVSPè'ÿÿÿÄEMèÉtw]UÓ+ÑUìØ+Ù]ðuì}ðMèó¤EëS;Ïu5÷ÙÁMäu}Mäó¤MMäUUäE+EäPRQèLÿÿÿÄEëu}MÑÁéó¥Êáó¤E]üuø}ôå]ÃÿUìj
j ÿuèñÿÿÄ]ÃÿUììS3ÛVW9]Õ   ÿuMðèsÿÿ9]u.è­ÿÿSSSSSÇ    è5ÿÿÄ8]ütEø`pý¸ÿÿÿé   };ûtË¾ÿÿÿ9uv(ènÿÿSSSSSÇ    èöÿÿÄ8]ütEø`pýÆë`Eð9XuÿuWÿuè  Ä8]ütDMøapýë;E¶ MðQPèG  ÿEð¶MðQPè5  ÄGÿMt;ót;ðtÍ+ðÆë¹3À_^[ÉÃÿUìV3ö95è$A u99uuèÌÿÿVVVVVÇ    èTÿÿÄ¸ÿÿÿë'9utÜ}ÿÿÿwÓ^]éé  Vÿuÿuÿuè¶þÿÿÄ^]Ã3ÀPPjPjh   @hLô@ ÿá@ £tA Ã¡tA V5á@ øÿtøþtPÿÖ¡pA øÿtøþtPÿÖ^ÃÿUì=¤+A  V5 A u3ÀëcWöu95  A tSèÆ  ÀuJ5 A öt@} t:ÿuèa¸ÿÿYøë'PèV¸ÿÿY;Çv<8=uWÿuPèn  ÄÀtÆÀuÓ3À_^]ÃD8ëôjhÐø@ èõÿÿjèGÿÿY3öuü3À];ÞÀ;Æuèÿÿj_8VVVVVèÿÿÄ}äé   3E;Æt03À9uÀ;ÆtÊÿuèÿÿÿYEà;ÆtXPè®·ÿÿøGjWè©lÿÿÄ;Æuè)ÿÿÇ    èÿÿ Eäë*ÿuàWPèÄàÿÿÄ;Æt
VVVVVèlÿÿÄE;Æt8uäÇEüþÿÿÿè	   EäèjÿÿÃjèÿÿYÃÿUììSVÿuMèèpÿÿ]¾   ;ÞsTMè¹¬   ~EèPjSè¥ÿÿMèÄë
È   ·XàÀtÌ   ¶é£   }ô tEð`pýÃé   Eè¸¬   ~1]Á}EèPE%ÿ   Pèµ¸ÿÿYYÀtEjEü]ýÆEþ YëèÿÿÇ *   3É]üÆEý AEèjÿpUøjRQMüQVÿpEèPèÙÿÿÄ$Àoÿÿÿø¶Eøt	¶MùÁàÁ}ô tMðapý^[ÉÃÌÌÌÌÌÌUìWVSMÉtMu}·A³Z¶ I &
ät'
Àt#ÆÇ:çr:ãwæ:Çr:ÃwÆ:àuéuÑ3É:àt	¹ÿÿÿÿr÷ÙÁ[^_ÉÃÿUììSÿuMðèoÿÿM3Û;Ëu8]ütEø`pý3Àé»   9]u.èÿÿSSSSSÇ    è¡ÿÿÄ8]ütEø`pý¸ÿÿÿé   9]tÍV¾ÿÿÿ;ÎvèÜÿÿSSSSSÇ    èdÿÿÄë?Eô9XuÿuQÿuÿuè   Äë6ÿpQÿuQÿuh  ÿpEðPè  Ä ;Ãu8]ütEø`pýÆëÀþ8]ütMøapý^[ÉÃÿUìj ÿuÿuÿuèýþÿÿÄ]ÃÿUìQQSV3öW=  A uü;Æte°à@ VVVVjÿPVVÿÓEø;ÆtTjPèÿÿYYEü;ÆtCVVÿuøPjÿÿ7VVÿÓÀt6EüVPèá  YYÀ}9uütÿuüèAÿÿYuüÇ;Æu¡3À_^[ÉÃÈÿëöÿuüè ÿÿYëðD$L$ÈL$u	D$÷áÂ S÷áØD$÷d$ØD$÷áÓ[Â ÿUìMëI8 t@ÉuõIE+ÁH]ÃÿUìì,¡A 3ÅEüESVW3ÿÚñ]ÜEä9=`*A u8j¸dê@ PjPWWÿ$á@ ÀtÇ`*A    ëÿ\à@ øxu
Ç`*A    9}~&ÿuÃèoÿÿÿYEU;×~EäRè[ÿÿÿÐYUë}ÿ}â3ÀéÂ  úÿ|ô
`*A ùù  ;Ïñ  3À@;ÈuÖ}Ø9}uIM9}t;×   9UujXéu  ;Ðm  9E~jëéEèPÿuÿhà@ Àt9}~)}èrà}î Eît×PÒtÐ:r:Êv±@@8 uèë½9}~8}ès3À@é  }î EîtïPÒtèMä	:r:Êtÿÿÿ@@8 uáëÎ5ìà@ WWÿuSj	ÿuÿÖØ]Ô;ßÿþÿÿ¿   Û~@jà3ÒX÷óør4D;Çwè&öÿÿÄÀtÇ ÌÌ  ëPè¤¶ÿÿYÀt	Ç ÝÝ  ÀEàëeà }à ¨þÿÿSÿuàÿuÿuÜjÿuÿÖÀ   j j ÿuÿuäj	ÿuÿÖØÛt{~Bjà3ÒX÷óør6D;Çwè¦õÿÿüÿtZÇÌÌ  ÇëPè!¶ÿÿYÀt	Ç ÝÝ  Àøë3ÿÿt1SWÿuÿuäjÿuÿÖÀtSWÿuÔÿuàÿuÿuÿ$á@ EØWèÐÿÿYÿuàèÐÿÿEØYéµ   3ÿ3Û9}u@E9}u@Eÿuè	óÿÿðYþÿºýÿÿ;utPj j EPÿuÜVÿuè-óÿÿØÄÛýÿÿj j EPÿuäVÿuèóÿÿøÄÿuSè§ÿÿYékýÿÿ]Ü}äÿuÿuäÿuÿuÜÿuÿuÿ á@ ðÛtSèwÿÿWèqÿÿYYÆeÈ_^[Mü3Íè²iÿÿÉÃÿUììÿuMðè¬iÿÿÿu$Uÿu Mðÿuÿuÿuÿuè`üÿÿÄ}ü tMøapýÉÃÿUììSÿuMðèiiÿÿU3Û;Óu8]ütEø`pý3ÀéÇ   9]u.èvÿÿSSSSSÇ    èþÿÿÄ8]ütEø`pý¸ÿÿÿé   9]tÍV¾ÿÿÿ;Övè9ÿÿSSSSSÇ    èÁÿÿÄëKEðH;ËuEðPRÿuÿuè2õÿÿÄë?ÿpEðRÿuRÿuh  QPèùþÿÿÄ ;ÃuèßÿÿÇ    8]ütEø`pýÆëÀþ8]ütMøapý^[ÉÃÿUìV5 A ë!WPÿuè9úÿÿÄÀu
<=tÀtÆÀuÙÆ+ A Áø÷Ø^]ÃÆ+ A ÁøëðÿUìQWø3ÀÏÿtF9t	Á@9 u÷V@jPè¹ÿÿðYYuüöuj	èjjÿÿëPèc  ÆÇYÀuë!Eü^_ÉÃÿUììES3Û]ô;ÃuèðÿÿSSSSSÇ    èxÿÿÄÈÿënV0Wuü;ótSj=Vè  øYY}ì;ût@;÷t<3À8_ÀEø¡ A ; A u
è5ÿÿÿ£ A ;Ãu`9]t$9  A tè3ùÿÿÀtJèuÿÿÇ    Èÿ_^[ÉÃ9]ø  jèÿÿY£ A ;ÃtÞ9  A ujètÿÿY£  A ;ÃtÃ5 A uð;ót´+}üÿuüèbþÿÿø;ûY|R9tN4¾ÿ6èlÿÿY9]øuEüEé   FEðG4¸9uðÿÿÿÿ?sjjWÿ5 A èßÿÿÄ;ÃtUëN9]øâ   ;û}÷ßG;Ç6ÿÿÿ=ÿÿÿ?+ÿÿÿPjÿ5 A è£ÿÿÄ;ÃÿÿÿUü¸YM£ A 9]txuüjVèÈ¬ÿÿ@Y@PèÐÿÿøYY;ût\VVè°¬ÿÿ@Y@PWèñÕÿÿÄÀt
SSSSSè|ÿÿÄMøÇ+ÆEì@÷ÙÉ÷Ñ#ÈQWÿ(á@ ÀuMôÿèü}ÿÿÇ *   WèYÿÿY9]øtÿuüèKÿÿEYEôéhþÿÿÿuüè5ÿÿEY3ÀéSþÿÿÿUìS3Û9]u3ÀëAVWÿuè¬ÿÿðFVè©°ÿÿøYY;ût"ÿuVWè@ÕÿÿÄÀt
SSSSSèè{ÿÿÄÇë3À_^[]ÃÿUììSÿuMðè#eÿÿE3Û;Ãu(èH}ÿÿSSSSSÇ    èÐ|ÿÿÄ8]ütEø`pý3ÀëtVuô9^u:ÿuPè   YYëA¶ÑöD2t@:Ót>·É¶ÒÁáÊ9MuHë·Ñ9Ut
@f¶·Éf;ËuÇ·É9Mu8]ütMøapýë8]ütEø`pý3À^[ÉÃÿUìj ÿuÿuè2ÿÿÿÄ]ÃÌÌÌBÿ[Ã¤$    d$ 3ÀD$SØÁàT$÷Â   t
Â:ËtÏÉtQ÷Â   uëØWÃÁãVØ
¿ÿþþ~Á÷3Ëðùñÿðÿ3Ï3ÆÂá u% tÓ% uæ   uÄ^_[3ÀÃBü:Ãt6Àtï:ãt'ätçÁè:ÃtÀtÜ:ãtätÔë^_Bÿ[ÃBþ^_[ÃBý^_[ÃBü^_[Ãÿ%Ðà@ ÿUìUS3Û;Óuè¬{ÿÿSSSSSÇ    è4{ÿÿÄÈÿë 8tßM;ËtØ;ÃtÒ8tÎSQRè  Ä[]ÃÿUììUVujþXEìUä;ðuèc{ÿÿ  èH{ÿÿÇ 	   Èÿé  S3Û;ó|;5*A r'è9{ÿÿè{ÿÿSSSSSÇ 	   è§zÿÿÄÈÿéQ  ÆÁøW< *A æÁæÆHöÁuèózÿÿèÙzÿÿÇ 	   ëjúÿÿÿwP]ð;Ó  öÁÿ  9]t7@$ÀÐøEþ¾ÀHjYtHuÂ÷Ð¨tâþUEEôé   Â÷Ð¨u!èzÿÿèmzÿÿÇ    SSSSSèõyÿÿÄë4ÂÑèM;ÁrEÿuèz|ÿÿYEô;Ãuè5zÿÿÇ    è=zÿÿÇ    Èÿéh  jSSÿuè|ÖÿÿD(EôÄT,ÎöAHttIù
tl9]tg@ÿMÇEð   ÆD
8]þtNL%ù
tC9]t>@ÿM}þÇEð   ÆD%
u$L&ù
t9]t@ÿMÇEð   ÆD&
SMèQÿuPÿ4ÿ,á@ À{  Mè;Ëp  ;Mg  MðDö æ  }þ  ;Ët
Mô9
uë û]ôEðÃ]Eð;ØÐ   M<®   <
tCAMé   EðH;ÈsA8
u
AAMÆ
ëuEëmÿEj EèPjEÿPÿ4ÿ,á@ Àu
ÿ\à@ ÀuE}è t?öDHt}ÿ
t¹Æ
MÿLë%;]ôu}ÿ
t jjÿjÿÿuèØÔÿÿÄ}ÿ
tÆ
CEð9EGÿÿÿëDö @uëCÃ+Eô}þEðÐ   ÀÈ   KÉxCé   3À@¶Éëø;]ôrK¶@¹àA  tè¶Ê¾àA Éu
èàwÿÿÇ *   ëzA;ÈuØë@ÎöAHt$CøQ|	T%Cøu	T&C+Øë÷ØjRPÿuèþÓÿÿÄEä+]ôÑèPÿuSÿuôj héý  ÿìà@ EðÀu4ÿ\à@ PèwÿÿYMìÿEô;EtPèµzÿÿYEìøþ  Eðé  Eð3É;ÃÁÀEðL0ëÆ;ËtMôf9
uë û]ôEðÃ]Eð;Øÿ   E·fù×   fù
tfCC@@Eé´   MðÁþ;ÁsHf9
u
ÀEj
é   Mé   Ej EèPjEøPÿ4ÿ,á@ Àu
ÿ\à@ Àu[}è tUöDHt(f}ø
t²j
XfMøLMùL%ÆD&
ë*;]ôuf}ø
tjjÿjþÿuèÒÿÿÄf}ø
tj
XfCCEð9Eÿÿÿëtö@uëf fCC+]ô]ðéþÿÿÿ\à@ j^;ÆuèÙuÿÿÇ 	   èáuÿÿ0éiþÿÿømYþÿÿ]ìé\þÿÿ3À_[^ÉÃjhðø@ èïuÿÿEøþuè©uÿÿ  èuÿÿÇ 	   Èÿé¾   3ö;Æ|;*A r!èuÿÿ0èfuÿÿÇ 	   VVVVVèîtÿÿÄëÉÈÁù *A øçÁç¾L9át¿¹ÿÿÿ;MÉAuè2uÿÿ0èuÿÿÇ    ë°PèãÿÿYuüöD8tÿuÿuÿuè~ùÿÿÄEäëèâtÿÿÇ 	   èêtÿÿ0MäÿÇEüþÿÿÿè	   EäèNuÿÿÃÿuèiãÿÿYÃÿUìì0S3ÛöEVWð]à]þÇEÐ   ]Ôt	]ØÆEÿë
ÇEØ   ]ÿEàPè
  YÀt
SSSSSèÒrÿÿÄM¸   Èu÷Á @ u9EàtMÿÁà+Ãº   À¿   tGHt.Ht&è7tÿÿÿètÿÿj^SSSSS0è£sÿÿÄé   UøëöÁt÷Á   uîÇEø   @ë}øEjY+Át7+Át*+Át+Átè@u¡9}øÀEðëÇEð   ëÇEð   ëÇEð   ë]ðEº   #Â¹   ;Á¿   ;t0;Ãt,;Çt=      =   @ÿÿÿÇEì   ë/ÇEì   ë&ÇEì   ë=   t=   t`;ÂÿÿÿÇEì   EÇEô   Çt
 A ÷Ñ#MÉxÇEô   ¨@tMô   Mø   Mð©   t	}ô¨ tMô   ëÇEì   ë¦¨tMô   è£áÿÿøÿuèÎrÿÿÿè±rÿÿÇ    é   E=á@ SÿuôÇ    ÿuìEÐPÿuðÿuøÿuÿ×EäøÿumMø¸   À#È;Èu+öEt%eøÿÿÿSÿuôEÐÿuìPÿuðÿuøÿuÿ×Eäøÿu46ÆÁø *A æÁæD0 þÿ\à@ Pè?rÿÿYèrÿÿ ét  ÿuäÿ<à@ ;ÃuD6ÆÁø *A æÁæD0 þÿ\à@ ðVèüqÿÿYÿuäÿá@ ;óu°èÃqÿÿÇ 
   ë£øuMÿ@ë	øuMÿÿuäÿ6è4ÞÿÿÐàÁú *A YÁàYMÿÉLÐàÁú *A ÁàD$ MýeýHMÿ   öÁ±  öEtqjÏÿWÿ6è£  ÄEè;Çuè:qÿÿ8   tMÿ6èéÙÿÿéúþÿÿjEüPÿ6]üèõÿÿÄÀu}üuEèRPÿ6è   Ä;ÇtÃSSÿ6èF  Ä;Çt³öEÿ0  ¿ @ ¹ @  }uEà#Çu	Më	EE#Ç;ÁtD=   t)= @ t"=   t)= @ t"=   t= @ uÆEþëM¸  #È;Èu	ÆEþë]þ÷E   µ  öEÿ@]è¨  Eø¹   À#Á=   @·   =   tw;Á  Eì;Ãy  øvøv0øf  ¾Eþ3ÿH&  HR  ÇEèÿþ  ÇEì   é  jSSÿ6è8ÌÿÿÄÂtÇSSSÿ6è'Ìÿÿ#ÂÄøÿþÿÿjEèPÿ6è/ôÿÿÄøÿuþÿÿøtkø­   }èï»¿ uYÆEþéÜ   Eì;ÃÑ   øbÿÿÿøPÿÿÿjSSÿ6è¸ËÿÿÄÂCÿÿÿSSSÿ6è£ËÿÿÄ#Âøÿ   éþÿÿEè%ÿÿ  =þÿ  uÿ6èß×ÿÿYèoÿÿj^0Æéd  =ÿþ  uSjÿ6èX  ÄøÿÀýÿÿÆEþëASSÿ6è=  ÄëÇEèï»¿ ÇEì   Eì+ÇPD=èPÿ6è¸ÿÿÄøÿýÿÿø9}ìÛÈÁù *A àÁàD$2Mþá0ÈÁù *A àÁàD$MÁéÀáâ
Ê8]ýu!öEtÈàÁù *A ÁàD }ø¸   ÀÏ#È;Èu|öEtvÿuäÿá@ SÿuôEÐjPÿuðçÿÿÿWÿuÿá@ øÿu4ÿ\à@ PèÿmÿÿÈàÁù *A ÁàD þÿ6èÏÚÿÿYéûÿÿ6ÎÁù *A æÁæÃ_^[ÉÃjhù@ èÓmÿÿMäÿ3öuà3À9uÀ;ÆuèmmÿÿÇ    VVVVVèõlÿÿÄÈÿëruüÿuj@ÿuÿuEàPEäèøÿÿÄEÜÇEüþÿÿÿè   }Ü;þt<èmÿÿ8ë¿3ö9uàt+9uÜtEäÁøMäáÁá *A D þÿuäèÛÿÿYÃEäèomÿÿÃÿUìQQV3ö9uuèÉlÿÿVVVVVÇ    èQlÿÿÄÈÿëJ9utÞÿuEøPEüPÿuÿuè|  ÄøÿtØÿuøÿuüÿujèU  ÿuüðèÝoÿÿÿuøèÕoÿÿÄÆ^ÉÃÿUììSW}3Û}ü;ûu èIlÿÿSSSSSÇ    èÑkÿÿÄÈÿéá  8tÜE;ÃtÕ ;ÃtÏ8tËVj\Wè  j/Wðè
  Ä;Ã   ;ó   j:Wè=ïÿÿðYY;óusWèIÿÿðÆjVèMnÿÿøÄ}ü;û­   htô@ VWèkÃÿÿÄÀt
SSSSSèjÿÿÄÿuVWèØÁÿÿÄÀt
SSSSSèõiÿÿÄw}ë
;ót;ÆvðMðÿj.Vèh  YYÀt,Sÿuüè
  YYÀì   ÿuÿuÿuüè`þÿÿÄEðéÓ   ÿuüèÿÿðÆjVèmÿÿÄEø;ÃuÈÿé½   ÿuüVPè¸ÂÿÿÄÀt
SSSSSè`iÿÿÄÿuüèQÿÿø}øYèÚjÿÿ EìEø+÷ðÇEôìA Eôÿ0VWèrÂÿÿÄÀt
SSSSSèiÿÿÄSÿuøè]	  YYÀtmô}ôàA }ÄëèjÿÿÿuMìÿuÿuøèýÿÿÄEðÿuøèÌmÿÿ}Y9}üt	ÿuüè»mÿÿYEð^_[ÉÃÿUììSVW3ÛjSSÿu]ð]ôèÆÿÿEè#ÂÄUìøÿtYjSSÿuèzÆÿÿÈ#ÊÄùÿtAu}+ðúÆ   ;ó¼   »   Sjÿ4á@ Pÿdà@ EüÀuèÇiÿÿÇ    è¼iÿÿ _^[ÉÃh   ÿuè  YYEøÿ|
;órÃëÆPÿuüÿuè¬«ÿÿÄøÿt6+ðúxÓöwÏuðÿuøÿuèF  YYÿuüj ÿ4á@ Pÿ`à@ 3Ûé   èWiÿÿ8uè:iÿÿÇ 
   Îÿuôë½;ûq|;óskSÿuÿuÿuèÅÿÿ#ÂÄøÿDÿÿÿÿuèÖÿÿYPÿ0á@ ÷ØÀ÷ØHEð#ÂUôøÿu)èÛhÿÿÇ 
   èãhÿÿðÿ\à@ uð#uôþÿöþÿÿSÿuìÿuèÿuèÅÿÿ#ÂÄøÿÙþÿÿ3ÀéÙþÿÿÿUìVuVè"ÖÿÿYøÿuèyhÿÿÇ 	   ÈÿëMWÿuj ÿuPÿ á@ øÿÿuÿ\à@ ë3ÀÀtPèihÿÿYÈÿëÆÁø *A æÁæD0 ýÇ_^]ÃÿUìS]VuÆÁø *A æÁæ0A$ÀW¶y¾Àç   Ñøû @  tPû   tBû   t&û   tû   u=I
L1$âÊë'I
L1$âÊëèaë
I
L1$!ÿ_^[u¸   ]Ã÷ØÀ% À   @  ]ÃÿUìEV3ö;ÆuèNgÿÿVVVVVÇ    èÖfÿÿÄjXë

d*A 3À^]ÃÿUììhES3ÛW]ô]ÿ;Ãtøt~ø~	øuÆEÿEEðë8ègÿÿèçfÿÿSSSSSÇ    èofÿÿÄÈÿé®  @8uûH8tÆ  Á8uëVjD^VESPèdJÿÿu5*A Ä;ót+FÿÈÐÁù *A âÁâ8\uNH;óuà;ó@  þ23  4  ÆkÀÀfEÊ·ÀjPèÇhÿÿYYEÌ;Ã  ;ó0EÌH|0]ø~9EøÐàÁúÁà *A PöÂu ëÿÿEøAÇ9uø|ÊEÌ8]ÿt,H3ÒD0þ}þëj_;×}ÿBAÀëäÇEô   èÎeÿÿEÜPEPSÿuÿuôjSSÿuðÿuÿà@ ðÿ\à@ ÿuÌøèñhÿÿY;óu	Wè£eÿÿYëX}uSè4Rÿÿ5á@ 9]ujÿÿuÜÿà@ EìPÿuÜÿà@ ]ìë}uÿuÜÿÖë]ÜÿuàÿÖÃëè(eÿÿÇ    Èÿ^_[ÉÃÿUìì@¡A 3ÅEüMESVW¾xô@ }ð¥¥f¥MÔM3ÛMàM¤jEÈø Mè]Ü]ì]Ä^ëPè2ÿÿÇtY;ÃuìjVuÌè*gÿÿuàYY;Ãu#EèèdÿÿÇ    è dÿÿÇ    Èÿé/  EðPEìSPè¼ÚÿÿÄ;ÃtøuqSSSSSèËbÿÿÄëbEðPè¹ÿÿøGGY}Ð9]ìtÿuìè¤ÿÿøY}ÐEÔ;ÃtOjð _ëPèÿÿÆ|Y;Ãuì¡< A ;ÃuCèíÿÿ£< A ;Ãu5uàÿ6MÜÿèRgÿÿEèYée  Eè}È6;Ãñ   FéU  ]ä8t(ðù=tVèÿÿYMäL¡< A 4Mä:ËuÜMäMØë+8Xt-x:u'x=u!ÀPèÝÿÿYMØD
< A EØÁ8=tÎEØ+EäuÔø}ÀëEðPè¬ÿÿPEðPÿ6è  ÄÀtMÆ9uÝ}ÐjWèeÿÿuàYYMè;Ã2ÿÿÿÿ6èkfÿÿYèúbÿÿÇ    ècÿÿMÜÿÇ    éi  ÇEÄ   ë´PÆ+ÆEÌPVèºÿÿÄÀt
SSSSSè'aÿÿÄÿ7èÿÿtÇë6PEà +ÆEÌPVèIºÿÿÄÀt
SSSSSèñ`ÿÿÄÿ7èãÿÿðÇÆ FY;ÃuÃEè^ÿ09]ÔÍ   }ØEäÏ+ÈQ
< A ÈQVèöºÿÿ+}äÄ÷}Ôë6EÀMèÿ7+ÆPVèÑ¹ÿÿÄÀt
SSSSSèy`ÿÿÄÿ7èkÿÿYtÇ9uÆ9]Äug}ÐEðPWVè¹ÿÿÄÀt
SSSSSè?`ÿÿÄh`ã@ WVè¸ÿÿÄÀt
SSSSSè`ÿÿÄ9]ìtÿuìWVèß·ÿÿÄÀt
SSSSSèü_ÿÿÄ÷;ótEè;0uF¡< A ;ÃtPèÑdÿÿY< A 9]ìt	ÿuìè½dÿÿYEÜMü_^3Í[èIÿÿÉÃÿUìV3ö9uu$èBaÿÿ0è(aÿÿVVVVVÇ    è°`ÿÿÄjXëU÷EùÿÿÿuÓÿuÿ8á@ øÿuÿ\à@ PèaÿÿYèç`ÿÿ ë(¨u"¨töEtèã`ÿÿÇ    èÅ`ÿÿÇ 
   ëÑ3À^]ÃÿUììSÿu3ÛMì]üèlHÿÿM;Ëu(è`ÿÿSSSSSÇ    è`ÿÿÄ8]øtEô`pý3ÀëqVuð9^uÿuQèj  YY8]øtWMôapýëNW¶Â¶øöD7t!A:Ót¶úÁàÇ9EuAÿEüë
9]üë9EuMüA:ÓuÃ_8]øtEô`pýEü^[ÉÃÿUìj ÿuÿuè2ÿÿÿÄ]ÃÿUììS3Û9]u3Àé  ÿuMìèGÿÿEð9Xu&ÿuÿuÿuèÇÔÿÿÄ8]øm  Môapýéa  W};ût9]u.è_ÿÿSSSSSÇ    è_ÿÿÄ8]øtEô`pý¸ÿÿÿé%  Vf¶ÿM·É¶ÑGöDMütC:Óu]üëXÁáf¶ÒfÊ·ÉfñGMüf;prf;pwfpë6f;pr0f;pw*fpë$·UüöAt
f¶  ·Éë·ÊMüfuüMf¶	ÿE·É¶ÑöDMütEU:Óu]üëWÁáf¶ÒfÊÿE·ÉMüf;Hrf;HwfHë6f;Hr0f;Hw*fHë$·UüöAt
f¶  ·Éë·ÊMüfMüf;Îu!f;ót	9]ëþÿÿ8]øtEô`pý3À^_[ÉÃÀàH8]øtðMôapýëçÿUìj ÿuÿuÿuè#þÿÿÄ]ÃÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌUìW}3ÀÉÿò®Á÷ÙïEýò®Ç8t3ÀëÇü_ÉÃ                                                                                                                                                                   ú  °ú  Æú  Üú  îú  û  û  4û  Lû  `û  hû  zû  û  û  ¬û  ¼û  Êû  Üû  ôû  ü  ü  8ü  Vü  jü  zü  ü  ü  ü  ¶ü  Îü  Øü  äü  öü  ý  ý  ý  (ý  8ý  Ný  Zý  jý  ý  ¬ý  Äý  Þý  ôý  þ  þ  *þ  Dþ  Tþ  jþ  þ  þ  þ  ®þ  ¾þ  Ðþ  äþ  ôþ  
ÿ  ÿ  ,ÿ  >ÿ  Pÿ  bÿ  nÿ  |ÿ  ÿ  ¢ÿ  ²ÿ  Âÿ  Ðÿ  âÿ  ôÿ    (  8  J                  ç@ ²A@ 4K@ ÎX@ Ð_@         »¬@ @                 failed to get exit code from process.
  failed to create process.
   %s %s  Could not exec %s   Cannot find Python executable %s
   #!python.exe    #!  Cannot open %s
 -script.py  CorExitProcess  m s c o r e e . d l l   ( n u l l )     (null)             EEE50 P    ( 8PX 700WP        `h````  xpxxxx          ¨!A  "A     	

 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ =   EncodePointer   K E R N E L 3 2 . D L L     DecodePointer   FlsFree FlsSetValue FlsGetValue FlsAlloc    runtime error   
  TLOSS error
   SING error
    DOMAIN error
  R6034
An application has made an attempt to load the C runtime library incorrectly.
Please contact the application's support team for more information.
      R6033
- Attempt to use MSIL code from this assembly during native code initialization
This indicates a bug in your application. It is most likely the result of calling an MSIL-compiled (/clr) function from a native constructor or from DllMain.
  R6032
- not enough space for locale information
      R6031
- Attempt to initialize the CRT more than once.
This indicates a bug in your application.
  R6030
- CRT not initialized
  R6028
- unable to initialize heap
    R6027
- not enough space for lowio initialization
    R6026
- not enough space for stdio initialization
    R6025
- pure virtual function call
   R6024
- not enough space for _onexit/atexit table
    R6019
- unable to open console device
    R6018
- unexpected heap error
    R6017
- unexpected multithread lock error
    R6016
- not enough space for thread data
 
This application has requested the Runtime to terminate it in an unusual way.
Please contact the application's support team for more information.
   R6009
- not enough space for environment
 R6008
- not enough space for arguments
   R6002
- floating point support not loaded
    Microsoft Visual C++ Runtime Library    

  ... <program name unknown>  Runtime Error!

Program:          À         À         À         À         À         À         À         À         À         À         EEE  00P  ('8PW  700PP    (   `h`hhhxppwpp                                                                                                                                                                                                                                                                                             ( ( ( ( (                                     H                                                                                                                                                                                                                                                                                                                                                                                     h ( ( ( (                                     H                                                                                                             H                                       ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ 	

 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ 	

 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿHH:mm:ss    dddd, MMMM dd, yyyy MM/dd/yy    PM  AM  December    November    October September   August  July    June    April   March   February    January Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan Saturday    Friday  Thursday    Wednesday   Tuesday Monday  Sunday  Sat Fri Thu Wed Tue Mon Sun GetProcessWindowStation GetUserObjectInformationA   GetLastActivePopup  GetActiveWindow MessageBoxA USER32.DLL  SunMonTueWedThuFriSat   JanFebMarAprMayJunJulAugSepOctNovDec    CONOUT$ .com    .exe    .bat    .cmd    .\  SystemRoot      H                                                           A Ðô@    Ð7   i                        þÿÿÿ    Ôÿÿÿ    þÿÿÿ    ×@     þÿÿÿ    Èÿÿÿ    þÿÿÿ    ¼#@     þÿÿÿ    Ìÿÿÿ    þÿÿÿ©%@ ½%@     þÿÿÿ    ÿÿÿ    þÿÿÿ<5@ @5@     þÿÿÿ    Ôÿÿÿ    þÿÿÿ    ã:@     þÿÿÿ    Ðÿÿÿ    þÿÿÿ    ±;@     þÿÿÿ    Ìÿÿÿ    þÿÿÿ    ;=@         =@ þÿÿÿ    Ôÿÿÿ    þÿÿÿ    À>@     þÿÿÿ    Ôÿÿÿ    þÿÿÿ    ó?@     þÿÿÿ    Ôÿÿÿ    þÿÿÿA@ 9A@     þÿÿÿ    Ôÿÿÿ    þÿÿÿ    -G@     þÿÿÿ    Ìÿÿÿ    þÿÿÿ    ûJ@     þÿÿÿ    Ôÿÿÿ    þÿÿÿ    kN@     þÿÿÿ    Ôÿÿÿ    þÿÿÿ    ­P@ þÿÿÿ    ¼P@ þÿÿÿ    Øÿÿÿ    þÿÿÿ    oR@ þÿÿÿ    {R@ þÿÿÿ    Ôÿÿÿ    þÿÿÿ    5Y@     þÿÿÿ    Øÿÿÿ    þÿÿÿÛZ@ ïZ@     þÿÿÿ    Øÿÿÿ    þÿÿÿ-[@ 1[@     þÿÿÿ    Àÿÿÿ    þÿÿÿ    ^@     þÿÿÿ    Ðÿÿÿ    þÿÿÿ_@ /_@     þÿÿÿ    Ôÿÿÿ    þÿÿÿ    )j@     þÿÿÿ    Ðÿÿÿ    þÿÿÿ    :l@     þÿÿÿ    Ôÿÿÿ    þÿÿÿ    >y@     þÿÿÿ    Ðÿÿÿ    þÿÿÿ    N@     þÿÿÿ    Ðÿÿÿ    þÿÿÿ    /@     þÿÿÿ    Ìÿÿÿ    þÿÿÿ    $@     þÿÿÿ    Ðÿÿÿ    þÿÿÿ    ½@     þÿÿÿ    Ðÿÿÿ    þÿÿÿ    T¡@     þÿÿÿ    Ôÿÿÿ    þÿÿÿ    Ë¥@     þÿÿÿ    Èÿÿÿ    þÿÿÿ    §@         Í¦@ þÿÿÿ    Ðÿÿÿ    þÿÿÿ    L®@     þÿÿÿ    Ðÿÿÿ    þÿÿÿ    hÂ@     þÿÿÿ    Ìÿÿÿ    þÿÿÿ    Ê@ Tù             à                      ú  °ú  Æú  Üú  îú  û  û  4û  Lû  `û  hû  zû  û  û  ¬û  ¼û  Êû  Üû  ôû  ü  ü  8ü  Vü  jü  zü  ü  ü  ü  ¶ü  Îü  Øü  äü  öü  ý  ý  ý  (ý  8ý  Ný  Zý  jý  ý  ¬ý  Äý  Þý  ôý  þ  þ  *þ  Dþ  Tþ  jþ  þ  þ  þ  ®þ  ¾þ  Ðþ  äþ  ôþ  
ÿ  ÿ  ,ÿ  >ÿ  Pÿ  bÿ  nÿ  |ÿ  ÿ  ¢ÿ  ²ÿ  Âÿ  Ðÿ  âÿ  ôÿ    (  8  J      RGenerateConsoleCtrlEvent  ÆGetExitCodeProcess  nWaitForSingleObject  CreateProcessA  ¯SetConsoleCtrlHandler õGetModuleFileNameA  Ú EnterCriticalSection  ôLeaveCriticalSection  úGetModuleHandleW  +Sleep "GetProcAddress  ExitProcess pGetCommandLineA ðSetHandleCount  >GetStdHandle  ØGetFileType <GetStartupInfoA ¿ DeleteCriticalSection 7TerminateProcess  ªGetCurrentProcess HUnhandledExceptionFilter  SetUnhandledExceptionFilter ÖIsDebuggerPresent çGetLastError  ¦HeapFree  ¢HeapAlloc \GetCPInfo ÅInterlockedIncrement  ÁInterlockedDecrement  SGetACP  GetOEMCP  àIsValidCodePage >TlsGetValue <TlsAlloc  ?TlsSetValue =TlsFree ôSetLastError  ®GetCurrentThreadId  WriteFile öLoadLibraryA  ºInitializeCriticalSectionAndSpinCount KFreeEnvironmentStringsA ÀGetEnvironmentStrings LFreeEnvironmentStringsW WideCharToMultiByte ÂGetEnvironmentStringsW  ¤HeapCreate  aVirtualFree YQueryPerformanceCounter jGetTickCount  «GetCurrentProcessId SGetSystemTimeAsFileTime RtlUnwind ©HeapReAlloc ^VirtualAlloc  GetConsoleCP  GetConsoleMode  BFlushFileBuffers  æLCMapStringA  MultiByteToWideChar èLCMapStringW  @GetStringTypeA  CGetStringTypeW  éGetLocaleInfoA  çSetFilePointer  «HeapSize  D CloseHandle WriteConsoleA GetConsoleOutputCP  WriteConsoleW SetStdHandle  y CreateFileA S CompareStringA  V CompareStringW  ØSetEnvironmentVariableA KERNEL32.dll  nReadFile  ÕSetEndOfFile  &GetProcessHeap  ÊGetFileAttributesA                                                                                                                                                                                                                                                                                                                                                                                                                                  À+A     À+A                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Næ@»±¿Dê#@    lâ@ \â@ ÿÿÿÿ
                                                                                     
      	               	      
                  
               
               !   
   5      A   
   C      P      R   
   S   
   W      Y      l   
   m       p      r   	            
      
      	            
      )      
   ¡      ¤      §   
   ·      Î      ×                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       abcdefghijklmnopqrstuvwxyz      ABCDEFGHIJKLMNOPQRSTUVWXYZ                                                                                                                                                                                                                                                                                                                                                                                                                                                       abcdefghijklmnopqrstuvwxyz      ABCDEFGHIJKLMNOPQRSTUVWXYZ                                                                                                                                     hA ¤  `y!       ¦ß      ¡¥      àü    @~ü    ¨  Á£Ú£                        þ      @þ      µ  Á£Ú£                        þ      Aþ      ¶  Ï¢ä¢ å¢è¢[                 þ      @~¡þ    Q  QÚ^Ú  _ÚjÚ2                 ÓØÞàù  1~þ    lí@ þÿÿÿC                                                                                              A             A             A             A             A                               HA         hë@ ðï@ pñ@ A A    A hA ÿÿÿÿÿÿÿÿ   øè@    Ìè@ 	    è@ 
   è@    Üç@    ¬ç@    ç@    \ç@    $ç@    üæ@    Äæ@    æ@    dæ@    Dæ@    àå@     ¨å@ !   °ä@ "   ä@ x    ä@ y   ðã@ z   àã@ ü   Üã@ ÿ   Ìã@ Î@ Î@ Î@ Î@ Î@ Î@ Î@ Î@ Î@ Î@       x   
          hë@ jí@ ó@ ó@ ó@ ó@ ó@ ó@ ó@ xó@ pó@ hó@ \ó@ Pó@ Hó@ <ó@ 8ó@ 4ó@ 0ó@ ,ó@ (ó@ $ó@  ó@ ó@ ó@ ó@ ó@ ó@ ó@ øò@ ðò@ èò@ (ó@ àò@ Øò@ Ðò@ Äò@ ¼ò@ °ò@ ¤ò@  ò@ ò@ ò@ |ò@ pò@ 	         A .   DA )A )A )A )A )A )A )A )A )A HA    .                                                         p     ðñÿÿ    PST                                                             PDT                                                             ÐA A ÿÿÿÿ        ÿÿÿÿ        þÿÿÿþÿÿÿÿÿÿÿ   ;   Z   x      µ   Ô   ó     0  N  m  ÿÿÿÿ   :   Y   w      ´   Ó   ò     /  M  l                                                                                                                                                                                                          lô@ dô@ \ô@ Tô@                
"""setuptools.errors

Provides exceptions used by setuptools modules.
"""

from distutils.errors import DistutilsError


class RemovedCommandError(DistutilsError, RuntimeError):
    """Error used for commands that have been removed in setuptools.

    Since ``setuptools`` is built on ``distutils``, simply removing a command
    from ``setuptools`` will make the behavior fall back to ``distutils``; this
    error is raised if a command exists in ``distutils`` but has been actively
    removed in ``setuptools``.
    """

from distutils.dep_util import newer_group


# yes, this is was almost entirely copy-pasted from
# 'newer_pairwise()', this is just another convenience
# function.
def newer_pairwise_group(sources_groups, targets):
    """Walk both arguments in parallel, testing if each source group is newer
    than its corresponding target. Returns a pair of lists (sources_groups,
    targets) where sources is newer than target, according to the semantics
    of 'newer_group()'.
    """
    if len(sources_groups) != len(targets):
        raise ValueError(
            "'sources_group' and 'targets' must be the same length")

    # build a pair of lists (sources_groups, targets) where source is newer
    n_sources = []
    n_targets = []
    for i in range(len(sources_groups)):
        if newer_group(sources_groups[i], targets[i]):
            n_sources.append(sources_groups[i])
            n_targets.append(targets[i])

    return n_sources, n_targets

"""
Improved support for Microsoft Visual C++ compilers.

Known supported compilers:
--------------------------
Microsoft Visual C++ 9.0:
    Microsoft Visual C++ Compiler for Python 2.7 (x86, amd64)
    Microsoft Windows SDK 6.1 (x86, x64, ia64)
    Microsoft Windows SDK 7.0 (x86, x64, ia64)

Microsoft Visual C++ 10.0:
    Microsoft Windows SDK 7.1 (x86, x64, ia64)

Microsoft Visual C++ 14.X:
    Microsoft Visual C++ Build Tools 2015 (x86, x64, arm)
    Microsoft Visual Studio Build Tools 2017 (x86, x64, arm, arm64)
    Microsoft Visual Studio Build Tools 2019 (x86, x64, arm, arm64)

This may also support compilers shipped with compatible Visual Studio versions.
"""

import json
from io import open
from os import listdir, pathsep
from os.path import join, isfile, isdir, dirname
import sys
import contextlib
import platform
import itertools
import subprocess
import distutils.errors
from setuptools.extern.packaging.version import LegacyVersion
from setuptools.extern.more_itertools import unique_everseen

from .monkey import get_unpatched

if platform.system() == 'Windows':
    import winreg
    from os import environ
else:
    # Mock winreg and environ so the module can be imported on this platform.

    class winreg:
        HKEY_USERS = None
        HKEY_CURRENT_USER = None
        HKEY_LOCAL_MACHINE = None
        HKEY_CLASSES_ROOT = None

    environ = dict()

_msvc9_suppress_errors = (
    # msvc9compiler isn't available on some platforms
    ImportError,

    # msvc9compiler raises DistutilsPlatformError in some
    # environments. See #1118.
    distutils.errors.DistutilsPlatformError,
)

try:
    from distutils.msvc9compiler import Reg
except _msvc9_suppress_errors:
    pass


def msvc9_find_vcvarsall(version):
    """
    Patched "distutils.msvc9compiler.find_vcvarsall" to use the standalone
    compiler build for Python
    (VCForPython / Microsoft Visual C++ Compiler for Python 2.7).

    Fall back to original behavior when the standalone compiler is not
    available.

    Redirect the path of "vcvarsall.bat".

    Parameters
    ----------
    version: float
        Required Microsoft Visual C++ version.

    Return
    ------
    str
        vcvarsall.bat path
    """
    vc_base = r'Software\%sMicrosoft\DevDiv\VCForPython\%0.1f'
    key = vc_base % ('', version)
    try:
        # Per-user installs register the compiler path here
        productdir = Reg.get_value(key, "installdir")
    except KeyError:
        try:
            # All-user installs on a 64-bit system register here
            key = vc_base % ('Wow6432Node\\', version)
            productdir = Reg.get_value(key, "installdir")
        except KeyError:
            productdir = None

    if productdir:
        vcvarsall = join(productdir, "vcvarsall.bat")
        if isfile(vcvarsall):
            return vcvarsall

    return get_unpatched(msvc9_find_vcvarsall)(version)


def msvc9_query_vcvarsall(ver, arch='x86', *args, **kwargs):
    """
    Patched "distutils.msvc9compiler.query_vcvarsall" for support extra
    Microsoft Visual C++ 9.0 and 10.0 compilers.

    Set environment without use of "vcvarsall.bat".

    Parameters
    ----------
    ver: float
        Required Microsoft Visual C++ version.
    arch: str
        Target architecture.

    Return
    ------
    dict
        environment
    """
    # Try to get environment from vcvarsall.bat (Classical way)
    try:
        orig = get_unpatched(msvc9_query_vcvarsall)
        return orig(ver, arch, *args, **kwargs)
    except distutils.errors.DistutilsPlatformError:
        # Pass error if Vcvarsall.bat is missing
        pass
    except ValueError:
        # Pass error if environment not set after executing vcvarsall.bat
        pass

    # If error, try to set environment directly
    try:
        return EnvironmentInfo(arch, ver).return_env()
    except distutils.errors.DistutilsPlatformError as exc:
        _augment_exception(exc, ver, arch)
        raise


def _msvc14_find_vc2015():
    """Python 3.8 "distutils/_msvccompiler.py" backport"""
    try:
        key = winreg.OpenKey(
            winreg.HKEY_LOCAL_MACHINE,
            r"Software\Microsoft\VisualStudio\SxS\VC7",
            0,
            winreg.KEY_READ | winreg.KEY_WOW64_32KEY
        )
    except OSError:
        return None, None

    best_version = 0
    best_dir = None
    with key:
        for i in itertools.count():
            try:
                v, vc_dir, vt = winreg.EnumValue(key, i)
            except OSError:
                break
            if v and vt == winreg.REG_SZ and isdir(vc_dir):
                try:
                    version = int(float(v))
                except (ValueError, TypeError):
                    continue
                if version >= 14 and version > best_version:
                    best_version, best_dir = version, vc_dir
    return best_version, best_dir


def _msvc14_find_vc2017():
    """Python 3.8 "distutils/_msvccompiler.py" backport

    Returns "15, path" based on the result of invoking vswhere.exe
    If no install is found, returns "None, None"

    The version is returned to avoid unnecessarily changing the function
    result. It may be ignored when the path is not None.

    If vswhere.exe is not available, by definition, VS 2017 is not
    installed.
    """
    root = environ.get("ProgramFiles(x86)") or environ.get("ProgramFiles")
    if not root:
        return None, None

    try:
        path = subprocess.check_output([
            join(root, "Microsoft Visual Studio", "Installer", "vswhere.exe"),
            "-latest",
            "-prerelease",
            "-requiresAny",
            "-requires", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64",
            "-requires", "Microsoft.VisualStudio.Workload.WDExpress",
            "-property", "installationPath",
            "-products", "*",
        ]).decode(encoding="mbcs", errors="strict").strip()
    except (subprocess.CalledProcessError, OSError, UnicodeDecodeError):
        return None, None

    path = join(path, "VC", "Auxiliary", "Build")
    if isdir(path):
        return 15, path

    return None, None


PLAT_SPEC_TO_RUNTIME = {
    'x86': 'x86',
    'x86_amd64': 'x64',
    'x86_arm': 'arm',
    'x86_arm64': 'arm64'
}


def _msvc14_find_vcvarsall(plat_spec):
    """Python 3.8 "distutils/_msvccompiler.py" backport"""
    _, best_dir = _msvc14_find_vc2017()
    vcruntime = None

    if plat_spec in PLAT_SPEC_TO_RUNTIME:
        vcruntime_plat = PLAT_SPEC_TO_RUNTIME[plat_spec]
    else:
        vcruntime_plat = 'x64' if 'amd64' in plat_spec else 'x86'

    if best_dir:
        vcredist = join(best_dir, "..", "..", "redist", "MSVC", "**",
                        vcruntime_plat, "Microsoft.VC14*.CRT",
                        "vcruntime140.dll")
        try:
            import glob
            vcruntime = glob.glob(vcredist, recursive=True)[-1]
        except (ImportError, OSError, LookupError):
            vcruntime = None

    if not best_dir:
        best_version, best_dir = _msvc14_find_vc2015()
        if best_version:
            vcruntime = join(best_dir, 'redist', vcruntime_plat,
                             "Microsoft.VC140.CRT", "vcruntime140.dll")

    if not best_dir:
        return None, None

    vcvarsall = join(best_dir, "vcvarsall.bat")
    if not isfile(vcvarsall):
        return None, None

    if not vcruntime or not isfile(vcruntime):
        vcruntime = None

    return vcvarsall, vcruntime


def _msvc14_get_vc_env(plat_spec):
    """Python 3.8 "distutils/_msvccompiler.py" backport"""
    if "DISTUTILS_USE_SDK" in environ:
        return {
            key.lower(): value
            for key, value in environ.items()
        }

    vcvarsall, vcruntime = _msvc14_find_vcvarsall(plat_spec)
    if not vcvarsall:
        raise distutils.errors.DistutilsPlatformError(
            "Unable to find vcvarsall.bat"
        )

    try:
        out = subprocess.check_output(
            'cmd /u /c "{}" {} && set'.format(vcvarsall, plat_spec),
            stderr=subprocess.STDOUT,
        ).decode('utf-16le', errors='replace')
    except subprocess.CalledProcessError as exc:
        raise distutils.errors.DistutilsPlatformError(
            "Error executing {}".format(exc.cmd)
        ) from exc

    env = {
        key.lower(): value
        for key, _, value in
        (line.partition('=') for line in out.splitlines())
        if key and value
    }

    if vcruntime:
        env['py_vcruntime_redist'] = vcruntime
    return env


def msvc14_get_vc_env(plat_spec):
    """
    Patched "distutils._msvccompiler._get_vc_env" for support extra
    Microsoft Visual C++ 14.X compilers.

    Set environment without use of "vcvarsall.bat".

    Parameters
    ----------
    plat_spec: str
        Target architecture.

    Return
    ------
    dict
        environment
    """

    # Always use backport from CPython 3.8
    try:
        return _msvc14_get_vc_env(plat_spec)
    except distutils.errors.DistutilsPlatformError as exc:
        _augment_exception(exc, 14.0)
        raise


def msvc14_gen_lib_options(*args, **kwargs):
    """
    Patched "distutils._msvccompiler.gen_lib_options" for fix
    compatibility between "numpy.distutils" and "distutils._msvccompiler"
    (for Numpy < 1.11.2)
    """
    if "numpy.distutils" in sys.modules:
        import numpy as np
        if LegacyVersion(np.__version__) < LegacyVersion('1.11.2'):
            return np.distutils.ccompiler.gen_lib_options(*args, **kwargs)
    return get_unpatched(msvc14_gen_lib_options)(*args, **kwargs)


def _augment_exception(exc, version, arch=''):
    """
    Add details to the exception message to help guide the user
    as to what action will resolve it.
    """
    # Error if MSVC++ directory not found or environment not set
    message = exc.args[0]

    if "vcvarsall" in message.lower() or "visual c" in message.lower():
        # Special error message if MSVC++ not installed
        tmpl = 'Microsoft Visual C++ {version:0.1f} or greater is required.'
        message = tmpl.format(**locals())
        msdownload = 'www.microsoft.com/download/details.aspx?id=%d'
        if version == 9.0:
            if arch.lower().find('ia64') > -1:
                # For VC++ 9.0, if IA64 support is needed, redirect user
                # to Windows SDK 7.0.
                # Note: No download link available from Microsoft.
                message += ' Get it with "Microsoft Windows SDK 7.0"'
            else:
                # For VC++ 9.0 redirect user to Vc++ for Python 2.7 :
                # This redirection link is maintained by Microsoft.
                # Contact vspython@microsoft.com if it needs updating.
                message += ' Get it from http://aka.ms/vcpython27'
        elif version == 10.0:
            # For VC++ 10.0 Redirect user to Windows SDK 7.1
            message += ' Get it with "Microsoft Windows SDK 7.1": '
            message += msdownload % 8279
        elif version >= 14.0:
            # For VC++ 14.X Redirect user to latest Visual C++ Build Tools
            message += (' Get it with "Microsoft C++ Build Tools": '
                        r'https://visualstudio.microsoft.com'
                        r'/visual-cpp-build-tools/')

    exc.args = (message, )


class PlatformInfo:
    """
    Current and Target Architectures information.

    Parameters
    ----------
    arch: str
        Target architecture.
    """
    current_cpu = environ.get('processor_architecture', '').lower()

    def __init__(self, arch):
        self.arch = arch.lower().replace('x64', 'amd64')

    @property
    def target_cpu(self):
        """
        Return Target CPU architecture.

        Return
        ------
        str
            Target CPU
        """
        return self.arch[self.arch.find('_') + 1:]

    def target_is_x86(self):
        """
        Return True if target CPU is x86 32 bits..

        Return
        ------
        bool
            CPU is x86 32 bits
        """
        return self.target_cpu == 'x86'

    def current_is_x86(self):
        """
        Return True if current CPU is x86 32 bits..

        Return
        ------
        bool
            CPU is x86 32 bits
        """
        return self.current_cpu == 'x86'

    def current_dir(self, hidex86=False, x64=False):
        """
        Current platform specific subfolder.

        Parameters
        ----------
        hidex86: bool
            return '' and not '\x86' if architecture is x86.
        x64: bool
            return '\x64' and not '\amd64' if architecture is amd64.

        Return
        ------
        str
            subfolder: '\target', or '' (see hidex86 parameter)
        """
        return (
            '' if (self.current_cpu == 'x86' and hidex86) else
            r'\x64' if (self.current_cpu == 'amd64' and x64) else
            r'\%s' % self.current_cpu
        )

    def target_dir(self, hidex86=False, x64=False):
        r"""
        Target platform specific subfolder.

        Parameters
        ----------
        hidex86: bool
            return '' and not '\x86' if architecture is x86.
        x64: bool
            return '\x64' and not '\amd64' if architecture is amd64.

        Return
        ------
        str
            subfolder: '\current', or '' (see hidex86 parameter)
        """
        return (
            '' if (self.target_cpu == 'x86' and hidex86) else
            r'\x64' if (self.target_cpu == 'amd64' and x64) else
            r'\%s' % self.target_cpu
        )

    def cross_dir(self, forcex86=False):
        r"""
        Cross platform specific subfolder.

        Parameters
        ----------
        forcex86: bool
            Use 'x86' as current architecture even if current architecture is
            not x86.

        Return
        ------
        str
            subfolder: '' if target architecture is current architecture,
            '\current_target' if not.
        """
        current = 'x86' if forcex86 else self.current_cpu
        return (
            '' if self.target_cpu == current else
            self.target_dir().replace('\\', '\\%s_' % current)
        )


class RegistryInfo:
    """
    Microsoft Visual Studio related registry information.

    Parameters
    ----------
    platform_info: PlatformInfo
        "PlatformInfo" instance.
    """
    HKEYS = (winreg.HKEY_USERS,
             winreg.HKEY_CURRENT_USER,
             winreg.HKEY_LOCAL_MACHINE,
             winreg.HKEY_CLASSES_ROOT)

    def __init__(self, platform_info):
        self.pi = platform_info

    @property
    def visualstudio(self):
        """
        Microsoft Visual Studio root registry key.

        Return
        ------
        str
            Registry key
        """
        return 'VisualStudio'

    @property
    def sxs(self):
        """
        Microsoft Visual Studio SxS registry key.

        Return
        ------
        str
            Registry key
        """
        return join(self.visualstudio, 'SxS')

    @property
    def vc(self):
        """
        Microsoft Visual C++ VC7 registry key.

        Return
        ------
        str
            Registry key
        """
        return join(self.sxs, 'VC7')

    @property
    def vs(self):
        """
        Microsoft Visual Studio VS7 registry key.

        Return
        ------
        str
            Registry key
        """
        return join(self.sxs, 'VS7')

    @property
    def vc_for_python(self):
        """
        Microsoft Visual C++ for Python registry key.

        Return
        ------
        str
            Registry key
        """
        return r'DevDiv\VCForPython'

    @property
    def microsoft_sdk(self):
        """
        Microsoft SDK registry key.

        Return
        ------
        str
            Registry key
        """
        return 'Microsoft SDKs'

    @property
    def windows_sdk(self):
        """
        Microsoft Windows/Platform SDK registry key.

        Return
        ------
        str
            Registry key
        """
        return join(self.microsoft_sdk, 'Windows')

    @property
    def netfx_sdk(self):
        """
        Microsoft .NET Framework SDK registry key.

        Return
        ------
        str
            Registry key
        """
        return join(self.microsoft_sdk, 'NETFXSDK')

    @property
    def windows_kits_roots(self):
        """
        Microsoft Windows Kits Roots registry key.

        Return
        ------
        str
            Registry key
        """
        return r'Windows Kits\Installed Roots'

    def microsoft(self, key, x86=False):
        """
        Return key in Microsoft software registry.

        Parameters
        ----------
        key: str
            Registry key path where look.
        x86: str
            Force x86 software registry.

        Return
        ------
        str
            Registry key
        """
        node64 = '' if self.pi.current_is_x86() or x86 else 'Wow6432Node'
        return join('Software', node64, 'Microsoft', key)

    def lookup(self, key, name):
        """
        Look for values in registry in Microsoft software registry.

        Parameters
        ----------
        key: str
            Registry key path where look.
        name: str
            Value name to find.

        Return
        ------
        str
            value
        """
        key_read = winreg.KEY_READ
        openkey = winreg.OpenKey
        closekey = winreg.CloseKey
        ms = self.microsoft
        for hkey in self.HKEYS:
            bkey = None
            try:
                bkey = openkey(hkey, ms(key), 0, key_read)
            except (OSError, IOError):
                if not self.pi.current_is_x86():
                    try:
                        bkey = openkey(hkey, ms(key, True), 0, key_read)
                    except (OSError, IOError):
                        continue
                else:
                    continue
            try:
                return winreg.QueryValueEx(bkey, name)[0]
            except (OSError, IOError):
                pass
            finally:
                if bkey:
                    closekey(bkey)


class SystemInfo:
    """
    Microsoft Windows and Visual Studio related system information.

    Parameters
    ----------
    registry_info: RegistryInfo
        "RegistryInfo" instance.
    vc_ver: float
        Required Microsoft Visual C++ version.
    """

    # Variables and properties in this class use originals CamelCase variables
    # names from Microsoft source files for more easy comparison.
    WinDir = environ.get('WinDir', '')
    ProgramFiles = environ.get('ProgramFiles', '')
    ProgramFilesx86 = environ.get('ProgramFiles(x86)', ProgramFiles)

    def __init__(self, registry_info, vc_ver=None):
        self.ri = registry_info
        self.pi = self.ri.pi

        self.known_vs_paths = self.find_programdata_vs_vers()

        # Except for VS15+, VC version is aligned with VS version
        self.vs_ver = self.vc_ver = (
            vc_ver or self._find_latest_available_vs_ver())

    def _find_latest_available_vs_ver(self):
        """
        Find the latest VC version

        Return
        ------
        float
            version
        """
        reg_vc_vers = self.find_reg_vs_vers()

        if not (reg_vc_vers or self.known_vs_paths):
            raise distutils.errors.DistutilsPlatformError(
                'No Microsoft Visual C++ version found')

        vc_vers = set(reg_vc_vers)
        vc_vers.update(self.known_vs_paths)
        return sorted(vc_vers)[-1]

    def find_reg_vs_vers(self):
        """
        Find Microsoft Visual Studio versions available in registry.

        Return
        ------
        list of float
            Versions
        """
        ms = self.ri.microsoft
        vckeys = (self.ri.vc, self.ri.vc_for_python, self.ri.vs)
        vs_vers = []
        for hkey, key in itertools.product(self.ri.HKEYS, vckeys):
            try:
                bkey = winreg.OpenKey(hkey, ms(key), 0, winreg.KEY_READ)
            except (OSError, IOError):
                continue
            with bkey:
                subkeys, values, _ = winreg.QueryInfoKey(bkey)
                for i in range(values):
                    with contextlib.suppress(ValueError):
                        ver = float(winreg.EnumValue(bkey, i)[0])
                        if ver not in vs_vers:
                            vs_vers.append(ver)
                for i in range(subkeys):
                    with contextlib.suppress(ValueError):
                        ver = float(winreg.EnumKey(bkey, i))
                        if ver not in vs_vers:
                            vs_vers.append(ver)
        return sorted(vs_vers)

    def find_programdata_vs_vers(self):
        r"""
        Find Visual studio 2017+ versions from information in
        "C:\ProgramData\Microsoft\VisualStudio\Packages\_Instances".

        Return
        ------
        dict
            float version as key, path as value.
        """
        vs_versions = {}
        instances_dir = \
            r'C:\ProgramData\Microsoft\VisualStudio\Packages\_Instances'

        try:
            hashed_names = listdir(instances_dir)

        except (OSError, IOError):
            # Directory not exists with all Visual Studio versions
            return vs_versions

        for name in hashed_names:
            try:
                # Get VS installation path from "state.json" file
                state_path = join(instances_dir, name, 'state.json')
                with open(state_path, 'rt', encoding='utf-8') as state_file:
                    state = json.load(state_file)
                vs_path = state['installationPath']

                # Raises OSError if this VS installation does not contain VC
                listdir(join(vs_path, r'VC\Tools\MSVC'))

                # Store version and path
                vs_versions[self._as_float_version(
                    state['installationVersion'])] = vs_path

            except (OSError, IOError, KeyError):
                # Skip if "state.json" file is missing or bad format
                continue

        return vs_versions

    @staticmethod
    def _as_float_version(version):
        """
        Return a string version as a simplified float version (major.minor)

        Parameters
        ----------
        version: str
            Version.

        Return
        ------
        float
            version
        """
        return float('.'.join(version.split('.')[:2]))

    @property
    def VSInstallDir(self):
        """
        Microsoft Visual Studio directory.

        Return
        ------
        str
            path
        """
        # Default path
        default = join(self.ProgramFilesx86,
                       'Microsoft Visual Studio %0.1f' % self.vs_ver)

        # Try to get path from registry, if fail use default path
        return self.ri.lookup(self.ri.vs, '%0.1f' % self.vs_ver) or default

    @property
    def VCInstallDir(self):
        """
        Microsoft Visual C++ directory.

        Return
        ------
        str
            path
        """
        path = self._guess_vc() or self._guess_vc_legacy()

        if not isdir(path):
            msg = 'Microsoft Visual C++ directory not found'
            raise distutils.errors.DistutilsPlatformError(msg)

        return path

    def _guess_vc(self):
        """
        Locate Visual C++ for VS2017+.

        Return
        ------
        str
            path
        """
        if self.vs_ver <= 14.0:
            return ''

        try:
            # First search in known VS paths
            vs_dir = self.known_vs_paths[self.vs_ver]
        except KeyError:
            # Else, search with path from registry
            vs_dir = self.VSInstallDir

        guess_vc = join(vs_dir, r'VC\Tools\MSVC')

        # Subdir with VC exact version as name
        try:
            # Update the VC version with real one instead of VS version
            vc_ver = listdir(guess_vc)[-1]
            self.vc_ver = self._as_float_version(vc_ver)
            return join(guess_vc, vc_ver)
        except (OSError, IOError, IndexError):
            return ''

    def _guess_vc_legacy(self):
        """
        Locate Visual C++ for versions prior to 2017.

        Return
        ------
        str
            path
        """
        default = join(self.ProgramFilesx86,
                       r'Microsoft Visual Studio %0.1f\VC' % self.vs_ver)

        # Try to get "VC++ for Python" path from registry as default path
        reg_path = join(self.ri.vc_for_python, '%0.1f' % self.vs_ver)
        python_vc = self.ri.lookup(reg_path, 'installdir')
        default_vc = join(python_vc, 'VC') if python_vc else default

        # Try to get path from registry, if fail use default path
        return self.ri.lookup(self.ri.vc, '%0.1f' % self.vs_ver) or default_vc

    @property
    def WindowsSdkVersion(self):
        """
        Microsoft Windows SDK versions for specified MSVC++ version.

        Return
        ------
        tuple of str
            versions
        """
        if self.vs_ver <= 9.0:
            return '7.0', '6.1', '6.0a'
        elif self.vs_ver == 10.0:
            return '7.1', '7.0a'
        elif self.vs_ver == 11.0:
            return '8.0', '8.0a'
        elif self.vs_ver == 12.0:
            return '8.1', '8.1a'
        elif self.vs_ver >= 14.0:
            return '10.0', '8.1'

    @property
    def WindowsSdkLastVersion(self):
        """
        Microsoft Windows SDK last version.

        Return
        ------
        str
            version
        """
        return self._use_last_dir_name(join(self.WindowsSdkDir, 'lib'))

    @property  # noqa: C901
    def WindowsSdkDir(self):  # noqa: C901  # is too complex (12)  # FIXME
        """
        Microsoft Windows SDK directory.

        Return
        ------
        str
            path
        """
        sdkdir = ''
        for ver in self.WindowsSdkVersion:
            # Try to get it from registry
            loc = join(self.ri.windows_sdk, 'v%s' % ver)
            sdkdir = self.ri.lookup(loc, 'installationfolder')
            if sdkdir:
                break
        if not sdkdir or not isdir(sdkdir):
            # Try to get "VC++ for Python" version from registry
            path = join(self.ri.vc_for_python, '%0.1f' % self.vc_ver)
            install_base = self.ri.lookup(path, 'installdir')
            if install_base:
                sdkdir = join(install_base, 'WinSDK')
        if not sdkdir or not isdir(sdkdir):
            # If fail, use default new path
            for ver in self.WindowsSdkVersion:
                intver = ver[:ver.rfind('.')]
                path = r'Microsoft SDKs\Windows Kits\%s' % intver
                d = join(self.ProgramFiles, path)
                if isdir(d):
                    sdkdir = d
        if not sdkdir or not isdir(sdkdir):
            # If fail, use default old path
            for ver in self.WindowsSdkVersion:
                path = r'Microsoft SDKs\Windows\v%s' % ver
                d = join(self.ProgramFiles, path)
                if isdir(d):
                    sdkdir = d
        if not sdkdir:
            # If fail, use Platform SDK
            sdkdir = join(self.VCInstallDir, 'PlatformSDK')
        return sdkdir

    @property
    def WindowsSDKExecutablePath(self):
        """
        Microsoft Windows SDK executable directory.

        Return
        ------
        str
            path
        """
        # Find WinSDK NetFx Tools registry dir name
        if self.vs_ver <= 11.0:
            netfxver = 35
            arch = ''
        else:
            netfxver = 40
            hidex86 = True if self.vs_ver <= 12.0 else False
            arch = self.pi.current_dir(x64=True, hidex86=hidex86)
        fx = 'WinSDK-NetFx%dTools%s' % (netfxver, arch.replace('\\', '-'))

        # list all possibles registry paths
        regpaths = []
        if self.vs_ver >= 14.0:
            for ver in self.NetFxSdkVersion:
                regpaths += [join(self.ri.netfx_sdk, ver, fx)]

        for ver in self.WindowsSdkVersion:
            regpaths += [join(self.ri.windows_sdk, 'v%sA' % ver, fx)]

        # Return installation folder from the more recent path
        for path in regpaths:
            execpath = self.ri.lookup(path, 'installationfolder')
            if execpath:
                return execpath

    @property
    def FSharpInstallDir(self):
        """
        Microsoft Visual F# directory.

        Return
        ------
        str
            path
        """
        path = join(self.ri.visualstudio, r'%0.1f\Setup\F#' % self.vs_ver)
        return self.ri.lookup(path, 'productdir') or ''

    @property
    def UniversalCRTSdkDir(self):
        """
        Microsoft Universal CRT SDK directory.

        Return
        ------
        str
            path
        """
        # Set Kit Roots versions for specified MSVC++ version
        vers = ('10', '81') if self.vs_ver >= 14.0 else ()

        # Find path of the more recent Kit
        for ver in vers:
            sdkdir = self.ri.lookup(self.ri.windows_kits_roots,
                                    'kitsroot%s' % ver)
            if sdkdir:
                return sdkdir or ''

    @property
    def UniversalCRTSdkLastVersion(self):
        """
        Microsoft Universal C Runtime SDK last version.

        Return
        ------
        str
            version
        """
        return self._use_last_dir_name(join(self.UniversalCRTSdkDir, 'lib'))

    @property
    def NetFxSdkVersion(self):
        """
        Microsoft .NET Framework SDK versions.

        Return
        ------
        tuple of str
            versions
        """
        # Set FxSdk versions for specified VS version
        return (('4.7.2', '4.7.1', '4.7',
                 '4.6.2', '4.6.1', '4.6',
                 '4.5.2', '4.5.1', '4.5')
                if self.vs_ver >= 14.0 else ())

    @property
    def NetFxSdkDir(self):
        """
        Microsoft .NET Framework SDK directory.

        Return
        ------
        str
            path
        """
        sdkdir = ''
        for ver in self.NetFxSdkVersion:
            loc = join(self.ri.netfx_sdk, ver)
            sdkdir = self.ri.lookup(loc, 'kitsinstallationfolder')
            if sdkdir:
                break
        return sdkdir

    @property
    def FrameworkDir32(self):
        """
        Microsoft .NET Framework 32bit directory.

        Return
        ------
        str
            path
        """
        # Default path
        guess_fw = join(self.WinDir, r'Microsoft.NET\Framework')

        # Try to get path from registry, if fail use default path
        return self.ri.lookup(self.ri.vc, 'frameworkdir32') or guess_fw

    @property
    def FrameworkDir64(self):
        """
        Microsoft .NET Framework 64bit directory.

        Return
        ------
        str
            path
        """
        # Default path
        guess_fw = join(self.WinDir, r'Microsoft.NET\Framework64')

        # Try to get path from registry, if fail use default path
        return self.ri.lookup(self.ri.vc, 'frameworkdir64') or guess_fw

    @property
    def FrameworkVersion32(self):
        """
        Microsoft .NET Framework 32bit versions.

        Return
        ------
        tuple of str
            versions
        """
        return self._find_dot_net_versions(32)

    @property
    def FrameworkVersion64(self):
        """
        Microsoft .NET Framework 64bit versions.

        Return
        ------
        tuple of str
            versions
        """
        return self._find_dot_net_versions(64)

    def _find_dot_net_versions(self, bits):
        """
        Find Microsoft .NET Framework versions.

        Parameters
        ----------
        bits: int
            Platform number of bits: 32 or 64.

        Return
        ------
        tuple of str
            versions
        """
        # Find actual .NET version in registry
        reg_ver = self.ri.lookup(self.ri.vc, 'frameworkver%d' % bits)
        dot_net_dir = getattr(self, 'FrameworkDir%d' % bits)
        ver = reg_ver or self._use_last_dir_name(dot_net_dir, 'v') or ''

        # Set .NET versions for specified MSVC++ version
        if self.vs_ver >= 12.0:
            return ver, 'v4.0'
        elif self.vs_ver >= 10.0:
            return 'v4.0.30319' if ver.lower()[:2] != 'v4' else ver, 'v3.5'
        elif self.vs_ver == 9.0:
            return 'v3.5', 'v2.0.50727'
        elif self.vs_ver == 8.0:
            return 'v3.0', 'v2.0.50727'

    @staticmethod
    def _use_last_dir_name(path, prefix=''):
        """
        Return name of the last dir in path or '' if no dir found.

        Parameters
        ----------
        path: str
            Use dirs in this path
        prefix: str
            Use only dirs starting by this prefix

        Return
        ------
        str
            name
        """
        matching_dirs = (
            dir_name
            for dir_name in reversed(listdir(path))
            if isdir(join(path, dir_name)) and
            dir_name.startswith(prefix)
        )
        return next(matching_dirs, None) or ''


class EnvironmentInfo:
    """
    Return environment variables for specified Microsoft Visual C++ version
    and platform : Lib, Include, Path and libpath.

    This function is compatible with Microsoft Visual C++ 9.0 to 14.X.

    Script created by analysing Microsoft environment configuration files like
    "vcvars[...].bat", "SetEnv.Cmd", "vcbuildtools.bat", ...

    Parameters
    ----------
    arch: str
        Target architecture.
    vc_ver: float
        Required Microsoft Visual C++ version. If not set, autodetect the last
        version.
    vc_min_ver: float
        Minimum Microsoft Visual C++ version.
    """

    # Variables and properties in this class use originals CamelCase variables
    # names from Microsoft source files for more easy comparison.

    def __init__(self, arch, vc_ver=None, vc_min_ver=0):
        self.pi = PlatformInfo(arch)
        self.ri = RegistryInfo(self.pi)
        self.si = SystemInfo(self.ri, vc_ver)

        if self.vc_ver < vc_min_ver:
            err = 'No suitable Microsoft Visual C++ version found'
            raise distutils.errors.DistutilsPlatformError(err)

    @property
    def vs_ver(self):
        """
        Microsoft Visual Studio.

        Return
        ------
        float
            version
        """
        return self.si.vs_ver

    @property
    def vc_ver(self):
        """
        Microsoft Visual C++ version.

        Return
        ------
        float
            version
        """
        return self.si.vc_ver

    @property
    def VSTools(self):
        """
        Microsoft Visual Studio Tools.

        Return
        ------
        list of str
            paths
        """
        paths = [r'Common7\IDE', r'Common7\Tools']

        if self.vs_ver >= 14.0:
            arch_subdir = self.pi.current_dir(hidex86=True, x64=True)
            paths += [r'Common7\IDE\CommonExtensions\Microsoft\TestWindow']
            paths += [r'Team Tools\Performance Tools']
            paths += [r'Team Tools\Performance Tools%s' % arch_subdir]

        return [join(self.si.VSInstallDir, path) for path in paths]

    @property
    def VCIncludes(self):
        """
        Microsoft Visual C++ & Microsoft Foundation Class Includes.

        Return
        ------
        list of str
            paths
        """
        return [join(self.si.VCInstallDir, 'Include'),
                join(self.si.VCInstallDir, r'ATLMFC\Include')]

    @property
    def VCLibraries(self):
        """
        Microsoft Visual C++ & Microsoft Foundation Class Libraries.

        Return
        ------
        list of str
            paths
        """
        if self.vs_ver >= 15.0:
            arch_subdir = self.pi.target_dir(x64=True)
        else:
            arch_subdir = self.pi.target_dir(hidex86=True)
        paths = ['Lib%s' % arch_subdir, r'ATLMFC\Lib%s' % arch_subdir]

        if self.vs_ver >= 14.0:
            paths += [r'Lib\store%s' % arch_subdir]

        return [join(self.si.VCInstallDir, path) for path in paths]

    @property
    def VCStoreRefs(self):
        """
        Microsoft Visual C++ store references Libraries.

        Return
        ------
        list of str
            paths
        """
        if self.vs_ver < 14.0:
            return []
        return [join(self.si.VCInstallDir, r'Lib\store\references')]

    @property
    def VCTools(self):
        """
        Microsoft Visual C++ Tools.

        Return
        ------
        list of str
            paths
        """
        si = self.si
        tools = [join(si.VCInstallDir, 'VCPackages')]

        forcex86 = True if self.vs_ver <= 10.0 else False
        arch_subdir = self.pi.cross_dir(forcex86)
        if arch_subdir:
            tools += [join(si.VCInstallDir, 'Bin%s' % arch_subdir)]

        if self.vs_ver == 14.0:
            path = 'Bin%s' % self.pi.current_dir(hidex86=True)
            tools += [join(si.VCInstallDir, path)]

        elif self.vs_ver >= 15.0:
            host_dir = (r'bin\HostX86%s' if self.pi.current_is_x86() else
                        r'bin\HostX64%s')
            tools += [join(
                si.VCInstallDir, host_dir % self.pi.target_dir(x64=True))]

            if self.pi.current_cpu != self.pi.target_cpu:
                tools += [join(
                    si.VCInstallDir, host_dir % self.pi.current_dir(x64=True))]

        else:
            tools += [join(si.VCInstallDir, 'Bin')]

        return tools

    @property
    def OSLibraries(self):
        """
        Microsoft Windows SDK Libraries.

        Return
        ------
        list of str
            paths
        """
        if self.vs_ver <= 10.0:
            arch_subdir = self.pi.target_dir(hidex86=True, x64=True)
            return [join(self.si.WindowsSdkDir, 'Lib%s' % arch_subdir)]

        else:
            arch_subdir = self.pi.target_dir(x64=True)
            lib = join(self.si.WindowsSdkDir, 'lib')
            libver = self._sdk_subdir
            return [join(lib, '%sum%s' % (libver, arch_subdir))]

    @property
    def OSIncludes(self):
        """
        Microsoft Windows SDK Include.

        Return
        ------
        list of str
            paths
        """
        include = join(self.si.WindowsSdkDir, 'include')

        if self.vs_ver <= 10.0:
            return [include, join(include, 'gl')]

        else:
            if self.vs_ver >= 14.0:
                sdkver = self._sdk_subdir
            else:
                sdkver = ''
            return [join(include, '%sshared' % sdkver),
                    join(include, '%sum' % sdkver),
                    join(include, '%swinrt' % sdkver)]

    @property
    def OSLibpath(self):
        """
        Microsoft Windows SDK Libraries Paths.

        Return
        ------
        list of str
            paths
        """
        ref = join(self.si.WindowsSdkDir, 'References')
        libpath = []

        if self.vs_ver <= 9.0:
            libpath += self.OSLibraries

        if self.vs_ver >= 11.0:
            libpath += [join(ref, r'CommonConfiguration\Neutral')]

        if self.vs_ver >= 14.0:
            libpath += [
                ref,
                join(self.si.WindowsSdkDir, 'UnionMetadata'),
                join(
                    ref, 'Windows.Foundation.UniversalApiContract', '1.0.0.0'),
                join(ref, 'Windows.Foundation.FoundationContract', '1.0.0.0'),
                join(
                    ref, 'Windows.Networking.Connectivity.WwanContract',
                    '1.0.0.0'),
                join(
                    self.si.WindowsSdkDir, 'ExtensionSDKs', 'Microsoft.VCLibs',
                    '%0.1f' % self.vs_ver, 'References', 'CommonConfiguration',
                    'neutral'),
            ]
        return libpath

    @property
    def SdkTools(self):
        """
        Microsoft Windows SDK Tools.

        Return
        ------
        list of str
            paths
        """
        return list(self._sdk_tools())

    def _sdk_tools(self):
        """
        Microsoft Windows SDK Tools paths generator.

        Return
        ------
        generator of str
            paths
        """
        if self.vs_ver < 15.0:
            bin_dir = 'Bin' if self.vs_ver <= 11.0 else r'Bin\x86'
            yield join(self.si.WindowsSdkDir, bin_dir)

        if not self.pi.current_is_x86():
            arch_subdir = self.pi.current_dir(x64=True)
            path = 'Bin%s' % arch_subdir
            yield join(self.si.WindowsSdkDir, path)

        if self.vs_ver in (10.0, 11.0):
            if self.pi.target_is_x86():
                arch_subdir = ''
            else:
                arch_subdir = self.pi.current_dir(hidex86=True, x64=True)
            path = r'Bin\NETFX 4.0 Tools%s' % arch_subdir
            yield join(self.si.WindowsSdkDir, path)

        elif self.vs_ver >= 15.0:
            path = join(self.si.WindowsSdkDir, 'Bin')
            arch_subdir = self.pi.current_dir(x64=True)
            sdkver = self.si.WindowsSdkLastVersion
            yield join(path, '%s%s' % (sdkver, arch_subdir))

        if self.si.WindowsSDKExecutablePath:
            yield self.si.WindowsSDKExecutablePath

    @property
    def _sdk_subdir(self):
        """
        Microsoft Windows SDK version subdir.

        Return
        ------
        str
            subdir
        """
        ucrtver = self.si.WindowsSdkLastVersion
        return ('%s\\' % ucrtver) if ucrtver else ''

    @property
    def SdkSetup(self):
        """
        Microsoft Windows SDK Setup.

        Return
        ------
        list of str
            paths
        """
        if self.vs_ver > 9.0:
            return []

        return [join(self.si.WindowsSdkDir, 'Setup')]

    @property
    def FxTools(self):
        """
        Microsoft .NET Framework Tools.

        Return
        ------
        list of str
            paths
        """
        pi = self.pi
        si = self.si

        if self.vs_ver <= 10.0:
            include32 = True
            include64 = not pi.target_is_x86() and not pi.current_is_x86()
        else:
            include32 = pi.target_is_x86() or pi.current_is_x86()
            include64 = pi.current_cpu == 'amd64' or pi.target_cpu == 'amd64'

        tools = []
        if include32:
            tools += [join(si.FrameworkDir32, ver)
                      for ver in si.FrameworkVersion32]
        if include64:
            tools += [join(si.FrameworkDir64, ver)
                      for ver in si.FrameworkVersion64]
        return tools

    @property
    def NetFxSDKLibraries(self):
        """
        Microsoft .Net Framework SDK Libraries.

        Return
        ------
        list of str
            paths
        """
        if self.vs_ver < 14.0 or not self.si.NetFxSdkDir:
            return []

        arch_subdir = self.pi.target_dir(x64=True)
        return [join(self.si.NetFxSdkDir, r'lib\um%s' % arch_subdir)]

    @property
    def NetFxSDKIncludes(self):
        """
        Microsoft .Net Framework SDK Includes.

        Return
        ------
        list of str
            paths
        """
        if self.vs_ver < 14.0 or not self.si.NetFxSdkDir:
            return []

        return [join(self.si.NetFxSdkDir, r'include\um')]

    @property
    def VsTDb(self):
        """
        Microsoft Visual Studio Team System Database.

        Return
        ------
        list of str
            paths
        """
        return [join(self.si.VSInstallDir, r'VSTSDB\Deploy')]

    @property
    def MSBuild(self):
        """
        Microsoft Build Engine.

        Return
        ------
        list of str
            paths
        """
        if self.vs_ver < 12.0:
            return []
        elif self.vs_ver < 15.0:
            base_path = self.si.ProgramFilesx86
            arch_subdir = self.pi.current_dir(hidex86=True)
        else:
            base_path = self.si.VSInstallDir
            arch_subdir = ''

        path = r'MSBuild\%0.1f\bin%s' % (self.vs_ver, arch_subdir)
        build = [join(base_path, path)]

        if self.vs_ver >= 15.0:
            # Add Roslyn C# & Visual Basic Compiler
            build += [join(base_path, path, 'Roslyn')]

        return build

    @property
    def HTMLHelpWorkshop(self):
        """
        Microsoft HTML Help Workshop.

        Return
        ------
        list of str
            paths
        """
        if self.vs_ver < 11.0:
            return []

        return [join(self.si.ProgramFilesx86, 'HTML Help Workshop')]

    @property
    def UCRTLibraries(self):
        """
        Microsoft Universal C Runtime SDK Libraries.

        Return
        ------
        list of str
            paths
        """
        if self.vs_ver < 14.0:
            return []

        arch_subdir = self.pi.target_dir(x64=True)
        lib = join(self.si.UniversalCRTSdkDir, 'lib')
        ucrtver = self._ucrt_subdir
        return [join(lib, '%sucrt%s' % (ucrtver, arch_subdir))]

    @property
    def UCRTIncludes(self):
        """
        Microsoft Universal C Runtime SDK Include.

        Return
        ------
        list of str
            paths
        """
        if self.vs_ver < 14.0:
            return []

        include = join(self.si.UniversalCRTSdkDir, 'include')
        return [join(include, '%sucrt' % self._ucrt_subdir)]

    @property
    def _ucrt_subdir(self):
        """
        Microsoft Universal C Runtime SDK version subdir.

        Return
        ------
        str
            subdir
        """
        ucrtver = self.si.UniversalCRTSdkLastVersion
        return ('%s\\' % ucrtver) if ucrtver else ''

    @property
    def FSharp(self):
        """
        Microsoft Visual F#.

        Return
        ------
        list of str
            paths
        """
        if 11.0 > self.vs_ver > 12.0:
            return []

        return [self.si.FSharpInstallDir]

    @property
    def VCRuntimeRedist(self):
        """
        Microsoft Visual C++ runtime redistributable dll.

        Return
        ------
        str
            path
        """
        vcruntime = 'vcruntime%d0.dll' % self.vc_ver
        arch_subdir = self.pi.target_dir(x64=True).strip('\\')

        # Installation prefixes candidates
        prefixes = []
        tools_path = self.si.VCInstallDir
        redist_path = dirname(tools_path.replace(r'\Tools', r'\Redist'))
        if isdir(redist_path):
            # Redist version may not be exactly the same as tools
            redist_path = join(redist_path, listdir(redist_path)[-1])
            prefixes += [redist_path, join(redist_path, 'onecore')]

        prefixes += [join(tools_path, 'redist')]  # VS14 legacy path

        # CRT directory
        crt_dirs = ('Microsoft.VC%d.CRT' % (self.vc_ver * 10),
                    # Sometime store in directory with VS version instead of VC
                    'Microsoft.VC%d.CRT' % (int(self.vs_ver) * 10))

        # vcruntime path
        for prefix, crt_dir in itertools.product(prefixes, crt_dirs):
            path = join(prefix, arch_subdir, crt_dir, vcruntime)
            if isfile(path):
                return path

    def return_env(self, exists=True):
        """
        Return environment dict.

        Parameters
        ----------
        exists: bool
            It True, only return existing paths.

        Return
        ------
        dict
            environment
        """
        env = dict(
            include=self._build_paths('include',
                                      [self.VCIncludes,
                                       self.OSIncludes,
                                       self.UCRTIncludes,
                    