mptote', 'asy'), ('*.asy',), ('text/x-asymptote',)),
    'AugeasLexer': ('pip._vendor.pygments.lexers.configs', 'Augeas', ('augeas',), ('*.aug',), ()),
    'AutoItLexer': ('pip._vendor.pygments.lexers.automation', 'AutoIt', ('autoit',), ('*.au3',), ('text/x-autoit',)),
    'AutohotkeyLexer': ('pip._vendor.pygments.lexers.automation', 'autohotkey', ('autohotkey', 'ahk'), ('*.ahk', '*.ahkl'), ('text/x-autohotkey',)),
    'AwkLexer': ('pip._vendor.pygments.lexers.textedit', 'Awk', ('awk', 'gawk', 'mawk', 'nawk'), ('*.awk',), ('application/x-awk',)),
    'BBCBasicLexer': ('pip._vendor.pygments.lexers.basic', 'BBC Basic', ('bbcbasic',), ('*.bbc',), ()),
    'BBCodeLexer': ('pip._vendor.pygments.lexers.markup', 'BBCode', ('bbcode',), (), ('text/x-bbcode',)),
    'BCLexer': ('pip._vendor.pygments.lexers.algebra', 'BC', ('bc',), ('*.bc',), ()),
    'BQNLexer': ('pip._vendor.pygments.lexers.bqn', 'BQN', ('bqn',), ('*.bqn',), ()),
    'BSTLexer': ('pip._vendor.pygments.lexers.bibtex', 'BST', ('bst', 'bst-pybtex'), ('*.bst',), ()),
    'BareLexer': ('pip._vendor.pygments.lexers.bare', 'BARE', ('bare',), ('*.bare',), ()),
    'BaseMakefileLexer': ('pip._vendor.pygments.lexers.make', 'Base Makefile', ('basemake',), (), ()),
    'BashLexer': ('pip._vendor.pygments.lexers.shell', 'Bash', ('bash', 'sh', 'ksh', 'zsh', 'shell', 'openrc'), ('*.sh', '*.ksh', '*.bash', '*.ebuild', '*.eclass', '*.exheres-0', '*.exlib', '*.zsh', '.bashrc', 'bashrc', '.bash_*', 'bash_*', 'zshrc', '.zshrc', '.kshrc', 'kshrc', 'PKGBUILD'), ('application/x-sh', 'application/x-shellscript', 'text/x-shellscript')),
    'BashSessionLexer': ('pip._vendor.pygments.lexers.shell', 'Bash Session', ('console', 'shell-session'), ('*.sh-session', '*.shell-session'), ('application/x-shell-session', 'application/x-sh-session')),
    'BatchLexer': ('pip._vendor.pygments.lexers.shell', 'Batchfile', ('batch', 'bat', 'dosbatch', 'winbatch'), ('*.bat', '*.cmd'), ('application/x-dos-batch',)),
    'BddLexer': ('pip._vendor.pygments.lexers.bdd', 'Bdd', ('bdd',), ('*.feature',), ('text/x-bdd',)),
    'BefungeLexer': ('pip._vendor.pygments.lexers.esoteric', 'Befunge', ('befunge',), ('*.befunge',), ('application/x-befunge',)),
    'BerryLexer': ('pip._vendor.pygments.lexers.berry', 'Berry', ('berry', 'be'), ('*.be',), ('text/x-berry', 'application/x-berry')),
    'BibTeXLexer': ('pip._vendor.pygments.lexers.bibtex', 'BibTeX', ('bibtex', 'bib'), ('*.bib',), ('text/x-bibtex',)),
    'BlitzBasicLexer': ('pip._vendor.pygments.lexers.basic', 'BlitzBasic', ('blitzbasic', 'b3d', 'bplus'), ('*.bb', '*.decls'), ('text/x-bb',)),
    'BlitzMaxLexer': ('pip._vendor.pygments.lexers.basic', 'BlitzMax', ('blitzmax', 'bmax'), ('*.bmx',), ('text/x-bmx',)),
    'BlueprintLexer': ('pip._vendor.pygments.lexers.blueprint', 'Blueprint', ('blueprint',), ('*.blp',), ('text/x-blueprint',)),
    'BnfLexer': ('pip._vendor.pygments.lexers.grammar_notation', 'BNF', ('bnf',), ('*.bnf',), ('text/x-bnf',)),
    'BoaLexer': ('pip._vendor.pygments.lexers.boa', 'Boa', ('boa',), ('*.boa',), ()),
    'BooLexer': ('pip._vendor.pygments.lexers.dotnet', 'Boo', ('boo',), ('*.boo',), ('text/x-boo',)),
    'BoogieLexer': ('pip._vendor.pygments.lexers.verification', 'Boogie', ('boogie',), ('*.bpl',), ()),
    'BrainfuckLexer': ('pip._vendor.pygments.lexers.esoteric', 'Brainfuck', ('brainfuck', 'bf'), ('*.bf', '*.b'), ('application/x-brainfuck',)),
    'BugsLexer': ('pip._vendor.pygments.lexers.modeling', 'BUGS', ('bugs', 'winbugs', 'openbugs'), ('*.bug',), ()),
    'CAmkESLexer': ('pip._vendor.pygments.lexers.esoteric', 'CAmkES', ('camkes', 'idl4'), ('*.camkes', '*.idl4'), ()),
    'CLexer': ('pip._vendor.pygments.lexers.c_cpp', 'C', ('c',), ('*.c', '*.h', '*.idc', '*.x[bp]m'), ('text/x-chdr', 'text/x-csrc', 'image/x-xbitmap', 'image/x-xpixmap')),
    'CMakeLexer': ('pip._vendor.pygments.lexers.make', 'CMake', ('cmake',), ('*.cmake', 'CMakeLists.txt'), ('text/x-cmake',)),
    'CObjdumpLexer': ('pip._vendor.pygments.lexers.asm', 'c-objdump', ('c-objdump',), ('*.c-objdump',), ('text/x-c-objdump',)),
    'CPSALexer': ('pip._vendor.pygments.lexers.lisp', 'CPSA', ('cpsa',), ('*.cpsa',), ()),
    'CSSUL4Lexer': ('pip._vendor.pygments.lexers.ul4', 'CSS+UL4', ('css+ul4',), ('*.cssul4',), ()),
    'CSharpAspxLexer': ('pip._vendor.pygments.lexers.dotnet', 'aspx-cs', ('aspx-cs',), ('*.aspx', '*.asax', '*.ascx', '*.ashx', '*.asmx', '*.axd'), ()),
    'CSharpLexer': ('pip._vendor.pygments.lexers.dotnet', 'C#', ('csharp', 'c#', 'cs'), ('*.cs',), ('text/x-csharp',)),
    'Ca65Lexer': ('pip._vendor.pygments.lexers.asm', 'ca65 assembler', ('ca65',), ('*.s',), ()),
    'CadlLexer': ('pip._vendor.pygments.lexers.archetype', 'cADL', ('cadl',), ('*.cadl',), ()),
    'CapDLLexer': ('pip._vendor.pygments.lexers.esoteric', 'CapDL', ('capdl',), ('*.cdl',), ()),
    'CapnProtoLexer': ('pip._vendor.pygments.lexers.capnproto', "Cap'n Proto", ('capnp',), ('*.capnp',), ()),
    'CarbonLexer': ('pip._vendor.pygments.lexers.carbon', 'Carbon', ('carbon',), ('*.carbon',), ('text/x-carbon',)),
    'CbmBasicV2Lexer': ('pip._vendor.pygments.lexers.basic', 'CBM BASIC V2', ('cbmbas',), ('*.bas',), ()),
    'CddlLexer': ('pip._vendor.pygments.lexers.cddl', 'CDDL', ('cddl',), ('*.cddl',), ('text/x-cddl',)),
    'CeylonLexer': ('pip._vendor.pygments.lexers.jvm', 'Ceylon', ('ceylon',), ('*.ceylon',), ('text/x-ceylon',)),
    'Cfengine3Lexer': ('pip._vendor.pygments.lexers.configs', 'CFEngine3', ('cfengine3', 'cf3'), ('*.cf',), ()),
    'ChaiscriptLexer': ('pip._vendor.pygments.lexers.scripting', 'ChaiScript', ('chaiscript', 'chai'), ('*.chai',), ('text/x-chaiscript', 'application/x-chaiscript')),
    'ChapelLexer': ('pip._vendor.pygments.lexers.chapel', 'Chapel', ('chapel', 'chpl'), ('*.chpl',), ()),
    'CharmciLexer': ('pip._vendor.pygments.lexers.c_like', 'Charmci', ('charmci',), ('*.ci',), ()),
    'CheetahHtmlLexer': ('pip._vendor.pygments.lexers.templates', 'HTML+Cheetah', ('html+cheetah', 'html+spitfire', 'htmlcheetah'), (), ('text/html+cheetah', 'text/html+spitfire')),
    'CheetahJavascriptLexer': ('pip._vendor.pygments.lexers.templates', 'JavaScript+Cheetah', ('javascript+cheetah', 'js+cheetah', 'javascript+spitfire', 'js+spitfire'), (), ('application/x-javascript+cheetah', 'text/x-javascript+cheetah', 'text/javascript+cheetah', 'application/x-javascript+spitfire', 'text/x-javascript+spitfire', 'text/javascript+spitfire')),
    'CheetahLexer': ('pip._vendor.pygments.lexers.templates', 'Cheetah', ('cheetah', 'spitfire'), ('*.tmpl', '*.spt'), ('application/x-cheetah', 'application/x-spitfire')),
    'CheetahXmlLexer': ('pip._vendor.pygments.lexers.templates', 'XML+Cheetah', ('xml+cheetah', 'xml+spitfire'), (), ('application/xml+cheetah', 'application/xml+spitfire')),
    'CirruLexer': ('pip._vendor.pygments.lexers.webmisc', 'Cirru', ('cirru',), ('*.cirru',), ('text/x-cirru',)),
    'ClayLexer': ('pip._vendor.pygments.lexers.c_like', 'Clay', ('clay',), ('*.clay',), ('text/x-clay',)),
    'CleanLexer': ('pip._vendor.pygments.lexers.clean', 'Clean', ('clean',), ('*.icl', '*.dcl'), ()),
    'ClojureLexer': ('pip._vendor.pygments.lexers.jvm', 'Clojure', ('clojure', 'clj'), ('*.clj', '*.cljc'), ('text/x-clojure', 'application/x-clojure')),
    'ClojureScriptLexer': ('pip._vendor.pygments.lexers.jvm', 'ClojureScript', ('clojurescript', 'cljs'), ('*.cljs',), ('text/x-clojurescript', 'application/x-clojurescript')),
    'CobolFreeformatLexer': ('pip._vendor.pygments.lexers.business', 'COBOLFree', ('cobolfree',), ('*.cbl', '*.CBL'), ()),
    'CobolLexer': ('pip._vendor.pygments.lexers.business', 'COBOL', ('cobol',), ('*.cob', '*.COB', '*.cpy', '*.CPY'), ('text/x-cobol',)),
    'CoffeeScriptLexer': ('pip._vendor.pygments.lexers.javascript', 'CoffeeScript', ('coffeescript', 'coffee-script', 'coffee'), ('*.coffee',), ('text/coffeescript',)),
    'ColdfusionCFCLexer': ('pip._vendor.pygments.lexers.templates', 'Coldfusion CFC', ('cfc',), ('*.cfc',), ()),
    'ColdfusionHtmlLexer': ('pip._vendor.pygments.lexers.templates', 'Coldfusion HTML', ('cfm',), ('*.cfm', '*.cfml'), ('application/x-coldfusion',)),
    'ColdfusionLexer': ('pip._vendor.pygments.lexers.templates', 'cfstatement', ('cfs',), (), ()),
    'Comal80Lexer': ('pip._vendor.pygments.lexers.comal', 'COMAL-80', ('comal', 'comal80'), ('*.cml', '*.comal'), ()),
    'CommonLispLexer': ('pip._vendor.pygments.lexers.lisp', 'Common Lisp', ('common-lisp', 'cl', 'lisp'), ('*.cl', '*.lisp'), ('text/x-common-lisp',)),
    'ComponentPascalLexer': ('pip._vendor.pygments.lexers.oberon', 'Component Pascal', ('componentpascal', 'cp'), ('*.cp', '*.cps'), ('text/x-component-pascal',)),
    'CoqLexer': ('pip._vendor.pygments.lexers.theorem', 'Coq', ('coq',), ('*.v',), ('text/x-coq',)),
    'CplintLexer': ('pip._vendor.pygments.lexers.cplint', 'cplint', ('cplint',), ('*.ecl', '*.prolog', '*.pro', '*.pl', '*.P', '*.lpad', '*.cpl'), ('text/x-cplint',)),
    'CppLexer': ('pip._vendor.pygments.lexers.c_cpp', 'C++', ('cpp', 'c++'), ('*.cpp', '*.hpp', '*.c++', '*.h++', '*.cc', '*.hh', '*.cxx', '*.hxx', '*.C', '*.H', '*.cp', '*.CPP', '*.tpp'), ('text/x-c++hdr', 'text/x-c++src')),
    'CppObjdumpLexer': ('pip._vendor.pygments.lexers.asm', 'cpp-objdump', ('cpp-objdump', 'c++-objdumb', 'cxx-objdump'), ('*.cpp-objdump', '*.c++-objdump', '*.cxx-objdump'), ('text/x-cpp-objdump',)),
    'CrmshLexer': ('pip._vendor.pygments.lexers.dsls', 'Crmsh', ('crmsh', 'pcmk'), ('*.crmsh', '*.pcmk'), ()),
    'CrocLexer': ('pip._vendor.pygments.lexers.d', 'Croc', ('croc',), ('*.croc',), ('text/x-crocsrc',)),
    'CryptolLexer': ('pip._vendor.pygments.lexers.haskell', 'Cryptol', ('cryptol', 'cry'), ('*.cry',), ('text/x-cryptol',)),
    'CrystalLexer': ('pip._vendor.pygments.lexers.crystal', 'Crystal', ('cr', 'crystal'), ('*.cr',), ('text/x-crystal',)),
    'CsoundDocumentLexer': ('pip._vendor.pygments.lexers.csound', 'Csound Document', ('csound-document', 'csound-csd'), ('*.csd',), ()),
    'CsoundOrchestraLexer': ('pip._vendor.pygments.lexers.csound', 'Csound Orchestra', ('csound', 'csound-orc'), ('*.orc', '*.udo'), ()),
    'CsoundScoreLexer': ('pip._vendor.pygments.lexers.csound', 'Csound Score', ('csound-score', 'csound-sco'), ('*.sco',), ()),
    'CssDjangoLexer': ('pip._vendor.pygments.lexers.templates', 'CSS+Django/Jinja', ('css+django', 'css+jinja'), ('*.css.j2', '*.css.jinja2'), ('text/css+django', 'text/css+jinja')),
    'CssErbLexer': ('pip._vendor.pygments.lexers.templates', 'CSS+Ruby', ('css+ruby', 'css+erb'), (), ('text/css+ruby',)),
    'CssGenshiLexer': ('pip._vendor.pygments.lexers.templates', 'CSS+Genshi Text', ('css+genshitext', 'css+genshi'), (), ('text/css+genshi',)),
    'CssLexer': ('pip._vendor.pygments.lexers.css', 'CSS', ('css',), ('*.css',), ('text/css',)),
    'CssPhpLexer': ('pip._vendor.pygments.lexers.templates', 'CSS+PHP', ('css+php',), (), ('text/css+php',)),
    'CssSmartyLexer': ('pip._vendor.pygments.lexers.templates', 'CSS+Smarty', ('css+smarty',), (), ('text/css+smarty',)),
    'CudaLexer': ('pip._vendor.pygments.lexers.c_like', 'CUDA', ('cuda', 'cu'), ('*.cu', '*.cuh'), ('text/x-cuda',)),
    'CypherLexer': ('pip._vendor.pygments.lexers.graph', 'Cypher', ('cypher',), ('*.cyp', '*.cypher'), ()),
    'CythonLexer': ('pip._vendor.pygments.lexers.python', 'Cython', ('cython', 'pyx', 'pyrex'), ('*.pyx', '*.pxd', '*.pxi'), ('text/x-cython', 'application/x-cython')),
    'DLexer': ('pip._vendor.pygments.lexers.d', 'D', ('d',), ('*.d', '*.di'), ('text/x-dsrc',)),
    'DObjdumpLexer': ('pip._vendor.pygments.lexers.asm', 'd-objdump', ('d-objdump',), ('*.d-objdump',), ('text/x-d-objdump',)),
    'DarcsPatchLexer': ('pip._vendor.pygments.lexers.diff', 'Darcs Patch', ('dpatch',), ('*.dpatch', '*.darcspatch'), ()),
    'DartLexer': ('pip._vendor.pygments.lexers.javascript', 'Dart', ('dart',), ('*.dart',), ('text/x-dart',)),
    'Dasm16Lexer': ('pip._vendor.pygments.lexers.asm', 'DASM16', ('dasm16',), ('*.dasm16', '*.dasm'), ('text/x-dasm16',)),
    'DaxLexer': ('pip._vendor.pygments.lexers.dax', 'Dax', ('dax',), ('*.dax',), ()),
    'DebianControlLexer': ('pip._vendor.pygments.lexers.installers', 'Debian Control file', ('debcontrol', 'control'), ('control',), ()),
    'DelphiLexer': ('pip._vendor.pygments.lexers.pascal', 'Delphi', ('delphi', 'pas', 'pascal', 'objectpascal'), ('*.pas', '*.dpr'), ('text/x-pascal',)),
    'DesktopLexer': ('pip._vendor.pygments.lexers.configs', 'Desktop file', ('desktop',), ('*.desktop',), ('application/x-desktop',)),
    'DevicetreeLexer': ('pip._vendor.pygments.lexers.devicetree', 'Devicetree', ('devicetree', 'dts'), ('*.dts', '*.dtsi'), ('text/x-c',)),
    'DgLexer': ('pip._vendor.pygments.lexers.python', 'dg', ('dg',), ('*.dg',), ('text/x-dg',)),
    'DiffLexer': ('pip._vendor.pygments.lexers.diff', 'Diff', ('diff', 'udiff'), ('*.diff', '*.patch'), ('text/x-diff', 'text/x-patch')),
    'DjangoLexer': ('pip._vendor.pygments.lexers.templates', 'Django/Jinja', ('django', 'jinja'), (), ('application/x-django-templating', 'application/x-jinja')),
    'DnsZoneLexer': ('pip._vendor.pygments.lexers.dns', 'Zone', ('zone',), ('*.zone',), ('text/dns',)),
    'DockerLexer': ('pip._vendor.pygments.lexers.configs', 'Docker', ('docker', 'dockerfile'), ('Dockerfile', '*.docker'), ('text/x-dockerfile-config',)),
    'DtdLexer': ('pip._vendor.pygments.lexers.html', 'DTD', ('dtd',), ('*.dtd',), ('application/xml-dtd',)),
    'DuelLexer': ('pip._vendor.pygments.lexers.webmisc', 'Duel', ('duel', 'jbst', 'jsonml+bst'), ('*.duel', '*.jbst'), ('text/x-duel', 'text/x-jbst')),
    'DylanConsoleLexer': ('pip._vendor.pygments.lexers.dylan', 'Dylan session', ('dylan-console', 'dylan-repl'), ('*.dylan-console',), ('text/x-dylan-console',)),
    'DylanLexer': ('pip._vendor.pygments.lexers.dylan', 'Dylan', ('dylan',), ('*.dylan', '*.dyl', '*.intr'), ('text/x-dylan',)),
    'DylanLidLexer': ('pip._vendor.pygments.lexers.dylan', 'DylanLID', ('dylan-lid', 'lid'), ('*.lid', '*.hdp'), ('text/x-dylan-lid',)),
    'ECLLexer': ('pip._vendor.pygments.lexers.ecl', 'ECL', ('ecl',), ('*.ecl',), ('application/x-ecl',)),
    'ECLexer': ('pip._vendor.pygments.lexers.c_like', 'eC', ('ec',), ('*.ec', '*.eh'), ('text/x-echdr', 'text/x-ecsrc')),
    'EarlGreyLexer': ('pip._vendor.pygments.lexers.javascript', 'Earl Grey', ('earl-grey', 'earlgrey', 'eg'), ('*.eg',), ('text/x-earl-grey',)),
    'EasytrieveLexer': ('pip._vendor.pygments.lexers.scripting', 'Easytrieve', ('easytrieve',), ('*.ezt', '*.mac'), ('text/x-easytrieve',)),
    'EbnfLexer': ('pip._vendor.pygments.lexers.parsers', 'EBNF', ('ebnf',), ('*.ebnf',), ('text/x-ebnf',)),
    'EiffelLexer': ('pip._vendor.pygments.lexers.eiffel', 'Eiffel', ('eiffel',), ('*.e',), ('text/x-eiffel',)),
    'ElixirConsoleLexer': ('pip._vendor.pygments.lexers.erlang', 'Elixir iex session', ('iex',), (), ('text/x-elixir-shellsession',)),
    'ElixirLexer': ('pip._vendor.pygments.lexers.erlang', 'Elixir', ('elixir', 'ex', 'exs'), ('*.ex', '*.eex', '*.exs', '*.leex'), ('text/x-elixir',)),
    'ElmLexer': ('pip._vendor.pygments.lexers.elm', 'Elm', ('elm',), ('*.elm',), ('text/x-elm',)),
    'ElpiLexer': ('pip._vendor.pygments.lexers.elpi', 'Elpi', ('elpi',), ('*.elpi',), ('text/x-elpi',)),
    'EmacsLispLexer': ('pip._vendor.pygments.lexers.lisp', 'EmacsLisp', ('emacs-lisp', 'elisp', 'emacs'), ('*.el',), ('text/x-elisp', 'application/x-elisp')),
    'EmailLexer': ('pip._vendor.pygments.lexers.email', 'E-mail', ('email', 'eml'), ('*.eml',), ('message/rfc822',)),
    'ErbLexer': ('pip._vendor.pygments.lexers.templates', 'ERB', ('erb',), (), ('application/x-ruby-templating',)),
    'ErlangLexer': ('pip._vendor.pygments.lexers.erlang', 'Erlang', ('erlang',), ('*.erl', '*.hrl', '*.es', '*.escript'), ('text/x-erlang',)),
    'ErlangShellLexer': ('pip._vendor.pygments.lexers.erlang', 'Erlang erl session', ('erl',), ('*.erl-sh',), ('text/x-erl-shellsession',)),
    'EvoqueHtmlLexer': ('pip._vendor.pygments.lexers.templates', 'HTML+Evoque', ('html+evoque',), ('*.html',), ('text/html+evoque',)),
    'EvoqueLexer': ('pip._vendor.pygments.lexers.templates', 'Evoque', ('evoque',), ('*.evoque',), ('application/x-evoque',)),
    'EvoqueXmlLexer': ('pip._vendor.pygments.lexers.templates', 'XML+Evoque', ('xml+evoque',), ('*.xml',), ('application/xml+evoque',)),
    'ExeclineLexer': ('pip._vendor.pygments.lexers.shell', 'execline', ('execline',), ('*.exec',), ()),
    'EzhilLexer': ('pip._vendor.pygments.lexers.ezhil', 'Ezhil', ('ezhil',), ('*.n',), ('text/x-ezhil',)),
    'FSharpLexer': ('pip._vendor.pygments.lexers.dotnet', 'F#', ('fsharp', 'f#'), ('*.fs', '*.fsi', '*.fsx'), ('text/x-fsharp',)),
    'FStarLexer': ('pip._vendor.pygments.lexers.ml', 'FStar', ('fstar',), ('*.fst', '*.fsti'), ('text/x-fstar',)),
    'FactorLexer': ('pip._vendor.pygments.lexers.factor', 'Factor', ('factor',), ('*.factor',), ('text/x-factor',)),
    'FancyLexer': ('pip._vendor.pygments.lexers.ruby', 'Fancy', ('fancy', 'fy'), ('*.fy', '*.fancypack'), ('text/x-fancysrc',)),
    'FantomLexer': ('pip._vendor.pygments.lexers.fantom', 'Fantom', ('fan',), ('*.fan',), ('application/x-fantom',)),
    'FelixLexer': ('pip._vendor.pygments.lexers.felix', 'Felix', ('felix', 'flx'), ('*.flx', '*.flxh'), ('text/x-felix',)),
    'FennelLexer': ('pip._vendor.pygments.lexers.lisp', 'Fennel', ('fennel', 'fnl'), ('*.fnl',), ()),
    'FiftLexer': ('pip._vendor.pygments.lexers.fift', 'Fift', ('fift', 'fif'), ('*.fif',), ()),
    'FishShellLexer': ('pip._vendor.pygments.lexers.shell', 'Fish', ('fish', 'fishshell'), ('*.fish', '*.load'), ('application/x-fish',)),
    'FlatlineLexer': ('pip._vendor.pygments.lexers.dsls', 'Flatline', ('flatline',), (), ('text/x-flatline',)),
    'FloScriptLexer': ('pip._vendor.pygments.lexers.floscript', 'FloScript', ('floscript', 'flo'), ('*.flo',), ()),
    'ForthLexer': ('pip._vendor.pygments.lexers.forth', 'Forth', ('forth',), ('*.frt', '*.fs'), ('application/x-forth',)),
    'FortranFixedLexer': ('pip._vendor.pygments.lexers.fortran', 'FortranFixed', ('fortranfixed',), ('*.f', '*.F'), ()),
    'FortranLexer': ('pip._vendor.pygments.lexers.fortran', 'Fortran', ('fortran', 'f90'), ('*.f03', '*.f90', '*.F03', '*.F90'), ('text/x-fortran',)),
    'FoxProLexer': ('pip._vendor.pygments.lexers.foxpro', 'FoxPro', ('foxpro', 'vfp', 'clipper', 'xbase'), ('*.PRG', '*.prg'), ()),
    'FreeFemLexer': ('pip._vendor.pygments.lexers.freefem', 'Freefem', ('freefem',), ('*.edp',), ('text/x-freefem',)),
    'FuncLexer': ('pip._vendor.pygments.lexers.func', 'FunC', ('func', 'fc'), ('*.fc', '*.func'), ()),
    'FutharkLexer': ('pip._vendor.pygments.lexers.futhark', 'Futhark', ('futhark',), ('*.fut',), ('text/x-futhark',)),
    'GAPConsoleLexer': ('pip._vendor.pygments.lexers.algebra', 'GAP session', ('gap-console', 'gap-repl'), ('*.tst',), ()),
    'GAPLexer': ('pip._vendor.pygments.lexers.algebra', 'GAP', ('gap',), ('*.g', '*.gd', '*.gi', '*.gap'), ()),
    'GDScriptLexer': ('pip._vendor.pygments.lexers.gdscript', 'GDScript', ('gdscript', 'gd'), ('*.gd',), ('text/x-gdscript', 'application/x-gdscript')),
    'GLShaderLexer': ('pip._vendor.pygments.lexers.graphics', 'GLSL', ('glsl',), ('*.vert', '*.frag', '*.geo'), ('text/x-glslsrc',)),
    'GSQLLexer': ('pip._vendor.pygments.lexers.gsql', 'GSQL', ('gsql',), ('*.gsql',), ()),
    'GasLexer': ('pip._vendor.pygments.lexers.asm', 'GAS', ('gas', 'asm'), ('*.s', '*.S'), ('text/x-gas',)),
    'GcodeLexer': ('pip._vendor.pygments.lexers.gcodelexer', 'g-code', ('gcode',), ('*.gcode',), ()),
    'GenshiLexer': ('pip._vendor.pygments.lexers.templates', 'Genshi', ('genshi', 'kid', 'xml+genshi', 'xml+kid'), ('*.kid',), ('application/x-genshi', 'application/x-kid')),
    'GenshiTextLexer': ('pip._vendor.pygments.lexers.templates', 'Genshi Text', ('genshitext',), (), ('application/x-genshi-text', 'text/x-genshi')),
    'GettextLexer': ('pip._vendor.pygments.lexers.textfmts', 'Gettext Catalog', ('pot', 'po'), ('*.pot', '*.po'), ('application/x-gettext', 'text/x-gettext', 'text/gettext')),
    'GherkinLexer': ('pip._vendor.pygments.lexers.testing', 'Gherkin', ('gherkin', 'cucumber'), ('*.feature',), ('text/x-gherkin',)),
    'GnuplotLexer': ('pip._vendor.pygments.lexers.graphics', 'Gnuplot', ('gnuplot',), ('*.plot', '*.plt'), ('text/x-gnuplot',)),
    'GoLexer': ('pip._vendor.pygments.lexers.go', 'Go', ('go', 'golang'), ('*.go',), ('text/x-gosrc',)),
    'GoloLexer': ('pip._vendor.pygments.lexers.jvm', 'Golo', ('golo',), ('*.golo',), ()),
    'GoodDataCLLexer': ('pip._vendor.pygments.lexers.business', 'GoodData-CL', ('gooddata-cl',), ('*.gdc',), ('text/x-gooddata-cl',)),
    'GosuLexer': ('pip._vendor.pygments.lexers.jvm', 'Gosu', ('gosu',), ('*.gs', '*.gsx', '*.gsp', '*.vark'), ('text/x-gosu',)),
    'GosuTemplateLexer': ('pip._vendor.pygments.lexers.jvm', 'Gosu Template', ('gst',), ('*.gst',), ('text/x-gosu-template',)),
    'GraphQLLexer': ('pip._vendor.pygments.lexers.graphql', 'GraphQL', ('graphql',), ('*.graphql',), ()),
    'GraphvizLexer': ('pip._vendor.pygments.lexers.graphviz', 'Graphviz', ('graphviz', 'dot'), ('*.gv', '*.dot'), ('text/x-graphviz', 'text/vnd.graphviz')),
    'GroffLexer': ('pip._vendor.pygments.lexers.markup', 'Groff', ('groff', 'nroff', 'man'), ('*.[1-9]', '*.man', '*.1p', '*.3pm'), ('application/x-troff', 'text/troff')),
    'GroovyLexer': ('pip._vendor.pygments.lexers.jvm', 'Groovy', ('groovy',), ('*.groovy', '*.gradle'), ('text/x-groovy',)),
    'HLSLShaderLexer': ('pip._vendor.pygments.lexers.graphics', 'HLSL', ('hlsl',), ('*.hlsl', '*.hlsli'), ('text/x-hlsl',)),
    'HTMLUL4Lexer': ('pip._vendor.pygments.lexers.ul4', 'HTML+UL4', ('html+ul4',), ('*.htmlul4',), ()),
    'HamlLexer': ('pip._vendor.pygments.lexers.html', 'Haml', ('haml',), ('*.haml',), ('text/x-haml',)),
    'HandlebarsHtmlLexer': ('pip._vendor.pygments.lexers.templates', 'HTML+Handlebars', ('html+handlebars',), ('*.handlebars', '*.hbs'), ('text/html+handlebars', 'text/x-handlebars-template')),
    'HandlebarsLexer': ('pip._vendor.pygments.lexers.templates', 'Handlebars', ('handlebars',), (), ()),
    'HaskellLexer': ('pip._vendor.pygments.lexers.haskell', 'Haskell', ('haskell', 'hs'), ('*.hs',), ('text/x-haskell',)),
    'HaxeLexer': ('pip._vendor.pygments.lexers.haxe', 'Haxe', ('haxe', 'hxsl', 'hx'), ('*.hx', '*.hxsl'), ('text/haxe', 'text/x-haxe', 'text/x-hx')),
    'HexdumpLexer': ('pip._vendor.pygments.lexers.hexdump', 'Hexdump', ('hexdump',), (), ()),
    'HsailLexer': ('pip._vendor.pygments.lexers.asm', 'HSAIL', ('hsail', 'hsa'), ('*.hsail',), ('text/x-hsail',)),
    'HspecLexer': ('pip._vendor.pygments.lexers.haskell', 'Hspec', ('hspec',), ('*Spec.hs',), ()),
    'HtmlDjangoLexer': ('pip._vendor.pygments.lexers.templates', 'HTML+Django/Jinja', ('html+django', 'html+jinja', 'htmldjango'), ('*.html.j2', '*.htm.j2', '*.xhtml.j2', '*.html.jinja2', '*.htm.jinja2', '*.xhtml.jinja2'), ('text/html+django', 'text/html+jinja')),
    'HtmlGenshiLexer': ('pip._vendor.pygments.lexers.templates', 'HTML+Genshi', ('html+genshi', 'html+kid'), (), ('text/html+genshi',)),
    'HtmlLexer': ('pip._vendor.pygments.lexers.html', 'HTML', ('html',), ('*.html', '*.htm', '*.xhtml', '*.xslt'), ('text/html', 'application/xhtml+xml')),
    'HtmlPhpLexer': ('pip._vendor.pygments.lexers.templates', 'HTML+PHP', ('html+php',), ('*.phtml',), ('application/x-php', 'application/x-httpd-php', 'application/x-httpd-php3', 'application/x-httpd-php4', 'application/x-httpd-php5')),
    'HtmlSmartyLexer': ('pip._vendor.pygments.lexers.templates', 'HTML+Smarty', ('html+smarty',), (), ('text/html+smarty',)),
    'HttpLexer': ('pip._vendor.pygments.lexers.textfmts', 'HTTP', ('http',), (), ()),
    'HxmlLexer': ('pip._vendor.pygments.lexers.haxe', 'Hxml', ('haxeml', 'hxml'), ('*.hxml',), ()),
    'HyLexer': ('pip._vendor.pygments.lexers.lisp', 'Hy', ('hylang', 'hy'), ('*.hy',), ('text/x-hy', 'application/x-hy')),
    'HybrisLexer': ('pip._vendor.pygments.lexers.scripting', 'Hybris', ('hybris',), ('*.hyb',), ('text/x-hybris', 'application/x-hybris')),
    'IDLLexer': ('pip._vendor.pygments.lexers.idl', 'IDL', ('idl',), ('*.pro',), ('text/idl',)),
    'IconLexer': ('pip._vendor.pygments.lexers.unicon', 'Icon', ('icon',), ('*.icon', '*.ICON'), ()),
    'IdrisLexer': ('pip._vendor.pygments.lexers.haskell', 'Idris', ('idris', 'idr'), ('*.idr',), ('text/x-idris',)),
    'IgorLexer': ('pip._vendor.pygments.lexers.igor', 'Igor', ('igor', 'igorpro'), ('*.ipf',), ('text/ipf',)),
    'Inform6Lexer': ('pip._vendor.pygments.lexers.int_fiction', 'Inform 6', ('inform6', 'i6'), ('*.inf',), ()),
    'Inform6TemplateLexer': ('pip._vendor.pygments.lexers.int_fiction', 'Inform 6 template', ('i6t',), ('*.i6t',), ()),
    'Inform7Lexer': ('pip._vendor.pygments.lexers.int_fiction', 'Inform 7', ('inform7', 'i7'), ('*.ni', '*.i7x'), ()),
    'IniLexer': ('pip._vendor.pygments.lexers.configs', 'INI', ('ini', 'cfg', 'dosini'), ('*.ini', '*.cfg', '*.inf', '.editorconfig'), ('text/x-ini', 'text/inf')),
    'IoLexer': ('pip._vendor.pygments.lexers.iolang', 'Io', ('io',), ('*.io',), ('text/x-iosrc',)),
    'IokeLexer': ('pip._vendor.pygments.lexers.jvm', 'Ioke', ('ioke', 'ik'), ('*.ik',), ('text/x-iokesrc',)),
    'IrcLogsLexer': ('pip._vendor.pygments.lexers.textfmts', 'IRC logs', ('irc',), ('*.weechatlog',), ('text/x-irclog',)),
    'IsabelleLexer': ('pip._vendor.pygments.lexers.theorem', 'Isabelle', ('isabelle',), ('*.thy',), ('text/x-isabelle',)),
    'JLexer': ('pip._vendor.pygments.lexers.j', 'J', ('j',), ('*.ijs',), ('text/x-j',)),
    'JMESPathLexer': ('pip._vendor.pygments.lexers.jmespath', 'JMESPath', ('jmespath', 'jp'), ('*.jp',), ()),
    'JSLTLexer': ('pip._vendor.pygments.lexers.jslt', 'JSLT', ('jslt',), ('*.jslt',), ('text/x-jslt',)),
    'JagsLexer': ('pip._vendor.pygments.lexers.modeling', 'JAGS', ('jags',), ('*.jag', '*.bug'), ()),
    'JanetLexer': ('pip._vendor.pygments.lexers.lisp', 'Janet', ('janet',), ('*.janet', '*.jdn'), ('text/x-janet', 'application/x-janet')),
    'JasminLexer': ('pip._vendor.pygments.lexers.jvm', 'Jasmin', ('jasmin', 'jasminxt'), ('*.j',), ()),
    'JavaLexer': ('pip._vendor.pygments.lexers.jvm', 'Java', ('java',), ('*.java',), ('text/x-java',)),
    'JavascriptDjangoLexer': ('pip._vendor.pygments.lexers.templates', 'JavaScript+Django/Jinja', ('javascript+django', 'js+django', 'javascript+jinja', 'js+jinja'), ('*.js.j2', '*.js.jinja2'), ('application/x-javascript+django', 'application/x-javascript+jinja', 'text/x-javascript+django', 'text/x-javascript+jinja', 'text/javascript+django', 'text/javascript+jinja')),
    'JavascriptErbLexer': ('pip._vendor.pygments.lexers.templates', 'JavaScript+Ruby', ('javascript+ruby', 'js+ruby', 'javascript+erb', 'js+erb'), (), ('application/x-javascript+ruby', 'text/x-javascript+ruby', 'text/javascript+ruby')),
    'JavascriptGenshiLexer': ('pip._vendor.pygments.lexers.templates', 'JavaScript+Genshi Text', ('js+genshitext', 'js+genshi', 'javascript+genshitext', 'javascript+genshi'), (), ('application/x-javascript+genshi', 'text/x-javascript+genshi', 'text/javascript+genshi')),
    'JavascriptLexer': ('pip._vendor.pygments.lexers.javascript', 'JavaScript', ('javascript', 'js'), ('*.js', '*.jsm', '*.mjs', '*.cjs'), ('application/javascript', 'application/x-javascript', 'text/x-javascript', 'text/javascript')),
    'JavascriptPhpLexer': ('pip._vendor.pygments.lexers.templates', 'JavaScript+PHP', ('javascript+php', 'js+php'), (), ('application/x-javascript+php', 'text/x-javascript+php', 'text/javascript+php')),
    'JavascriptSmartyLexer': ('pip._vendor.pygments.lexers.templates', 'JavaScript+Smarty', ('javascript+smarty', 'js+smarty'), (), ('application/x-javascript+smarty', 'text/x-javascript+smarty', 'text/javascript+smarty')),
    'JavascriptUL4Lexer': ('pip._vendor.pygments.lexers.ul4', 'Javascript+UL4', ('js+ul4',), ('*.jsul4',), ()),
    'JclLexer': ('pip._vendor.pygments.lexers.scripting', 'JCL', ('jcl',), ('*.jcl',), ('text/x-jcl',)),
    'JsgfLexer': ('pip._vendor.pygments.lexers.grammar_notation', 'JSGF', ('jsgf',), ('*.jsgf',), ('application/jsgf', 'application/x-jsgf', 'text/jsgf')),
    'JsonBareObjectLexer': ('pip._vendor.pygments.lexers.data', 'JSONBareObject', (), (), ()),
    'JsonLdLexer': ('pip._vendor.pygments.lexers.data', 'JSON-LD', ('jsonld', 'json-ld'), ('*.jsonld',), ('application/ld+json',)),
    'JsonLexer': ('pip._vendor.pygments.lexers.data', 'JSON', ('json', 'json-object'), ('*.json', '*.jsonl', '*.ndjson', 'Pipfile.lock'), ('application/json', 'application/json-object', 'application/x-ndjson', 'application/jsonl', 'application/json-seq')),
    'JsonnetLexer': ('pip._vendor.pygments.lexers.jsonnet', 'Jsonnet', ('jsonnet',), ('*.jsonnet', '*.libsonnet'), ()),
    'JspLexer': ('pip._vendor.pygments.lexers.templates', 'Java Server Page', ('jsp',), ('*.jsp',), ('application/x-jsp',)),
    'JsxLexer': ('pip._vendor.pygments.lexers.jsx', 'JSX', ('jsx', 'react'), ('*.jsx', '*.react'), ('text/jsx', 'text/typescript-jsx')),
    'JuliaConsoleLexer': ('pip._vendor.pygments.lexers.julia', 'Julia console', ('jlcon', 'julia-repl'), (), ()),
    'JuliaLexer': ('pip._vendor.pygments.lexers.julia', 'Julia', ('julia', 'jl'), ('*.jl',), ('text/x-julia', 'application/x-julia')),
    'JuttleLexer': ('pip._vendor.pygments.lexers.javascript', 'Juttle', ('juttle',), ('*.juttle',), ('application/juttle', 'application/x-juttle', 'text/x-juttle', 'text/juttle')),
    'KLexer': ('pip._vendor.pygments.lexers.q', 'K', ('k',), ('*.k',), ()),
    'KalLexer': ('pip._vendor.pygments.lexers.javascript', 'Kal', ('kal',), ('*.kal',), ('text/kal', 'application/kal')),
    'KconfigLexer': ('pip._vendor.pygments.lexers.configs', 'Kconfig', ('kconfig', 'menuconfig', 'linux-config', 'kernel-config'), ('Kconfig*', '*Config.in*', 'external.in*', 'standard-modules.in'), ('text/x-kconfig',)),
    'KernelLogLexer': ('pip._vendor.pygments.lexers.textfmts', 'Kernel log', ('kmsg', 'dmesg'), ('*.kmsg', '*.dmesg'), ()),
    'KokaLexer': ('pip._vendor.pygments.lexers.haskell', 'Koka', ('koka',), ('*.kk', '*.kki'), ('text/x-koka',)),
    'KotlinLexer': ('pip._vendor.pygments.lexers.jvm', 'Kotlin', ('kotlin',), ('*.kt', '*.kts'), ('text/x-kotlin',)),
    'KuinLexer': ('pip._vendor.pygments.lexers.kuin', 'Kuin', ('kuin',), ('*.kn',), ()),
    'KustoLexer': ('pip._vendor.pygments.lexers.kusto', 'Kusto', ('kql', 'kusto'), ('*.kql', '*.kusto', '.csl'), ()),
    'LSLLexer': ('pip._vendor.pygments.lexers.scripting', 'LSL', ('lsl',), ('*.lsl',), ('text/x-lsl',)),
    'LassoCssLexer': ('pip._vendor.pygments.lexers.templates', 'CSS+Lasso', ('css+lasso',), (), ('text/css+lasso',)),
    'LassoHtmlLexer': ('pip._vendor.pygments.lexers.templates', 'HTML+Lasso', ('html+lasso',), (), ('text/html+lasso', 'application/x-httpd-lasso', 'application/x-httpd-lasso[89]')),
    'LassoJavascriptLexer': ('pip._vendor.pygments.lexers.templates', 'JavaScript+Lasso', ('javascript+lasso', 'js+lasso'), (), ('application/x-javascript+lasso', 'text/x-javascript+lasso', 'text/javascript+lasso')),
    'LassoLexer': ('pip._vendor.pygments.lexers.javascript', 'Lasso', ('lasso', 'lassoscript'), ('*.lasso', '*.lasso[89]'), ('text/x-lasso',)),
    'LassoXmlLexer': ('pip._vendor.pygments.lexers.templates', 'XML+Lasso', ('xml+lasso',), (), ('application/xml+lasso',)),
    'LdaprcLexer': ('pip._vendor.pygments.lexers.ldap', 'LDAP configuration file', ('ldapconf', 'ldaprc'), ('.ldaprc', 'ldaprc', 'ldap.conf'), ('text/x-ldapconf',)),
    'LdifLexer': ('pip._vendor.pygments.lexers.ldap', 'LDIF', ('ldif',), ('*.ldif',), ('text/x-ldif',)),
    'Lean3Lexer': ('pip._vendor.pygments.lexers.lean', 'Lean', ('lean', 'lean3'), ('*.lean',), ('text/x-lean', 'text/x-lean3')),
    'Lean4Lexer': ('pip._vendor.pygments.lexers.lean', 'Lean4', ('lean4',), ('*.lean',), ('text/x-lean4',)),
    'LessCssLexer': ('pip._vendor.pygments.lexers.css', 'LessCss', ('less',), ('*.less',), ('text/x-less-css',)),
    'LighttpdConfLexer': ('pip._vendor.pygments.lexers.configs', 'Lighttpd configuration file', ('lighttpd', 'lighty'), ('lighttpd.conf',), ('text/x-lighttpd-conf',)),
    'LilyPondLexer': ('pip._vendor.pygments.lexers.lilypond', 'LilyPond', ('lilypond',), ('*.ly',), ()),
    'LimboLexer': ('pip._vendor.pygments.lexers.inferno', 'Limbo', ('limbo',), ('*.b',), ('text/limbo',)),
    'LiquidLexer': ('pip._vendor.pygments.lexers.templates', 'liquid', ('liquid',), ('*.liquid',), ()),
    'LiterateAgdaLexer': ('pip._vendor.pygments.lexers.haskell', 'Literate Agda', ('literate-agda', 'lagda'), ('*.lagda',), ('text/x-literate-agda',)),
    'LiterateCryptolLexer': ('pip._vendor.pygments.lexers.haskell', 'Literate Cryptol', ('literate-cryptol', 'lcryptol', 'lcry'), ('*.lcry',), ('text/x-literate-cryptol',)),
    'LiterateHaskellLexer': ('pip._vendor.pygments.lexers.haskell', 'Literate Haskell', ('literate-haskell', 'lhaskell', 'lhs'), ('*.lhs',), ('text/x-literate-haskell',)),
    'LiterateIdrisLexer': ('pip._vendor.pygments.lexers.haskell', 'Literate Idris', ('literate-idris', 'lidris', 'lidr'), ('*.lidr',), ('text/x-literate-idris',)),
    'LiveScriptLexer': ('pip._vendor.pygments.lexers.javascript', 'LiveScript', ('livescript', 'live-script'), ('*.ls',), ('text/livescript',)),
    'LlvmLexer': ('pip._vendor.pygments.lexers.asm', 'LLVM', ('llvm',), ('*.ll',), ('text/x-llvm',)),
    'LlvmMirBodyLexer': ('pip._vendor.pygments.lexers.asm', 'LLVM-MIR Body', ('llvm-mir-body',), (), ()),
    'LlvmMirLexer': ('pip._vendor.pygments.lexers.asm', 'LLVM-MIR', ('llvm-mir',), ('*.mir',), ()),
    'LogosLexer': ('pip._vendor.pygments.lexers.objective', 'Logos', ('logos',), ('*.x', '*.xi', '*.xm', '*.xmi'), ('text/x-logos',)),
    'LogtalkLexer': ('pip._vendor.pygments.lexers.prolog', 'Logtalk', ('logtalk',), ('*.lgt', '*.logtalk'), ('text/x-logtalk',)),
    'LuaLexer': ('pip._vendor.pygments.lexers.scripting', 'Lua', ('lua',), ('*.lua', '*.wlua'), ('text/x-lua', 'application/x-lua')),
    'LuauLexer': ('pip._vendor.pygments.lexers.scripting', 'Luau', ('luau',), ('*.luau',), ()),
    'MCFunctionLexer': ('pip._vendor.pygments.lexers.minecraft', 'MCFunction', ('mcfunction', 'mcf'), ('*.mcfunction',), ('text/mcfunction',)),
    'MCSchemaLexer': ('pip._vendor.pygments.lexers.minecraft', 'MCSchema', ('mcschema',), ('*.mcschema',), ('text/mcschema',)),
    'MIMELexer': ('pip._vendor.pygments.lexers.mime', 'MIME', ('mime',), (), ('multipart/mixed', 'multipart/related', 'multipart/alternative')),
    'MIPSLexer': ('pip._vendor.pygments.lexers.mips', 'MIPS', ('mips',), ('*.mips', '*.MIPS'), ()),
    'MOOCodeLexer': ('pip._vendor.pygments.lexers.scripting', 'MOOCode', ('moocode', 'moo'), ('*.moo',), ('text/x-moocode',)),
    'MSDOSSessionLexer': ('pip._vendor.pygments.lexers.shell', 'MSDOS Session', ('doscon',), (), ()),
    'Macaulay2Lexer': ('pip._vendor.pygments.lexers.macaulay2', 'Macaulay2', ('macaulay2',), ('*.m2',), ()),
    'MakefileLexer': ('pip._vendor.pygments.lexers.make', 'Makefile', ('make', 'makefile', 'mf', 'bsdmake'), ('*.mak', '*.mk', 'Makefile', 'makefile', 'Makefile.*', 'GNUmakefile'), ('text/x-makefile',)),
    'MakoCssLexer': ('pip._vendor.pygments.lexers.templates', 'CSS+Mako', ('css+mako',), (), ('text/css+mako',)),
    'MakoHtmlLexer': ('pip._vendor.pygments.lexers.templates', 'HTML+Mako', ('html+mako',), (), ('text/html+mako',)),
    'MakoJavascriptLexer': ('pip._vendor.pygments.lexers.templates', 'JavaScript+Mako', ('javascript+mako', 'js+mako'), (), ('application/x-javascript+mako', 'text/x-javascript+mako', 'text/javascript+mako')),
    'MakoLexer': ('pip._vendor.pygments.lexers.templates', 'Mako', ('mako',), ('*.mao',), ('application/x-mako',)),
    'MakoXmlLexer': ('pip._vendor.pygments.lexers.templates', 'XML+Mako', ('xml+mako',), (), ('application/xml+mako',)),
    'MaqlLexer': ('pip._vendor.pygments.lexers.business', 'MAQL', ('maql',), ('*.maql',), ('text/x-gooddata-maql', 'application/x-gooddata-maql')),
    'MarkdownLexer': ('pip._vendor.pygments.lexers.markup', 'Markdown', ('markdown', 'md'), ('*.md', '*.markdown'), ('text/x-markdown',)),
    'MaskLexer': ('pip._vendor.pygments.lexers.javascript', 'Mask', ('mask',), ('*.mask',), ('text/x-mask',)),
    'MasonLexer': ('pip._vendor.pygments.lexers.templates', 'Mason', ('mason',), ('*.m', '*.mhtml', '*.mc', '*.mi', 'autohandler', 'dhandler'), ('application/x-mason',)),
    'MathematicaLexer': ('pip._vendor.pygments.lexers.algebra', 'Mathematica', ('mathematica', 'mma', 'nb'), ('*.nb', '*.cdf', '*.nbp', '*.ma'), ('application/mathematica', 'application/vnd.wolfram.mathematica', 'application/vnd.wolfram.mathematica.package', 'application/vnd.wolfram.cdf')),
    'MatlabLexer': ('pip._vendor.pygments.lexers.matlab', 'Matlab', ('matlab',), ('*.m',), ('text/matlab',)),
    'MatlabSessionLexer': ('pip._vendor.pygments.lexers.matlab', 'Matlab session', ('matlabsession',), (), ()),
    'MaximaLexer': ('pip._vendor.pygments.lexers.maxima', 'Maxima', ('maxima', 'macsyma'), ('*.mac', '*.max'), ()),
    'MesonLexer': ('pip._vendor.pygments.lexers.meson', 'Meson', ('meson', 'meson.build'), ('meson.build', 'meson_options.txt'), ('text/x-meson',)),
    'MiniDLexer': ('pip._vendor.pygments.lexers.d', 'MiniD', ('minid',), (), ('text/x-minidsrc',)),
    'MiniScriptLexer': ('pip._vendor.pygments.lexers.scripting', 'MiniScript', ('miniscript', 'ms'), ('*.ms',), ('text/x-minicript', 'application/x-miniscript')),
    'ModelicaLexer': ('pip._vendor.pygments.lexers.modeling', 'Modelica', ('modelica',), ('*.mo',), ('text/x-modelica',)),
    'Modula2Lexer': ('pip._vendor.pygments.lexers.modula2', 'Modula-2', ('modula2', 'm2'), ('*.def', '*.mod'), ('text/x-modula2',)),
    'MoinWikiLexer': ('pip._vendor.pygments.lexers.markup', 'MoinMoin/Trac Wiki markup', ('trac-wiki', 'moin'), (), ('text/x-trac-wiki',)),
    'MojoLexer': ('pip._vendor.pygments.lexers.mojo', 'Mojo', ('mojo', '🔥'), ('*.mojo', '*.🔥'), ('text/x-mojo', 'application/x-mojo')),
    'MonkeyLexer': ('pip._vendor.pygments.lexers.basic', 'Monkey', ('monkey',), ('*.monkey',), ('text/x-monkey',)),
    'MonteLexer': ('pip._vendor.pygments.lexers.monte', 'Monte', ('monte',), ('*.mt',), ()),
    'MoonScriptLexer': ('pip._vendor.pygments.lexers.scripting', 'MoonScript', ('moonscript', 'moon'), ('*.moon',), ('text/x-moonscript', 'application/x-moonscript')),
    'MoselLexer': ('pip._vendor.pygments.lexers.mosel', 'Mosel', ('mosel',), ('*.mos',), ()),
    'MozPreprocCssLexer': ('pip._vendor.pygments.lexers.markup', 'CSS+mozpreproc', ('css+mozpreproc',), ('*.css.in',), ()),
    'MozPreprocHashLexer': ('pip._vendor.pygments.lexers.markup', 'mozhashpreproc', ('mozhashpreproc',), (), ()),
    'MozPreprocJavascriptLexer': ('pip._vendor.pygments.lexers.markup', 'Javascript+mozpreproc', ('javascript+mozpreproc',), ('*.js.in',), ()),
    'MozPreprocPercentLexer': ('pip._vendor.pygments.lexers.markup', 'mozpercentpreproc', ('mozpercentpreproc',), (), ()),
    'MozPreprocXulLexer': ('pip._vendor.pygments.lexers.markup', 'XUL+mozpreproc', ('xul+mozpreproc',), ('*.xul.in',), ()),
    'MqlLexer': ('pip._vendor.pygments.lexers.c_like', 'MQL', ('mql', 'mq4', 'mq5', 'mql4', 'mql5'), ('*.mq4', '*.mq5', '*.mqh'), ('text/x-mql',)),
    'MscgenLexer': ('pip._vendor.pygments.lexers.dsls', 'Mscgen', ('mscgen', 'msc'), ('*.msc',), ()),
    'MuPADLexer': ('pip._vendor.pygments.lexers.algebra', 'MuPAD', ('mupad',), ('*.mu',), ()),
    'MxmlLexer': ('pip._vendor.pygments.lexers.actionscript', 'MXML', ('mxml',), ('*.mxml',), ()),
    'MySqlLexer': ('pip._vendor.pygments.lexers.sql', 'MySQL', ('mysql',), (), ('text/x-mysql',)),
    'MyghtyCssLexer': ('pip._vendor.pygments.lexers.templates', 'CSS+Myghty', ('css+myghty',), (), ('text/css+myghty',)),
    'MyghtyHtmlLexer': ('pip._vendor.pygments.lexers.templates', 'HTML+Myghty', ('html+myghty',), (), ('text/html+myghty',)),
    'MyghtyJavascriptLexer': ('pip._vendor.pygments.lexers.templates', 'JavaScript+Myghty', ('javascript+myghty', 'js+myghty'), (), ('application/x-javascript+myghty', 'text/x-javascript+myghty', 'text/javascript+mygthy')),
    'MyghtyLexer': ('pip._vendor.pygments.lexers.templates', 'Myghty', ('myghty',), ('*.myt', 'autodelegate'), ('application/x-myghty',)),
    'MyghtyXmlLexer': ('pip._vendor.pygments.lexers.templates', 'XML+Myghty', ('xml+myghty',), (), ('application/xml+myghty',)),
    'NCLLexer': ('pip._vendor.pygments.lexers.ncl', 'NCL', ('ncl',), ('*.ncl',), ('text/ncl',)),
    'NSISLexer': ('pip._vendor.pygments.lexers.installers', 'NSIS', ('nsis', 'nsi', 'nsh'), ('*.nsi', '*.nsh'), ('text/x-nsis',)),
    'NasmLexer': ('pip._vendor.pygments.lexers.asm', 'NASM', ('nasm',), ('*.asm', '*.ASM', '*.nasm'), ('text/x-nasm',)),
    'NasmObjdumpLexer': ('pip._vendor.pygments.lexers.asm', 'objdump-nasm', ('objdump-nasm',), ('*.objdump-intel',), ('text/x-nasm-objdump',)),
    'NemerleLexer': ('pip._vendor.pygments.lexers.dotnet', 'Nemerle', ('nemerle',), ('*.n',), ('text/x-nemerle',)),
    'NesCLexer': ('pip._vendor.pygments.lexers.c_like', 'nesC', ('nesc',), ('*.nc',), ('text/x-nescsrc',)),
    'NestedTextLexer': ('pip._vendor.pygments.lexers.configs', 'NestedText', ('nestedtext', 'nt'), ('*.nt',), ()),
    'NewLispLexer': ('pip._vendor.pygments.lexers.lisp', 'NewLisp', ('newlisp',), ('*.lsp', '*.nl', '*.kif'), ('text/x-newlisp', 'application/x-newlisp')),
    'NewspeakLexer': ('pip._vendor.pygments.lexers.smalltalk', 'Newspeak', ('newspeak',), ('*.ns2',), ('text/x-newspeak',)),
    'NginxConfLexer': ('pip._vendor.pygments.lexers.configs', 'Nginx configuration file', ('nginx',), ('nginx.conf',), ('text/x-nginx-conf',)),
    'NimrodLexer': ('pip._vendor.pygments.lexers.nimrod', 'Nimrod', ('nimrod', 'nim'), ('*.nim', '*.nimrod'), ('text/x-nim',)),
    'NitLexer': ('pip._vendor.pygments.lexers.nit', 'Nit', ('nit',), ('*.nit',), ()),
    'NixLexer': ('pip._vendor.pygments.lexers.nix', 'Nix', ('nixos', 'nix'), ('*.nix',), ('text/x-nix',)),
    'NodeConsoleLexer': ('pip._vendor.pygments.lexers.javascript', 'Node.js REPL console session', ('nodejsrepl',), (), ('text/x-nodejsrepl',)),
    'NotmuchLexer': ('pip._vendor.pygments.lexers.textfmts', 'Notmuch', ('notmuch',), (), ()),
    'NuSMVLexer': ('pip._vendor.pygments.lexers.smv', 'NuSMV', ('nusmv',), ('*.smv',), ()),
    'NumPyLexer': ('pip._vendor.pygments.lexers.python', 'NumPy', ('numpy',), (), ()),
    'ObjdumpLexer': ('pip._vendor.pygments.lexers.asm', 'objdump', ('objdump',), ('*.objdump',), ('text/x-objdump',)),
    'ObjectiveCLexer': ('pip._vendor.pygments.lexers.objective', 'Objective-C', ('objective-c', 'objectivec', 'obj-c', 'objc'), ('*.m', '*.h'), ('text/x-objective-c',)),
    'ObjectiveCppLexer': ('pip._vendor.pygments.lexers.objective', 'Objective-C++', ('objective-c++', 'objectivec++', 'obj-c++', 'objc++'), ('*.mm', '*.hh'), ('text/x-objective-c++',)),
    'ObjectiveJLexer': ('pip._vendor.pygments.lexers.javascript', 'Objective-J', ('objective-j', 'objectivej', 'obj-j', 'objj'), ('*.j',), ('text/x-objective-j',)),
    'OcamlLexer': ('pip._vendor.pygments.lexers.ml', 'OCaml', ('ocaml',), ('*.ml', '*.mli', '*.mll', '*.mly'), ('text/x-ocaml',)),
    'OctaveLexer': ('pip._vendor.pygments.lexers.matlab', 'Octave', ('octave',), ('*.m',), ('text/octave',)),
    'OdinLexer': ('pip._vendor.pygments.lexers.archetype', 'ODIN', ('odin',), ('*.odin',), ('text/odin',)),
    'OmgIdlLexer': ('pip._vendor.pygments.lexers.c_like', 'OMG Interface Definition Language', ('omg-idl',), ('*.idl', '*.pidl'), ()),
    'OocLexer': ('pip._vendor.pygments.lexers.ooc', 'Ooc', ('ooc',), ('*.ooc',), ('text/x-ooc',)),
    'OpaLexer': ('pip._vendor.pygments.lexers.ml', 'Opa', ('opa',), ('*.opa',), ('text/x-opa',)),
    'OpenEdgeLexer': ('pip._vendor.pygments.lexers.business', 'OpenEdge ABL', ('openedge', 'abl', 'progress'), ('*.p', '*.cls'), ('text/x-openedge', 'application/x-openedge')),
    'OpenScadLexer': ('pip._vendor.pygments.lexers.openscad', 'OpenSCAD', ('openscad',), ('*.scad',), ('application/x-openscad',)),
    'OrgLexer': ('pip._vendor.pygments.lexers.markup', 'Org Mode', ('org', 'orgmode', 'org-mode'), ('*.org',), ('text/org',)),
    'OutputLexer': ('pip._vendor.pygments.lexers.special', 'Text output', ('output',), (), ()),
    'PacmanConfLexer': ('pip._vendor.pygments.lexers.configs', 'PacmanConf', ('pacmanconf',), ('pacman.conf',), ()),
    'PanLexer': ('pip._vendor.pygments.lexers.dsls', 'Pan', ('pan',), ('*.pan',), ()),
    'ParaSailLexer': ('pip._vendor.pygments.lexers.parasail', 'ParaSail', ('parasail',), ('*.psi', '*.psl'), ('text/x-parasail',)),
    'PawnLexer': ('pip._vendor.pygments.lexers.pawn', 'Pawn', ('pawn',), ('*.p', '*.pwn', '*.inc'), ('text/x-pawn',)),
    'PegLexer': ('pip._vendor.pygments.lexers.grammar_notation', 'PEG', ('peg',), ('*.peg',), ('text/x-peg',)),
    'Perl6Lexer': ('pip._vendor.pygments.lexers.perl', 'Perl6', ('perl6', 'pl6', 'raku'), ('*.pl', '*.pm', '*.nqp', '*.p6', '*.6pl', '*.p6l', '*.pl6', '*.6pm', '*.p6m', '*.pm6', '*.t', '*.raku', '*.rakumod', '*.rakutest', '*.rakudoc'), ('text/x-perl6', 'application/x-perl6')),
    'PerlLexer': ('pip._vendor.pygments.lexers.perl', 'Perl', ('perl', 'pl'), ('*.pl', '*.pm', '*.t', '*.perl'), ('text/x-perl', 'application/x-perl')),
    'PhixLexer': ('pip._vendor.pygments.lexers.phix', 'Phix', ('phix',), ('*.exw',), ('text/x-phix',)),
    'PhpLexer': ('pip._vendor.pygments.lexers.php', 'PHP', ('php', 'php3', 'php4', 'php5'), ('*.php', '*.php[345]', '*.inc'), ('text/x-php',)),
    'PigLexer': ('pip._vendor.pygments.lexers.jvm', 'Pig', ('pig',), ('*.pig',), ('text/x-pig',)),
    'PikeLexer': ('pip._vendor.pygments.lexers.c_like', 'Pike', ('pike',), ('*.pike', '*.pmod'), ('text/x-pike',)),
    'PkgConfigLexer': ('pip._vendor.pygments.lexers.configs', 'PkgConfig', ('pkgconfig',), ('*.pc',), ()),
    'PlPgsqlLexer': ('pip._vendor.pygments.lexers.sql', 'PL/pgSQL', ('plpgsql',), (), ('text/x-plpgsql',)),
    'PointlessLexer': ('pip._vendor.pygments.lexers.pointless', 'Pointless', ('pointless',), ('*.ptls',), ()),
    'PonyLexer': ('pip._vendor.pygments.lexers.pony', 'Pony', ('pony',), ('*.pony',), ()),
    'PortugolLexer': ('pip._vendor.pygments.lexers.pascal', 'Portugol', ('portugol',), ('*.alg', '*.portugol'), ()),
    'PostScriptLexer': ('pip._vendor.pygments.lexers.graphics', 'PostScript', ('postscript', 'postscr'), ('*.ps', '*.eps'), ('application/postscript',)),
    'PostgresConsoleLexer': ('pip._vendor.pygments.lexers.sql', 'PostgreSQL console (psql)', ('psql', 'postgresql-console', 'postgres-console'), (), ('text/x-postgresql-psql',)),
    'PostgresExplainLexer': ('pip._vendor.pygments.lexers.sql', 'PostgreSQL EXPLAIN dialect', ('postgres-explain',), ('*.explain',), ('text/x-postgresql-explain',)),
    'PostgresLexer': ('pip._vendor.pygments.lexers.sql', 'PostgreSQL SQL dialect', ('postgresql', 'postgres'), (), ('text/x-postgresql',)),
    'PovrayLexer': ('pip._vendor.pygments.lexers.graphics', 'POVRay', ('pov',), ('*.pov', '*.inc'), ('text/x-povray',)),
    'PowerShellLexer': ('pip._vendor.pygments.lexers.shell', 'PowerShell', ('powershell', 'pwsh', 'posh', 'ps1', 'psm1'), ('*.ps1', '*.psm1'), ('text/x-powershell',)),
    'PowerShellSessionLexer': ('pip._vendor.pygments.lexers.shell', 'PowerShell Session', ('pwsh-session', 'ps1con'), (), ()),
    'PraatLexer': ('pip._vendor.pygments.lexers.praat', 'Praat', ('praat',), ('*.praat', '*.proc', '*.psc'), ()),
    'ProcfileLexer': ('pip._vendor.pygments.lexers.procfile', 'Procfile', ('procfile',), ('Procfile',), ()),
    'PrologLexer': ('pip._vendor.pygments.lexers.prolog', 'Prolog', ('prolog',), ('*.ecl', '*.prolog', '*.pro', '*.pl'), ('text/x-prolog',)),
    'PromQLLexer': ('pip._vendor.pygments.lexers.promql', 'PromQL', ('promql',), ('*.promql',), ()),
    'PromelaLexer': ('pip._vendor.pygments.lexers.c_like', 'Promela', ('promela',), ('*.pml', '*.prom', '*.prm', '*.promela', '*.pr', '*.pm'), ('text/x-promela',)),
    'PropertiesLexer': ('pip._vendor.pygments.lexers.configs', 'Properties', ('properties', 'jproperties'), ('*.properties',), ('text/x-java-properties',)),
    'ProtoBufLexer': ('pip._vendor.pygments.lexers.dsls', 'Protocol Buffer', ('protobuf', 'proto'), ('*.proto',), ()),
    'PrqlLexer': ('pip._vendor.pygments.lexers.prql', 'PRQL', ('prql',), ('*.prql',), ('application/prql', 'application/x-prql')),
    'PsyshConsoleLexer': ('pip._vendor.pygments.lexers.php', 'PsySH console session for PHP', ('psysh',), (), ()),
    'PtxLexer': ('pip._vendor.pygments.lexers.ptx', 'PTX', ('ptx',), ('*.ptx',), ('text/x-ptx',)),
    'PugLexer': ('pip._vendor.pygments.lexers.html', 'Pug', ('pug', 'jade'), ('*.pug', '*.jade'), ('text/x-pug', 'text/x-jade')),
    'PuppetLexer': ('pip._vendor.pygments.lexers.dsls', 'Puppet', ('puppet',), ('*.pp',), ()),
    'PyPyLogLexer': ('pip._vendor.pygments.lexers.console', 'PyPy Log', ('pypylog', 'pypy'), ('*.pypylog',), ('application/x-pypylog',)),
    'Python2Lexer': ('pip._vendor.pygments.lexers.python', 'Python 2.x', ('python2', 'py2'), (), ('text/x-python2', 'application/x-python2')),
    'Python2TracebackLexer': ('pip._vendor.pygments.lexers.python', 'Python 2.x Traceback', ('py2tb',), ('*.py2tb',), ('text/x-python2-traceback',)),
    'PythonConsoleLexer': ('pip._vendor.pygments.lexers.python', 'Python console session', ('pycon', 'python-console'), (), ('text/x-python-doctest',)),
    'PythonLexer': ('pip._vendor.pygments.lexers.python', 'Python', ('python', 'py', 'sage', 'python3', 'py3', 'bazel', 'starlark'), ('*.py', '*.pyw', '*.pyi', '*.jy', '*.sage', '*.sc', 'SConstruct', 'SConscript', '*.bzl', 'BUCK', 'BUILD', 'BUILD.bazel', 'WORKSPACE', '*.tac'), ('text/x-python', 'application/x-python', 'text/x-python3', 'application/x-python3')),
    'PythonTracebackLexer': ('pip._vendor.pygments.lexers.python', 'Python Traceback', ('pytb', 'py3tb'), ('*.pytb', '*.py3tb'), ('text/x-python-traceback', 'text/x-python3-traceback')),
    'PythonUL4Lexer': ('pip._vendor.pygments.lexers.ul4', 'Python+UL4', ('py+ul4',), ('*.pyul4',), ()),
    'QBasicLexer': ('pip._vendor.pygments.lexers.basic', 'QBasic', ('qbasic', 'basic'), ('*.BAS', '*.bas'), ('text/basic',)),
    'QLexer': ('pip._vendor.pygments.lexers.q', 'Q', ('q',), ('*.q',), ()),
    'QVToLexer': ('pip._vendor.pygments.lexers.qvt', 'QVTO', ('qvto', 'qvt'), ('*.qvto',), ()),
    'QlikLexer': ('pip._vendor.pygments.lexers.qlik', 'Qlik', ('qlik', 'qlikview', 'qliksense', 'qlikscript'), ('*.qvs', '*.qvw'), ()),
    'QmlLexer': ('pip._vendor.pygments.lexers.webmisc', 'QML', ('qml', 'qbs'), ('*.qml', '*.qbs'), ('application/x-qml', 'application/x-qt.qbs+qml')),
    'RConsoleLexer': ('pip._vendor.pygments.lexers.r', 'RConsole', ('rconsole', 'rout'), ('*.Rout',), ()),
    'RNCCompactLexer': ('pip._vendor.pygments.lexers.rnc', 'Relax-NG Compact', ('rng-compact', 'rnc'), ('*.rnc',), ()),
    'RPMSpecLexer': ('pip._vendor.pygments.lexers.installers', 'RPMSpec', ('spec',), ('*.spec',), ('text/x-rpm-spec',)),
    'RacketLexer': ('pip._vendor.pygments.lexers.lisp', 'Racket', ('racket', 'rkt'), ('*.rkt', '*.rktd', '*.rktl'), ('text/x-racket', 'application/x-racket')),
    'RagelCLexer': ('pip._vendor.pygments.lexers.parsers', 'Ragel in C Host', ('ragel-c',), ('*.rl',), ()),
    'RagelCppLexer': ('pip._vendor.pygments.lexers.parsers', 'Ragel in CPP Host', ('ragel-cpp',), ('*.rl',), ()),
    'RagelDLexer': ('pip._vendor.pygments.lexers.parsers', 'Ragel in D Host', ('ragel-d',), ('*.rl',), ()),
    'RagelEmbeddedLexer': ('pip._vendor.pygments.lexers.parsers', 'Embedded Ragel', ('ragel-em',), ('*.rl',), ()),
    'RagelJavaLexer': ('pip._vendor.pygments.lexers.parsers', 'Ragel in Java Host', ('ragel-java',), ('*.rl',), ()),
    'RagelLexer': ('pip._vendor.pygments.lexers.parsers', 'Ragel', ('ragel',), (), ()),
    'RagelObjectiveCLexer': ('pip._vendor.pygments.lexers.parsers', 'Ragel in Objective C Host', ('ragel-objc',), ('*.rl',), ()),
    'RagelRubyLexer': ('pip._vendor.pygments.lexers.parsers', 'Ragel in Ruby Host', ('ragel-ruby', 'ragel-rb'), ('*.rl',), ()),
    'RawTokenLexer': ('pip._vendor.pygments.lexers.special', 'Raw token data', (), (), ('application/x-pygments-tokens',)),
    'RdLexer': ('pip._vendor.pygments.lexers.r', 'Rd', ('rd',), ('*.Rd',), ('text/x-r-doc',)),
    'ReasonLexer': ('pip._vendor.pygments.lexers.ml', 'ReasonML', ('reasonml', 'reason'), ('*.re', '*.rei'), ('text/x-reasonml',)),
    'RebolLexer': ('pip._vendor.pygments.lexers.rebol', 'REBOL', ('rebol',), ('*.r', '*.r3', '*.reb'), ('text/x-rebol',)),
    'RedLexer': ('pip._vendor.pygments.lexers.rebol', 'Red', ('red', 'red/system'), ('*.red', '*.reds'), ('text/x-red', 'text/x-red-system')),
    'RedcodeLexer': ('pip._vendor.pygments.lexers.esoteric', 'Redcode', ('redcode',), ('*.cw',), ()),
    'RegeditLexer': ('pip._vendor.pygments.lexers.configs', 'reg', ('registry',), ('*.reg',), ('text/x-windows-registry',)),
    'ResourceLexer': ('pip._vendor.pygments.lexers.resource', 'ResourceBundle', ('resourcebundle', 'resource'), (), ()),
    'RexxLexer': ('pip._vendor.pygments.lexers.scripting', 'Rexx', ('rexx', 'arexx'), ('*.rexx', '*.rex', '*.rx', '*.arexx'), ('text/x-rexx',)),
    'RhtmlLexer': ('pip._vendor.pygments.lexers.templates', 'RHTML', ('rhtml', 'html+erb', 'html+ruby'), ('*.rhtml',), ('text/html+ruby',)),
    'RideLexer': ('pip._vendor.pygments.lexers.ride', 'Ride', ('ride',), ('*.ride',), ('text/x-ride',)),
    'RitaLexer': ('pip._vendor.pygments.lexers.rita', 'Rita', ('rita',), ('*.rita',), ('text/rita',)),
    'RoboconfGraphLexer': ('pip._vendor.pygments.lexers.roboconf', 'Roboconf Graph', ('roboconf-graph',), ('*.graph',), ()),
    'RoboconfInstancesLexer': ('pip._vendor.pygments.lexers.roboconf', 'Roboconf Instances', ('roboconf-instances',), ('*.instances',), ()),
    'RobotFrameworkLexer': ('pip._vendor.pygments.lexers.robotframework', 'RobotFramework', ('robotframework',), ('*.robot', '*.resource'), ('text/x-robotframework',)),
    'RqlLexer': ('pip._vendor.pygments.lexers.sql', 'RQL', ('rql',), ('*.rql',), ('text/x-rql',)),
    'RslLexer': ('pip._vendor.pygments.lexers.dsls', 'RSL', ('rsl',), ('*.rsl',), ('text/rsl',)),
    'RstLexer': ('pip._vendor.pygments.lexers.markup', 'reStructuredText', ('restructuredtext', 'rst', 'rest'), ('*.rst', '*.rest'), ('text/x-rst', 'text/prs.fallenstein.rst')),
    'RtsLexer': ('pip._vendor.pygments.lexers.trafficscript', 'TrafficScript', ('trafficscript', 'rts'), ('*.rts',), ()),
    'RubyConsoleLexer': ('pip._vendor.pygments.lexers.ruby', 'Ruby irb session', ('rbcon', 'irb'), (), ('text/x-ruby-shellsession',)),
    'RubyLexer': ('pip._vendor.pygments.lexers.ruby', 'Ruby', ('ruby', 'rb', 'duby'), ('*.rb', '*.rbw', 'Rakefile', '*.rake', '*.gemspec', '*.rbx', '*.duby', 'Gemfile', 'Vagrantfile'), ('text/x-ruby', 'application/x-ruby')),
    'RustLexer': ('pip._vendor.pygments.lexers.rust', 'Rust', ('rust', 'rs'), ('*.rs', '*.rs.in'), ('text/rust', 'text/x-rust')),
    'SASLexer': ('pip._vendor.pygments.lexers.sas', 'SAS', ('sas',), ('*.SAS', '*.sas'), ('text/x-sas', 'text/sas', 'application/x-sas')),
    'SLexer': ('pip._vendor.pygments.lexers.r', 'S', ('splus', 's', 'r'), ('*.S', '*.R', '.Rhistory', '.Rprofile', '.Renviron'), ('text/S-plus', 'text/S', 'text/x-r-source', 'text/x-r', 'text/x-R', 'text/x-r-history', 'text/x-r-profile')),
    'SMLLexer': ('pip._vendor.pygments.lexers.ml', 'Standard ML', ('sml',), ('*.sml', '*.sig', '*.fun'), ('text/x-standardml', 'application/x-standardml')),
    'SNBTLexer': ('pip._vendor.pygments.lexers.minecraft', 'SNBT', ('snbt',), ('*.snbt',), ('text/snbt',)),
    'SarlLexer': ('pip._vendor.pygments.lexers.jvm', 'SARL', ('sarl',), ('*.sarl',), ('text/x-sarl',)),
    'SassLexer': ('pip._vendor.pygments.lexers.css', 'Sass', ('sass',), ('*.sass',), ('text/x-sass',)),
    'SaviLexer': ('pip._vendor.pygments.lexers.savi', 'Savi', ('savi',), ('*.savi',), ()),
    'ScalaLexer': ('pip._vendor.pygments.lexers.jvm', 'Scala', ('scala',), ('*.scala',), ('text/x-scala',)),
    'ScamlLexer': ('pip._vendor.pygments.lexers.html', 'Scaml', ('scaml',), ('*.scaml',), ('text/x-scaml',)),
    'ScdocLexer': ('pip._vendor.pygments.lexers.scdoc', 'scdoc', ('scdoc', 'scd'), ('*.scd', '*.scdoc'), ()),
    'SchemeLexer': ('pip._vendor.pygments.lexers.lisp', 'Scheme', ('scheme', 'scm'), ('*.scm', '*.ss'), ('text/x-scheme', 'application/x-scheme')),
    'ScilabLexer': ('pip._vendor.pygments.lexers.matlab', 'Scilab', ('scilab',), ('*.sci', '*.sce', '*.tst'), ('text/scilab',)),
    'ScssLexer': ('pip._vendor.pygments.lexers.css', 'SCSS', ('scss',), ('*.scss',), ('text/x-scss',)),
    'SedLexer': ('pip._vendor.pygments.lexers.textedit', 'Sed', ('sed', 'gsed', 'ssed'), ('*.sed', '*.[gs]sed'), ('text/x-sed',)),
    'ShExCLexer': ('pip._vendor.pygments.lexers.rdf', 'ShExC', ('shexc', 'shex'), ('*.shex',), ('text/shex',)),
    'ShenLexer': ('pip._vendor.pygments.lexers.lisp', 'Shen', ('shen',), ('*.shen',), ('text/x-shen', 'application/x-shen')),
    'SieveLexer': ('pip._vendor.pygments.lexers.sieve', 'Sieve', ('sieve',), ('*.siv', '*.sieve'), ()),
    'SilverLexer': ('pip._vendor.pygments.lexers.verification', 'Silver', ('silver',), ('*.sil', '*.vpr'), ()),
    'SingularityLexer': ('pip._vendor.pygments.lexers.configs', 'Singularity', ('singularity',), ('*.def', 'Singularity'), ()),
    'SlashLexer': ('pip._vendor.pygments.lexers.slash', 'Slash', ('slash',), ('*.sla',), ()),
    'SlimLexer': ('pip._vendor.pygments.lexers.webmisc', 'Slim', ('slim',), ('*.slim',), ('text/x-slim',)),
    'SlurmBashLexer': ('pip._vendor.pygments.lexers.shell', 'Slurm', ('slurm', 'sbatch'), ('*.sl',), ()),
    'SmaliLexer': ('pip._vendor.pygments.lexers.dalvik', 'Smali', ('smali',), ('*.smali',), ('text/smali',)),
    'SmalltalkLexer': ('pip._vendor.pygments.lexers.smalltalk', 'Smalltalk', ('smalltalk', 'squeak', 'st'), ('*.st',), ('text/x-smalltalk',)),
    'SmartGameFormatLexer': ('pip._vendor.pygments.lexers.sgf', 'SmartGameFormat', ('sgf',), ('*.sgf',), ()),
    'SmartyLexer': ('pip._vendor.pygments.lexers.templates', 'Smarty', ('smarty',), ('*.tpl',), ('application/x-smarty',)),
    'SmithyLexer': ('pip._vendor.pygments.lexers.smithy', 'Smithy', ('smithy',), ('*.smithy',), ()),
    'SnobolLexer': ('pip._vendor.pygments.lexers.snobol', 'Snobol', ('snobol',), ('*.snobol',), ('text/x-snobol',)),
    'SnowballLexer': ('pip._vendor.pygments.lexers.dsls', 'Snowball', ('snowball',), ('*.sbl',), ()),
    'SolidityLexer': ('pip._vendor.pygments.lexers.solidity', 'Solidity', ('solidity',), ('*.sol',), ()),
    'SoongLexer': ('pip._vendor.pygments.lexers.soong', 'Soong', ('androidbp', 'bp', 'soong'), ('Android.bp',), ()),
    'SophiaLexer': ('pip._vendor.pygments.lexers.sophia', 'Sophia', ('sophia',), ('*.aes',), ()),
    'SourcePawnLexer': ('pip._vendor.pygments.lexers.pawn', 'SourcePawn', ('sp',), ('*.sp',), ('text/x-sourcepawn',)),
    'SourcesListLexer': ('pip._vendor.pygments.lexers.installers', 'Debian Sourcelist', ('debsources', 'sourceslist', 'sources.list'), ('sources.list',), ()),
    'SparqlLexer': ('pip._vendor.pygments.lexers.rdf', 'SPARQL', ('sparql',), ('*.rq', '*.sparql'), ('application/sparql-query',)),
    'SpiceLexer': ('pip._vendor.pygments.lexers.spice', 'Spice', ('spice', 'spicelang'), ('*.spice',), ('text/x-spice',)),
    'SqlJinjaLexer': ('pip._vendor.pygments.lexers.templates', 'SQL+Jinja', ('sql+jinja',), ('*.sql', '*.sql.j2', '*.sql.jinja2'), ()),
    'SqlLexer': ('pip._vendor.pygments.lexers.sql', 'SQL', ('sql',), ('*.sql',), ('text/x-sql',)),
    'SqliteConsoleLexer': ('pip._vendor.pygments.lexers.sql', 'sqlite3con', ('sqlite3',), ('*.sqlite3-console',), ('text/x-sqlite3-console',)),
    'SquidConfLexer': ('pip._vendor.pygments.lexers.configs', 'SquidConf', ('squidconf', 'squid.conf', 'squid'), ('squid.conf',), ('text/x-squidconf',)),
    'SrcinfoLexer': ('pip._vendor.pygments.lexers.srcinfo', 'Srcinfo', ('srcinfo',), ('.SRCINFO',), ()),
    'SspLexer': ('pip._vendor.pygments.lexers.templates', 'Scalate Server Page', ('ssp',), ('*.ssp',), ('application/x-ssp',)),
    'StanLexer': ('pip._vendor.pygments.lexers.modeling', 'Stan', ('stan',), ('*.stan',), ()),
    'StataLexer': ('pip._vendor.pygments.lexers.stata', 'Stata', ('stata', 'do'), ('*.do', '*.ado'), ('text/x-stata', 'text/stata', 'application/x-stata')),
    'SuperColliderLexer': ('pip._vendor.pygments.lexers.supercollider', 'SuperCollider', ('supercollider', 'sc'), ('*.sc', '*.scd'), ('application/supercollider', 'text/supercollider')),
    'SwiftLexer': ('pip._vendor.pygments.lexers.objective', 'Swift', ('swift',), ('*.swift',), ('text/x-swift',)),
    'SwigLexer': ('pip._vendor.pygments.lexers.c_like', 'SWIG', ('swig',), ('*.swg', '*.i'), ('text/swig',)),
    'SystemVerilogLexer': ('pip._vendor.pygments.lexers.hdl', 'systemverilog', ('systemverilog', 'sv'), ('*.sv', '*.svh'), ('text/x-systemverilog',)),
    'SystemdLexer': ('pip._vendor.pygments.lexers.configs', 'Systemd', ('systemd',), ('*.service', '*.socket', '*.device', '*.mount', '*.automount', '*.swap', '*.target', '*.path', '*.timer', '*.slice', '*.scope'), ()),
    'TAPLexer': ('pip._vendor.pygments.lexers.testing', 'TAP', ('tap',), ('*.tap',), ()),
    'TNTLexer': ('pip._vendor.pygments.lexers.tnt', 'Typographic Number Theory', ('tnt',), ('*.tnt',), ()),
    'TOMLLexer': ('pip._vendor.pygments.lexers.configs', 'TOML', ('toml',), ('*.toml', 'Pipfile', 'poetry.lock'), ('application/toml',)),
    'TactLexer': ('pip._vendor.pygments.lexers.tact', 'Tact', ('tact',), ('*.tact',), ()),
    'Tads3Lexer': ('pip._vendor.pygments.lexers.int_fiction', 'TADS 3', ('tads3',), ('*.t',), ()),
    'TalLexer': ('pip._vendor.pygments.lexers.tal', 'Tal', ('tal', 'uxntal'), ('*.tal',), ('text/x-uxntal',)),
    'TasmLexer': ('pip._vendor.pygments.lexers.asm', 'TASM', ('tasm',), ('*.asm', '*.ASM', '*.tasm'), ('text/x-tasm',)),
    'TclLexer': ('pip._vendor.pygments.lexers.tcl', 'Tcl', ('tcl',), ('*.tcl', '*.rvt'), ('text/x-tcl', 'text/x-script.tcl', 'application/x-tcl')),
    'TcshLexer': ('pip._vendor.pygments.lexers.shell', 'Tcsh', ('tcsh', 'csh'), ('*.tcsh', '*.csh'), ('application/x-csh',)),
    'TcshSessionLexer': ('pip._vendor.pygments.lexers.shell', 'Tcsh Session', ('tcshcon',), (), ()),
    'TeaTemplateLexer': ('pip._vendor.pygments.lexers.templates', 'Tea', ('tea',), ('*.tea',), ('text/x-tea',)),
    'TealLexer': ('pip._vendor.pygments.lexers.teal', 'teal', ('teal',), ('*.teal',), ()),
    'TeraTermLexer': ('pip._vendor.pygments.lexers.teraterm', 'Tera Term macro', ('teratermmacro', 'teraterm', 'ttl'), ('*.ttl',), ('text/x-teratermmacro',)),
    'TermcapLexer': ('pip._vendor.pygments.lexers.configs', 'Termcap', ('termcap',), ('termcap', 'termcap.src'), ()),
    'TerminfoLexer': ('pip._vendor.pygments.lexers.configs', 'Terminfo', ('terminfo',), ('terminfo', 'terminfo.src'), ()),
    'TerraformLexer': ('pip._vendor.pygments.lexers.configs', 'Terraform', ('terraform', 'tf', 'hcl'), ('*.tf', '*.hcl'), ('application/x-tf', 'application/x-terraform')),
    'TexLexer': ('pip._vendor.pygments.lexers.markup', 'TeX', ('tex', 'latex'), ('*.tex', '*.aux', '*.toc'), ('text/x-tex', 'text/x-latex')),
    'TextLexer': ('pip._vendor.pygments.lexers.special', 'Text only', ('text',), ('*.txt',), ('text/plain',)),
    'ThingsDBLexer': ('pip._vendor.pygments.lexers.thingsdb', 'ThingsDB', ('ti', 'thingsdb'), ('*.ti',), ()),
    'ThriftLexer': ('pip._vendor.pygments.lexers.dsls', 'Thrift', ('thrift',), ('*.thrift',), ('application/x-thrift',)),
    'TiddlyWiki5Lexer': ('pip._vendor.pygments.lexers.markup', 'tiddler', ('tid',), ('*.tid',), ('text/vnd.tiddlywiki',)),
    'TlbLexer': ('pip._vendor.pygments.lexers.tlb', 'Tl-b', ('tlb',), ('*.tlb',), ()),
    'TlsLexer': ('pip._vendor.pygments.lexers.tls', 'TLS Presentation Language', ('tls',), (), ()),
    'TodotxtLexer': ('pip._vendor.pygments.lexers.textfmts', 'Todotxt', ('todotxt',), ('todo.txt', '*.todotxt'), ('text/x-todo',)),
    'TransactSqlLexer': ('pip._vendor.pygments.lexers.sql', 'Transact-SQL', ('tsql', 't-sql'), ('*.sql',), ('text/x-tsql',)),
    'TreetopLexer': ('pip._vendor.pygments.lexers.parsers', 'Treetop', ('treetop',), ('*.treetop', '*.tt'), ()),
    'TurtleLexer': ('pip._vendor.pygments.lexers.rdf', 'Turtle', ('turtle',), ('*.ttl',), ('text/turtle', 'application/x-turtle')),
    'TwigHtmlLexer': ('pip._vendor.pygments.lexers.templates', 'HTML+Twig', ('html+twig',), ('*.twig',), ('text/html+twig',)),
    'TwigLexer': ('pip._vendor.pygments.lexers.templates', 'Twig', ('twig',), (), ('application/x-twig',)),
    'TypeScriptLexer': ('pip._vendor.pygments.lexers.javascript', 'TypeScript', ('typescript', 'ts'), ('*.ts',), ('application/x-typescript', 'text/x-typescript')),
    'TypoScriptCssDataLexer': ('pip._vendor.pygments.lexers.typoscript', 'TypoScriptCssData', ('typoscriptcssdata',), (), ()),
    'TypoScriptHtmlDataLexer': ('pip._vendor.pygments.lexers.typoscript', 'TypoScriptHtmlData', ('typoscripthtmldata',), (), ()),
    'TypoScriptLexer': ('pip._vendor.pygments.lexers.typoscript', 'TypoScript', ('typoscript',), ('*.typoscript',), ('text/x-typoscript',)),
    'TypstLexer': ('pip._vendor.pygments.lexers.typst', 'Typst', ('typst',), ('*.typ',), ('text/x-typst',)),
    'UL4Lexer': ('pip._vendor.pygments.lexers.ul4', 'UL4', ('ul4',), ('*.ul4',), ()),
    'UcodeLexer': ('pip._vendor.pygments.lexers.unicon', 'ucode', ('ucode',), ('*.u', '*.u1', '*.u2'), ()),
    'UniconLexer': ('pip._vendor.pygments.lexers.unicon', 'Unicon', ('unicon',), ('*.icn',), ('text/unicon',)),
    'UnixConfigLexer': ('pip._vendor.pygments.lexers.configs', 'Unix/Linux config files', ('unixconfig', 'linuxconfig'), (), ()),
    'UrbiscriptLexer': ('pip._vendor.pygments.lexers.urbi', 'UrbiScript', ('urbiscript',), ('*.u',), ('application/x-urbiscript',)),
    'UrlEncodedLexer': ('pip._vendor.pygments.lexers.html', 'urlencoded', ('urlencoded',), (), ('application/x-www-form-urlencoded',)),
    'UsdLexer': ('pip._vendor.pygments.lexers.usd', 'USD', ('usd', 'usda'), ('*.usd', '*.usda'), ()),
    'VBScriptLexer': ('pip._vendor.pygments.lexers.basic', 'VBScript', ('vbscript',), ('*.vbs', '*.VBS'), ()),
    'VCLLexer': ('pip._vendor.pygments.lexers.varnish', 'VCL', ('vcl',), ('*.vcl',), ('text/x-vclsrc',)),
    'VCLSnippetLexer': ('pip._vendor.pygments.lexers.varnish', 'VCLSnippets', ('vclsnippets', 'vclsnippet'), (), ('text/x-vclsnippet',)),
    'VCTreeStatusLexer': ('pip._vendor.pygments.lexers.console', 'VCTreeStatus', ('vctreestatus',), (), ()),
    'VGLLexer': ('pip._vendor.pygments.lexers.dsls', 'VGL', ('vgl',), ('*.rpf',), ()),
    'ValaLexer': ('pip._vendor.pygments.lexers.c_like', 'Vala', ('vala', 'vapi'), ('*.vala', '*.vapi'), ('text/x-vala',)),
    'VbNetAspxLexer': ('pip._vendor.pygments.lexers.dotnet', 'aspx-vb', ('aspx-vb',), ('*.aspx', '*.asax', '*.ascx', '*.ashx', '*.asmx', '*.axd'), ()),
    'VbNetLexer': ('pip._vendor.pygments.lexers.dotnet', 'VB.net', ('vb.net', 'vbnet', 'lobas', 'oobas', 'sobas', 'visual-basic', 'visualbasic'), ('*.vb', '*.bas'), ('text/x-vbnet', 'text/x-vba')),
    'VelocityHtmlLexer': ('pip._vendor.pygments.lexers.templates', 'HTML+Velocity', ('html+velocity',), (), ('text/html+velocity',)),
    'VelocityLexer': ('pip._vendor.pygments.lexers.templates', 'Velocity', ('velocity',), ('*.vm', '*.fhtml'), ()),
    'VelocityXmlLexer': ('pip._vendor.pygments.lexers.templates', 'XML+Velocity', ('xml+velocity',), (), ('application/xml+velocity',)),
    'VerifpalLexer': ('pip._vendor.pygments.lexers.verifpal', 'Verifpal', ('verifpal',), ('*.vp',), ('text/x-verifpal',)),
    'VerilogLexer': ('pip._vendor.pygments.lexers.hdl', 'verilog', ('verilog', 'v'), ('*.v',), ('text/x-verilog',)),
    'VhdlLexer': ('pip._vendor.pygments.lexers.hdl', 'vhdl', ('vhdl',), ('*.vhdl', '*.vhd'), ('text/x-vhdl',)),
    'VimLexer': ('pip._vendor.pygments.lexers.textedit', 'VimL', ('vim',), ('*.vim', '.vimrc', '.exrc', '.gvimrc', '_vimrc', '_exrc', '_gvimrc', 'vimrc', 'gvimrc'), ('text/x-vim',)),
    'VisualPrologGrammarLexer': ('pip._vendor.pygments.lexers.vip', 'Visual Prolog Grammar', ('visualprologgrammar',), ('*.vipgrm',), ()),
    'VisualPrologLexer': ('pip._vendor.pygments.lexers.vip', 'Visual Prolog', ('visualprolog',), ('*.pro', '*.cl', '*.i', '*.pack', '*.ph'), ()),
    'VyperLexer': ('pip._vendor.pygments.lexers.vyper', 'Vyper', ('vyper',), ('*.vy',), ()),
    'WDiffLexer': ('pip._vendor.pygments.lexers.diff', 'WDiff', ('wdiff',), ('*.wdiff',), ()),
    'WatLexer': ('pip._vendor.pygments.lexers.webassembly', 'WebAssembly', ('wast', 'wat'), ('*.wat', '*.wast'), ()),
    'WebIDLLexer': ('pip._vendor.pygments.lexers.webidl', 'Web IDL', ('webidl',), ('*.webidl',), ()),
    'WgslLexer': ('pip._vendor.pygments.lexers.wgsl', 'WebGPU Shading Language', ('wgsl',), ('*.wgsl',), ('text/wgsl',)),
    'WhileyLexer': ('pip._vendor.pygments.lexers.whiley', 'Whiley', ('whiley',), ('*.whiley',), ('text/x-whiley',)),
    'WikitextLexer': ('pip._vendor.pygments.lexers.markup', 'Wikitext', ('wikitext', 'mediawiki'), (), ('text/x-wiki',)),
    'WoWTocLexer': ('pip._vendor.pygments.lexers.wowtoc', 'World of Warcraft TOC', ('wowtoc',), ('*.toc',), ()),
    'WrenLexer': ('pip._vendor.pygments.lexers.wren', 'Wren', ('wren',), ('*.wren',), ()),
    'X10Lexer': ('pip._vendor.pygments.lexers.x10', 'X10', ('x10', 'xten'), ('*.x10',), ('text/x-x10',)),
    'XMLUL4Lexer': ('pip._vendor.pygments.lexers.ul4', 'XML+UL4', ('xml+ul4',), ('*.xmlul4',), ()),
    'XQueryLexer': ('pip._vendor.pygments.lexers.webmisc', 'XQuery', ('xquery', 'xqy', 'xq', 'xql', 'xqm'), ('*.xqy', '*.xquery', '*.xq', '*.xql', '*.xqm'), ('text/xquery', 'application/xquery')),
    'XmlDjangoLexer': ('pip._vendor.pygments.lexers.templates', 'XML+Django/Jinja', ('xml+django', 'xml+jinja'), ('*.xml.j2', '*.xml.jinja2'), ('application/xml+django', 'application/xml+jinja')),
    'XmlErbLexer': ('pip._vendor.pygments.lexers.templates', 'XML+Ruby', ('xml+ruby', 'xml+erb'), (), ('application/xml+ruby',)),
    'XmlLexer': ('pip._vendor.pygments.lexers.html', 'XML', ('xml',), ('*.xml', '*.xsl', '*.rss', '*.xslt', '*.xsd', '*.wsdl', '*.wsf'), ('text/xml', 'application/xml', 'image/svg+xml', 'application/rss+xml', 'application/atom+xml')),
    'XmlPhpLexer': ('pip._vendor.pygments.lexers.templates', 'XML+PHP', ('xml+php',), (), ('application/xml+php',)),
    'XmlSmartyLexer': ('pip._vendor.pygments.lexers.templates', 'XML+Smarty', ('xml+smarty',), (), ('application/xml+smarty',)),
    'XorgLexer': ('pip._vendor.pygments.lexers.xorg', 'Xorg', ('xorg.conf',), ('xorg.conf',), ()),
    'XppLexer': ('pip._vendor.pygments.lexers.dotnet', 'X++', ('xpp', 'x++'), ('*.xpp',), ()),
    'XsltLexer': ('pip._vendor.pygments.lexers.html', 'XSLT', ('xslt',), ('*.xsl', '*.xslt', '*.xpl'), ('application/xsl+xml', 'application/xslt+xml')),
    'XtendLexer': ('pip._vendor.pygments.lexers.jvm', 'Xtend', ('xtend',), ('*.xtend',), ('text/x-xtend',)),
    'XtlangLexer': ('pip._vendor.pygments.lexers.lisp', 'xtlang', ('extempore',), ('*.xtm',), ()),
    'YamlJinjaLexer': ('pip._vendor.pygments.lexers.templates', 'YAML+Jinja', ('yaml+jinja', 'salt', 'sls'), ('*.sls', '*.yaml.j2', '*.yml.j2', '*.yaml.jinja2', '*.yml.jinja2'), ('text/x-yaml+jinja', 'text/x-sls')),
    'YamlLexer': ('pip._vendor.pygments.lexers.data', 'YAML', ('yaml',), ('*.yaml', '*.yml'), ('text/x-yaml',)),
    'YangLexer': ('pip._vendor.pygments.lexers.yang', 'YANG', ('yang',), ('*.yang',), ('application/yang',)),
    'YaraLexer': ('pip._vendor.pygments.lexers.yara', 'YARA', ('yara', 'yar'), ('*.yar',), ('text/x-yara',)),
    'ZeekLexer': ('pip._vendor.pygments.lexers.dsls', 'Zeek', ('zeek', 'bro'), ('*.zeek', '*.bro'), ()),
    'ZephirLexer': ('pip._vendor.pygments.lexers.php', 'Zephir', ('zephir',), ('*.zep',), ()),
    'ZigLexer': ('pip._vendor.pygments.lexers.zig', 'Zig', ('zig',), ('*.zig',), ('text/zig',)),
    'apdlexer': ('pip._vendor.pygments.lexers.apdlexer', 'ANSYS parametric design language', ('ansys', 'apdl'), ('*.ans',), ()),
}

"""
    pygments.formatters.terminal
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Formatter for terminal output with ANSI sequences.

    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.
    :license: BSD, see LICENSE for details.
"""

from pip._vendor.pygments.formatter import Formatter
from pip._vendor.pygments.token import Keyword, Name, Comment, String, Error, \
    Number, Operator, Generic, Token, Whitespace
from pip._vendor.pygments.console import ansiformat
from pip._vendor.pygments.util import get_choice_opt


__all__ = ['TerminalFormatter']


#: Map token types to a tuple of color values for light and dark
#: backgrounds.
TERMINAL_COLORS = {
    Token:              ('',            ''),

    Whitespace:         ('gray',   'brightblack'),
    Comment:            ('gray',   'brightblack'),
    Comment.Preproc:    ('cyan',        'brightcyan'),
    Keyword:            ('blue',    'brightblue'),
    Keyword.Type:       ('cyan',        'brightcyan'),
    Operator.Word:      ('magenta',      'brightmagenta'),
    Name.Builtin:       ('cyan',        'brightcyan'),
    Name.Function:      ('green',   'brightgreen'),
    Name.Namespace:     ('_cyan_',      '_brightcyan_'),
    Name.Class:         ('_green_', '_brightgreen_'),
    Name.Exception:     ('cyan',        'brightcyan'),
    Name.Decorator:     ('brightblack',    'gray'),
    Name.Variable:      ('red',     'brightred'),
    Name.Constant:      ('red',     'brightred'),
    Name.Attribute:     ('cyan',        'brightcyan'),
    Name.Tag:           ('brightblue',        'brightblue'),
    String:             ('yellow',       'yellow'),
    Number:             ('blue',    'brightblue'),

    Generic.Deleted:    ('brightred',        'brightred'),
    Generic.Inserted:   ('green',  'brightgreen'),
    Generic.Heading:    ('**',         '**'),
    Generic.Subheading: ('*magenta*',   '*brightmagenta*'),
    Generic.Prompt:     ('**',         '**'),
    Generic.Error:      ('brightred',        'brightred'),

    Error:              ('_brightred_',      '_brightred_'),
}


class TerminalFormatter(Formatter):
    r"""
    Format tokens with ANSI color sequences, for output in a text console.
    Color sequences are terminated at newlines, so that paging the output
    works correctly.

    The `get_style_defs()` method doesn't do anything special since there is
    no support for common styles.

    Options accepted:

    `bg`
        Set to ``"light"`` or ``"dark"`` depending on the terminal's background
        (default: ``"light"``).

    `colorscheme`
        A dictionary mapping token types to (lightbg, darkbg) color names or
        ``None`` (default: ``None`` = use builtin colorscheme).

    `linenos`
        Set to ``True`` to have line numbers on the terminal output as well
        (default: ``False`` = no line numbers).
    """
    name = 'Terminal'
    aliases = ['terminal', 'console']
    filenames = []

    def __init__(self, **options):
        Formatter.__init__(self, **options)
        self.darkbg = get_choice_opt(options, 'bg',
                                     ['light', 'dark'], 'light') == 'dark'
        self.colorscheme = options.get('colorscheme', None) or TERMINAL_COLORS
        self.linenos = options.get('linenos', False)
        self._lineno = 0

    def format(self, tokensource, outfile):
        return Formatter.format(self, tokensource, outfile)

    def _write_lineno(self, outfile):
        self._lineno += 1
        outfile.write("%s%04d: " % (self._lineno != 1 and '\n' or '', self._lineno))

    def _get_color(self, ttype):
        # self.colorscheme is a dict containing usually generic types, so we
        # have to walk the tree of dots.  The base Token type must be a key,
        # even if it's empty string, as in the default above.
        colors = self.colorscheme.get(ttype)
        while colors is None:
            ttype = ttype.parent
            colors = self.colorscheme.get(ttype)
        return colors[self.darkbg]

    def format_unencoded(self, tokensource, outfile):
        if self.linenos:
            self._write_lineno(outfile)

        for ttype, value in tokensource:
            color = self._get_color(ttype)

            for line in value.splitlines(True):
                if color:
                    outfile.write(ansiformat(color, line.rstrip('\n')))
                else:
                    outfile.write(line.rstrip('\n'))
                if line.endswith('\n'):
                    if self.linenos:
                        self._write_lineno(outfile)
                    else:
                        outfile.write('\n')

        if self.linenos:
            outfile.write("\n")

"""
    pygments.formatters.html
    ~~~~~~~~~~~~~~~~~~~~~~~~

    Formatter for HTML output.

    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.
    :license: BSD, see LICENSE for details.
"""

import functools
import os
import sys
import os.path
from io import StringIO

from pip._vendor.pygments.formatter import Formatter
from pip._vendor.pygments.token import Token, Text, STANDARD_TYPES
from pip._vendor.pygments.util import get_bool_opt, get_int_opt, get_list_opt

try:
    import ctags
except ImportError:
    ctags = None

__all__ = ['HtmlFormatter']


_escape_html_table = {
    ord('&'): '&amp;',
    ord('<'): '&lt;',
    ord('>'): '&gt;',
    ord('"'): '&quot;',
    ord("'"): '&#39;',
}


def escape_html(text, table=_escape_html_table):
    """Escape &, <, > as well as single and double quotes for HTML."""
    return text.translate(table)


def webify(color):
    if color.startswith('calc') or color.startswith('var'):
        return color
    else:
        return '#' + color


def _get_ttype_class(ttype):
    fname = STANDARD_TYPES.get(ttype)
    if fname:
        return fname
    aname = ''
    while fname is None:
        aname = '-' + ttype[-1] + aname
        ttype = ttype.parent
        fname = STANDARD_TYPES.get(ttype)
    return fname + aname


CSSFILE_TEMPLATE = '''\
/*
generated by Pygments <https://pygments.org/>
Copyright 2006-2024 by the Pygments team.
Licensed under the BSD license, see LICENSE for details.
*/
%(styledefs)s
'''

DOC_HEADER = '''\
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">
<!--
generated by Pygments <https://pygments.org/>
Copyright 2006-2024 by the Pygments team.
Licensed under the BSD license, see LICENSE for details.
-->
<html>
<head>
  <title>%(title)s</title>
  <meta http-equiv="content-type" content="text/html; charset=%(encoding)s">
  <style type="text/css">
''' + CSSFILE_TEMPLATE + '''
  </style>
</head>
<body>
<h2>%(title)s</h2>

'''

DOC_HEADER_EXTERNALCSS = '''\
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">

<html>
<head>
  <title>%(title)s</title>
  <meta http-equiv="content-type" content="text/html; charset=%(encoding)s">
  <link rel="stylesheet" href="%(cssfile)s" type="text/css">
</head>
<body>
<h2>%(title)s</h2>

'''

DOC_FOOTER = '''\
</body>
</html>
'''


class HtmlFormatter(Formatter):
    r"""
    Format tokens as HTML 4 ``<span>`` tags. By default, the content is enclosed
    in a ``<pre>`` tag, itself wrapped in a ``<div>`` tag (but see the `nowrap` option).
    The ``<div>``'s CSS class can be set by the `cssclass` option.

    If the `linenos` option is set to ``"table"``, the ``<pre>`` is
    additionally wrapped inside a ``<table>`` which has one row and two
    cells: one containing the line numbers and one containing the code.
    Example:

    .. sourcecode:: html

        <div class="highlight" >
        <table><tr>
          <td class="linenos" title="click to toggle"
            onclick="with (this.firstChild.style)
                     { display = (display == '') ? 'none' : '' }">
            <pre>1
            2</pre>
          </td>
          <td class="code">
            <pre><span class="Ke">def </span><span class="NaFu">foo</span>(bar):
              <span class="Ke">pass</span>
            </pre>
          </td>
        </tr></table></div>

    (whitespace added to improve clarity).

    A list of lines can be specified using the `hl_lines` option to make these
    lines highlighted (as of Pygments 0.11).

    With the `full` option, a complete HTML 4 document is output, including
    the style definitions inside a ``<style>`` tag, or in a separate file if
    the `cssfile` option is given.

    When `tagsfile` is set to the path of a ctags index file, it is used to
    generate hyperlinks from names to their definition.  You must enable
    `lineanchors` and run ctags with the `-n` option for this to work.  The
    `python-ctags` module from PyPI must be installed to use this feature;
    otherwise a `RuntimeError` will be raised.

    The `get_style_defs(arg='')` method of a `HtmlFormatter` returns a string
    containing CSS rules for the CSS classes used by the formatter. The
    argument `arg` can be used to specify additional CSS selectors that
    are prepended to the classes. A call `fmter.get_style_defs('td .code')`
    would result in the following CSS classes:

    .. sourcecode:: css

        td .code .kw { font-weight: bold; color: #00FF00 }
        td .code .cm { color: #999999 }
        ...

    If you have Pygments 0.6 or higher, you can also pass a list or tuple to the
    `get_style_defs()` method to request multiple prefixes for the tokens:

    .. sourcecode:: python

        formatter.get_style_defs(['div.syntax pre', 'pre.syntax'])

    The output would then look like this:

    .. sourcecode:: css

        div.syntax pre .kw,
        pre.syntax .kw { font-weight: bold; color: #00FF00 }
        div.syntax pre .cm,
        pre.syntax .cm { color: #999999 }
        ...

    Additional options accepted:

    `nowrap`
        If set to ``True``, don't add a ``<pre>`` and a ``<div>`` tag
        around the tokens. This disables most other options (default: ``False``).

    `full`
        Tells the formatter to output a "full" document, i.e. a complete
        self-contained document (default: ``False``).

    `title`
        If `full` is true, the title that should be used to caption the
        document (default: ``''``).

    `style`
        The style to use, can be a string or a Style subclass (default:
        ``'default'``). This option has no effect if the `cssfile`
        and `noclobber_cssfile` option are given and the file specified in
        `cssfile` exists.

    `noclasses`
        If set to true, token ``<span>`` tags (as well as line number elements)
        will not use CSS classes, but inline styles. This is not recommended
        for larger pieces of code since it increases output size by quite a bit
        (default: ``False``).

    `classprefix`
        Since the token types use relatively short class names, they may clash
        with some of your own class names. In this case you can use the
        `classprefix` option to give a string to prepend to all Pygments-generated
        CSS class names for token types.
        Note that this option also affects the output of `get_style_defs()`.

    `cssclass`
        CSS class for the wrapping ``<div>`` tag (default: ``'highlight'``).
        If you set this option, the default selector for `get_style_defs()`
        will be this class.

        .. versionadded:: 0.9
           If you select the ``'table'`` line numbers, the wrapping table will
           have a CSS class of this string plus ``'table'``, the default is
           accordingly ``'highlighttable'``.

    `cssstyles`
        Inline CSS styles for the wrapping ``<div>`` tag (default: ``''``).

    `prestyles`
        Inline CSS styles for the ``<pre>`` tag (default: ``''``).

        .. versionadded:: 0.11

    `cssfile`
        If the `full` option is true and this option is given, it must be the
        name of an external file. If the filename does not include an absolute
        path, the file's path will be assumed to be relative to the main output
        file's path, if the latter can be found. The stylesheet is then written
        to this file instead of the HTML file.

        .. versionadded:: 0.6

    `noclobber_cssfile`
        If `cssfile` is given and the specified file exists, the css file will
        not be overwritten. This allows the use of the `full` option in
        combination with a user specified css file. Default is ``False``.

        .. versionadded:: 1.1

    `linenos`
        If set to ``'table'``, output line numbers as a table with two cells,
        one containing the line numbers, the other the whole code.  This is
        copy-and-paste-friendly, but may cause alignment problems with some
        browsers or fonts.  If set to ``'inline'``, the line numbers will be
        integrated in the ``<pre>`` tag that contains the code (that setting
        is *new in Pygments 0.8*).

        For compatibility with Pygments 0.7 and earlier, every true value
        except ``'inline'`` means the same as ``'table'`` (in particular, that
        means also ``True``).

        The default value is ``False``, which means no line numbers at all.

        **Note:** with the default ("table") line number mechanism, the line
        numbers and code can have different line heights in Internet Explorer
        unless you give the enclosing ``<pre>`` tags an explicit ``line-height``
        CSS property (you get the default line spacing with ``line-height:
        125%``).

    `hl_lines`
        Specify a list of lines to be highlighted. The line numbers are always
        relative to the input (i.e. the first line is line 1) and are
        independent of `linenostart`.

        .. versionadded:: 0.11

    `linenostart`
        The line number for the first line (default: ``1``).

    `linenostep`
        If set to a number n > 1, only every nth line number is printed.

    `linenospecial`
        If set to a number n > 0, every nth line number is given the CSS
        class ``"special"`` (default: ``0``).

    `nobackground`
        If set to ``True``, the formatter won't output the background color
        for the wrapping element (this automatically defaults to ``False``
        when there is no wrapping element [eg: no argument for the
        `get_syntax_defs` method given]) (default: ``False``).

        .. versionadded:: 0.6

    `lineseparator`
        This string is output between lines of code. It defaults to ``"\n"``,
        which is enough to break a line inside ``<pre>`` tags, but you can
        e.g. set it to ``"<br>"`` to get HTML line breaks.

        .. versionadded:: 0.7

    `lineanchors`
        If set to a nonempty string, e.g. ``foo``, the formatter will wrap each
        output line in an anchor tag with an ``id`` (and `name`) of ``foo-linenumber``.
        This allows easy linking to certain lines.

        .. versionadded:: 0.9

    `linespans`
        If set to a nonempty string, e.g. ``foo``, the formatter will wrap each
        output line in a span tag with an ``id`` of ``foo-linenumber``.
        This allows easy access to lines via javascript.

        .. versionadded:: 1.6

    `anchorlinenos`
        If set to `True`, will wrap line numbers in <a> tags. Used in
        combination with `linenos` and `lineanchors`.

    `tagsfile`
        If set to the path of a ctags file, wrap names in anchor tags that
        link to their definitions. `lineanchors` should be used, and the
        tags file should specify line numbers (see the `-n` option to ctags).
        The tags file is assumed to be encoded in UTF-8.

        .. versionadded:: 1.6

    `tagurlformat`
        A string formatting pattern used to generate links to ctags definitions.
        Available variables are `%(path)s`, `%(fname)s` and `%(fext)s`.
        Defaults to an empty string, resulting in just `#prefix-number` links.

        .. versionadded:: 1.6

    `filename`
        A string used to generate a filename when rendering ``<pre>`` blocks,
        for example if displaying source code. If `linenos` is set to
        ``'table'`` then the filename will be rendered in an initial row
        containing a single `<th>` which spans both columns.

        .. versionadded:: 2.1

    `wrapcode`
        Wrap the code inside ``<pre>`` blocks using ``<code>``, as recommended
        by the HTML5 specification.

        .. versionadded:: 2.4

    `debug_token_types`
        Add ``title`` attributes to all token ``<span>`` tags that show the
        name of the token.

        .. versionadded:: 2.10


    **Subclassing the HTML formatter**

    .. versionadded:: 0.7

    The HTML formatter is now built in a way that allows easy subclassing, thus
    customizing the output HTML code. The `format()` method calls
    `self._format_lines()` which returns a generator that yields tuples of ``(1,
    line)``, where the ``1`` indicates that the ``line`` is a line of the
    formatted source code.

    If the `nowrap` option is set, the generator is the iterated over and the
    resulting HTML is output.

    Otherwise, `format()` calls `self.wrap()`, which wraps the generator with
    other generators. These may add some HTML code to the one generated by
    `_format_lines()`, either by modifying the lines generated by the latter,
    then yielding them again with ``(1, line)``, and/or by yielding other HTML
    code before or after the lines, with ``(0, html)``. The distinction between
    source lines and other code makes it possible to wrap the generator multiple
    times.

    The default `wrap()` implementation adds a ``<div>`` and a ``<pre>`` tag.

    A custom `HtmlFormatter` subclass could look like this:

    .. sourcecode:: python

        class CodeHtmlFormatter(HtmlFormatter):

            def wrap(self, source, *, include_div):
                return self._wrap_code(source)

            def _wrap_code(self, source):
                yield 0, '<code>'
                for i, t in source:
                    if i == 1:
                        # it's a line of formatted code
                        t += '<br>'
                    yield i, t
                yield 0, '</code>'

    This results in wrapping the formatted lines with a ``<code>`` tag, where the
    source lines are broken using ``<br>`` tags.

    After calling `wrap()`, the `format()` method also adds the "line numbers"
    and/or "full document" wrappers if the respective options are set. Then, all
    HTML yielded by the wrapped generator is output.
    """

    name = 'HTML'
    aliases = ['html']
    filenames = ['*.html', '*.htm']

    def __init__(self, **options):
        Formatter.__init__(self, **options)
        self.title = self._decodeifneeded(self.title)
        self.nowrap = get_bool_opt(options, 'nowrap', False)
        self.noclasses = get_bool_opt(options, 'noclasses', False)
        self.classprefix = options.get('classprefix', '')
        self.cssclass = self._decodeifneeded(options.get('cssclass', 'highlight'))
        self.cssstyles = self._decodeifneeded(options.get('cssstyles', ''))
        self.prestyles = self._decodeifneeded(options.get('prestyles', ''))
        self.cssfile = self._decodeifneeded(options.get('cssfile', ''))
        self.noclobber_cssfile = get_bool_opt(options, 'noclobber_cssfile', False)
        self.tagsfile = self._decodeifneeded(options.get('tagsfile', ''))
        self.tagurlformat = self._decodeifneeded(options.get('tagurlformat', ''))
        self.filename = self._decodeifneeded(options.get('filename', ''))
        self.wrapcode = get_bool_opt(options, 'wrapcode', False)
        self.span_element_openers = {}
        self.debug_token_types = get_bool_opt(options, 'debug_token_types', False)

        if self.tagsfile:
            if not ctags:
                raise RuntimeError('The "ctags" package must to be installed '
                                   'to be able to use the "tagsfile" feature.')
            self._ctags = ctags.CTags(self.tagsfile)

        linenos = options.get('linenos', False)
        if linenos == 'inline':
            self.linenos = 2
        elif linenos:
            # compatibility with <= 0.7
            self.linenos = 1
        else:
            self.linenos = 0
        self.linenostart = abs(get_int_opt(options, 'linenostart', 1))
        self.linenostep = abs(get_int_opt(options, 'linenostep', 1))
        self.linenospecial = abs(get_int_opt(options, 'linenospecial', 0))
        self.nobackground = get_bool_opt(options, 'nobackground', False)
        self.lineseparator = options.get('lineseparator', '\n')
        self.lineanchors = options.get('lineanchors', '')
        self.linespans = options.get('linespans', '')
        self.anchorlinenos = get_bool_opt(options, 'anchorlinenos', False)
        self.hl_lines = set()
        for lineno in get_list_opt(options, 'hl_lines', []):
            try:
                self.hl_lines.add(int(lineno))
            except ValueError:
                pass

        self._create_stylesheet()

    def _get_css_class(self, ttype):
        """Return the css class of this token type prefixed with
        the classprefix option."""
        ttypeclass = _get_ttype_class(ttype)
        if ttypeclass:
            return self.classprefix + ttypeclass
        return ''

    def _get_css_classes(self, ttype):
        """Return the CSS classes of this token type prefixed with the classprefix option."""
        cls = self._get_css_class(ttype)
        while ttype not in STANDARD_TYPES:
            ttype = ttype.parent
            cls = self._get_css_class(ttype) + ' ' + cls
        return cls or ''

    def _get_css_inline_styles(self, ttype):
        """Return the inline CSS styles for this token type."""
        cclass = self.ttype2class.get(ttype)
        while cclass is None:
            ttype = ttype.parent
            cclass = self.ttype2class.get(ttype)
        return cclass or ''

    def _create_stylesheet(self):
        t2c = self.ttype2class = {Token: ''}
        c2s = self.class2style = {}
        for ttype, ndef in self.style:
            name = self._get_css_class(ttype)
            style = ''
            if ndef['color']:
                style += 'color: {}; '.format(webify(ndef['color']))
            if ndef['bold']:
                style += 'font-weight: bold; '
            if ndef['italic']:
                style += 'font-style: italic; '
            if ndef['underline']:
                style += 'text-decoration: underline; '
            if ndef['bgcolor']:
                style += 'background-color: {}; '.format(webify(ndef['bgcolor']))
            if ndef['border']:
                style += 'border: 1px solid {}; '.format(webify(ndef['border']))
            if style:
                t2c[ttype] = name
                # save len(ttype) to enable ordering the styles by
                # hierarchy (necessary for CSS cascading rules!)
                c2s[name] = (style[:-2], ttype, len(ttype))

    def get_style_defs(self, arg=None):
        """
        Return CSS style definitions for the classes produced by the current
        highlighting style. ``arg`` can be a string or list of selectors to
        insert before the token type classes.
        """
        style_lines = []

        style_lines.extend(self.get_linenos_style_defs())
        style_lines.extend(self.get_background_style_defs(arg))
        style_lines.extend(self.get_token_style_defs(arg))

        return '\n'.join(style_lines)

    def get_token_style_defs(self, arg=None):
        prefix = self.get_css_prefix(arg)

        styles = [
            (level, ttype, cls, style)
            for cls, (style, ttype, level) in self.class2style.items()
            if cls and style
        ]
        styles.sort()

        lines = [
            f'{prefix(cls)} {{ {style} }} /* {repr(ttype)[6:]} */'
            for (level, ttype, cls, style) in styles
        ]

        return lines

    def get_background_style_defs(self, arg=None):
        prefix = self.get_css_prefix(arg)
        bg_color = self.style.background_color
        hl_color = self.style.highlight_color

        lines = []

        if arg and not self.nobackground and bg_color is not None:
            text_style = ''
            if Text in self.ttype2class:
                text_style = ' ' + self.class2style[self.ttype2class[Text]][0]
            lines.insert(
                0, '{}{{ background: {};{} }}'.format(
                    prefix(''), bg_color, text_style
                )
            )
        if hl_color is not None:
            lines.insert(
                0, '{} {{ background-color: {} }}'.format(prefix('hll'), hl_color)
            )

        return lines

    def get_linenos_style_defs(self):
        lines = [
            f'pre {{ {self._pre_style} }}',
            f'td.linenos .normal {{ {self._linenos_style} }}',
            f'span.linenos {{ {self._linenos_style} }}',
            f'td.linenos .special {{ {self._linenos_special_style} }}',
            f'span.linenos.special {{ {self._linenos_special_style} }}',
        ]

        return lines

    def get_css_prefix(self, arg):
        if arg is None:
            arg = ('cssclass' in self.options and '.'+self.cssclass or '')
        if isinstance(arg, str):
            args = [arg]
        else:
            args = list(arg)

        def prefix(cls):
            if cls:
                cls = '.' + cls
            tmp = []
            for arg in args:
                tmp.append((arg and arg + ' ' or '') + cls)
            return ', '.join(tmp)

        return prefix

    @property
    def _pre_style(self):
        return 'line-height: 125%;'

    @property
    def _linenos_style(self):
        color = self.style.line_number_color
        background_color = self.style.line_number_background_color
        return f'color: {color}; background-color: {background_color}; padding-left: 5px; padding-right: 5px;'

    @property
    def _linenos_special_style(self):
        color = self.style.line_number_special_color
        background_color = self.style.line_number_special_background_color
        return f'color: {color}; background-color: {background_color}; padding-left: 5px; padding-right: 5px;'

    def _decodeifneeded(self, value):
        if isinstance(value, bytes):
            if self.encoding:
                return value.decode(self.encoding)
            return value.decode()
        return value

    def _wrap_full(self, inner, outfile):
        if self.cssfile:
            if os.path.isabs(self.cssfile):
                # it's an absolute filename
                cssfilename = self.cssfile
            else:
                try:
                    filename = outfile.name
                    if not filename or filename[0] == '<':
                        # pseudo files, e.g. name == '<fdopen>'
                        raise AttributeError
                    cssfilename = os.path.join(os.path.dirname(filename),
                                               self.cssfile)
                except AttributeError:
                    print('Note: Cannot determine output file name, '
                          'using current directory as base for the CSS file name',
                          file=sys.stderr)
                    cssfilename = self.cssfile
            # write CSS file only if noclobber_cssfile isn't given as an option.
            try:
                if not os.path.exists(cssfilename) or not self.noclobber_cssfile:
                    with open(cssfilename, "w", encoding="utf-8") as cf:
                        cf.write(CSSFILE_TEMPLATE %
                                 {'styledefs': self.get_style_defs('body')})
            except OSError as err:
                err.strerror = 'Error writing CSS file: ' + err.strerror
                raise

            yield 0, (DOC_HEADER_EXTERNALCSS %
                      dict(title=self.title,
                           cssfile=self.cssfile,
                           encoding=self.encoding))
        else:
            yield 0, (DOC_HEADER %
                      dict(title=self.title,
                           styledefs=self.get_style_defs('body'),
                           encoding=self.encoding))

        yield from inner
        yield 0, DOC_FOOTER

    def _wrap_tablelinenos(self, inner):
        dummyoutfile = StringIO()
        lncount = 0
        for t, line in inner:
            if t:
                lncount += 1
            dummyoutfile.write(line)

        fl = self.linenostart
        mw = len(str(lncount + fl - 1))
        sp = self.linenospecial
        st = self.linenostep
        anchor_name = self.lineanchors or self.linespans
        aln = self.anchorlinenos
        nocls = self.noclasses

        lines = []

        for i in range(fl, fl+lncount):
            print_line = i % st == 0
            special_line = sp and i % sp == 0

            if print_line:
                line = '%*d' % (mw, i)
                if aln:
                    line = '<a href="#%s-%d">%s</a>' % (anchor_name, i, line)
            else:
                line = ' ' * mw

            if nocls:
                if special_line:
                    style = f' style="{self._linenos_special_style}"'
                else:
                    style = f' style="{self._linenos_style}"'
            else:
                if special_line:
                    style = ' class="special"'
                else:
                    style = ' class="normal"'

            if style:
                line = f'<span{style}>{line}</span>'

            lines.append(line)

        ls = '\n'.join(lines)

        # If a filename was specified, we can't put it into the code table as it
        # would misalign the line numbers. Hence we emit a separate row for it.
        filename_tr = ""
        if self.filename:
            filename_tr = (
                '<tr><th colspan="2" class="filename">'
                '<span class="filename">' + self.filename + '</span>'
                '</th></tr>')

        # in case you wonder about the seemingly redundant <div> here: since the
        # content in the other cell also is wrapped in a div, some browsers in
        # some configurations seem to mess up the formatting...
        yield 0, (f'<table class="{self.cssclass}table">' + filename_tr +
            '<tr><td class="linenos"><div class="linenodiv"><pre>' +
            ls + '</pre></div></td><td class="code">')
        yield 0, '<div>'
        yield 0, dummyoutfile.getvalue()
        yield 0, '</div>'
        yield 0, '</td></tr></table>'


    def _wrap_inlinelinenos(self, inner):
        # need a list of lines since we need the width of a single number :(
        inner_lines = list(inner)
        sp = self.linenospecial
        st = self.linenostep
        num = self.linenostart
        mw = len(str(len(inner_lines) + num - 1))
        anchor_name = self.lineanchors or self.linespans
        aln = self.anchorlinenos
        nocls = self.noclasses

        for _, inner_line in inner_lines:
            print_line = num % st == 0
            special_line = sp and num % sp == 0

            if print_line:
                line = '%*d' % (mw, num)
            else:
                line = ' ' * mw

            if nocls:
                if special_line:
                    style = f' style="{self._linenos_special_style}"'
                else:
                    style = f' style="{self._linenos_style}"'
            else:
                if special_line:
                    style = ' class="linenos special"'
                else:
                    style = ' class="linenos"'

            if style:
                linenos = f'<span{style}>{line}</span>'
            else:
                linenos = line

            if aln:
                yield 1, ('<a href="#%s-%d">%s</a>' % (anchor_name, num, linenos) +
                          inner_line)
            else:
                yield 1, linenos + inner_line
            num += 1

    def _wrap_lineanchors(self, inner):
        s = self.lineanchors
        # subtract 1 since we have to increment i *before* yielding
        i = self.linenostart - 1
        for t, line in inner:
            if t:
                i += 1
                href = "" if self.linenos else ' href="#%s-%d"' % (s, i)
                yield 1, '<a id="%s-%d" name="%s-%d"%s></a>' % (s, i, s, i, href) + line
            else:
                yield 0, line

    def _wrap_linespans(self, inner):
        s = self.linespans
        i = self.linenostart - 1
        for t, line in inner:
            if t:
                i += 1
                yield 1, '<span id="%s-%d">%s</span>' % (s, i, line)
            else:
                yield 0, line

    def _wrap_div(self, inner):
        style = []
        if (self.noclasses and not self.nobackground and
                self.style.background_color is not None):
            style.append(f'background: {self.style.background_color}')
        if self.cssstyles:
            style.append(self.cssstyles)
        style = '; '.join(style)

        yield 0, ('<div' + (self.cssclass and f' class="{self.cssclass}"') +
                  (style and (f' style="{style}"')) + '>')
        yield from inner
        yield 0, '</div>\n'

    def _wrap_pre(self, inner):
        style = []
        if self.prestyles:
            style.append(self.prestyles)
        if self.noclasses:
            style.append(self._pre_style)
        style = '; '.join(style)

        if self.filename and self.linenos != 1:
            yield 0, ('<span class="filename">' + self.filename + '</span>')

        # the empty span here is to keep leading empty lines from being
        # ignored by HTML parsers
        yield 0, ('<pre' + (style and f' style="{style}"') + '><span></span>')
        yield from inner
        yield 0, '</pre>'

    def _wrap_code(self, inner):
        yield 0, '<code>'
        yield from inner
        yield 0, '</code>'

    @functools.lru_cache(maxsize=100)
    def _translate_parts(self, value):
        """HTML-escape a value and split it by newlines."""
        return value.translate(_escape_html_table).split('\n')

    def _format_lines(self, tokensource):
        """
        Just format the tokens, without any wrapping tags.
        Yield individual lines.
        """
        nocls = self.noclasses
        lsep = self.lineseparator
        tagsfile = self.tagsfile

        lspan = ''
        line = []
        for ttype, value in tokensource:
            try:
                cspan = self.span_element_openers[ttype]
            except KeyError:
                title = ' title="{}"'.format('.'.join(ttype)) if self.debug_token_types else ''
                if nocls:
                    css_style = self._get_css_inline_styles(ttype)
                    if css_style:
                        css_style = self.class2style[css_style][0]
                        cspan = f'<span style="{css_style}"{title}>'
                    else:
                        cspan = ''
                else:
                    css_class = self._get_css_classes(ttype)
                    if css_class:
                        cspan = f'<span class="{css_class}"{title}>'
                    else:
                        cspan = ''
                self.span_element_openers[ttype] = cspan

            parts = self._translate_parts(value)

            if tagsfile and ttype in Token.Name:
                filename, linenumber = self._lookup_ctag(value)
                if linenumber:
                    base, filename = os.path.split(filename)
                    if base:
                        base += '/'
                    filename, extension = os.path.splitext(filename)
                    url = self.tagurlformat % {'path': base, 'fname': filename,
                                               'fext': extension}
                    parts[0] = "<a href=\"%s#%s-%d\">%s" % \
                        (url, self.lineanchors, linenumber, parts[0])
                    parts[-1] = parts[-1] + "</a>"

            # for all but the last line
            for part in parts[:-1]:
                if line:
                    # Also check for part being non-empty, so we avoid creating
                    # empty <span> tags
                    if lspan != cspan and part:
                        line.extend(((lspan and '</span>'), cspan, part,
                                     (cspan and '</span>'), lsep))
                    else:  # both are the same, or the current part was empty
                        line.extend((part, (lspan and '</span>'), lsep))
                    yield 1, ''.join(line)
                    line = []
                elif part:
                    yield 1, ''.join((cspan, part, (cspan and '</span>'), lsep))
                else:
                    yield 1, lsep
            # for the last line
            if line and parts[-1]:
                if lspan != cspan:
                    line.extend(((lspan and '</span>'), cspan, parts[-1]))
                    lspan = cspan
                else:
                    line.append(parts[-1])
            elif parts[-1]:
                line = [cspan, parts[-1]]
                lspan = cspan
            # else we neither have to open a new span nor set lspan

        if line:
            line.extend(((lspan and '</span>'), lsep))
            yield 1, ''.join(line)

    def _lookup_ctag(self, token):
        entry = ctags.TagEntry()
        if self._ctags.find(entry, token.encode(), 0):
            return entry['file'].decode(), entry['lineNumber']
        else:
            return None, None

    def _highlight_lines(self, tokensource):
        """
        Highlighted the lines specified in the `hl_lines` option by
        post-processing the token stream coming from `_format_lines`.
        """
        hls = self.hl_lines

        for i, (t, value) in enumerate(tokensource):
            if t != 1:
                yield t, value
            if i + 1 in hls:  # i + 1 because Python indexes start at 0
                if self.noclasses:
                    style = ''
                    if self.style.highlight_color is not None:
                        style = (f' style="background-color: {self.style.highlight_color}"')
                    yield 1, f'<span{style}>{value}</span>'
                else:
                    yield 1, f'<span class="hll">{value}</span>'
            else:
                yield 1, value

    def wrap(self, source):
        """
        Wrap the ``source``, which is a generator yielding
        individual lines, in custom generators. See docstring
        for `format`. Can be overridden.
        """

        output = source
        if self.wrapcode:
            output = self._wrap_code(output)

        output = self._wrap_pre(output)

        return output

    def format_unencoded(self, tokensource, outfile):
        """
        The formatting process uses several nested generators; which of
        them are used is determined by the user's options.

        Each generator should take at least one argument, ``inner``,
        and wrap the pieces of text generated by this.

        Always yield 2-tuples: (code, text). If "code" is 1, the text
        is part of the original tokensource being highlighted, if it's
        0, the text is some piece of wrapping. This makes it possible to
        use several different wrappers that process the original source
        linewise, e.g. line number generators.
        """
        source = self._format_lines(tokensource)

        # As a special case, we wrap line numbers before line highlighting
        # so the line numbers get wrapped in the highlighting tag.
        if not self.nowrap and self.linenos == 2:
            source = self._wrap_inlinelinenos(source)

        if self.hl_lines:
            source = self._highlight_lines(source)

        if not self.nowrap:
            if self.lineanchors:
                source = self._wrap_lineanchors(source)
            if self.linespans:
                source = self._wrap_linespans(source)
            source = self.wrap(source)
            if self.linenos == 1:
                source = self._wrap_tablelinenos(source)
            source = self._wrap_div(source)
            if self.full:
                source = self._wrap_full(source, outfile)

        for t, piece in source:
            outfile.write(piece)

"""
    pygments.formatters.irc
    ~~~~~~~~~~~~~~~~~~~~~~~

    Formatter for IRC output

    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.
    :license: BSD, see LICENSE for details.
"""

from pip._vendor.pygments.formatter import Formatter
from pip._vendor.pygments.token import Keyword, Name, Comment, String, Error, \
    Number, Operator, Generic, Token, Whitespace
from pip._vendor.pygments.util import get_choice_opt


__all__ = ['IRCFormatter']


#: Map token types to a tuple of color values for light and dark
#: backgrounds.
IRC_COLORS = {
    Token:              ('',            ''),

    Whitespace:         ('gray',   'brightblack'),
    Comment:            ('gray',   'brightblack'),
    Comment.Preproc:    ('cyan',        'brightcyan'),
    Keyword:            ('blue',    'brightblue'),
    Keyword.Type:       ('cyan',        'brightcyan'),
    Operator.Word:      ('magenta',      'brightcyan'),
    Name.Builtin:       ('cyan',        'brightcyan'),
    Name.Function:      ('green',   'brightgreen'),
    Name.Namespace:     ('_cyan_',      '_brightcyan_'),
    Name.Class:         ('_green_', '_brightgreen_'),
    Name.Exception:     ('cyan',        'brightcyan'),
    Name.Decorator:     ('brightblack',    'gray'),
    Name.Variable:      ('red',     'brightred'),
    Name.Constant:      ('red',     'brightred'),
    Name.Attribute:     ('cyan',        'brightcyan'),
    Name.Tag:           ('brightblue',        'brightblue'),
    String:             ('yellow',       'yellow'),
    Number:             ('blue',    'brightblue'),

    Generic.Deleted:    ('brightred',        'brightred'),
    Generic.Inserted:   ('green',  'brightgreen'),
    Generic.Heading:    ('**',         '**'),
    Generic.Subheading: ('*magenta*',   '*brightmagenta*'),
    Generic.Error:      ('brightred',        'brightred'),

    Error:              ('_brightred_',      '_brightred_'),
}


IRC_COLOR_MAP = {
    'white': 0,
    'black': 1,
    'blue': 2,
    'brightgreen': 3,
    'brightred': 4,
    'yellow': 5,
    'magenta': 6,
    'orange': 7,
    'green': 7, #compat w/ ansi
    'brightyellow': 8,
    'lightgreen': 9,
    'brightcyan': 9, # compat w/ ansi
    'cyan': 10,
    'lightblue': 11,
    'red': 11, # compat w/ ansi
    'brightblue': 12,
    'brightmagenta': 13,
    'brightblack': 14,
    'gray': 15,
}

def ircformat(color, text):
    if len(color) < 1:
        return text
    add = sub = ''
    if '_' in color: # italic
        add += '\x1D'
        sub = '\x1D' + sub
        color = color.strip('_')
    if '*' in color: # bold
        add += '\x02'
        sub = '\x02' + sub
        color = color.strip('*')
    # underline (\x1F) not supported
    # backgrounds (\x03FF,BB) not supported
    if len(color) > 0: # actual color - may have issues with ircformat("red", "blah")+"10" type stuff
        add += '\x03' + str(IRC_COLOR_MAP[color]).zfill(2)
        sub = '\x03' + sub
    return add + text + sub
    return '<'+add+'>'+text+'</'+sub+'>'


class IRCFormatter(Formatter):
    r"""
    Format tokens with IRC color sequences

    The `get_style_defs()` method doesn't do anything special since there is
    no support for common styles.

    Options accepted:

    `bg`
        Set to ``"light"`` or ``"dark"`` depending on the terminal's background
        (default: ``"light"``).

    `colorscheme`
        A dictionary mapping token types to (lightbg, darkbg) color names or
        ``None`` (default: ``None`` = use builtin colorscheme).

    `linenos`
        Set to ``True`` to have line numbers in the output as well
        (default: ``False`` = no line numbers).
    """
    name = 'IRC'
    aliases = ['irc', 'IRC']
    filenames = []

    def __init__(self, **options):
        Formatter.__init__(self, **options)
        self.darkbg = get_choice_opt(options, 'bg',
                                     ['light', 'dark'], 'light') == 'dark'
        self.colorscheme = options.get('colorscheme', None) or IRC_COLORS
        self.linenos = options.get('linenos', False)
        self._lineno = 0

    def _write_lineno(self, outfile):
        if self.linenos:
            self._lineno += 1
            outfile.write("%04d: " % self._lineno)

    def format_unencoded(self, tokensource, outfile):
        self._write_lineno(outfile)

        for ttype, value in tokensource:
            color = self.colorscheme.get(ttype)
            while color is None:
                ttype = ttype[:-1]
                color = self.colorscheme.get(ttype)
            if color:
                color = color[self.darkbg]
                spl = value.split('\n')
                for line in spl[:-1]:
                    if line:
                        outfile.write(ircformat(color, line))
                    outfile.write('\n')
                    self._write_lineno(outfile)
                if spl[-1]:
                    outfile.write(ircformat(color, spl[-1]))
            else:
                outfile.write(value)

"""
    pygments.formatters
    ~~~~~~~~~~~~~~~~~~~

    Pygments formatters.

    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.
    :license: BSD, see LICENSE for details.
"""

import re
import sys
import types
import fnmatch
from os.path import basename

from pip._vendor.pygments.formatters._mapping import FORMATTERS
from pip._vendor.pygments.plugin import find_plugin_formatters
from pip._vendor.pygments.util import ClassNotFound

__all__ = ['get_formatter_by_name', 'get_formatter_for_filename',
           'get_all_formatters', 'load_formatter_from_file'] + list(FORMATTERS)

_formatter_cache = {}  # classes by name
_pattern_cache = {}


def _fn_matches(fn, glob):
    """Return whether the supplied file name fn matches pattern filename."""
    if glob not in _pattern_cache:
        pattern = _pattern_cache[glob] = re.compile(fnmatch.translate(glob))
        return pattern.match(fn)
    return _pattern_cache[glob].match(fn)


def _load_formatters(module_name):
    """Load a formatter (and all others in the module too)."""
    mod = __import__(module_name, None, None, ['__all__'])
    for formatter_name in mod.__all__:
        cls = getattr(mod, formatter_name)
        _formatter_cache[cls.name] = cls


def get_all_formatters():
    """Return a generator for all formatter classes."""
    # NB: this returns formatter classes, not info like get_all_lexers().
    for info in FORMATTERS.values():
        if info[1] not in _formatter_cache:
            _load_formatters(info[0])
        yield _formatter_cache[info[1]]
    for _, formatter in find_plugin_formatters():
        yield formatter


def find_formatter_class(alias):
    """Lookup a formatter by alias.

    Returns None if not found.
    """
    for module_name, name, aliases, _, _ in FORMATTERS.values():
        if alias in aliases:
            if name not in _formatter_cache:
                _load_formatters(module_name)
            return _formatter_cache[name]
    for _, cls in find_plugin_formatters():
        if alias in cls.aliases:
            return cls


def get_formatter_by_name(_alias, **options):
    """
    Return an instance of a :class:`.Formatter` subclass that has `alias` in its
    aliases list. The formatter is given the `options` at its instantiation.

    Will raise :exc:`pygments.util.ClassNotFound` if no formatter with that
    alias is found.
    """
    cls = find_formatter_class(_alias)
    if cls is None:
        raise ClassNotFound(f"no formatter found for name {_alias!r}")
    return cls(**options)


def load_formatter_from_file(filename, formattername="CustomFormatter", **options):
    """
    Return a `Formatter` subclass instance loaded from the provided file, relative
    to the current directory.

    The file is expected to contain a Formatter class named ``formattername``
    (by default, CustomFormatter). Users should be very careful with the input, because
    this method is equivalent to running ``eval()`` on the input file. The formatter is
    given the `options` at its instantiation.

    :exc:`pygments.util.ClassNotFound` is raised if there are any errors loading
    the formatter.

    .. versionadded:: 2.2
    """
    try:
        # This empty dict will contain the namespace for the exec'd file
        custom_namespace = {}
        with open(filename, 'rb') as f:
            exec(f.read(), custom_namespace)
        # Retrieve the class `formattername` from that namespace
        if formattername not in custom_namespace:
            raise ClassNotFound(f'no valid {formattername} class found in {filename}')
        formatter_class = custom_namespace[formattername]
        # And finally instantiate it with the options
        return formatter_class(**options)
    except OSError as err:
        raise ClassNotFound(f'cannot read {filename}: {err}')
    except ClassNotFound:
        raise
    except Exception as err:
        raise ClassNotFound(f'error when loading custom formatter: {err}')


def get_formatter_for_filename(fn, **options):
    """
    Return a :class:`.Formatter` subclass instance that has a filename pattern
    matching `fn`. The formatter is given the `options` at its instantiation.

    Will raise :exc:`pygments.util.ClassNotFound` if no formatter for that filename
    is found.
    """
    fn = basename(fn)
    for modname, name, _, filenames, _ in FORMATTERS.values():
        for filename in filenames:
            if _fn_matches(fn, filename):
                if name not in _formatter_cache:
                    _load_formatters(modname)
                return _formatter_cache[name](**options)
    for _name, cls in find_plugin_formatters():
        for filename in cls.filenames:
            if _fn_matches(fn, filename):
                return cls(**options)
    raise ClassNotFound(f"no formatter found for file name {fn!r}")


class _automodule(types.ModuleType):
    """Automatically import formatters."""

    def __getattr__(self, name):
        info = FORMATTERS.get(name)
        if info:
            _load_formatters(info[0])
            cls = _formatter_cache[info[1]]
            setattr(self, name, cls)
            return cls
        raise AttributeError(name)


oldmod = sys.modules[__name__]
newmod = _automodule(__name__)
newmod.__dict__.update(oldmod.__dict__)
sys.modules[__name__] = newmod
del newmod.newmod, newmod.oldmod, newmod.sys, newmod.types

"""
    pygments.formatters.other
    ~~~~~~~~~~~~~~~~~~~~~~~~~

    Other formatters: NullFormatter, RawTokenFormatter.

    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.
    :license: BSD, see LICENSE for details.
"""

from pip._vendor.pygments.formatter import Formatter
from pip._vendor.pygments.util import get_choice_opt
from pip._vendor.pygments.token import Token
from pip._vendor.pygments.console import colorize

__all__ = ['NullFormatter', 'RawTokenFormatter', 'TestcaseFormatter']


class NullFormatter(Formatter):
    """
    Output the text unchanged without any formatting.
    """
    name = 'Text only'
    aliases = ['text', 'null']
    filenames = ['*.txt']

    def format(self, tokensource, outfile):
        enc = self.encoding
        for ttype, value in tokensource:
            if enc:
                outfile.write(value.encode(enc))
            else:
                outfile.write(value)


class RawTokenFormatter(Formatter):
    r"""
    Format tokens as a raw representation for storing token streams.

    The format is ``tokentype<TAB>repr(tokenstring)\n``. The output can later
    be converted to a token stream with the `RawTokenLexer`, described in the
    :doc:`lexer list <lexers>`.

    Only two options are accepted:

    `compress`
        If set to ``'gz'`` or ``'bz2'``, compress the output with the given
        compression algorithm after encoding (default: ``''``).
    `error_color`
        If set to a color name, highlight error tokens using that color.  If
        set but with no value, defaults to ``'red'``.

        .. versionadded:: 0.11

    """
    name = 'Raw tokens'
    aliases = ['raw', 'tokens']
    filenames = ['*.raw']

    unicodeoutput = False

    def __init__(self, **options):
        Formatter.__init__(self, **options)
        # We ignore self.encoding if it is set, since it gets set for lexer
        # and formatter if given with -Oencoding on the command line.
        # The RawTokenFormatter outputs only ASCII. Override here.
        self.encoding = 'ascii'  # let pygments.format() do the right thing
        self.compress = get_choice_opt(options, 'compress',
                                       ['', 'none', 'gz', 'bz2'], '')
        self.error_color = options.get('error_color', None)
        if self.error_color is True:
            self.error_color = 'red'
        if self.error_color is not None:
            try:
                colorize(self.error_color, '')
            except KeyError:
                raise ValueError(f"Invalid color {self.error_color!r} specified")

    def format(self, tokensource, outfile):
        try:
            outfile.write(b'')
        except TypeError:
            raise TypeError('The raw tokens formatter needs a binary '
                            'output file')
        if self.compress == 'gz':
            import gzip
            outfile = gzip.GzipFile('', 'wb', 9, outfile)

            write = outfile.write
            flush = outfile.close
        elif self.compress == 'bz2':
            import bz2
            compressor = bz2.BZ2Compressor(9)

            def write(text):
                outfile.write(compressor.compress(text))

            def flush():
                outfile.write(compressor.flush())
                outfile.flush()
        else:
            write = outfile.write
            flush = outfile.flush

        if self.error_color:
            for ttype, value in tokensource:
                line = b"%r\t%r\n" % (ttype, value)
                if ttype is Token.Error:
                    write(colorize(self.error_color, line))
                else:
                    write(line)
        else:
            for ttype, value in tokensource:
                write(b"%r\t%r\n" % (ttype, value))
        flush()


TESTCASE_BEFORE = '''\
    def testNeedsName(lexer):
        fragment = %r
        tokens = [
'''
TESTCASE_AFTER = '''\
        ]
        assert list(lexer.get_tokens(fragment)) == tokens
'''


class TestcaseFormatter(Formatter):
    """
    Format tokens as appropriate for a new testcase.

    .. versionadded:: 2.0
    """
    name = 'Testcase'
    aliases = ['testcase']

    def __init__(self, **options):
        Formatter.__init__(self, **options)
        if self.encoding is not None and self.encoding != 'utf-8':
            raise ValueError("Only None and utf-8 are allowed encodings.")

    def format(self, tokensource, outfile):
        indentation = ' ' * 12
        rawbuf = []
        outbuf = []
        for ttype, value in tokensource:
            rawbuf.append(value)
            outbuf.append(f'{indentation}({ttype}, {value!r}),\n')

        before = TESTCASE_BEFORE % (''.join(rawbuf),)
        during = ''.join(outbuf)
        after = TESTCASE_AFTER
        if self.encoding is None:
            outfile.write(before + during + after)
        else:
            outfile.write(before.encode('utf-8'))
            outfile.write(during.encode('utf-8'))
            outfile.write(after.encode('utf-8'))
        outfile.flush()

"""
    pygments.formatters.img
    ~~~~~~~~~~~~~~~~~~~~~~~

    Formatter for Pixmap output.

    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.
    :license: BSD, see LICENSE for details.
"""
import os
import sys

from pip._vendor.pygments.formatter import Formatter
from pip._vendor.pygments.util import get_bool_opt, get_int_opt, get_list_opt, \
    get_choice_opt

import subprocess

# Import this carefully
try:
    from PIL import Image, ImageDraw, ImageFont
    pil_available = True
except ImportError:
    pil_available = False

try:
    import _winreg
except ImportError:
    try:
        import winreg as _winreg
    except ImportError:
        _winreg = None

__all__ = ['ImageFormatter', 'GifImageFormatter', 'JpgImageFormatter',
           'BmpImageFormatter']


# For some unknown reason every font calls it something different
STYLES = {
    'NORMAL':     ['', 'Roman', 'Book', 'Normal', 'Regular', 'Medium'],
    'ITALIC':     ['Oblique', 'Italic'],
    'BOLD':       ['Bold'],
    'BOLDITALIC': ['Bold Oblique', 'Bold Italic'],
}

# A sane default for modern systems
DEFAULT_FONT_NAME_NIX = 'DejaVu Sans Mono'
DEFAULT_FONT_NAME_WIN = 'Courier New'
DEFAULT_FONT_NAME_MAC = 'Menlo'


class PilNotAvailable(ImportError):
    """When Python imaging library is not available"""


class FontNotFound(Exception):
    """When there are no usable fonts specified"""


class FontManager:
    """
    Manages a set of fonts: normal, italic, bold, etc...
    """

    def __init__(self, font_name, font_size=14):
        self.font_name = font_name
        self.font_size = font_size
        self.fonts = {}
        self.encoding = None
        self.variable = False
        if hasattr(font_name, 'read') or os.path.isfile(font_name):
            font = ImageFont.truetype(font_name, self.font_size)
            self.variable = True
            for style in STYLES:
                self.fonts[style] = font

            return

        if sys.platform.startswith('win'):
            if not font_name:
                self.font_name = DEFAULT_FONT_NAME_WIN
            self._create_win()
        elif sys.platform.startswith('darwin'):
            if not font_name:
                self.font_name = DEFAULT_FONT_NAME_MAC
            self._create_mac()
        else:
            if not font_name:
                self.font_name = DEFAULT_FONT_NAME_NIX
            self._create_nix()

    def _get_nix_font_path(self, name, style):
        proc = subprocess.Popen(['fc-list', f"{name}:style={style}", 'file'],
                                stdout=subprocess.PIPE, stderr=None)
        stdout, _ = proc.communicate()
        if proc.returncode == 0:
            lines = stdout.splitlines()
            for line in lines:
                if line.startswith(b'Fontconfig warning:'):
                    continue
                path = line.decode().strip().strip(':')
                if path:
                    return path
            return None

    def _create_nix(self):
        for name in STYLES['NORMAL']:
            path = self._get_nix_font_path(self.font_name, name)
            if path is not None:
                self.fonts['NORMAL'] = ImageFont.truetype(path, self.font_size)
                break
        else:
            raise FontNotFound(f'No usable fonts named: "{self.font_name}"')
        for style in ('ITALIC', 'BOLD', 'BOLDITALIC'):
            for stylename in STYLES[style]:
                path = self._get_nix_font_path(self.font_name, stylename)
                if path is not None:
                    self.fonts[style] = ImageFont.truetype(path, self.font_size)
                    break
            else:
                if style == 'BOLDITALIC':
                    self.fonts[style] = self.fonts['BOLD']
                else:
                    self.fonts[style] = self.fonts['NORMAL']

    def _get_mac_font_path(self, font_map, name, style):
        return font_map.get((name + ' ' + style).strip().lower())

    def _create_mac(self):
        font_map = {}
        for font_dir in (os.path.join(os.getenv("HOME"), 'Library/Fonts/'),
                         '/Library/Fonts/', '/System/Library/Fonts/'):
            font_map.update(
                (os.path.splitext(f)[0].lower(), os.path.join(font_dir, f))
                for f in os.listdir(font_dir)
                if f.lower().endswith(('ttf', 'ttc')))

        for name in STYLES['NORMAL']:
            path = self._get_mac_font_path(font_map, self.font_name, name)
            if path is not None:
                self.fonts['NORMAL'] = ImageFont.truetype(path, self.font_size)
                break
        else:
            raise FontNotFound(f'No usable fonts named: "{self.font_name}"')
        for style in ('ITALIC', 'BOLD', 'BOLDITALIC'):
            for stylename in STYLES[style]:
                path = self._get_mac_font_path(font_map, self.font_name, stylename)
                if path is not None:
                    self.fonts[style] = ImageFont.truetype(path, self.font_size)
                    break
            else:
                if style == 'BOLDITALIC':
                    self.fonts[style] = self.fonts['BOLD']
                else:
                    self.fonts[style] = self.fonts['NORMAL']

    def _lookup_win(self, key, basename, styles, fail=False):
        for suffix in ('', ' (TrueType)'):
            for style in styles:
                try:
                    valname = '{}{}{}'.format(basename, style and ' '+style, suffix)
                    val, _ = _winreg.QueryValueEx(key, valname)
                    return val
                except OSError:
                    continue
        else:
            if fail:
                raise FontNotFound(f'Font {basename} ({styles[0]}) not found in registry')
            return None

    def _create_win(self):
        lookuperror = None
        keynames = [ (_winreg.HKEY_CURRENT_USER, r'Software\Microsoft\Windows NT\CurrentVersion\Fonts'),
                     (_winreg.HKEY_CURRENT_USER, r'Software\Microsoft\Windows\CurrentVersion\Fonts'),
                     (_winreg.HKEY_LOCAL_MACHINE, r'Software\Microsoft\Windows NT\CurrentVersion\Fonts'),
                     (_winreg.HKEY_LOCAL_MACHINE, r'Software\Microsoft\Windows\CurrentVersion\Fonts') ]
        for keyname in keynames:
            try:
                key = _winreg.OpenKey(*keyname)
                try:
                    path = self._lookup_win(key, self.font_name, STYLES['NORMAL'], True)
                    self.fonts['NORMAL'] = ImageFont.truetype(path, self.font_size)
                    for style in ('ITALIC', 'BOLD', 'BOLDITALIC'):
                        path = self._lookup_win(key, self.font_name, STYLES[style])
                        if path:
                            self.fonts[style] = ImageFont.truetype(path, self.font_size)
                        else:
                            if style == 'BOLDITALIC':
                                self.fonts[style] = self.fonts['BOLD']
                            else:
                                self.fonts[style] = self.fonts['NORMAL']
                    return
                except FontNotFound as err:
                    lookuperror = err
                finally:
                    _winreg.CloseKey(key)
            except OSError:
                pass
        else:
            # If we get here, we checked all registry keys and had no luck
            # We can be in one of two situations now:
            # * All key lookups failed. In this case lookuperror is None and we
            #   will raise a generic error
            # * At least one lookup failed with a FontNotFound error. In this
            #   case, we will raise that as a more specific error
            if lookuperror:
                raise lookuperror
            raise FontNotFound('Can\'t open Windows font registry key')

    def get_char_size(self):
        """
        Get the character size.
        """
        return self.get_text_size('M')

    def get_text_size(self, text):
        """
        Get the text size (width, height).
        """
        font = self.fonts['NORMAL']
        if hasattr(font, 'getbbox'):  # Pillow >= 9.2.0
            return font.getbbox(text)[2:4]
        else:
            return font.getsize(text)

    def get_font(self, bold, oblique):
        """
        Get the font based on bold and italic flags.
        """
        if bold and oblique:
            if self.variable:
                return self.get_style('BOLDITALIC')

            return self.fonts['BOLDITALIC']
        elif bold:
            if self.variable:
                return self.get_style('BOLD')

            return self.fonts['BOLD']
        elif oblique:
            if self.variable:
                return self.get_style('ITALIC')

            return self.fonts['ITALIC']
        else:
            if self.variable:
                return self.get_style('NORMAL')

            return self.fonts['NORMAL']

    def get_style(self, style):
        """
        Get the specified style of the font if it is a variable font.
        If not found, return the normal font.
        """
        font = self.fonts[style]
        for style_name in STYLES[style]:
            try:
                font.set_variation_by_name(style_name)
                return font
            except ValueError:
                pass
            except OSError:
                return font

        return font


class ImageFormatter(Formatter):
    """
    Create a PNG image from source code. This uses the Python Imaging Library to
    generate a pixmap from the source code.

    .. versionadded:: 0.10

    Additional options accepted:

    `image_format`
        An image format to output to that is recognised by PIL, these include:

        * "PNG" (default)
        * "JPEG"
        * "BMP"
        * "GIF"

    `line_pad`
        The extra spacing (in pixels) between each line of text.

        Default: 2

    `font_name`
        The font name to be used as the base font from which others, such as
        bold and italic fonts will be generated.  This really should be a
        monospace font to look sane.
        If a filename or a file-like object is specified, the user must
        provide different styles of the font.

        Default: "Courier New" on Windows, "Menlo" on Mac OS, and
                 "DejaVu Sans Mono" on \\*nix

    `font_size`
        The font size in points to be used.

        Default: 14

    `image_pad`
        The padding, in pixels to be used at each edge of the resulting image.

        Default: 10

    `line_numbers`
        Whether line numbers should be shown: True/False

        Default: True

    `line_number_start`
        The line number of the first line.

        Default: 1

    `line_number_step`
        The step used when printing line numbers.

        Default: 1

    `line_number_bg`
        The background colour (in "#123456" format) of the line number bar, or
        None to use the style background color.

        Default: "#eed"

    `line_number_fg`
        The text color of the line numbers (in "#123456"-like format).

        Default: "#886"

    `line_number_chars`
        The number of columns of line numbers allowable in the line number
        margin.

        Default: 2

    `line_number_bold`
        Whether line numbers will be bold: True/False

        Default: False

    `line_number_italic`
        Whether line numbers will be italicized: True/False

        Default: False

    `line_number_separator`
        Whether a line will be drawn between the line number area and the
        source code area: True/False

        Default: True

    `line_number_pad`
        The horizontal padding (in pixels) between the line number margin, and
        the source code area.

        Default: 6

    `hl_lines`
        Specify a list of lines to be highlighted.

        .. versionadded:: 1.2

        Default: empty list

    `hl_color`
        Specify the color for highlighting lines.

        .. versionadded:: 1.2

        Default: highlight color of the selected style
    """

    # Required by the pygments mapper
    name = 'img'
    aliases = ['img', 'IMG', 'png']
    filenames = ['*.png']

    unicodeoutput = False

    default_image_format = 'png'

    def __init__(self, **options):
        """
        See the class docstring for explanation of options.
        """
        if not pil_available:
            raise PilNotAvailable(
                'Python Imaging Library is required for this formatter')
        Formatter.__init__(self, **options)
        self.encoding = 'latin1'  # let pygments.format() do the right thing
        # Read the style
        self.styles = dict(self.style)
        if self.style.background_color is None:
            self.background_color = '#fff'
        else:
            self.background_color = self.style.background_color
        # Image options
        self.image_format = get_choice_opt(
            options, 'image_format', ['png', 'jpeg', 'gif', 'bmp'],
            self.default_image_format, normcase=True)
        self.image_pad = get_int_opt(options, 'image_pad', 10)
        self.line_pad = get_int_opt(options, 'line_pad', 2)
        # The fonts
        fontsize = get_int_opt(options, 'font_size', 14)
        self.fonts = FontManager(options.get('font_name', ''), fontsize)
        self.fontw, self.fonth = self.fonts.get_char_size()
        # Line number options
        self.line_number_fg = options.get('line_number_fg', '#886')
        self.line_number_bg = options.get('line_number_bg', '#eed')
        self.line_number_chars = get_int_opt(options,
                                             'line_number_chars', 2)
        self.line_number_bold = get_bool_opt(options,
                                             'line_number_bold', False)
        self.line_number_italic = get_bool_opt(options,
                                               'line_number_italic', False)
        self.line_number_pad = get_int_opt(options, 'line_number_pad', 6)
        self.line_numbers = get_bool_opt(options, 'line_numbers', True)
        self.line_number_separator = get_bool_opt(options,
                                                  'line_number_separator', True)
        self.line_number_step = get_int_opt(options, 'line_number_step', 1)
        self.line_number_start = get_int_opt(options, 'line_number_start', 1)
        if self.line_numbers:
            self.line_number_width = (self.fontw * self.line_number_chars +
                                      self.line_number_pad * 2)
        else:
            self.line_number_width = 0
        self.hl_lines = []
        hl_lines_str = get_list_opt(options, 'hl_lines', [])
        for line in hl_lines_str:
            try:
                self.hl_lines.append(int(line))
            except ValueError:
                pass
        self.hl_color = options.get('hl_color',
                                    self.style.highlight_color) or '#f90'
        self.drawables = []

    def get_style_defs(self, arg=''):
        raise NotImplementedError('The -S option is meaningless for the image '
                                  'formatter. Use -O style=<stylename> instead.')

    def _get_line_height(self):
        """
        Get the height of a line.
        """
        return self.fonth + self.line_pad

    def _get_line_y(self, lineno):
        """
        Get the Y coordinate of a line number.
        """
        return lineno * self._get_line_height() + self.image_pad

    def _get_char_width(self):
        """
        Get the width of a character.
        """
        return self.fontw

    def _get_char_x(self, linelength):
        """
        Get the X coordinate of a character position.
        """
        return linelength + self.image_pad + self.line_number_width

    def _get_text_pos(self, linelength, lineno):
        """
        Get the actual position for a character and line position.
        """
        return self._get_char_x(linelength), self._get_line_y(lineno)

    def _get_linenumber_pos(self, lineno):
        """
        Get the actual position for the start of a line number.
        """
        return (self.image_pad, self._get_line_y(lineno))

    def _get_text_color(self, style):
        """
        Get the correct color for the token from the style.
        """
        if style['color'] is not None:
            fill = '#' + style['color']
        else:
            fill = '#000'
        return fill

    def _get_text_bg_color(self, style):
        """
        Get the correct background color for the token from the style.
        """
        if style['bgcolor'] is not None:
            bg_color = '#' + style['bgcolor']
        else:
            bg_color = None
        return bg_color

    def _get_style_font(self, style):
        """
        Get the correct font for the style.
        """
        return self.fonts.get_font(style['bold'], style['italic'])

    def _get_image_size(self, maxlinelength, maxlineno):
        """
        Get the required image size.
        """
        return (self._get_char_x(maxlinelength) + self.image_pad,
                self._get_line_y(maxlineno + 0) + self.image_pad)

    def _draw_linenumber(self, posno, lineno):
        """
        Remember a line number drawable to paint later.
        """
        self._draw_text(
            self._get_linenumber_pos(posno),
            str(lineno).rjust(self.line_number_chars),
            font=self.fonts.get_font(self.line_number_bold,
                                     self.line_number_italic),
            text_fg=self.line_number_fg,
            text_bg=None,
        )

    def _draw_text(self, pos, text, font, text_fg, text_bg):
        """
        Remember a single drawable tuple to paint later.
        """
        self.drawables.append((pos, text, font, text_fg, text_bg))

    def _create_drawables(self, tokensource):
        """
        Create drawables for the token content.
        """
        lineno = charno = maxcharno = 0
        maxlinelength = linelength = 0
        for ttype, value in tokensource:
            while ttype not in self.styles:
                ttype = ttype.parent
            style = self.styles[ttype]
            # TODO: make sure tab expansion happens earlier in the chain.  It
            # really ought to be done on the input, as to do it right here is
            # quite complex.
            value = value.expandtabs(4)
            lines = value.splitlines(True)
            # print lines
            for i, line in enumerate(lines):
                temp = line.rstrip('\n')
                if temp:
                    self._draw_text(
                        self._get_text_pos(linelength, lineno),
                        temp,
                        font = self._get_style_font(style),
                        text_fg = self._get_text_color(style),
                        text_bg = self._get_text_bg_color(style),
                    )
                    temp_width, _ = self.fonts.get_text_size(temp)
                    linelength += temp_width
                    maxlinelength = max(maxlinelength, linelength)
                    charno += len(temp)
                    maxcharno = max(maxcharno, charno)
                if line.endswith('\n'):
                    # add a line for each extra line in the value
                    linelength = 0
                    charno = 0
                    lineno += 1
        self.maxlinelength = maxlinelength
        self.maxcharno = maxcharno
        self.maxlineno = lineno

    def _draw_line_numbers(self):
        """
        Create drawables for the line numbers.
        """
        if not self.line_numbers:
            return
        for p in range(self.maxlineno):
            n = p + self.line_number_start
            if (n % self.line_number_step) == 0:
                self._draw_linenumber(p, n)

    def _paint_line_number_bg(self, im):
        """
        Paint the line number background on the image.
        """
        if not self.line_numbers:
            return
        if self.line_number_fg is None:
            return
        draw = ImageDraw.Draw(im)
        recth = im.size[-1]
        rectw = self.image_pad + self.line_number_width - self.line_number_pad
        draw.rectangle([(0, 0), (rectw, recth)],
                       fill=self.line_number_bg)
        if self.line_number_separator:
            draw.line([(rectw, 0), (rectw, recth)], fill=self.line_number_fg)
        del draw

    def format(self, tokensource, outfile):
        """
        Format ``tokensource``, an iterable of ``(tokentype, tokenstring)``
        tuples and write it into ``outfile``.

        This implementation calculates where it should draw each token on the
        pixmap, then calculates the required pixmap size and draws the items.
        """
        self._create_drawables(tokensource)
        self._draw_line_numbers()
        im = Image.new(
            'RGB',
            self._get_image_size(self.maxlinelength, self.maxlineno),
            self.background_color
        )
        self._paint_line_number_bg(im)
        draw = ImageDraw.Draw(im)
        # Highlight
        if self.hl_lines:
            x = self.image_pad + self.line_number_width - self.line_number_pad + 1
            recth = self._get_line_height()
            rectw = im.size[0] - x
            for linenumber in self.hl_lines:
                y = self._get_line_y(linenumber - 1)
                draw.rectangle([(x, y), (x + rectw, y + recth)],
                               fill=self.hl_color)
        for pos, value, font, text_fg, text_bg in self.drawables:
            if text_bg:
                # see deprecations https://pillow.readthedocs.io/en/stable/releasenotes/9.2.0.html#font-size-and-offset-methods
                if hasattr(draw, 'textsize'):
                    text_size = draw.textsize(text=value, font=font)
                else:
                    text_size = font.getbbox(value)[2:]
                draw.rectangle([pos[0], pos[1], pos[0] + text_size[0], pos[1] + text_size[1]], fill=text_bg)
            draw.text(pos, value, font=font, fill=text_fg)
        im.save(outfile, self.image_format.upper())


# Add one formatter per format, so that the "-f gif" option gives the correct result
# when used in pygmentize.

class GifImageFormatter(ImageFormatter):
    """
    Create a GIF image from source code. This uses the Python Imaging Library to
    generate a pixmap from the source code.

    .. versionadded:: 1.0
    """

    name = 'img_gif'
    aliases = ['gif']
    filenames = ['*.gif']
    default_image_format = 'gif'


class JpgImageFormatter(ImageFormatter):
    """
    Create a JPEG image from source code. This uses the Python Imaging Library to
    generate a pixmap from the source code.

    .. versionadded:: 1.0
    """

    name = 'img_jpg'
    aliases = ['jpg', 'jpeg']
    filenames = ['*.jpg']
    default_image_format = 'jpeg'


class BmpImageFormatter(ImageFormatter):
    """
    Create a bitmap image from source code. This uses the Python Imaging Library to
    generate a pixmap from the source code.

    .. versionadded:: 1.0
    """

    name = 'img_bmp'
    aliases = ['bmp', 'bitmap']
    filenames = ['*.bmp']
    default_image_format = 'bmp'

"""
    pygments.formatters.terminal256
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Formatter for 256-color terminal output with ANSI sequences.

    RGB-to-XTERM color conversion routines adapted from xterm256-conv
    tool (http://frexx.de/xterm-256-notes/data/xterm256-conv2.tar.bz2)
    by Wolfgang Frisch.

    Formatter version 1.

    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.
    :license: BSD, see LICENSE for details.
"""

# TODO:
#  - Options to map style's bold/underline/italic/border attributes
#    to some ANSI attrbutes (something like 'italic=underline')
#  - An option to output "style RGB to xterm RGB/index" conversion table
#  - An option to indicate that we are running in "reverse background"
#    xterm. This means that default colors are white-on-black, not
#    black-on-while, so colors like "white background" need to be converted
#    to "white background, black foreground", etc...

from pip._vendor.pygments.formatter import Formatter
from pip._vendor.pygments.console import codes
from pip._vendor.pygments.style import ansicolors


__all__ = ['Terminal256Formatter', 'TerminalTrueColorFormatter']


class EscapeSequence:
    def __init__(self, fg=None, bg=None, bold=False, underline=False, italic=False):
        self.fg = fg
        self.bg = bg
        self.bold = bold
        self.underline = underline
        self.italic = italic

    def escape(self, attrs):
        if len(attrs):
            return "\x1b[" + ";".join(attrs) + "m"
        return ""

    def color_string(self):
        attrs = []
        if self.fg is not None:
            if self.fg in ansicolors:
                esc = codes[self.fg.replace('ansi','')]
                if ';01m' in esc:
                    self.bold = True
                # extract fg color code.
                attrs.append(esc[2:4])
            else:
                attrs.extend(("38", "5", "%i" % self.fg))
        if self.bg is not None:
            if self.bg in ansicolors:
                esc = codes[self.bg.replace('ansi','')]
                # extract fg color code, add 10 for bg.
                attrs.append(str(int(esc[2:4])+10))
            else:
                attrs.extend(("48", "5", "%i" % self.bg))
        if self.bold:
            attrs.append("01")
        if self.underline:
            attrs.append("04")
        if self.italic:
            attrs.append("03")
        return self.escape(attrs)

    def true_color_string(self):
        attrs = []
        if self.fg:
            attrs.extend(("38", "2", str(self.fg[0]), str(self.fg[1]), str(self.fg[2])))
        if self.bg:
            attrs.extend(("48", "2", str(self.bg[0]), str(self.bg[1]), str(self.bg[2])))
        if self.bold:
            attrs.append("01")
        if self.underline:
            attrs.append("04")
        if self.italic:
            attrs.append("03")
        return self.escape(attrs)

    def reset_string(self):
        attrs = []
        if self.fg is not None:
            attrs.append("39")
        if self.bg is not None:
            attrs.append("49")
        if self.bold or self.underline or self.italic:
            attrs.append("00")
        return self.escape(attrs)


class Terminal256Formatter(Formatter):
    """
    Format tokens with ANSI color sequences, for output in a 256-color
    terminal or console.  Like in `TerminalFormatter` color sequences
    are terminated at newlines, so that paging the output works correctly.

    The formatter takes colors from a style defined by the `style` option
    and converts them to nearest ANSI 256-color escape sequences. Bold and
    underline attributes from the style are preserved (and displayed).

    .. versionadded:: 0.9

    .. versionchanged:: 2.2
       If the used style defines foreground colors in the form ``#ansi*``, then
       `Terminal256Formatter` will map these to non extended foreground color.
       See :ref:`AnsiTerminalStyle` for more information.

    .. versionchanged:: 2.4
       The ANSI color names have been updated with names that are easier to
       understand and align with colornames of other projects and terminals.
       See :ref:`this table <new-ansi-color-names>` for more information.


    Options accepted:

    `style`
        The style to use, can be a string or a Style subclass (default:
        ``'default'``).

    `linenos`
        Set to ``True`` to have line numbers on the terminal output as well
        (default: ``False`` = no line numbers).
    """
    name = 'Terminal256'
    aliases = ['terminal256', 'console256', '256']
    filenames = []

    def __init__(self, **options):
        Formatter.__init__(self, **options)

        self.xterm_colors = []
        self.best_match = {}
        self.style_string = {}

        self.usebold = 'nobold' not in options
        self.useunderline = 'nounderline' not in options
        self.useitalic = 'noitalic' not in options

        self._build_color_table()  # build an RGB-to-256 color conversion table
        self._setup_styles()  # convert selected style's colors to term. colors

        self.linenos = options.get('linenos', False)
        self._lineno = 0

    def _build_color_table(self):
        # colors 0..15: 16 basic colors

        self.xterm_colors.append((0x00, 0x00, 0x00))  # 0
        self.xterm_colors.append((0xcd, 0x00, 0x00))  # 1
        self.xterm_colors.append((0x00, 0xcd, 0x00))  # 2
        self.xterm_colors.append((0xcd, 0xcd, 0x00))  # 3
        self.xterm_colors.append((0x00, 0x00, 0xee))  # 4
        self.xterm_colors.append((0xcd, 0x00, 0xcd))  # 5
        self.xterm_colors.append((0x00, 0xcd, 0xcd))  # 6
        self.xterm_colors.append((0xe5, 0xe5, 0xe5))  # 7
        self.xterm_colors.append((0x7f, 0x7f, 0x7f))  # 8
        self.xterm_colors.append((0xff, 0x00, 0x00))  # 9
        self.xterm_colors.append((0x00, 0xff, 0x00))  # 10
        self.xterm_colors.append((0xff, 0xff, 0x00))  # 11
        self.xterm_colors.append((0x5c, 0x5c, 0xff))  # 12
        self.xterm_colors.append((0xff, 0x00, 0xff))  # 13
        self.xterm_colors.append((0x00, 0xff, 0xff))  # 14
        self.xterm_colors.append((0xff, 0xff, 0xff))  # 15

        # colors 16..232: the 6x6x6 color cube

        valuerange = (0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff)

        for i in range(217):
            r = valuerange[(i // 36) % 6]
            g = valuerange[(i // 6) % 6]
            b = valuerange[i % 6]
            self.xterm_colors.append((r, g, b))

        # colors 233..253: grayscale

        for i in range(1, 22):
            v = 8 + i * 10
            self.xterm_colors.append((v, v, v))

    def _closest_color(self, r, g, b):
        distance = 257*257*3  # "infinity" (>distance from #000000 to #ffffff)
        match = 0

        for i in range(0, 254):
            values = self.xterm_colors[i]

            rd = r - values[0]
            gd = g - values[1]
            bd = b - values[2]
            d = rd*rd + gd*gd + bd*bd

            if d < distance:
                match = i
                distance = d
        return match

    def _color_index(self, color):
        index = self.best_match.get(color, None)
        if color in ansicolors:
            # strip the `ansi/#ansi` part and look up code
            index = color
            self.best_match[color] = index
        if index is None:
            try:
                rgb = int(str(color), 16)
            except ValueError:
                rgb = 0

            r = (rgb >> 16) & 0xff
            g = (rgb >> 8) & 0xff
            b = rgb & 0xff
            index = self._closest_color(r, g, b)
            self.best_match[color] = index
        return index

    def _setup_styles(self):
        for ttype, ndef in self.style:
            escape = EscapeSequence()
            # get foreground from ansicolor if set
            if ndef['ansicolor']:
                escape.fg = self._color_index(ndef['ansicolor'])
            elif ndef['color']:
                escape.fg = self._color_index(ndef['color'])
            if ndef['bgansicolor']:
                escape.bg = self._color_index(ndef['bgansicolor'])
            elif ndef['bgcolor']:
                escape.bg = self._color_index(ndef['bgcolor'])
            if self.usebold and ndef['bold']:
                escape.bold = True
            if self.useunderline and ndef['underline']:
                escape.underline = True
            if self.useitalic and ndef['italic']:
                escape.italic = True
            self.style_string[str(ttype)] = (escape.color_string(),
                                             escape.reset_string())

    def _write_lineno(self, outfile):
        self._lineno += 1
        outfile.write("%s%04d: " % (self._lineno != 1 and '\n' or '', self._lineno))

    def format(self, tokensource, outfile):
        return Formatter.format(self, tokensource, outfile)

    def format_unencoded(self, tokensource, outfile):
        if self.linenos:
            self._write_lineno(outfile)

        for ttype, value in tokensource:
            not_found = True
            while ttype and not_found:
                try:
                    # outfile.write( "<" + str(ttype) + ">" )
                    on, off = self.style_string[str(ttype)]

                    # Like TerminalFormatter, add "reset colors" escape sequence
                    # on newline.
                    spl = value.split('\n')
                    for line in spl[:-1]:
                        if line:
                            outfile.write(on + line + off)
                        if self.linenos:
                            self._write_lineno(outfile)
                        else:
                            outfile.write('\n')

                    if spl[-1]:
                        outfile.write(on + spl[-1] + off)

                    not_found = False
                    # outfile.write( '#' + str(ttype) + '#' )

                except KeyError:
                    # ottype = ttype
                    ttype = ttype.parent
                    # outfile.write( '!' + str(ottype) + '->' + str(ttype) + '!' )

            if not_found:
                outfile.write(value)

        if self.linenos:
            outfile.write("\n")



class TerminalTrueColorFormatter(Terminal256Formatter):
    r"""
    Format tokens with ANSI color sequences, for output in a true-color
    terminal or console.  Like in `TerminalFormatter` color sequences
    are terminated at newlines, so that paging the output works correctly.

    .. versionadded:: 2.1

    Options accepted:

    `style`
        The style to use, can be a string or a Style subclass (default:
        ``'default'``).
    """
    name = 'TerminalTrueColor'
    aliases = ['terminal16m', 'console16m', '16m']
    filenames = []

    def _build_color_table(self):
        pass

    def _color_tuple(self, color):
        try:
            rgb = int(str(color), 16)
        except ValueError:
            return None
        r = (rgb >> 16) & 0xff
        g = (rgb >> 8) & 0xff
        b = rgb & 0xff
        return (r, g, b)

    def _setup_styles(self):
        for ttype, ndef in self.style:
            escape = EscapeSequence()
            if ndef['color']:
                escape.fg = self._color_tuple(ndef['color'])
            if ndef['bgcolor']:
                escape.bg = self._color_tuple(ndef['bgcolor'])
            if self.usebold and ndef['bold']:
                escape.bold = True
            if self.useunderline and ndef['underline']:
                escape.underline = True
            if self.useitalic and ndef['italic']:
                escape.italic = True
            self.style_string[str(ttype)] = (escape.true_color_string(),
                                             escape.reset_string())

"""
    pygments.formatters.rtf
    ~~~~~~~~~~~~~~~~~~~~~~~

    A formatter that generates RTF files.

    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.
    :license: BSD, see LICENSE for details.
"""

from collections import OrderedDict
from pip._vendor.pygments.formatter import Formatter
from pip._vendor.pygments.style import _ansimap
from pip._vendor.pygments.util import get_bool_opt, get_int_opt, get_list_opt, surrogatepair


__all__ = ['RtfFormatter']


class RtfFormatter(Formatter):
    """
    Format tokens as RTF markup. This formatter automatically outputs full RTF
    documents with color information and other useful stuff. Perfect for Copy and
    Paste into Microsoft(R) Word(R) documents.

    Please note that ``encoding`` and ``outencoding`` options are ignored.
    The RTF format is ASCII natively, but handles unicode characters correctly
    thanks to escape sequences.

    .. versionadded:: 0.6

    Additional options accepted:

    `style`
        The style to use, can be a string or a Style subclass (default:
        ``'default'``).

    `fontface`
        The used font family, for example ``Bitstream Vera Sans``. Defaults to
        some generic font which is supposed to have fixed width.

    `fontsize`
        Size of the font used. Size is specified in half points. The
        default is 24 half-points, giving a size 12 font.

        .. versionadded:: 2.0

    `linenos`
        Turn on line numbering (default: ``False``).

        .. versionadded:: 2.18

    `lineno_fontsize`
        Font size for line numbers. Size is specified in half points
        (default: `fontsize`). 

        .. versionadded:: 2.18

    `lineno_padding`
        Number of spaces between the (inline) line numbers and the
        source code (default: ``2``).

        .. versionadded:: 2.18

    `linenostart`
        The line number for the first line (default: ``1``).

        .. versionadded:: 2.18

    `linenostep`
        If set to a number n > 1, only every nth line number is printed.

        .. versionadded:: 2.18

    `lineno_color`
        Color for line numbers specified as a hex triplet, e.g. ``'5e5e5e'``. 
        Defaults to the style's line number color if it is a hex triplet, 
        otherwise ansi bright black.

        .. versionadded:: 2.18

    `hl_lines`
        Specify a list of lines to be highlighted, as line numbers separated by
        spaces, e.g. ``'3 7 8'``. The line numbers are relative to the input 
        (i.e. the first line is line 1) unless `hl_linenostart` is set.

        .. versionadded:: 2.18

    `hl_color`
        Color for highlighting the lines specified in `hl_lines`, specified as 
        a hex triplet (default: style's `highlight_color`).

        .. versionadded:: 2.18

    `hl_linenostart`
        If set to ``True`` line numbers in `hl_lines` are specified
        relative to `linenostart` (default ``False``).

        .. versionadded:: 2.18
    """
    name = 'RTF'
    aliases = ['rtf']
    filenames = ['*.rtf']

    def __init__(self, **options):
        r"""
        Additional options accepted:

        ``fontface``
            Name of the font used. Could for example be ``'Courier New'``
            to further specify the default which is ``'\fmodern'``. The RTF
            specification claims that ``\fmodern`` are "Fixed-pitch serif
            and sans serif fonts". Hope every RTF implementation thinks
            the same about modern...

        """
        Formatter.__init__(self, **options)
        self.fontface = options.get('fontface') or ''
        self.fontsize = get_int_opt(options, 'fontsize', 0)
        self.linenos = get_bool_opt(options, 'linenos', False)
        self.lineno_fontsize = get_int_opt(options, 'lineno_fontsize',
                                           self.fontsize)
        self.lineno_padding = get_int_opt(options, 'lineno_padding', 2)
        self.linenostart = abs(get_int_opt(options, 'linenostart', 1))
        self.linenostep = abs(get_int_opt(options, 'linenostep', 1))
        self.hl_linenostart = get_bool_opt(options, 'hl_linenostart', False)

        self.hl_color = options.get('hl_color', '')
        if not self.hl_color:
            self.hl_color = self.style.highlight_color

        self.hl_lines = []
        for lineno in get_list_opt(options, 'hl_lines', []):
            try:
                lineno = int(lineno)
                if self.hl_linenostart:
                    lineno = lineno - self.linenostart + 1
                self.hl_lines.append(lineno)
            except ValueError:
                pass

        self.lineno_color = options.get('lineno_color', '')
        if not self.lineno_color:
            if  self.style.line_number_color == 'inherit':
                # style color is the css value 'inherit'
                # default to ansi bright-black
                self.lineno_color = _ansimap['ansibrightblack']
            else:
                # style color is assumed to be a hex triplet as other
                # colors in pygments/style.py
                self.lineno_color = self.style.line_number_color

        self.color_mapping = self._create_color_mapping()

    def _escape(self, text):
        return text.replace('\\', '\\\\') \
                   .replace('{', '\\{') \
                   .replace('}', '\\}')

    def _escape_text(self, text):
        # empty strings, should give a small performance improvement
        if not text:
            return ''

        # escape text
        text = self._escape(text)

        buf = []
        for c in text:
            cn = ord(c)
            if cn < (2**7):
                # ASCII character
                buf.append(str(c))
            elif (2**7) <= cn < (2**16):
                # single unicode escape sequence
                buf.append('{\\u%d}' % cn)
            elif (2**16) <= cn:
                # RTF limits unicode to 16 bits.
                # Force surrogate pairs
                buf.append('{\\u%d}{\\u%d}' % surrogatepair(cn))

        return ''.join(buf).replace('\n', '\\par')

    @staticmethod
    def hex_to_rtf_color(hex_color):
        if hex_color[0] == "#":
            hex_color = hex_color[1:]

        return '\\red%d\\green%d\\blue%d;' % (
                        int(hex_color[0:2], 16),
                        int(hex_color[2:4], 16),
                        int(hex_color[4:6], 16)
                    )

    def _split_tokens_on_newlines(self, tokensource):
        """
        Split tokens containing newline characters into multiple token
        each representing a line of the input file. Needed for numbering
        lines of e.g. multiline comments.
        """
        for ttype, value in tokensource:
            if value == '\n':
                yield (ttype, value)
            elif "\n" in value:
                lines = value.split("\n")
                for line in lines[:-1]:
                    yield (ttype, line+"\n")
                if lines[-1]:
                    yield (ttype, lines[-1])
            else:
                yield (ttype, value)

    def _create_color_mapping(self):
        """
        Create a mapping of style hex colors to index/offset in
        the RTF color table.
        """
        color_mapping = OrderedDict()
        offset = 1

        if self.linenos:
            color_mapping[self.lineno_color] = offset
            offset += 1

        if self.hl_lines:
            color_mapping[self.hl_color] = offset
            offset += 1

        for _, style in self.style:
            for color in style['color'], style['bgcolor'], style['border']:
                if color and color not in color_mapping:
                    color_mapping[color] = offset
                    offset += 1

        return color_mapping

    @property
    def _lineno_template(self):
        if self.lineno_fontsize != self.fontsize:
            return '{{\\fs{} \\cf{} %s{}}}'.format(self.lineno_fontsize,
                          self.color_mapping[self.lineno_color],
                          " " * self.lineno_padding)

        return '{{\\cf{} %s{}}}'.format(self.color_mapping[self.lineno_color],
                      " " * self.lineno_padding)

    @property
    def _hl_open_str(self):
        return rf'{{\highlight{self.color_mapping[self.hl_color]} '

    @property
    def _rtf_header(self):
        lines = []
        # rtf 1.8 header
        lines.append('{\\rtf1\\ansi\\uc0\\deff0'
                     '{\\fonttbl{\\f0\\fmodern\\fprq1\\fcharset0%s;}}'
                     % (self.fontface and ' '
                        + self._escape(self.fontface) or ''))

        # color table
        lines.append('{\\colortbl;')
        for color, _ in self.color_mapping.items():
            lines.append(self.hex_to_rtf_color(color))
        lines.append('}')

        # font and fontsize
        lines.append('\\f0\\sa0')
        if self.fontsize:
            lines.append('\\fs%d' % self.fontsize)

        # ensure Libre Office Writer imports and renders consecutive
        # space characters the same width, needed for line numbering.
        # https://bugs.documentfoundation.org/show_bug.cgi?id=144050
        lines.append('\\dntblnsbdb')

        return lines

    def format_unencoded(self, tokensource, outfile):
        for line in self._rtf_header:
            outfile.write(line + "\n")

        tokensource = self._split_tokens_on_newlines(tokensource)

        # first pass of tokens to count lines, needed for line numbering
        if self.linenos:
            line_count = 0
            tokens = [] # for copying the token source generator
            for ttype, value in tokensource:
                tokens.append((ttype, value))
                if value.endswith("\n"):
                    line_count += 1

            # width of line number strings (for padding with spaces)
            linenos_width = len(str(line_count+self.linenostart-1))

            tokensource = tokens

        # highlight stream
        lineno = 1
        start_new_line = True
        for ttype, value in tokensource:
            if start_new_line and lineno in self.hl_lines:
                outfile.write(self._hl_open_str)

            if start_new_line and self.linenos:
                if (lineno-self.linenostart+1)%self.linenostep == 0:
                    current_lineno = lineno + self.linenostart - 1
                    lineno_str = str(current_lineno).rjust(linenos_width)
                else:
                    lineno_str = "".rjust(linenos_width)
                outfile.write(self._lineno_template % lineno_str)

            while not self.style.styles_token(ttype) and ttype.parent:
                ttype = ttype.parent
            style = self.style.style_for_token(ttype)
            buf = []
            if style['bgcolor']:
                buf.append('\\cb%d' % self.color_mapping[style['bgcolor']])
            if style['color']:
                buf.append('\\cf%d' % self.color_mapping[style['color']])
            if style['bold']:
                buf.append('\\b')
            if style['italic']:
                buf.append('\\i')
            if style['underline']:
                buf.append('\\ul')
            if style['border']:
                buf.append('\\chbrdr\\chcfpat%d' %
                           self.color_mapping[style['border']])
            start = ''.join(buf)
            if start:
                outfile.write(f'{{{start} ')
            outfile.write(self._escape_text(value))
            if start:
                outfile.write('}')
            start_new_line = False

            # complete line of input
            if value.endswith("\n"):
                # close line highlighting
                if lineno in self.hl_lines:
                    outfile.write('}')
                # newline in RTF file after closing }
                outfile.write("\n")

                start_new_line = True
                lineno += 1

        outfile.write('}\n')

"""
    pygments.formatters.svg
    ~~~~~~~~~~~~~~~~~~~~~~~

    Formatter for SVG output.

    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.
    :license: BSD, see LICENSE for details.
"""

from pip._vendor.pygments.formatter import Formatter
from pip._vendor.pygments.token import Comment
from pip._vendor.pygments.util import get_bool_opt, get_int_opt

__all__ = ['SvgFormatter']


def escape_html(text):
    """Escape &, <, > as well as single and double quotes for HTML."""
    return text.replace('&', '&amp;').  \
                replace('<', '&lt;').   \
                replace('>', '&gt;').   \
                replace('"', '&quot;'). \
                replace("'", '&#39;')


class2style = {}

class SvgFormatter(Formatter):
    """
    Format tokens as an SVG graphics file.  This formatter is still experimental.
    Each line of code is a ``<text>`` element with explicit ``x`` and ``y``
    coordinates containing ``<tspan>`` elements with the individual token styles.

    By default, this formatter outputs a full SVG document including doctype
    declaration and the ``<svg>`` root element.

    .. versionadded:: 0.9

    Additional options accepted:

    `nowrap`
        Don't wrap the SVG ``<text>`` elements in ``<svg><g>`` elements and
        don't add a XML declaration and a doctype.  If true, the `fontfamily`
        and `fontsize` options are ignored.  Defaults to ``False``.

    `fontfamily`
        The value to give the wrapping ``<g>`` element's ``font-family``
        attribute, defaults to ``"monospace"``.

    `fontsize`
        The value to give the wrapping ``<g>`` element's ``font-size``
        attribute, defaults to ``"14px"``.

    `linenos`
        If ``True``, add line numbers (default: ``False``).

    `linenostart`
        The line number for the first line (default: ``1``).

    `linenostep`
        If set to a number n > 1, only every nth line number is printed.

    `linenowidth`
        Maximum width devoted to line numbers (default: ``3*ystep``, sufficient
        for up to 4-digit line numbers. Increase width for longer code blocks).

    `xoffset`
        Starting offset in X direction, defaults to ``0``.

    `yoffset`
        Starting offset in Y direction, defaults to the font size if it is given
        in pixels, or ``20`` else.  (This is necessary since text coordinates
        refer to the text baseline, not the top edge.)

    `ystep`
        Offset to add to the Y coordinate for each subsequent line.  This should
        roughly be the text size plus 5.  It defaults to that value if the text
        size is given in pixels, or ``25`` else.

    `spacehack`
        Convert spaces in the source to ``&#160;``, which are non-breaking
        spaces.  SVG provides the ``xml:space`` attribute to control how
        whitespace inside tags is handled, in theory, the ``preserve`` value
        could be used to keep all whitespace as-is.  However, many current SVG
        viewers don't obey that rule, so this option is provided as a workaround
        and defaults to ``True``.
    """
    name = 'SVG'
    aliases = ['svg']
    filenames = ['*.svg']

    def __init__(self, **options):
        Formatter.__init__(self, **options)
        self.nowrap = get_bool_opt(options, 'nowrap', False)
        self.fontfamily = options.get('fontfamily', 'monospace')
        self.fontsize = options.get('fontsize', '14px')
        self.xoffset = get_int_opt(options, 'xoffset', 0)
        fs = self.fontsize.strip()
        if fs.endswith('px'):
            fs = fs[:-2].strip()
        try:
            int_fs = int(fs)
        except ValueError:
            int_fs = 20
        self.yoffset = get_int_opt(options, 'yoffset', int_fs)
        self.ystep = get_int_opt(options, 'ystep', int_fs + 5)
        self.spacehack = get_bool_opt(options, 'spacehack', True)
        self.linenos = get_bool_opt(options,'linenos',False)
        self.linenostart = get_int_opt(options,'linenostart',1)
        self.linenostep = get_int_opt(options,'linenostep',1)
        self.linenowidth = get_int_opt(options,'linenowidth', 3*self.ystep)
        self._stylecache = {}

    def format_unencoded(self, tokensource, outfile):
        """
        Format ``tokensource``, an iterable of ``(tokentype, tokenstring)``
        tuples and write it into ``outfile``.

        For our implementation we put all lines in their own 'line group'.
        """
        x = self.xoffset
        y = self.yoffset
        if not self.nowrap:
            if self.encoding:
                outfile.write(f'<?xml version="1.0" encoding="{self.encoding}"?>\n')
            else:
                outfile.write('<?xml version="1.0"?>\n')
            outfile.write('<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" '
                          '"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/'
                          'svg10.dtd">\n')
            outfile.write('<svg xmlns="http://www.w3.org/2000/svg">\n')
            outfile.write(f'<g font-family="{self.fontfamily}" font-size="{self.fontsize}">\n')

        counter = self.linenostart
        counter_step = self.linenostep
        counter_style = self._get_style(Comment)
        line_x = x

        if self.linenos:
            if counter % counter_step == 0:
                outfile.write(f'<text x="{x+self.linenowidth}" y="{y}" {counter_style} text-anchor="end">{counter}</text>')
            line_x += self.linenowidth + self.ystep
            counter += 1

        outfile.write(f'<text x="{line_x}" y="{y}" xml:space="preserve">')
        for ttype, value in tokensource:
            style = self._get_style(ttype)
            tspan = style and '<tspan' + style + '>' or ''
            tspanend = tspan and '</tspan>' or ''
            value = escape_html(value)
            if self.spacehack:
                value = value.expandtabs().replace(' ', '&#160;')
            parts = value.split('\n')
            for part in parts[:-1]:
                outfile.write(tspan + part + tspanend)
                y += self.ystep
                outfile.write('</text>\n')
                if self.linenos and counter % counter_step == 0:
                    outfile.write(f'<text x="{x+self.linenowidth}" y="{y}" text-anchor="end" {counter_style}>{counter}</text>')

                counter += 1
                outfile.write(f'<text x="{line_x}" y="{y}" ' 'xml:space="preserve">')
            outfile.write(tspan + parts[-1] + tspanend)
        outfile.write('</text>')

        if not self.nowrap:
            outfile.write('</g></svg>\n')

    def _get_style(self, tokentype):
        if tokentype in self._stylecache:
            return self._stylecache[tokentype]
        otokentype = tokentype
        while not self.style.styles_token(tokentype):
            tokentype = tokentype.parent
        value = self.style.style_for_token(tokentype)
        result = ''
        if value['color']:
            result = ' fill="#' + value['color'] + '"'
        if value['bold']:
            result += ' font-weight="bold"'
        if value['italic']:
            result += ' font-style="italic"'
        self._stylecache[otokentype] = result
        return result

"""
    pygments.formatters.bbcode
    ~~~~~~~~~~~~~~~~~~~~~~~~~~

    BBcode formatter.

    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.
    :license: BSD, see LICENSE for details.
"""


from pip._vendor.pygments.formatter import Formatter
from pip._vendor.pygments.util import get_bool_opt

__all__ = ['BBCodeFormatter']


class BBCodeFormatter(Formatter):
    """
    Format tokens with BBcodes. These formatting codes are used by many
    bulletin boards, so you can highlight your sourcecode with pygments before
    posting it there.

    This formatter has no support for background colors and borders, as there
    are no common BBcode tags for that.

    Some board systems (e.g. phpBB) don't support colors in their [code] tag,
    so you can't use the highlighting together with that tag.
    Text in a [code] tag usually is shown with a monospace font (which this
    formatter can do with the ``monofont`` option) and no spaces (which you
    need for indentation) are removed.

    Additional options accepted:

    `style`
        The style to use, can be a string or a Style subclass (default:
        ``'default'``).

    `codetag`
        If set to true, put the output into ``[code]`` tags (default:
        ``false``)

    `monofont`
        If set to true, add a tag to show the code with a monospace font
        (default: ``false``).
    """
    name = 'BBCode'
    aliases = ['bbcode', 'bb']
    filenames = []

    def __init__(self, **options):
        Formatter.__init__(self, **options)
        self._code = get_bool_opt(options, 'codetag', False)
        self._mono = get_bool_opt(options, 'monofont', False)

        self.styles = {}
        self._make_styles()

    def _make_styles(self):
        for ttype, ndef in self.style:
            start = end = ''
            if ndef['color']:
                start += '[color=#{}]'.format(ndef['color'])
                end = '[/color]' + end
            if ndef['bold']:
                start += '[b]'
                end = '[/b]' + end
            if ndef['italic']:
                start += '[i]'
                end = '[/i]' + end
            if ndef['underline']:
                start += '[u]'
                end = '[/u]' + end
            # there are no common BBcodes for background-color and border

            self.styles[ttype] = start, end

    def format_unencoded(self, tokensource, outfile):
        if self._code:
            outfile.write('[code]')
        if self._mono:
            outfile.write('[font=monospace]')

        lastval = ''
        lasttype = None

        for ttype, value in tokensource:
            while ttype not in self.styles:
                ttype = ttype.parent
            if ttype == lasttype:
                lastval += value
            else:
                if lastval:
                    start, end = self.styles[lasttype]
                    outfile.write(''.join((start, lastval, end)))
                lastval = value
                lasttype = ttype

        if lastval:
            start, end = self.styles[lasttype]
            outfile.write(''.join((start, lastval, end)))

        if self._mono:
            outfile.write('[/font]')
        if self._code:
            outfile.write('[/code]')
        if self._code or self._mono:
            outfile.write('\n')

"""
    pygments.formatters.pangomarkup
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Formatter for Pango markup output.

    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.
    :license: BSD, see LICENSE for details.
"""

from pip._vendor.pygments.formatter import Formatter


__all__ = ['PangoMarkupFormatter']


_escape_table = {
    ord('&'): '&amp;',
    ord('<'): '&lt;',
}


def escape_special_chars(text, table=_escape_table):
    """Escape & and < for Pango Markup."""
    return text.translate(table)


class PangoMarkupFormatter(Formatter):
    """
    Format tokens as Pango Markup code. It can then be rendered to an SVG.

    .. versionadded:: 2.9
    """

    name = 'Pango Markup'
    aliases = ['pango', 'pangomarkup']
    filenames = []

    def __init__(self, **options):
        Formatter.__init__(self, **options)

        self.styles = {}

        for token, style in self.style:
            start = ''
            end = ''
            if style['color']:
                start += '<span fgcolor="#{}">'.format(style['color'])
                end = '</span>' + end
            if style['bold']:
                start += '<b>'
                end = '</b>' + end
            if style['italic']:
                start += '<i>'
                end = '</i>' + end
            if style['underline']:
                start += '<u>'
                end = '</u>' + end
            self.styles[token] = (start, end)

    def format_unencoded(self, tokensource, outfile):
        lastval = ''
        lasttype = None

        outfile.write('<tt>')

        for ttype, value in tokensource:
            while ttype not in self.styles:
                ttype = ttype.parent
            if ttype == lasttype:
                lastval += escape_special_chars(value)
            else:
                if lastval:
                    stylebegin, styleend = self.styles[lasttype]
                    outfile.write(stylebegin + lastval + styleend)
                lastval = escape_special_chars(value)
                lasttype = ttype

        if lastval:
            stylebegin, styleend = self.styles[lasttype]
            outfile.write(stylebegin + lastval + styleend)

        outfile.write('</tt>')

# Automatically generated by scripts/gen_mapfiles.py.
# DO NOT EDIT BY HAND; run `tox -e mapfiles` instead.

FORMATTERS = {
    'BBCodeFormatter': ('pygments.formatters.bbcode', 'BBCode', ('bbcode', 'bb'), (), 'Format tokens with BBcodes. These formatting codes are used by many bulletin boards, so you can highlight your sourcecode with pygments before posting it there.'),
    'BmpImageFormatter': ('pygments.formatters.img', 'img_bmp', ('bmp', 'bitmap'), ('*.bmp',), 'Create a bitmap image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.'),
    'GifImageFormatter': ('pygments.formatters.img', 'img_gif', ('gif',), ('*.gif',), 'Create a GIF image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.'),
    'GroffFormatter': ('pygments.formatters.groff', 'groff', ('groff', 'troff', 'roff'), (), 'Format tokens with groff escapes to change their color and font style.'),
    'HtmlFormatter': ('pygments.formatters.html', 'HTML', ('html',), ('*.html', '*.htm'), "Format tokens as HTML 4 ``<span>`` tags. By default, the content is enclosed in a ``<pre>`` tag, itself wrapped in a ``<div>`` tag (but see the `nowrap` option). The ``<div>``'s CSS class can be set by the `cssclass` option."),
    'IRCFormatter': ('pygments.formatters.irc', 'IRC', ('irc', 'IRC'), (), 'Format tokens with IRC color sequences'),
    'ImageFormatter': ('pygments.formatters.img', 'img', ('img', 'IMG', 'png'), ('*.png',), 'Create a PNG image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.'),
    'JpgImageFormatter': ('pygments.formatters.img', 'img_jpg', ('jpg', 'jpeg'), ('*.jpg',), 'Create a JPEG image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.'),
    'LatexFormatter': ('pygments.formatters.latex', 'LaTeX', ('latex', 'tex'), ('*.tex',), 'Format tokens as LaTeX code. This needs the `fancyvrb` and `color` standard packages.'),
    'NullFormatter': ('pygments.formatters.other', 'Text only', ('text', 'null'), ('*.txt',), 'Output the text unchanged without any formatting.'),
    'PangoMarkupFormatter': ('pygments.formatters.pangomarkup', 'Pango Markup', ('pango', 'pangomarkup'), (), 'Format tokens as Pango Markup code. It can then be rendered to an SVG.'),
    'RawTokenFormatter': ('pygments.formatters.other', 'Raw tokens', ('raw', 'tokens'), ('*.raw',), 'Format tokens as a raw representation for storing token streams.'),
    'RtfFormatter': ('pygments.formatters.rtf', 'RTF', ('rtf',), ('*.rtf',), 'Format tokens as RTF markup. This formatter automatically outputs full RTF documents with color information and other useful stuff. Perfect for Copy and Paste into Microsoft(R) Word(R) documents.'),
    'SvgFormatter': ('pygments.formatters.svg', 'SVG', ('svg',), ('*.svg',), 'Format tokens as an SVG graphics file.  This formatter is still experimental. Each line of code is a ``<text>`` element with explicit ``x`` and ``y`` coordinates containing ``<tspan>`` elements with the individual token styles.'),
    'Terminal256Formatter': ('pygments.formatters.terminal256', 'Terminal256', ('terminal256', 'console256', '256'), (), 'Format tokens with ANSI color sequences, for output in a 256-color terminal or console.  Like in `TerminalFormatter` color sequences are terminated at newlines, so that paging the output works correctly.'),
    'TerminalFormatter': ('pygments.formatters.terminal', 'Terminal', ('terminal', 'console'), (), 'Format tokens with ANSI color sequences, for output in a text console. Color sequences are terminated at newlines, so that paging the output works correctly.'),
    'TerminalTrueColorFormatter': ('pygments.formatters.terminal256', 'TerminalTrueColor', ('terminal16m', 'console16m', '16m'), (), 'Format tokens with ANSI color sequences, for output in a true-color terminal or console.  Like in `TerminalFormatter` color sequences are terminated at newlines, so that paging the output works correctly.'),
    'TestcaseFormatter': ('pygments.formatters.other', 'Testcase', ('testcase',), (), 'Format tokens as appropriate for a new testcase.'),
}

"""
    pygments.formatters.groff
    ~~~~~~~~~~~~~~~~~~~~~~~~~

    Formatter for groff output.

    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.
    :license: BSD, see LICENSE for details.
"""

import math
from pip._vendor.pygments.formatter import Formatter
from pip._vendor.pygments.util import get_bool_opt, get_int_opt

__all__ = ['GroffFormatter']


class GroffFormatter(Formatter):
    """
    Format tokens with groff escapes to change their color and font style.

    .. versionadded:: 2.11

    Additional options accepted:

    `style`
        The style to use, can be a string or a Style subclass (default:
        ``'default'``).

    `monospaced`
        If set to true, monospace font will be used (default: ``true``).

    `linenos`
        If set to true, print the line numbers (default: ``false``).

    `wrap`
        Wrap lines to the specified number of characters. Disabled if set to 0
        (default: ``0``).
    """

    name = 'groff'
    aliases = ['groff','troff','roff']
    filenames = []

    def __init__(self, **options):
        Formatter.__init__(self, **options)

        self.monospaced = get_bool_opt(options, 'monospaced', True)
        self.linenos = get_bool_opt(options, 'linenos', False)
        self._lineno = 0
        self.wrap = get_int_opt(options, 'wrap', 0)
        self._linelen = 0

        self.styles = {}
        self._make_styles()


    def _make_styles(self):
        regular = '\\f[CR]' if self.monospaced else '\\f[R]'
        bold = '\\f[CB]' if self.monospaced else '\\f[B]'
        italic = '\\f[CI]' if self.monospaced else '\\f[I]'

        for ttype, ndef in self.style:
            start = end = ''
            if ndef['color']:
                start += '\\m[{}]'.format(ndef['color'])
                end = '\\m[]' + end
            if ndef['bold']:
                start += bold
                end = regular + end
            if ndef['italic']:
                start += italic
                end = regular + end
            if ndef['bgcolor']:
                start += '\\M[{}]'.format(ndef['bgcolor'])
                end = '\\M[]' + end

            self.styles[ttype] = start, end


    def _define_colors(self, outfile):
        colors = set()
        for _, ndef in self.style:
            if ndef['color'] is not None:
                colors.add(ndef['color'])

        for color in sorted(colors):
            outfile.write('.defcolor ' + color + ' rgb #' + color + '\n')


    def _write_lineno(self, outfile):
        self._lineno += 1
        outfile.write("%s% 4d " % (self._lineno != 1 and '\n' or '', self._lineno))


    def _wrap_line(self, line):
        length = len(line.rstrip('\n'))
        space = '     ' if self.linenos else ''
        newline = ''

        if length > self.wrap:
            for i in range(0, math.floor(length / self.wrap)):
                chunk = line[i*self.wrap:i*self.wrap+self.wrap]
                newline += (chunk + '\n' + space)
            remainder = length % self.wrap
            if remainder > 0:
                newline += line[-remainder-1:]
                self._linelen = remainder
        elif self._linelen + length > self.wrap:
            newline = ('\n' + space) + line
            self._linelen = length
        else:
            newline = line
            self._linelen += length

        return newline


    def _escape_chars(self, text):
        text = text.replace('\\', '\\[u005C]'). \
                    replace('.', '\\[char46]'). \
                    replace('\'', '\\[u0027]'). \
                    replace('`', '\\[u0060]'). \
                    replace('~', '\\[u007E]')
        copy = text

        for char in copy:
            if len(char) != len(char.encode()):
                uni = char.encode('unicode_escape') \
                    .decode()[1:] \
                    .replace('x', 'u00') \
                    .upper()
                text = text.replace(char, '\\[u' + uni[1:] + ']')

        return text


    def format_unencoded(self, tokensource, outfile):
        self._define_colors(outfile)

        outfile.write('.nf\n\\f[CR]\n')

        if self.linenos:
            self._write_lineno(outfile)

        for ttype, value in tokensource:
            while ttype not in self.styles:
                ttype = ttype.parent
            start, end = self.styles[ttype]

            for line in value.splitlines(True):
                if self.wrap > 0:
                    line = self._wrap_line(line)

                if start and end:
                    text = self._escape_chars(line.rstrip('\n'))
                    if text != '':
                        outfile.write(''.join((start, text, end)))
                else:
                    outfile.write(self._escape_chars(line.rstrip('\n')))

                if line.endswith('\n'):
                    if self.linenos:
                        self._write_lineno(outfile)
                        self._linelen = 0
                    else:
                        outfile.write('\n')
                        self._linelen = 0

        outfile.write('\n.fi')

"""
    pygments.formatters.latex
    ~~~~~~~~~~~~~~~~~~~~~~~~~

    Formatter for LaTeX fancyvrb output.

    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.
    :license: BSD, see LICENSE for details.
"""

from io import StringIO

from pip._vendor.pygments.formatter import Formatter
from pip._vendor.pygments.lexer import Lexer, do_insertions
from pip._vendor.pygments.token import Token, STANDARD_TYPES
from pip._vendor.pygments.util import get_bool_opt, get_int_opt


__all__ = ['LatexFormatter']


def escape_tex(text, commandprefix):
    return text.replace('\\', '\x00'). \
                replace('{', '\x01'). \
                replace('}', '\x02'). \
                replace('\x00', rf'\{commandprefix}Zbs{{}}'). \
                replace('\x01', rf'\{commandprefix}Zob{{}}'). \
                replace('\x02', rf'\{commandprefix}Zcb{{}}'). \
                replace('^', rf'\{commandprefix}Zca{{}}'). \
                replace('_', rf'\{commandprefix}Zus{{}}'). \
                replace('&', rf'\{commandprefix}Zam{{}}'). \
                replace('<', rf'\{commandprefix}Zlt{{}}'). \
                replace('>', rf'\{commandprefix}Zgt{{}}'). \
                replace('#', rf'\{commandprefix}Zsh{{}}'). \
                replace('%', rf'\{commandprefix}Zpc{{}}'). \
                replace('$', rf'\{commandprefix}Zdl{{}}'). \
                replace('-', rf'\{commandprefix}Zhy{{}}'). \
                replace("'", rf'\{commandprefix}Zsq{{}}'). \
                replace('"', rf'\{commandprefix}Zdq{{}}'). \
                replace('~', rf'\{commandprefix}Zti{{}}')


DOC_TEMPLATE = r'''
\documentclass{%(docclass)s}
\usepackage{fancyvrb}
\usepackage{color}
\usepackage[%(encoding)s]{inputenc}
%(preamble)s

%(styledefs)s

\begin{document}

\section*{%(title)s}

%(code)s
\end{document}
'''

## Small explanation of the mess below :)
#
# The previous version of the LaTeX formatter just assigned a command to
# each token type defined in the current style.  That obviously is
# problematic if the highlighted code is produced for a different style
# than the style commands themselves.
#
# This version works much like the HTML formatter which assigns multiple
# CSS classes to each <span> tag, from the most specific to the least
# specific token type, thus falling back to the parent token type if one
# is not defined.  Here, the classes are there too and use the same short
# forms given in token.STANDARD_TYPES.
#
# Highlighted code now only uses one custom command, which by default is
# \PY and selectable by the commandprefix option (and in addition the
# escapes \PYZat, \PYZlb and \PYZrb which haven't been renamed for
# backwards compatibility purposes).
#
# \PY has two arguments: the classes, separated by +, and the text to
# render in that style.  The classes are resolved into the respective
# style commands by magic, which serves to ignore unknown classes.
#
# The magic macros are:
# * \PY@it, \PY@bf, etc. are unconditionally wrapped around the text
#   to render in \PY@do.  Their definition determines the style.
# * \PY@reset resets \PY@it etc. to do nothing.
# * \PY@toks parses the list of classes, using magic inspired by the
#   keyval package (but modified to use plusses instead of commas
#   because fancyvrb redefines commas inside its environments).
# * \PY@tok processes one class, calling the \PY@tok@classname command
#   if it exists.
# * \PY@tok@classname sets the \PY@it etc. to reflect the chosen style
#   for its class.
# * \PY resets the style, parses the classnames and then calls \PY@do.
#
# Tip: to read this code, print it out in substituted form using e.g.
# >>> print STYLE_TEMPLATE % {'cp': 'PY'}

STYLE_TEMPLATE = r'''
\makeatletter
\def\%(cp)s@reset{\let\%(cp)s@it=\relax \let\%(cp)s@bf=\relax%%
    \let\%(cp)s@ul=\relax \let\%(cp)s@tc=\relax%%
    \let\%(cp)s@bc=\relax \let\%(cp)s@ff=\relax}
\def\%(cp)s@tok#1{\csname %(cp)s@tok@#1\endcsname}
\def\%(cp)s@toks#1+{\ifx\relax#1\empty\else%%
    \%(cp)s@tok{#1}\expandafter\%(cp)s@toks\fi}
\def\%(cp)s@do#1{\%(cp)s@bc{\%(cp)s@tc{\%(cp)s@ul{%%
    \%(cp)s@it{\%(cp)s@bf{\%(cp)s@ff{#1}}}}}}}
\def\%(cp)s#1#2{\%(cp)s@reset\%(cp)s@toks#1+\relax+\%(cp)s@do{#2}}

%(styles)s

\def\%(cp)sZbs{\char`\\}
\def\%(cp)sZus{\char`\_}
\def\%(cp)sZob{\char`\{}
\def\%(cp)sZcb{\char`\}}
\def\%(cp)sZca{\char`\^}
\def\%(cp)sZam{\char`\&}
\def\%(cp)sZlt{\char`\<}
\def\%(cp)sZgt{\char`\>}
\def\%(cp)sZsh{\char`\#}
\def\%(cp)sZpc{\char`\%%}
\def\%(cp)sZdl{\char`\$}
\def\%(cp)sZhy{\char`\-}
\def\%(cp)sZsq{\char`\'}
\def\%(cp)sZdq{\char`\"}
\def\%(cp)sZti{\char`\~}
%% for compatibility with earlier versions
\def\%(cp)sZat{@}
\def\%(cp)sZlb{[}
\def\%(cp)sZrb{]}
\makeatother
'''


def _get_ttype_name(ttype):
    fname = STANDARD_TYPES.get(ttype)
    if fname:
        return fname
    aname = ''
    while fname is None:
        aname = ttype[-1] + aname
        ttype = ttype.parent
        fname = STANDARD_TYPES.get(ttype)
    return fname + aname


class LatexFormatter(Formatter):
    r"""
    Format tokens as LaTeX code. This needs the `fancyvrb` and `color`
    standard packages.

    Without the `full` option, code is formatted as one ``Verbatim``
    environment, like this:

    .. sourcecode:: latex

        \begin{Verbatim}[commandchars=\\\{\}]
        \PY{k}{def }\PY{n+nf}{foo}(\PY{n}{bar}):
            \PY{k}{pass}
        \end{Verbatim}

    Wrapping can be disabled using the `nowrap` option.

    The special command used here (``\PY``) and all the other macros it needs
    are output by the `get_style_defs` method.

    With the `full` option, a complete LaTeX document is output, including
    the command definitions in the preamble.

    The `get_style_defs()` method of a `LatexFormatter` returns a string
    containing ``\def`` commands defining the macros needed inside the
    ``Verbatim`` environments.

    Additional options accepted:

    `nowrap`
        If set to ``True``, don't wrap the tokens at all, not even inside a
        ``\begin{Verbatim}`` environment. This disables most other options
        (default: ``False``).

    `style`
        The style to use, can be a string or a Style subclass (default:
        ``'default'``).

    `full`
        Tells the formatter to output a "full" document, i.e. a complete
        self-contained document (default: ``False``).

    `title`
        If `full` is true, the title that should be used to caption the
        document (default: ``''``).

    `docclass`
        If the `full` option is enabled, this is the document class to use
        (default: ``'article'``).

    `preamble`
        If the `full` option is enabled, this can be further preamble commands,
        e.g. ``\usepackage`` (default: ``''``).

    `linenos`
        If set to ``True``, output line numbers (default: ``False``).

    `linenostart`
        The line number for the first line (default: ``1``).

    `linenostep`
        If set to a number n > 1, only every nth line number is printed.

    `verboptions`
        Additional options given to the Verbatim environment (see the *fancyvrb*
        docs for possible values) (default: ``''``).

    `commandprefix`
        The LaTeX commands used to produce colored output are constructed
        using this prefix and some letters (default: ``'PY'``).

        .. versionadded:: 0.7
        .. versionchanged:: 0.10
           The default is now ``'PY'`` instead of ``'C'``.

    `texcomments`
        If set to ``True``, enables LaTeX comment lines.  That is, LaTex markup
        in comment tokens is not escaped so that LaTeX can render it (default:
        ``False``).

        .. versionadded:: 1.2

    `mathescape`
        If set to ``True``, enables LaTeX math mode escape in comments. That
        is, ``'$...$'`` inside a comment will trigger math mode (default:
        ``False``).

        .. versionadded:: 1.2

    `escapeinside`
        If set to a string of length 2, enables escaping to LaTeX. Text
        delimited by these 2 characters is read as LaTeX code and
        typeset accordingly. It has no effect in string literals. It has
        no effect in comments if `texcomments` or `mathescape` is
        set. (default: ``''``).

        .. versionadded:: 2.0

    `envname`
        Allows you to pick an alternative environment name replacing Verbatim.
        The alternate environment still has to support Verbatim's option syntax.
        (default: ``'Verbatim'``).

        .. versionadded:: 2.0
    """
    name = 'LaTeX'
    aliases = ['latex', 'tex']
    filenames = ['*.tex']

    def __init__(self, **options):
        Formatter.__init__(self, **options)
        self.nowrap = get_bool_opt(options, 'nowrap', False)
        self.docclass = options.get('docclass', 'article')
        self.preamble = options.get('preamble', '')
        self.linenos = get_bool_opt(options, 'linenos', False)
        self.linenostart = abs(get_int_opt(options, 'linenostart', 1))
        self.linenostep = abs(get_int_opt(options, 'linenostep', 1))
        self.verboptions = options.get('verboptions', '')
        self.nobackground = get_bool_opt(options, 'nobackground', False)
        self.commandprefix = options.get('commandprefix', 'PY')
        self.texcomments = get_bool_opt(options, 'texcomments', False)
        self.mathescape = get_bool_opt(options, 'mathescape', False)
        self.escapeinside = options.get('escapeinside', '')
        if len(self.escapeinside) == 2:
            self.left = self.escapeinside[0]
            self.right = self.escapeinside[1]
        else:
            self.escapeinside = ''
        self.envname = options.get('envname', 'Verbatim')

        self._create_stylesheet()

    def _create_stylesheet(self):
        t2n = self.ttype2name = {Token: ''}
        c2d = self.cmd2def = {}
        cp = self.commandprefix

        def rgbcolor(col):
            if col:
                return ','.join(['%.2f' % (int(col[i] + col[i + 1], 16) / 255.0)
                                 for i in (0, 2, 4)])
            else:
                return '1,1,1'

        for ttype, ndef in self.style:
            name = _get_ttype_name(ttype)
            cmndef = ''
            if ndef['bold']:
                cmndef += r'\let\$$@bf=\textbf'
            if ndef['italic']:
                cmndef += r'\let\$$@it=\textit'
            if ndef['underline']:
                cmndef += r'\let\$$@ul=\underline'
            if ndef['roman']:
                cmndef += r'\let\$$@ff=\textrm'
            if ndef['sans']:
                cmndef += r'\let\$$@ff=\textsf'
            if ndef['mono']:
                cmndef += r'\let\$$@ff=\textsf'
            if ndef['color']:
                cmndef += (r'\def\$$@tc##1{{\textcolor[rgb]{{{}}}{{##1}}}}'.format(rgbcolor(ndef['color'])))
            if ndef['border']:
                cmndef += (r'\def\$$@bc##1{{{{\setlength{{\fboxsep}}{{\string -\fboxrule}}'
                           r'\fcolorbox[rgb]{{{}}}{{{}}}{{\strut ##1}}}}}}'.format(rgbcolor(ndef['border']),
                            rgbcolor(ndef['bgcolor'])))
            elif ndef['bgcolor']:
                cmndef += (r'\def\$$@bc##1{{{{\setlength{{\fboxsep}}{{0pt}}'
                           r'\colorbox[rgb]{{{}}}{{\strut ##1}}}}}}'.format(rgbcolor(ndef['bgcolor'])))
            if cmndef == '':
                continue
            cmndef = cmndef.replace('$$', cp)
            t2n[ttype] = name
            c2d[name] = cmndef

    def get_style_defs(self, arg=''):
        """
        Return the command sequences needed to define the commands
        used to format text in the verbatim environment. ``arg`` is ignored.
        """
        cp = self.commandprefix
        styles = []
        for name, definition in self.cmd2def.items():
            styles.append(rf'\@namedef{{{cp}@tok@{name}}}{{{definition}}}')
        return STYLE_TEMPLATE % {'cp': self.commandprefix,
                                 'styles': '\n'.join(styles)}

    def format_unencoded(self, tokensource, outfile):
        # TODO: add support for background colors
        t2n = self.ttype2name
        cp = self.commandprefix

        if self.full:
            realoutfile = outfile
            outfile = StringIO()

        if not self.nowrap:
            outfile.write('\\begin{' + self.envname + '}[commandchars=\\\\\\{\\}')
            if self.linenos:
                start, step = self.linenostart, self.linenostep
                outfile.write(',numbers=left' +
                              (start and ',firstnumber=%d' % start or '') +
                              (step and ',stepnumber=%d' % step or ''))
            if self.mathescape or self.texcomments or self.escapeinside:
                outfile.write(',codes={\\catcode`\\$=3\\catcode`\\^=7'
                              '\\catcode`\\_=8\\relax}')
            if self.verboptions:
                outfile.write(',' + self.verboptions)
            outfile.write(']\n')

        for ttype, value in tokensource:
            if ttype in Token.Comment:
                if self.texcomments:
                    # Try to guess comment starting lexeme and escape it ...
                    start = value[0:1]
                    for i in range(1, len(value)):
                        if start[0] != value[i]:
                            break
                        start += value[i]

                    value = value[len(start):]
                    start = escape_tex(start, cp)

                    # ... but do not escape inside comment.
                    value = start + value
                elif self.mathescape:
                    # Only escape parts not inside a math environment.
                    parts = value.split('$')
                    in_math = False
                    for i, part in enumerate(parts):
                        if not in_math:
                            parts[i] = escape_tex(part, cp)
                        in_math = not in_math
                    value = '$'.join(parts)
                elif self.escapeinside:
                    text = value
                    value = ''
                    while text:
                        a, sep1, text = text.partition(self.left)
                        if sep1:
                            b, sep2, text = text.partition(self.right)
                            if sep2:
                                value += escape_tex(a, cp) + b
                            else:
                                value += escape_tex(a + sep1 + b, cp)
                        else:
                            value += escape_tex(a, cp)
                else:
                    value = escape_tex(value, cp)
            elif ttype not in Token.Escape:
                value = escape_tex(value, cp)
            styles = []
            while ttype is not Token:
                try:
                    styles.append(t2n[ttype])
                except KeyError:
                    # not in current style
                    styles.append(_get_ttype_name(ttype))
                ttype = ttype.parent
            styleval = '+'.join(reversed(styles))
            if styleval:
                spl = value.split('\n')
                for line in spl[:-1]:
                    if line:
                        outfile.write(f"\\{cp}{{{styleval}}}{{{line}}}")
                    outfile.write('\n')
                if spl[-1]:
                    outfile.write(f"\\{cp}{{{styleval}}}{{{spl[-1]}}}")
            else:
                outfile.write(value)

        if not self.nowrap:
            outfile.write('\\end{' + self.envname + '}\n')

        if self.full:
            encoding = self.encoding or 'utf8'
            # map known existings encodings from LaTeX distribution
            encoding = {
                'utf_8': 'utf8',
                'latin_1': 'latin1',
                'iso_8859_1': 'latin1',
            }.get(encoding.replace('-', '_'), encoding)
            realoutfile.write(DOC_TEMPLATE %
                dict(docclass  = self.docclass,
                     preamble  = self.preamble,
                     title     = self.title,
                     encoding  = encoding,
                     styledefs = self.get_style_defs(),
                     code      = outfile.getvalue()))


class LatexEmbeddedLexer(Lexer):
    """
    This lexer takes one lexer as argument, the lexer for the language
    being formatted, and the left and right delimiters for escaped text.

    First everything is scanned using the language lexer to obtain
    strings and comments. All other consecutive tokens are merged and
    the resulting text is scanned for escaped segments, which are given
    the Token.Escape type. Finally text that is not escaped is scanned
    again with the language lexer.
    """
    def __init__(self, left, right, lang, **options):
        self.left = left
        self.right = right
        self.lang = lang
        Lexer.__init__(self, **options)

    def get_tokens_unprocessed(self, text):
        # find and remove all the escape tokens (replace with an empty string)
        # this is very similar to DelegatingLexer.get_tokens_unprocessed.
        buffered = ''
        insertions = []
        insertion_buf = []
        for i, t, v in self._find_safe_escape_tokens(text):
            if t is None:
                if insertion_buf:
                    insertions.append((len(buffered), insertion_buf))
                    insertion_buf = []
                buffered += v
            else:
                insertion_buf.append((i, t, v))
        if insertion_buf:
            insertions.append((len(buffered), insertion_buf))
        return do_insertions(insertions,
                             self.lang.get_tokens_unprocessed(buffered))

    def _find_safe_escape_tokens(self, text):
        """ find escape tokens that are not in strings or comments """
        for i, t, v in self._filter_to(
            self.lang.get_tokens_unprocessed(text),
            lambda t: t in Token.Comment or t in Token.String
        ):
            if t is None:
                for i2, t2, v2 in self._find_escape_tokens(v):
                    yield i + i2, t2, v2
            else:
                yield i, None, v

    def _filter_to(self, it, pred):
        """ Keep only the tokens that match `pred`, merge the others together """
        buf = ''
        idx = 0
        for i, t, v in it:
            if pred(t):
                if buf:
                    yield idx, None, buf
                    buf = ''
                yield i, t, v
            else:
                if not buf:
                    idx = i
                buf += v
        if buf:
            yield idx, None, buf

    def _find_escape_tokens(self, text):
        """ Find escape tokens within text, give token=None otherwise """
        index = 0
        while text:
            a, sep1, text = text.partition(self.left)
            if a:
                yield index, None, a
                index += len(a)
            if sep1:
                b, sep2, text = text.partition(self.right)
                if sep2:
                    yield index + len(sep1), Token.Escape, b
                    index += len(sep1) + len(b) + len(sep2)
                else:
                    yield index, Token.Error, sep1
                    index += len(sep1)
                    text = b

"""
    pygments.styles
    ~~~~~~~~~~~~~~~

    Contains built-in styles.

    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.
    :license: BSD, see LICENSE for details.
"""

from pip._vendor.pygments.plugin import find_plugin_styles
from pip._vendor.pygments.util import ClassNotFound
from pip._vendor.pygments.styles._mapping import STYLES

#: A dictionary of built-in styles, mapping style names to
#: ``'submodule::classname'`` strings.
#: This list is deprecated. Use `pygments.styles.STYLES` instead
STYLE_MAP = {v[1]: v[0].split('.')[-1] + '::' + k for k, v in STYLES.items()}

#: Internal reverse mapping to make `get_style_by_name` more efficient
_STYLE_NAME_TO_MODULE_MAP = {v[1]: (v[0], k) for k, v in STYLES.items()}


def get_style_by_name(name):
    """
    Return a style class by its short name. The names of the builtin styles
    are listed in :data:`pygments.styles.STYLE_MAP`.

    Will raise :exc:`pygments.util.ClassNotFound` if no style of that name is
    found.
    """
    if name in _STYLE_NAME_TO_MODULE_MAP:
        mod, cls = _STYLE_NAME_TO_MODULE_MAP[name]
        builtin = "yes"
    else:
        for found_name, style in find_plugin_styles():
            if name == found_name:
                return style
        # perhaps it got dropped into our styles package
        builtin = ""
        mod = 'pygments.styles.' + name
        cls = name.title() + "Style"

    try:
        mod = __import__(mod, None, None, [cls])
    except ImportError:
        raise ClassNotFound(f"Could not find style module {mod!r}" +
                            (builtin and ", though it should be builtin")
                            + ".")
    try:
        return getattr(mod, cls)
    except AttributeError:
        raise ClassNotFound(f"Could not find style class {cls!r} in style module.")


def get_all_styles():
    """Return a generator for all styles by name, both builtin and plugin."""
    for v in STYLES.values():
        yield v[1]
    for name, _ in find_plugin_styles():
        yield name

# Automatically generated by scripts/gen_mapfiles.py.
# DO NOT EDIT BY HAND; run `tox -e mapfiles` instead.

STYLES = {
    'AbapStyle': ('pygments.styles.abap', 'abap', ()),
    'AlgolStyle': ('pygments.styles.algol', 'algol', ()),
    'Algol_NuStyle': ('pygments.styles.algol_nu', 'algol_nu', ()),
    'ArduinoStyle': ('pygments.styles.arduino', 'arduino', ()),
    'AutumnStyle': ('pygments.styles.autumn', 'autumn', ()),
    'BlackWhiteStyle': ('pygments.styles.bw', 'bw', ()),
    'BorlandStyle': ('pygments.styles.borland', 'borland', ()),
    'CoffeeStyle': ('pygments.styles.coffee', 'coffee', ()),
    'ColorfulStyle': ('pygments.styles.colorful', 'colorful', ()),
    'DefaultStyle': ('pygments.styles.default', 'default', ()),
    'DraculaStyle': ('pygments.styles.dracula', 'dracula', ()),
    'EmacsStyle': ('pygments.styles.emacs', 'emacs', ()),
    'FriendlyGrayscaleStyle': ('pygments.styles.friendly_grayscale', 'friendly_grayscale', ()),
    'FriendlyStyle': ('pygments.styles.friendly', 'friendly', ()),
    'FruityStyle': ('pygments.styles.fruity', 'fruity', ()),
    'GhDarkStyle': ('pygments.styles.gh_dark', 'github-dark', ()),
    'GruvboxDarkStyle': ('pygments.styles.gruvbox', 'gruvbox-dark', ()),
    'GruvboxLightStyle': ('pygments.styles.gruvbox', 'gruvbox-light', ()),
    'IgorStyle': ('pygments.styles.igor', 'igor', ()),
    'InkPotStyle': ('pygments.styles.inkpot', 'inkpot', ()),
    'LightbulbStyle': ('pygments.styles.lightbulb', 'lightbulb', ()),
    'LilyPondStyle': ('pygments.styles.lilypond', 'lilypond', ()),
    'LovelaceStyle': ('pygments.styles.lovelace', 'lovelace', ()),
    'ManniStyle': ('pygments.styles.manni', 'manni', ()),
    'MaterialStyle': ('pygments.styles.material', 'material', ()),
    'MonokaiStyle': ('pygments.styles.monokai', 'monokai', ()),
    'MurphyStyle': ('pygments.styles.murphy', 'murphy', ()),
    'NativeStyle': ('pygments.styles.native', 'native', ()),
    'NordDarkerStyle': ('pygments.styles.nord', 'nord-darker', ()),
    'NordStyle': ('pygments.styles.nord', 'nord', ()),
    'OneDarkStyle': ('pygments.styles.onedark', 'one-dark', ()),
    'ParaisoDarkStyle': ('pygments.styles.paraiso_dark', 'paraiso-dark', ()),
    'ParaisoLightStyle': ('pygments.styles.paraiso_light', 'paraiso-light', ()),
    'PastieStyle': ('pygments.styles.pastie', 'pastie', ()),
    'PerldocStyle': ('pygments.styles.perldoc', 'perldoc', ()),
    'RainbowDashStyle': ('pygments.styles.rainbow_dash', 'rainbow_dash', ()),
    'RrtStyle': ('pygments.styles.rrt', 'rrt', ()),
    'SasStyle': ('pygments.styles.sas', 'sas', ()),
    'SolarizedDarkStyle': ('pygments.styles.solarized', 'solarized-dark', ()),
    'SolarizedLightStyle': ('pygments.styles.solarized', 'solarized-light', ()),
    'StarofficeStyle': ('pygments.styles.staroffice', 'staroffice', ()),
    'StataDarkStyle': ('pygments.styles.stata_dark', 'stata-dark', ()),
    'StataLightStyle': ('pygments.styles.stata_light', 'stata-light', ()),
    'TangoStyle': ('pygments.styles.tango', 'tango', ()),
    'TracStyle': ('pygments.styles.trac', 'trac', ()),
    'VimStyle': ('pygments.styles.vim', 'vim', ()),
    'VisualStudioStyle': ('pygments.styles.vs', 'vs', ()),
    'XcodeStyle': ('pygments.styles.xcode', 'xcode', ()),
    'ZenburnStyle': ('pygments.styles.zenburn', 'zenburn', ()),
}

MZ       ÿÿ  ¸       @                                      º ´	Í!¸LÍ!This program cannot be run in DOS mode.

$       ãLÆ¡§-¨ò§-¨ò§-¨ò³F«ó¥-¨ò³F­ó3-¨ò³F¬ó¬-¨òõX­ó-¨òõX¬ó¶-¨òõX«ó®-¨ò³F©ó -¨ò§-©òË-¨òX ó¦-¨òXWò¦-¨ò§-?ò¦-¨òXªó¦-¨òRich§-¨ò        PE  dª îb        ð "    "     È5        @                      ð         `                                           È' P     T   p è           à @  ° T                            8             ø                          .text   l                        `.rdata  Ö                      @  @.data   H%   @                  @  À.pdata  è   p     (             @  @.rsrc   T     V   4             @  @.reloc  @   à                  @  B                                                                                                                                                                                                                                                                         ð @ù ëA  TÀ_Öý{¾©ý  ð  ð1" @ù1@ùðG©­   >Ô    ÿ Ñ¤Òc2£òã ©á©ÿ À_ÖÀ_Ö        óSº©õ[©÷c©ùk©ûs©ý{©ýCsP@©uXA©w`B©yhC©{pD©a(@ù@ ?Öý{E©ûsD©ùkC©÷cB©õ[A©óSÆ¨À_ÖóSº©õ[©÷c©ùk©ûs©ý{©ýCsP@©uXA©w`B©yhC©{pD©a(@ù@ ?Öý{E©ûsD©ùkC©÷cB©õ[A©óSÆ¨À_Ö         Ë ëÃ
 TÃ ´! ù_  ñã ª" Tb 6  ÿ
` ¿
b 6  ÿ
` ¿
b  6" @9b  9À_Ö                        B ñ TB ñc T! ùB ñÃ T?@òa  T@ò` T  ßL$ ßL!@ù!`ù` Ld LB ñ"ÿÿTb06   @­"A­$B­&C­! !@ù!`ù` ­b­d­f­c B ñbþÿTb 06  ßL` Lb (6  ßL` Lb  6 pßL`pLb 6 pß`pb 6  ÿ
` ¿
b 6  ÿ
` ¿
b  6" @9b  9À_Ö                            ! !ðø_  ñ  T¢ 6! Ñc Ñ  `
`  
¢ 6! Ñc Ñ  `
`  
b  6"ü_8bü8À_Ö                    B ñã TB ñ T!ðøB ñ T?@òa  T@òÀ T! Ñ  @L! Ñ$ @L!ðø!ðøc Ñ`  Lc Ñd  LB ñ¢þÿT  ! Ñ&C­$B­c Ñ"A­ @­!ðø!ðøf­d­b­` ­B ñbþÿT¢ 06! Ñc Ñ  @L`  L¢ (6! Ñc Ñ  @L`  L¢  6!@ Ñc@ Ñ p@L`p L¢ 6!  Ñc  Ñ p@`p ¢ 6! Ñc Ñ  `
`  
¢ 6! Ñc Ñ  `
`  
b  6"ü_8bü8À_ÖÿÃÑý{©óS©õ[©÷c©ùk©ûs©! @ùá ùó ªôªõªöªâªÿÿàªáªâªãªSP@©UXA©W`B©YhC©[pD©](@ù  ?Öó ªþþÿàªá@ùB ÒóþÿàªûsF©ùkE©÷cD©õ[C©óSB©ý{A©ÿÃÀ_Ö                            @xb 4å ª@ 7¡@ò` T¢,@_À?ñÌ T t@L¨qn" &" 4¥@ ¥ì| Õ tßL¨qn" &¢ÿÿ5¥@ ÑÁ  `N !N ¨pn &B R   Ë@À_Ö!@ ÑáË¢$@xÂ  4! ñ¬ÿÿTìÿÿ¢$@xâÿÿ5¥ Ñ   Ë üAÀ_Ö         å ª` 7?  ñ# T£@òÀ T¢,@_À?ñ Tc@ ÑãË t@L¨qn" &ûÿ4!Ë¥ ?  ñC T#üC tßL¨qn" &Âùÿ4c ñaÿÿT!@òÀ T!  ÑáË¥Ë tßL¨qn" &bøÿ4  ¡  ´¢$@xBúÿ4! ñ¨ÿÿT   Ë üAÀ_Öc@ ÑãË¢$@x"ùÿ4! ñ ùÿTc ñlÿÿTÝÿÿ  ÒÀ_Ö        @8 4å ª¡@ò@ T¢,@ò_À?ñ T p@L¨1n" & 4¥@ ¥ì| pßL¨1n" &¢ÿÿ5¥@ Ña   N !N ¨0n &B R¥    ËÀ_Ö¥ Ñ   ËÀ_Ö!@ ÑáË¢@8Bÿÿ4! ñ¬ÿÿTéÿÿ

	 å ª?@ ñ# T£@òÀ T¢,@ò_À?ñl Tc@ ÑãË p@L¨1n" &ûÿ4! Ë¥ ?@ ñC T#üD pßL¨1n" &Búÿ4c ñaÿÿT!@òÀ T!@ ÑáË¥ Ë pßL¨1n" &âøÿ4  ¡  ´¢@8¢ùÿ4! ñ¨ÿÿT   ËÀ_Öc@ ÑãË¢@8¢øÿ4! ñøÿTc ñlÿÿTÞÿÿ  ÒÀ_Ö    ÿC Ñ ð1@ùñc1Ëñ ùÀ_Ö         ðð@ù1@ùðc0Ëë  TÿC À_Ö Õàª      ý{©ýC òýÿý{A©À_Ö            Q
@ùðs/ëð3ëC  TÀ_ÖÎt1@Ñ?@ù?ë¡ÿÿTÀ_Öê ª N N N N_ ñ¬ T f  	ib8		 Ö*
$!)&&&&&&&&&&&&&&&&               @q@!¿
@! 
À_Ö@q@!¿
@ 
À_Ö@q@!¿
A 9À_Ö@q@! 
À_Ö@q@! 
À_Ö@q@ 
À_Ö@qA 9À_Ö@q À_ÖH@ Ñ
 q L@q LÀ_Ö                ÀR_ ëê TIüE) ñ@¡LÌÿÿTB@øÿµÀ_Ö                            H
@ò   TA ÑèËB Ë@qLIüF Õ Õ Õ Õ Õ) ñ@!LÌÿÿTB@Bûÿ´_ ñ+õÿT@¡LB ñÁôÿTÀ_Ö                    _@ ñl TC hhb8cË` Ö        (Á¨($Á¨ë TJ
ÀÚ)
ÀÚ@	ëà $ZÀ_Ö@ø(@øëà  TcÀÚ
ÀÚ` ëà $ZÀ_ÖD@¸(D@¸ëà  TcÀÚ	ÀÚ` ëà $ZÀ_Ö@8(@8` ëà $ZÀ_Ö@ø(@øëà  TcÀÚ
ÀÚ` ëà $ZÀ_ÖD@¸(D@¸ëà  TcÀÚ	ÀÚ` ëà $ZÀ_Ö$@x($@x ëà  TcÀÚÀÚ` ëà $ZÀ_Ö@8(@8` ëà $ZÀ_Ö@ø(@øëà  TcÀÚ
ÀÚ` ëà $ZÀ_ÖD@¸(D@¸ëà  TcÀÚ	ÀÚ` ëà $ZÀ_Ö$@x($@xcÀÚÀÚ` ëà $ZÀ_Ö  ÒÀ_Ö@ø(@øëà  TcÀÚ
ÀÚ` ëà $ZÀ_ÖD@¸(D@¸cÀÚ	ÀÚ` ëà $ZÀ_Ö@ø(@øcÀÚ
ÀÚ` ëà $ZÀ_Ö@ø(@øëà  TcÀÚ
ÀÚ` ëà $ZÀ_Ö@8(@8` ëà $ZÀ_Ö@ø(@øëà  TcÀÚ
ÀÚ` ëà $ZÀ_Ö$@x($@xcÀÚÀÚ` ëà $ZÀ_Ö@ø(@øëà  TcÀÚ
ÀÚ` ëà $ZÀ_Ö$@x($@x ëà  TcÀÚÀÚ` ëà $ZÀ_Ö@8(@8` ëà $ZÀ_Ö_ ñ+ TB Ñ(Á¨($Á¨ë! T_	ë! T(Á¨($Á¨ëa T_	ëa TB ñjþÿTB _@ ñmåÿTB  Ñ@ø(@øëá TB  ñlÿÿT ôÿTB  c hhb8cË` ÖJ
ÀÚ)
ÀÚ@	ëà $ZÀ_ÖcÀÚ
ÀÚ` ëà $ZÀ_Ö            Î´|Ø¾tl\Jâ¤Èì       ( ° À_Ö    óS¾©õ ùý{¿©ý õ ªôªóªõÿÿ  @ùæª ÒäªãÒÒáª    q ±ý{Á¨õ@ùóSÂ¨À_Ö    óS»©õ[©÷ ùä©æ©ý{¿©ý ö ªôªóªõª÷Øÿÿ  @ùæª Òãªâªáªäª    q ±ý{Á¨÷@ùõ[A©óSÅ¨À_Ö    óS¾©õ ùý{¿©ý õ ªôªóª¿ÿÿ  @ùæª ÒäªãÒÒáª    q ±ý{Á¨õ@ùóSÂ¨À_Ö    óS¾©õ ùý{¿©ý   É  °(9@ùôª ?Ö5 °¨Bùó ª µ³ ´ AÉ  °(M@ù ?Öè ª¨ùè  µÉ  °(]@ùàª ?Ö  R	  	 "ÁwR R# áª  Ò ?Öý{Á¨õ@ùóSÂ¨À_Ö Õ      óS¾©õ ùý{¿©ý è  ð É  (9@ùôª ?Ö5 ¨Bùó ª µ³ ´è  ð¡É  (M@ù ?Öè ª¨ùè  µÉ  (]@ùàª ?Ö  R	  é  ð"wR R# áª  Ò ?Öý{Á¨õ@ùóSÂ¨À_Ö Õ      ý{¼©â©ä©æ©ý Çýÿÿ Ñ` 5ä ãªà Oÿÿá ÇÿÿÈ  U@ù  R ?Öÿ Áýÿý{Ä¨À_Öý{¼©â©ä©æ©ý ±ýÿÿÑ` 5äãªà oÿÿá ÿÿÈ  U@ù  R ?Öÿ«ýÿý{Ä¨À_ÖóS½©õ[©÷c©ý{¿©ý õ ªöª Ðè9êªÂ Ñ Òá*à
ªn[ ô ª ´ Òáª (þÿ ¨
Ë	  q" Ññÿÿàªý{Á¨÷cB©õ[A©óSÃ¨À_ÖóS½©õ[©÷ ùý{½©ý è  ð!ÿ ù	 ð!)ö ªàC  Ò   qè  ðAà¶ÿÿà@ùB R Rö
 à@ùV
  R|@à@ùQ? q3¡á*ì
 ã@ù Ò! ÒàªM á ªàª¶ÿÿ@ ´$@©ëc 
@¹h% ©h~@	Ëj ¹3 $    Òn 	 R	K? qõ ªà@ù4¡á* RÏ
 ã@ù Ò! Òàª0 á ªàªÿÿè  ðÁó ª ñà}ÿÿh&@©ëc j@¹àªh% ©~@	Ëj ¹3õ è§D) Rà@ù(sB(Ëá*°
 ã@ù Ò! Òàª õ  ð¡b  ñàbÿÿô  ðÒB Òàª£ýÿ`  5÷ª  iQà@ù? q!¡ R
 ã@ù Ò! Òàªù ¡bó ª ñàJÿÿh Ñ  B ÒÒàªýÿ   4s Ñë"ÿÿT  ÷ªà@ùO àªý{Ã¨÷@ùõ[A©óSÃ¨À_ÖóS½©õ[©÷ ùý{½©ý ÁRÿ ùõ ª R/  ð  ´È  @ù ÒÄ2R Òáª  Ò ?ÖÀ 44 R$  è  ðáá àC ì á@ùó *à@ù~ S 5à@ùó  ða"âc 
 @ ´×  è@ùâ ª ÒÄ2Ráª  Ò ?Öà  5âc a"  Ò
 `þÿµ  4 Rà@ù|  qÈ2 ý{Ã¨÷@ùõ[A©óSÃ¨À_Ö    ý{¿©ý  q  T Q qÈ T(  Bù` ´( H@¹R!R	yÈ  	@ùI ¹ ?Ö  Rý{Á¨À_Ö    óøý{¼©ý ÿ ÑÈ  qAù Ò Ò R  Ò ?ÖÈ  uAù R R ÒàÃ  ?Ö ð 5FùÉ  (iAù  ?ÖH ÿ©è ©è  ðAÈ  eAùé  ð!¡ R R R R R  R ?ÖÈ  mAùó ª R R RáªàÃ  ?ÖàªÈ  aAù ?Öÿ ý{Ä¨óAøÀ_Ö    óøý{¿©ý È  a@ùó ª ?Ö 4 qa  T@ò TÈ  @ù" R! Ràª ?Ö    Rý{Á¨óAøÀ_Ö    À_Ö    óS¿©ý{¿©ý ó ª   Á ô ªàªS  ø7
 ó ª   àªú àªý{Á¨óSÁ¨À_Ö    óS½©õ[©÷c©ý{¿©ý   RÞ
 ãÿÿõ ª  RÚ
 ßÿÿô ª@ RÖ
 Ûÿÿ¿ ±ó ª  T¿ë¤Sú T ±  TëSúà T ±  TëdTú@ TÈ  @ù  ?ÖÈ  @ùø ª@ ?ÖÈ  @ù÷ ª` ?Öö ª  R´
 Q   R±
 N ¿ëXúá  TÈ  E@ù Ò  ?Ö Ò¿ëWúá  TÈ  E@ù Ò@ ?Ö Ò¿ëVúá  TÈ  E@ù Ò` ?Ö Òëàëôë Ñó
 ±( TÈ  A@ù ?ÖÈ  E@ù Ò  ?Ö Ñ
 ±H TÈ  A@ùàª ?ÖÈ  E@ù Ò@ ?Öh Ñ
 ±H TÈ  A@ùàª ?ÖÈ  E@ù Ò` ?Öý{Á¨÷cB©õ[A©óSÃ¨À_Öý{½©óS©õ[©ý ¢ûÿÿCÑ
< S_ q$(@ú  T+ @¹t}@	 _	ëã T(À+	   Á b vtb õ ªëb TÒ@ø Ñ ±h  T`þC¶ s" ëÿÿTàªQ \ÿÿÈ  )@ùá   R ?Ö Q
q¨  TÈ  I@ùà  ?ÖÿCzûÿõ[B©óSA©ý{Ã¨À_Ö    óS½©õ[©÷ ùÿC"Ñý{©ýC È  Q@ù÷ ª Ò  Ò ?Ö ð¡1è  ðáÀVù  ñà£ýÿ( È  
@ùÀVDùä Râª!R ?Ö   4è#@¹  RAq@  T  Rè  ðAýÿh@¹RÀVDùâª!R	2È  	@ùi ¹ ?Öè  ðÁýÿè£ } ©à£ }©}©}©}©}©1 ùÈ  @ù ?Öèg@¹r TÈ  @ù  ?ÖÈ  @ùõ ª@ ?ÖÈ  @ùô ª` ?Öó ªàªÅþÿè  ðA	`ýÿàªÀþÿè  ðÁ	[ýÿàª»þÿè  ða
Výÿèg@¹õÓ©óG ù2èg ¹è£ è[ ©È  Y@ù Ò Ò R$ R Ò Òáª  Ò ?Ö 5È  5@ù ?ÖÈ  1@ùâ * ÒRäCR Ò  R ?Öè  ðãCâª  RýÿÈ  !@ùÁ@ùÀVDù ?Öá;@ùà×@y8ÿÿ   !É  (@ù! R ?Öè  ðaýÿàªEþÿÈ  A@ùÀ@ù ?ÖÈ  =@ùÀ@ù R  ?ÖÈ  e@ùÀ@ùá  ?Öè  ðáýÿÈ  U@ùà#@¹ ?ÖóS½©õ[©÷ ùý{¿©ý È  YAùöª÷  ðá
ô ª ?Öó ªs ´Õ  `@y  4 q@ TR$
 à  5¨ZAùá
`"  ?Öó ªþÿµ  ´s" õª8  è  ðÁ
Òàª~ è  ðA  qâªàÜüÿb  @yÀ  4R	
 `  4  R    Rè  ðaâªÏüÿ³
 ¨.@xÈ  4Rà*û	 @ÿÿ5h@yóªè  4Rà*ô	 `  5h.@xhÿÿ5`@yRî	 `  4 ys
 àªýÿè  ðAõ ª¿ ñâªà°üÿ@y q Th@yâª qè  ðà¦üÿ ys
 
 µ
 è  ð!âÒàª9 ` 4>@y q  Th@yâª qè  ðÁàüÿ`@yÀ  4RÀ	 `  4 ys
 h@yè  4Rà*¸	 `  4h.@xhÿÿ5Ó ùàªý{Á¨÷@ùõ[A©óSÃ¨À_Ö    óS½©õ[©÷c©ÿÑý{ ©ý È  @ù ?Ö @y qA  T   qJR	RAm   µè  ð1
   È@yè  4Rà*	 `  4È.@xhÿÿ5 ð)È  %@ù Ráª  Ò ?Ö@y	|@Ó q`  T÷ª  
 )	 Ñ
Rÿz)x
 ÐH(9à£~üÿè  ðó ª ñà@üÿj
ë ÒèªB T	À8?5 qÀ  T?) q  T
ëCÿÿT   Ñ¿ ñè  Ðaà-üÿ¨  ð-@ù£K¿ 9 Räc âªR ½R ?Öè  Ð!ó * qàüÿh~!ñ Téc i)xóc è3@yè  4Rà*D	 `  4h.@xhÿÿ5h@yé  Ð!á qà	üÿ  Rà*7	 `  4h.@xhÿÿ5h@yé  Ð!¡ qàüûÿ  Rà**	 `  4h.@xhÿÿ5áC ÿ ùàªëþÿè  Ðõ ª¿ ñàëûÿø@ùè  ÐA ñàåûÿè  Ð !âÒáª|   5âª Òà!
 ¨  ðUAùà ?Ö¨>@yéÒ q¡ TAR  Ô è  Ðó ª ñâªàÉûÿ y	Ò¨  ðQAù¢	áàÃ ?ÖõÃ¨Àyéªh  4(-Àxèÿÿ5Ày-Ëêªh  4H-Àxèÿÿ5èÀyLËéªh  4(-Àxèÿÿ5ÈÀy+Ëêªh  4H-Àxèÿÿ5HË	ýA*A ÒKt" I è  ÐAó ª ñàûÿè  Ð!çªæªåªäª" " àªíúÿàªÙýÿ      ý{¿©ý î é ÿÿ    ÿC Ñà ù@ R` >ÔÿC À_Öý{¿©ý  R  ý{Á¨À_ÖÿC Ñà ¹à@¹` >ÔÿC À_Öóøý{¿©ý @ RÜ ¯ æ © ó *   ¹  RÒ   S¨ 4/    a2Z  ° À 5  ·   4   á'ï ÒüÿÑüÿ G   SH  4k  Ï    5  Rý{Á¨óAøÀ_Öà R°     ý{¿©ý    Rý{Á¨À_Öý{¿©ý à y V ý{Á¨À_Ö    óS¾©õ ùý{¾©ý   R   S( 4 R¿C 9d   S °¨BN¹ q`
 Th 5( R¨B¹©  ð!!
¨  ð a} `  4àRB  ¨  ðA©  ð Y H R¨B¹  4 R´C 9à*Ø  q ó ªh@ù¨ ´   SH 4s@ùïª¨  ð}Aù ?Ö ÒA R  Ò`?Öe ó ªh@ùÈ  ´   Sh  4`@ùO b < S ã*â ª Òèÿÿ°  dÿÿó *p  S 4T  58  R  R»  à*	  ó *e  Sè 4¨C@9H  5( à*ý{Â¨õ@ùóSÂ¨À_Öà R? à R= à*7 à*# ý{¿©ý Î  ÿÿý{Á¨À_Öý{¿©ý Æ ` 4èª °!9@ùHý_Èh µKý	È©ÿÿ5  ë` T!9Hý_Èh  µKý	È©ÿÿ5¿;Õÿÿµ  Rý{Á¨À_Ö  Rýÿÿ    ý{¿©ý 
 °Hy9  q) R)I99â  Í  Sh  5  R  N  S  5  RÔ ùÿÿ  Rý{Á¨À_Ö    óS¿©ý{¿©ý  °z9ó *h 5 q¨ T  4s 5 ° A9´    5 ° ¡9°  4  R
   °A9	 °)¡9
 
) ©*) ©
	 ù*	 ù( R:9  Rý{Á¨óSÁ¨À_Ö  RØ      ý{¾©ý ªIRèÿÿ°	 (@y
k T,=@¹*Á,ªRH@¹kA TH1@y-qá T 	Ë)Á,()@y	
a )
@yÒ,)ª ù_ë@ TI
@¹A)ë£  TH	@¹		A)ë  TJ¡ õÿÿ
 Òj  µ  R
  H%@¹h ø6  R    R    R    Rý{Â¨À_Öóøý{¿©ý  S4 À  4³  5 °!9ýÈ¿;Õý{Á¨óAøÀ_Öóøý{¿©ý  °y9 S) SH  4©  5à*Ú à*X   Rý{Á¨óAøÀ_Ö    óøý{¿©ý 	 °()Gùó ª ±a  T*   áª A9H   q`ý{Á¨óAøÀ_Öý{¿©ý ìÿÿ  ñàZý{Á¨À_Ö    óS¿©ý{½©ý  °@ùs XëA T¨  ðÿ ù	ýßÈàc  ?Öè@ù©  ð)áè ù(ýßÈ ?Öè@ù	|@Ó)Ê¨  ðÁé ù	ýßÈ ?Öè@ù	|@Óà )Ê¨  ð¡é ù	ýßÈ ?Öé#@¹ëC è@ù
	Êé@ùH	ÊÊ	½@?ë X ùé(ª °	 ùý{Ã¨óSÁ¨À_Ö Õ2¢ß-+  3¢ß-+    RÀ_Ö  RÀ_Ö  RÀ_Ö ° A:©  ð(!	ýßÈ Ö ° :À_Ö    ý{¿©ý òøÿÒ @ù	ª  ùõÿÿ @ù	²	  ùý{Á¨À_Ö     °@¹ qàÀ_Ö     ð áÀ_Ö     ð ÁÀ_Ö    ` >ÔÀ_Öý{¸©ý èC } ©àC }©}©}©}©}©1 ù¨  ð 	ýßÈ ?ÖèO@¹é£@y rHR ý{È¨À_Ö¼ÿÿ    ý{¿©ý ¨  ða	ýßÈ  Ò ?Ö  ´ @y©IR	k! T<@¹ªR
À(I@¹?ka TH1@y-q TH@¹9 q©  THù@¹h  4  R    Rý{Á¨À_Ö       ¡.©  ð(A	ýßÈ ÖóS¿©ý{¿©ý ô ª@ù) h@¹	k Th@¹ q! Ti"@¹H (K	 q	 Tè ?k   T  Rý{Á¨óSÁ¨À_Ö²   ù@ùµ   ù csmà  @    óS¾©õ[©ý{¿©ý è  Ða.é  Ð5.! ! ëB T¶  ðt@ø´  ´È~Aùïª ?Ö?Öë#ÿÿTý{Á¨õ[A©óSÂ¨À_Ö    óS¾©õ[©ý{¿©ý è  Ð¡.é  Ð5Á.! ! ëB T¶  ðt@ø´  ´È~Aùïª ?Ö?Öë#ÿÿTý{Á¨õ[A©óSÂ¨À_Ö     ð)E¹ qàÀ_Ö     @y-< Sí 5È 4ì|À=A 
 
 `N
`N+>Nª7)>NS¨%È*ê`  TIÀÚ  hÀÚ	é86Á<`N0:°n>Nÿÿ´1
`N(>N ´	ÀÚ
  H! Q	qS©%É(ê@þÿTÀÚ

J  (>N	ÀÚ)(}@Ó
H A ÑI  h  5  ÒF  ³
Nì|À=	 
 `NsnR
`N1
`NN>N/>Né7SI>NJ%È(>N
(
ê`  T
ÀÚ  ÈÀÚ
k  ´iÀÚ  èÀÚ	_	k+üÿT- T(}@
$  (! Q	qSJ%ÉHI?ëÈúÿTÂ  TÀÚ
K}@
  A pÁ<`Nsn±NQ:°n(>NHÿÿ´R
`NH>Nh  ´	ÀÚ  H>N	ÀÚ)(}@Ói
H+A Ñj@y_
k`À_ÖóS»©õ[©÷c©ùk©û# ùý{½©ý ÷ªèf@©ëªõ@ùø ªë ù
Ë¨@¹h ø6	y@5é2A9H ÑôJ@¹? qZ@¹ÉR	jÁ Tø©¨@¹kB T¨  ð³  ð¶R4È@¹_C(ë TÈ
@¹_C(ë" TÈ@¹è 4È@¹ q  Tã*@ù"C(áªàc *ôÿ`ø7  qm T@¹) 	kÁ ThÒAù ´`S   4sÒAù¨  Ð}Aùïª ?Ö! Ràª`?ÖÈ@¹" Ró@ù C(áªôÿÈ@¹âª@¹àªå"@ùä@ù!C(hÿßÈ ?Öôÿ³  Ðë@ù¨@¹ k TÅÿÿ  RB  è@ù¬@¹Ëk Tê*®R4é
*È@¹_C(ë# TÈ	@¹_C(ëÂ T@¹r` T Rª 4¯R4§R4­R+¨@¹B(ë T¨	@¹B(ë" Té@¹¨@¹	k¡  Té@¹¨
@¹	k  Tk 
kãýÿTé*ká Të@ùÈ@¹¨  4B(ëÄ@z! T   ã*@ùèJ ¹É
@¹áª  R"C)Ùóÿ¬@¹é* ë@ù	kê	*ãøÿT  Rý{Ã¨û#@ùùkC©÷cB©õ[A©óSÅ¨À_Öcsmà    ý{¿©ý Ú   Sh  5  R  ¥   Sh  5è  úÿÿ  Rý{Á¨À_Ö    ý{¿©ý  Sh  5¶  Ý    Rý{Á¨À_Ö    óS¿©ý{½©ý ¡C 9 ´é  @¹	k T@¹ q¡ T @¹	 	K	 q T@ùÈ ´	@¹é  4@ùÁ) @ù      @¹ 6	@ù4@ù4 ´@ù	@ùïª¨  Ð}Aù ?Öàª`?Öý{Ã¨óSÁ¨À_Ö Õcsmà   Ö    ý{¿©ý     ý{Á¨À_Öý{¿©ý      ý{Á¨À_ÖÀ  ´ ; ë@  Tÿ À_Ö    ý{¿©ý   `  ´ý{Á¨À_Öl     óS¾©õ[©ý{¿©ý  È@¹ 1a  T  Ò8  ¨  Ð¡	ýßÈ ?Ö¨  Ðáô *À@¹	ýßÈ ?Öõ ª¿ ±  T µ¨  ÐÀ@¹	ýßÈ  ?Ö`  5 Ò  Ò  Ò÷ ¨  Ðó ªÀ@¹	ýßÈ³ ´áª ?ÖÀ  4( hz ¹õª Ò  ¨  ÐÀ@¹	ýßÈ Ò ?Ö Òàªº ¨  Ð¡	ýßÈà* ?Öàªý{Á¨õ[A©óSÂ¨À_Ö    óøý{¿©ý    ©  Ð(Á	ýßÈ ?Ö   ¹ 1À T ;¨  Ð	ýßÈáª ?Ö   4( hz ¹  R      Rý{Á¨óAøÀ_Öóøý{¿©ý  `@¹ 1à  T¨  Ð!	ýßÈ ?Ö h ¹  Rý{Á¨óAøÀ_Ö    ý{¿©ý   =©  Ð(	ýßÈ RôR ?Öà  4
 HiO¹  R	 Ii¹      Rý{Á¨À_Ö    óS½©õ[©÷ ùý{¿©ý  ÓjO¹Ó 4 =¨  Ð¡Òs Q©þßÈ`R ?ÖÈjO¹	 QÉj¹3ÿÿ5  Rý{Á¨÷@ùõ[A©óSÃ¨À_Ö    óS¿©ý{¾©ý ó ª³ ù3 µª ÈR  ¹A   ý{Â¨óSÁ¨À_ÖàªU àª  è{@² ëÍ  T ÈR  ¹   ô *àªN à*íÿÿ    óS¿©ý{¿©ý ó ªó  µ ÈR  ¹"   L  àªv h@¹ô *H ø6 ¹" R Òà*ü ç ªgþÿ·h@¹¿;Õr  Th@¹àÀ(Ë9  ~@j@ù	 °,ýF
@ykø	Ò©!h@ù"åÀ9OËi@¹¿;Õ? r  T_ q! Tykø©!*õ@9ª 6áªàª    ykø©!*áÀ9 ø6a@©ï   g µàª  h@¹¿;Õ	SHÿÿ5J ÈR  ¹Àÿÿh@¹¿;ÕÈ  6âªáªàª
    _ qA  TïýAÓàý{Á¨óSÁ¨À_Ö    óS»©õ[©÷c©ùk©û# ùý{¾©ý ó ªôªùª ÷ *è~@	 °;ýF	@h{zø
	Òé ù+!
( ÒI ÒxåÀ9 q6h@¹h  5àªL  	}@h@ù*Ëi@ùháÀ9U	¨ ø7V  µ >Ô©Ö>  B R Òà*  ëa T`@ùâ*    h@¹  ¿;ÕSh 4ÿ	 S? q* ÒH ÒHï #   Ráªà*r  ±a  T  !  ¿ñl Th@¹¿;ÕSè  4h@¹¿;Õ!Sh  5@Ò  o"¹h{zø
	Òé@ù)!
*á@9
6ÿ	 S? q* ÒH ÒHïV  µ >Ôé
Ö(Ö		Ë ý{Â¨û#@ùùkC©÷cB©õ[A©óSÅ¨À_Öý{»©óS©õ[©÷c©ùk©ý óÿ Òªóÿÿs/Ëó ªöª¬ h@¹ø *h  5àªI  i"@©	Ò Rà*)Ë*ýI@	 °3ýF@hzuøWýA"!@ù% hzuøù ª"I@ù?	ëA T¨  Ðá@@ù	ýßÈ Òã  Rá#  ?Ö  4 Ráªà* `ø·è@¹ÿB(ë Té# ,A(ê#  Ò÷ ´  Ñ_ëB THÀ95 q T_
ë" THÀ9) qÁ  TJ    SÉÉè8JÁ)k ëJ ÁýÿTè# HË     ÿ@CóÿùkD©÷cC©õ[B©óSA©ý{Å¨À_ÖH 	ý* Sì ª_ q( Ë T	 *ýAÓëî Ò
 Òî  ´%@x­ ) qk¿ëaÿÿT`ùÓ  ëé  Ò
 Òé  ´À8J ) q _	ëaÿÿTÀ_Ö²þÿ    þÿ    n!     óS½©õ[©÷c©ý{¿©ý 	Ò Òe! ó ªs  µ Ò   @Òtë TuÂ WR ¶Â Ñàª RôRW# ¸ø
 R¿ø¨R\8¿x·"8·28·B8¨R8ÈÂ*I ê	*ù 9? qcÿÿT¨Â Ñë!ýÿT  Òl! àªý{Á¨÷cB©õ[A©óSÃ¨À_Ö    óS¾©õ[©ý{¿©ý ó ª ´@Òtëõª  T¨  Ð¡ÈþßÈàª ?Öµ"¿ëaÿÿTàªP! ý{Á¨õ[A©óSÂ¨À_Ö    óS½©õ[©÷c©ý{¾©ý õ *¿
@qc Tæ (R  ¹}  Rý{Â¨÷cB©õ[A©óSÃ¨À_Ö Rà Rl!  Ò¿ ù ° °éÂE¹¿	k+ TÈzsøH  ´  ÿÿÀz3øÀ  µRà R! à*æÿÿèÂE¹	éÂ¹s ³ ùíÿÿ	|@ °*ýF)@yjø	Ò !«  ÐiA(ýßÈ ÖóS½©õ[©÷c©ý{¿©ý ó *ôªóø7 °ÁE¹kb Th~@	 °6ýF@Èzuø	Òé"*@ù_ ± T  q T3 4 q   T
 qa T`  @   ¨  Ð!	ýßÈáª ?ÖÈzuø  Ré"4 ù   (R  ¹y   ¹  ý{Á¨÷cB©õ[A©óSÃ¨À_Ö    	|@ °*ýF)@yjø	Ò !«  Ðia(ýßÈ ÖóS½©õ[©÷c©ý{¾©ý à Rú   µ ¹ R¿ ¹ °q TÚsø6 µ!ÿÿÚ3øÀ ´
 °HÁE¹	IÁ¹ufSà*ÿÿ¨~@
ýF	+yjø( Rhá 9à R! à*ý{Â¨÷cB©õ[A©óSÃ¨À_Ö@Ò×ôª´ ùë  Tâ@9H  6  àª¨  ÐA	ýßÈ ?Öâ@9( 6àª¨  Ða	ýßÈ ?Öµ@¹"ìÿÿË		Ò
É¨~@ýF
@
	ÒHyløi!
( R(á 9Hyløi!

 - ùÏÿÿs ³ ¹·ÿÿóS½©õ[©÷ ùý{¿©ý ó *Sø7 ÁE¹kÂ Th~@	 5ýF@¨ztø	ÒÊ"Iá@9 6H@ù ±  T  q T3 4 q   T
 qa T`  @   ¨  °!	ýßÈ Ò ?Ö¨ztø
   RÉ"* ù  è (R  ¹Û   ¹  ý{Á¨÷@ùõ[A©óSÃ¨À_Ö    ý{¿©ý  1á  TÎ   ¹Ö (R  ¹   ø7 ÁE¹ k¢ T	|@ *ýF)@yjø	Ò+!iá@9i  6`@ù  ·   ¹¿ (R  ¹V   ý{Á¨À_ÖóS¼©õ[©÷c©ùk©ý{¿©ý ó  ðhâO¹h  5@R  
 qi R(±Òhâ¹ }@× ø  ð ÷ù  Òÿ ÷Gù¨ µh RÒhâ¹` ÒÌ  ÷ù  Òõ ÷Gùh  µ    è  ð 	 7 Ò Òt R	Ò9  RôR`Â º! ÷Gù©þFª@Ój(øèziøI!+@ùh	 	 ñH  Ty ¹µ Ö" sb Q´ýÿ5  Rý{Á¨ùkC©÷cB©õ[A©óSÄ¨À_Öè  ð 	|@Ó
Ò !
À_ÖóS¾©õ[©ý{¿©ý F# A" ¨  °¡ Òt Rö  ðÈöGù`jhø?# ÈöGùijhøªþßÈ Á @?Ös"  QÔþÿ5ÀöGù¯ ßöùý{Á¨õ[A©óSÂ¨À_Ö    ¨  °A	ýßÈ À  Ö    ¨  °a	ýßÈ À  Ö    óS¾©õ ùý{¾©ý ô ªóªõ*T µ8 ÈR  ¹Ï    Òý{Â¨õ@ùóSÂ¨À_Öóþÿ´h@y¨þÿ4@y¨  5* ÈR  ¹óÿÿ C !# £@ù  µ" Røÿÿ¿ ùâ*áªàªM$ ó ª³ ùs  µ @ù*#  @ùÎÿÿàªßÿÿ    óøý{¿©ý ó ªàªáªó  µ	 ÈR  ¹   ÀR	  RÂÿÿ` ù  µÿ   @¹    Rý{Á¨óAøÀ_ÖóS¿©ý{¿©ý ó ªó  µó ÈR  ¹      h@¹ ¿;Õ5
S 4àª" ô *àªÆ" àªÔ á
 ` ø6   `@ù`  ´7  ùàªì" à*ý{Á¨óSÁ¨À_Ö    óS¿©ý{¾©ý ó ª³ ù3 µÌ ÈR  ¹c    ý{Â¨óSÁ¨À_Öh@¹¿;Õ1Sàªh  4Ó" öÿÿqÿÿàªÃÿÿô *àªrÿÿà*ïÿÿ    óøý{¾©ý 	< SèÿR?k3< S` T?qÂ  Tè  ðEAù	yix 

  ãC é' y" Rÿ# yáK   Rý#   4è#@y 
    Rý{Â¨óAøÀ_Öè  ð ýùÀ_Ö    óS½©õ[©÷c©ý{¿©ý ô ªõªöª÷*øª\% @ ´ÜAù ´¨  °}Aùïª ?Öäªã*âªáªàª`?Öý{Á¨÷cB©õ[A©óSÃ¨À_Öè  ð	@ùë  ðhýGù* )Ê3-ÊSýÿµäªã*âªáªàªêøÿ     Ò R Ò Ò  ÒÏÿÿè  ð@ùí  ð¨ýGùj lÊR
K	,È(Ê¨ýù-ÊÀ_Ö    óS¾©õ ùý{¾©ý ó ª³ ùõªô*S µI ÈR  ¹àÿÿ  ý{Â¨õ@ùóSÂ¨À_Ö
 qÈþÿTàªñþÿâ*áªàªK  ô *àªðþÿà*ðÿÿ    óS¿©ý{¿©ý ó ªôª_ q  Th@¹¿;Õ	R	j Th@¹¿;Õr Th@¹ q­ T`@¹¿;Õ	|@ *ýF)@yjø	Ò+!iáÀ9)ø7håÀ9è 5 5" R Ò @ø·h@¹þÓ	À(Ë	Ë)ýÓ	k  ThýÓk Tôªj"@©	
Ë?ël Th@¹Â(ë THh ùi@¹  R(Kh ¹    Rý{Á¨óSÁ¨À_Ö    óS¾©õ ùý{¿©ý ó ªh@¹õªô*¿;Õ5
SÈ  5ã ÈR  ¹  8  jR Iý_)yIý¨ÿÿ5¿;Õâ*áªàª£ÿÿ Sh 5 q¡  Tàªüÿ R àªc! h@ù ¹h ùi@¹¿;Õ(	S 4jR Iý_)uIý¨ÿÿ5¿;Õ
  h@¹¿;Õ)R	
qá  Th@¹¿;Õ!Sh  5@Rh" ¹`@¹¿;Õâ*áª.  ±  @  T  Rý{Á¨õ@ùóSÂ¨À_Ö    !|@Oÿÿý{¿©ý   ñ$@úè  T ÈR  ¹2ÿÿÀR  b  µ  yøÿÿé ªJ  ËHiix(% xh  4! Ñÿÿµ µ  y HR  ¹ ÿÿ@R    Rý{Á¨À_Ö@  µ@ @ù @yè 4* @yìªé
*
 4ë
*é*k  T-@xë	*iÿÿ5i  4,@xþÿ5 @yê ªH 4) @yìªè	*) 4
 @yë	*è*
k  T-@xë*hÿÿ5  5,@xhþÿ5  $ x 
ë@  ù@À_Öý{¿©ý â  µS ÈR  ¹êþÿ  Ò  Aÿÿ´`  µH @ùèþÿ´Éÿÿý{Á¨À_Öý{¼©óS©õ[©÷c©ý ïÿÿÃÑö ªõªôªóªøªó  µ9 ÈR  ¹Ðþÿ  ?  T  ´5ÿÿ´áªà  ×òÿ¸¤
@úÿÓxèÿ 9èc 9é£ è õS ©àèWùÿ ùéÿ©ÿk ¹ÿÃøÿCøÿyÿ ¹ÿS9ÿOùÿSùö# ùóã©ÿ³¹Ç ó * ´V 6T  µs 5è@ùë¡ T³ø7Â3ëb T  W ´ ´s ø6¿ 9  è@ùë@ T¿j(8àSBùZ èã@9ÿSù¨  4ê@ùH©C¹	yI©¹à*ÿÃÌîÿ÷cC©õ[B©óSA©ý{Ä¨À_Öt  µ íÿÿè@ùë!ýÿT3 ¨ñ8æÿÿý{¼©óS©õ[©÷c©ý ¯îÿÿÃÑö ªõªôªóªøªó  µ× ÈR  ¹nþÿ  @  T  ´5ÿÿ´áªà ¹ ×òÿ¸¤
@úÿÓxèÿ 9èc 9é£ è õS ©àèWùÿ ùéÿ©ÿk ¹ÿÃøÿCøÿ9ÿyÿ ¹ÿS9ÿOùÿSùö# ùóã©ÿ³¹ô ó * ´V 6T  µs 5è@ùë¡ T³ø7Â3ëb T  W ´ ´s ø6¿ y  è@ùë@ T¿z(xàSBù÷ èã@9ÿSù¨  4ê@ùH©C¹	yI©¹à*ÿÃiîÿ÷cC©õ[B©óSA©ý{Ä¨À_Öt  µ íÿÿè@ùë!ýÿT3 ¨áxæÿÿ    óS¾©õ ùý{¿©ý  ðëô ªÂ  Tx R  ¹  R  Bù3øÓh  µñ  TBùëh  T  R  àª# õ ªu  µ R  Bù¾ ùù3 R  Ò¹ à*ý{Á¨õ@ùóSÂ¨À_Ö    óS¾©õ ùý{¿©ý  øëô ªÂ  TN R  ¹  R  Bù3ô~Óh  µñ  TBùëh  T  R  àªn# õ ªu  µ R  Bù ùù3 R  Ò à*ý{Á¨õ@ùóSÂ¨À_Ö    _ qÀ T_ qDLz  T_4 q  T( S	QêR?
jà    R    RÀ_Ö    _ q@ T_ qÀ TH0 Q qi T(< S ~ò	QêýRà?
jà  T ñà    R    RÀ_Ö    	0Bù  µ	`@Ò  ,BùýAÓ	 Ñh $ ù
 Réª8@¹ q Ø@z  T Q8 ¹B  5 >Ô*ÂIá
*(Á  å q  Th
	 + $@ù 9	$@ù) Ñ	$ ùéÿÿ	K	P ¹
$@ùH $ ùÀ_Ö    	0Bù  µ	` Ò  ,BùýBÓ(	 Ñh $ ù
 Réª8@¹ q Ø@zà T Q8 ¹B  5 >Ô*ÂIá
*(Á = Så q©  Th
	 * K= S	$@ùh ( y$@ù		 Ñ	$ ùçÿÿ	Ë	ýA	P ¹$@ù		 	$ ùÀ_Ö	0Bù  µ	`@Ò  ,BùýAÓ	
 Ñh 
$ ù Ré
ªO|@Ó8@¹ q Ø@úÀ T Q8 ¹O  µ >Ô+Ïiáª( 
Á L å q  T	 , $@ù 9	$@ù) Ñ	$ ùèÿÿ©	K	P ¹
$@ùH $ ùÀ_Ö    	0Bù  µ	` Ò  ,BùýBÓ(O|@Ó
	 Ñh 
$ ù Ré
ª8@¹ q Ø@ú  T Q8 ¹O  µ >Ô+Ïiáª(= S
Á L= Så q©  T	 * L= S	$@ù ( y$@ù		 Ñ	$ ùæÿÿ¨	Ë	ýA	P ¹$@ù		 	$ ùÀ_ÖóS½©õ[©÷ ùý{¿©ý ô* qö ª7 õª Rm Tâªá*àªs ¨@¹ 1  Ts këþÿTý{Á¨÷@ùõ[A©óSÃ¨À_Ö    óS½©õ[©÷ ùý{¿©ý ô* qö ª7 õª Rm Tâªá> Sàªw ¨@¹ 1  Ts këþÿTý{Á¨÷@ùõ[A©óSÃ¨À_Ö    óøý{¿©ý ó ªb 9  ´($@©h¦ ©  è  ð}A¹È  5è  Ðá	)@©iª ©  m! a" ` ùH@ùh ù	D@ùi
 ù@# `@ùaB Q# i@ù(©C¹¨ 72* R(©¹jb 9àªý{Á¨óAøÀ_Ö    ( @ù	}@ù À9*@ùLÀ9 4é*è	*?k  TÀ8é*hÿÿ5 è 4hÀ9 4íR S	Q?
j`  ThÀ8hÿÿ5i Ñ*À9_Á q  T*ýß8_Á qÀÿÿT( Ñ_k,hÀ8 8Èÿÿ5À_Ö- @ù À9®@ù SÉÉh8?qÀ  T«@ùÀ8 SiÙhx©ÿ7 SÉÉh8?áqA  TÀ9 ?áq¨}@ùm 	@ù*À9j 9¨À8é*¬ñ8ì*ÿÿ5À_Ö    óS¾©õ[©ý{¾©ý ô ª
@ùöª  µ ó ª
 ùu@¹ ¹BR@ùáC ÿ ù  Ñì! À ¹
@ù`  µ 
 ù @¹ q  T@ùé@ù?ë  T ù  R    Rh@¹h  5U  4u ¹ý{Â¨õ[A©óSÂ¨À_Ö    óS¾©õ[©ý{¾©ý ô ª
@ùöª  µr ó ª
 ùu@¹ ¹BR@ùáC ÿ ù 	 ÑÌ! À ¹
@ù`  µd 
 ù @¹ q  T@ùé@ù?ë  T ù  R    Rh@¹h  5U  4u ¹ý{Â¨õ[A©óSÂ¨À_Ö    óS¿©ý{¿©ý ó ªh6Bùh  ´h@ùè  µF ÈR  ¹Ýûÿ  }  hrD¹	 ir¹?	 qà T¨  °ÁR ¹. ¹b  	 j*@¹i ùªø7lÁ9	 S?iqè  T}@	 Ñ+}Ó hij¸   R	
h.@¹)*}ÓKit¸k. ¹! q ûÿT qhûÿTi (I«8(	 Ö Ràª  SÈùÿ4aÁ9b¢ `¢F :   ~)h~)9R94  àªÕ  /  © q   TaÒ àª[ÿÿ)  j@ùè
Ë	@*
K! k ùl_¸l6 ¹Ì ø6h2@¹êKj6 ¹	2i2 ¹( R  : ¹  © q`  Taâ èÿÿj@ùè
Ë	@*
K! k ùh_¸	  qh: ¹)±i: ¹ìÿÿàª   àªà  Sòÿ4h@ù	À9i9h@ùióÿ5	 i ùh.@¹ qGz¡ðÿThrD¹	 ir¹?	 q¡ñÿT`*@¹ý{Á¨óSÁ¨À_Ö©³¹¼ÒÔåè    óS¿©ý{¿©ý ó ªh6Bùh  ´h@ùè  µ¶ ÈR  ¹Mûÿ  z  hrD¹	 ir¹?	 q T¨  °ÁR ¹. ¹_  		 j*@¹i ùJø7k@yüRh	= S?iqÈ  Th Ñ
}Ó Lii¸   Rh.@¹
)*}ÓLit¸l. ¹! q ûÿT qhûÿT	 (I¬8(	 Ö* Rb¢ jR9á*`¢Ù :   ~)h~)9R94  àªd  /  © q   TaÒ àªúþÿ)  j@ùè
Ë	@*
K! k ùl_¸l6 ¹Ì ø6h2@¹êKj6 ¹	2i2 ¹( R  : ¹  © q`  Taâ èÿÿj@ùè
Ë	@*
K! k ùh_¸	  qh: ¹)±i: ¹ìÿÿàªæ    àª%  Sèòÿ4h@ù	@yi yh@ùÉóÿ5		 i ùh.@¹ qGzñÿThrD¹	 ir¹?	 qòÿT`*@¹ý{Á¨óSÁ¨À_Ö¬³¹¼ÒÔåèÁ9 q  T q  T­ q` Tµ qÀ  TÁ q T0@¹	2  0@¹	2	  0@¹	 2  0@¹	2  0@¹	2	0 ¹  RÀ_Ö@y q  T q  T­ q` Tµ qÀ  TÁ q T0@¹	2  0@¹	2	  0@¹	 2  0@¹	2  0@¹	2	0 ¹  RÀ_Öóøý{¿©ý ó ªaÁ9R9? 1ë  Th@ù	@ù*@ùKÙaxh   Rè 4b¢ `¢ h@ù	À8i9h ùé  5â ÈR  ¹yúÿ  R    Rý{Á¨óAøÀ_Öý{¿©ý 	Á9?q T @ù7é R	, ¹×    S`  ?9qa T @ùh7	R	, ¹Æ ÈR  ¹]úÿ  RT  <@¹(ÿÿ5?©qì T T?%qÀ T?1q@ T?Qq  T?¡qÁ T	@ù(À9¡q¡  T(  ù) R=  I R;  ¨R< ¹9  	R6  	@ù*À9_Í qÁ  T(À9É qa  TJR  _Ù q! T(À9Ñ qÁ  TjR(	 
< ¹ ù$  HaQ	 S? q Ti X(%È¨ 6)R  ¨ Rßÿÿ?±q  T?Ñq  T?Ýq   T?éq! TÈ RÕÿÿRÓÿÿé R
  	@ù(À9±q¡  T(  ù R  i R	< ¹  Rý{Á¨À_Ö Õ    ý{¿©ý 	@y?q T @ù¨7é R	, ¹9   Sa  ?9qa T @ù7	R	, ¹V ÈR  ¹íùÿ  RU  <@¹(ÿÿ5?©q T  T?%qÀ T?1q@ T?Qq  T?¡qá T	@ù(@y¡q¡  T(	  ù) R>  I R<  ¨R< ¹:  	R7  	@ù*@y_Í qÁ  T(@yÉ qa  TJR  _Ù q! T(@yÑ qÁ  TjR( 
< ¹ ù%  õRH	= S? q TH X%É¨ 6)R  ¨ RÞÿÿ?±q  T?Ñq  T?Ýq   T?éq! TÈ RÔÿÿRÒÿÿé R
  	@ù(@y±q¡  T(	  ù R  i R	< ¹  Rý{Á¨À_Ö    óS¾©õ ùý{¾©ý ó ªhÁ9
Q_Ý q T	 (Yª¸	 (	 Ö Ràªø $  àª !  àªª   àªß   h2@¹	2i2 ¹AR RàªO   i2@¹(Sh  4(2h2 ¹Röÿÿ" RRôÿÿ Rýÿÿ	RhRi")øÿÿàª^  SÈ 4hA9H 5l2@¹èC  y Ò	 9S¨ 4Sh  4¨R  l  6hR  S  4RèC 9+ ÒmÁ9êR¨ S	aQ?
j¡  TSh  4. R   R¨ S	QêR*

N  5ª 5éC Rhi)8¿aq  T¿qRA  TRéG hi)8k	 i6@¹õ*hR@¹r)K4KÁ  Tc¢ â*R`¢8üÿdB c¢ â*áC `¢T i2@¹(
S 4(	SÈ  5c¢ â*R`¢(üÿ Ràªç h*@¹(ø7h2@¹		SÉ  4c¢ â*R`¢üÿ  R    Rý{Â¨õ@ùóSÂ¨À_Öýÿÿÿy   óÿÿÿy   ýÿÿÿýÿÿÿýÿÿÿy   y   y   y   y   y   y   y   y   y   y   úÿÿÿy   y   y   y      y   ÷ÿÿÿy   y   y   y   y   y   ýÿÿÿy   óÿÿÿ    ýÿÿÿýÿÿÿýÿÿÿy       y   y   y   y            y   y   úÿÿÿy      y   y          ý{½©óS©õ[©ý òèÿó ªh@y
Q_Ý qh T	 (Yª¸	 (	 Ö Ràª[ $  àªè  !  àª   àª   h2@¹	2i2 ¹AR Ràª   i2@¹(Sh  4(2h2 ¹Röÿÿ" RRôÿÿ Rýÿÿ	RhRi")øÿÿàª  S¨ 4hA9( 5k2@¹è  ¹
 Ò	 yhS¨ 4hSh  4¨R  k  6hR  hS  4Rè y* Òl@yéûRaQ	j¡  ThSh  4- R  
 RQéûR		
M  5© 5é R(y*xaq  TqRA  TRé (y*xJ	 i6@¹ö
*hR@¹r)K5KÁ  Tc¢ â*R`¢ûÿt¢àªdB c¢ â*á ´ i2@¹(
S 4(	SÈ  5c¢ â*Ràªrûÿ RàªG h*@¹(ø7h2@¹		SÉ  4c¢ â*Ràªeûÿ  R    Rièÿõ[B©óSA©ý{Ã¨À_Öýÿÿÿx   óÿÿÿx   ýÿÿÿýÿÿÿýÿÿÿx   x   x   x   x   x   x   x   x   x   x   úÿÿÿx   x   x   x      x   ÷ÿÿÿx   x   x   x   x   x   ýÿÿÿx   óÿÿÿ    ýÿÿÿýÿÿÿýÿÿÿx       x   x   x   x            x   x   úÿÿÿx      x   x      óS¾©õ ùý{¿©ý ó ªj@ùè
Ë		@*
K! k ùu_øõ ´´@ù´ ´b>@¹aÁ9`@ùúÿt& ù©@y S¨ 4( RhR9)}S
  ª  Hh& ùI(À8èÿÿ5H)ËR9iR ¹  Rý{Á¨õ@ùóSÂ¨À_ÖóS¾©õ ùý{¿©ý ó ªj@ùè
Ë		@*
K! k ùu_øõ ´´@ù´ ´b>@¹a@y`@ùþùÿt& ù©@y S¨ 4( RhR9)}S
  ª  Hh& ùI(À8èÿÿ5H)ËR9iR ¹  Rý{Á¨õ@ùóSÂ¨À_ÖóS¿©ý{¾©ý ÿC Ñó ªh2@¹4 Rj:@¹	2i2 ¹Jø6hA9êR	Q?
jÉ R¨R*j: ¹
  * 5hÁ9q  T
 Rqa  Tt: ¹* RHu}@`b`ùÿ S( 5h2Bùh  µ@Ò  h.BùýAÓ	uQi: ¹ib(Bù ñ(h& ùj@ùè
Ë		@*
K! k ùp_üa2Bùð ýa  µ@Ò  h.BùýAÓ¡  µ@Òabcb	  h.Bùéª#H"ýAÓg"@©à ô ¹eÁ9f:@¹è ùå  h2@¹	SÉ  4h:@¹  5a@ù`&@ùåúÿhA9êR	Q?
já  Th2@¹	S  5a@ù`&@ù´úÿj&@ùKÀ9µ qá  Th2@¹J j& ù	2i2 ¹KÀ9h%Q	 S? q  Té X(%Èh  79qá  Th2@¹kRk9	yi2 ¹KÀ9é
ªk  4(À8èÿÿ5(
ËhR ¹  RÿC ý{Â¨óSÁ¨À_Ö Õ   !   óS¿©ý{¾©ý ÿC Ñó ªh2@¹4 Rj:@¹	2i2 ¹Jø6h@yêûR	Q?
jÉ R¨R*j: ¹
  * 5h@yq  T
 Rqa  Tt: ¹* RHu}@`bØøÿ S( 5h2Bùh  µ@Ò  h.BùýAÓ	uQi: ¹ib(Bù ñ(h& ùj@ùè
Ë		@*
K! k ùp_üa2Bùð ýa  µ@Ò  h.BùýAÓ¡  µ@Òabcb	  h.Bùéª#H"ýAÓg"@©à ô ¹e
Á9f:@¹è ù]  h2@¹	SÉ  4h:@¹  5a@ù`&@ù]úÿh@yêûR	Q?
já  Th2@¹	S  5a@ù`&@ù,úÿj&@ùKÀ9µ qá  Th2@¹J j& ù	2i2 ¹KÀ9h%Q	 S? q  Té X(%Èh  79qá  Th2@¹kRk y	yi2 ¹KÀ9é
ªk  4(À8èÿÿ5(
ËhR ¹  RÿC ý{Â¨óSÁ¨À_Ö Õ   !   óøý{¿©ý ó ªb>@¹aÁ9`@ù½øÿj@ù S¨ 4è
Ë	@*
K! k ùc_xa2Bù  µ@Òab  h.BùýAÓd@ù`B¦   4( Rh9  ib(Bù ñ,è
Ë	@*
K! k ùhß8 9( RhR ¹ib(Bù  R ñ(h& ùý{Á¨óAøÀ_Ö    óS¾©õ ùý{¾©ý ó ª5 RuR9j@ùè
Ë	@*
K! k ùb>@¹a@y`@ùt_xøÿib SÈ 5(BùôC 9áC c@ùÿG 9 ñ h @ù	¹ à ø6u9  (Bù ñ( yib(Bù  RuR ¹ ñ(h& ùý{Â¨õ@ùóSÂ¨À_Ö    óS½©õ[©÷c©ý{¿©ý ó ªj>@¹÷*X S_- q( TI (Iª8(	 ÖtÂ @¹6 Ò	Sh@ùÉ  4	! i ù)ß85}@7  	! i ù5_83  tÂ j@ù@¹V Ò	Sè
Ë	 4	@*
K! k ùhßx}@%  	@*
K! k ùu_x  tÂ j@ù@¹Ò	Sè
Ë		@*
K! k ùu_ø  tÂ j@ù@¹	Sè
Ëé  4	@*
K! k ùu¸  	@*
K! k ùu_¸ Ò@¹(S¨  4 ø¶)2 ¹õËj:@¹ ø6( Rh: ¹  (yA}@ ¹`b¨÷ÿ  µ@¹	y ¹R9ß" ñã*â*àª  Táªrøÿ  á*øÿ@¹	Sé 4hR@¹¨  4h&@ù	À9?Á q  Th&@ù
R	 Ñi& ù* 9hR@¹	 iR ¹  R   ÈR  ¹õÿ  Rý{Á¨÷cB©õ[A©óSÃ¨À_Ö±±¥¥¥¥ö¥±¥óS¼©õ[©÷c©ù ùý{¿©ý ó ªj>@¹÷*X S_- q( Ti (Iª8(	 ÖtÂ @¹6 Ò	Sh@ùÉ  4	! i ù)ß85}@7  	! i ù5_83  tÂ j@ù@¹V Ò	Sè
Ë	 4	@*
K! k ùhßx}@%  	@*
K! k ùu_x  tÂ j@ù@¹Ò	Sè
Ë		@*
K! k ùu_ø  tÂ j@ù@¹	Sè
Ëé  4	@*
K! k ùu¸  	@*
K! k ùu_¸ Ò@¹(S¨  4 ø¶)2 ¹õËj:@¹9 Rj ø6y: ¹  (yA}@ ¹`bA÷ÿ  µ@¹	y ¹yR9ß" ñã*â*àª  Táªøÿ  á*°÷ÿ@¹	Sé 4hR@¹¨  4h&@ù	@y?Á q  Th&@ù
R		 Ñi& ù* yhR@¹	 iR ¹  R  t ÈR  ¹õÿ  Rý{Á¨ù@ù÷cB©õ[A©óSÄ¨À_Ö°°¤¤¤¤õ¤°¤óS¿©ý{¿©ý ó ªj@ùè
Ë		@*
K! k ùt_ø à 4j>@¹_- q Ti (Iª8(	 Öj*¹ ù	  h*@¹ ¹  hRÀy y  h¢À9 9( Rh9  R  C ÈR  ¹Úôÿ  Rý{Á¨óSÁ¨À_ÖìòïìééééøéìéóS¾©õ ùý{¿©ý ô ª@ùè
Ë		@*
K!  ù
G)	 °s_øÁ9@ù 15& ùùöÿ S 4³  µ  ð(Á& ù3Á( R¡~@R9àªPäÿ	  ³  µ  ð(& ù3¡~@àªªäÿè *R ¹  Rý{Á¨õ@ùóSÂ¨À_ÖóS¾©õ ùý{¿©ý ô ª@ùè
Ë		@*
K!  ù
G)	 °s_ø@y@ù 15& ùÛöÿ S¨ 4³  µ  ð(Á& ù3Á( R¡~@R9àª äÿì *  ³  µ  ð(& ù3 R¿ qÍ ThÀ9 4 S@ù 	@ù*@ùKÙkxrh kþÿTR ¹  Rý{Á¨õ@ùóSÂ¨À_Ö    
 @ùI¡@©	ë THa@9¨  4H @¹	 I  ¹   H  ¹ @ù a@9  H @¹	 I  ¹
 @ùH	@ù	 I	 ù
 @ùH@ù 9 @ù  Rh@ù	 i ùÀ_Ö    
 @ùI¡@©	ë THa@9¨  4H @¹	 I  ¹   H  ¹ @ù a@9  H @¹	 I  ¹
 @ùH	@ù	 I	 ù
 @ùH@ù y @ù  Rh@ù		 i ùÀ_Ö    ý{½©óS©õ ùý VäÿÿC Ñó ªhRA9¨ 4hR@¹ qM Tu&@ù R£&@xÂ Òÿ ¹d@ùá# à F   5â@¹b 4dB c¢ á# `¢D  hR@¹ kÁýÿT
   h* ¹  bR@¹dB a&@ùc¢ `¢6    RÿC 5äÿõ@ùóSA©ý{Ã¨À_ÖóS¾©õ[©ý{¾©ý ó ªhRA9¨ 5hR@¹ qM Tu&@ù Rc@ùÿ# yáªàC h @ù	¹¶ ö *ß qm Tá#@yb¢ `¢ÿÿhR@¹ µÂ6kÁýÿT
   h* ¹  bR@¹dB a&@ùc¢ `¢8    Rý{Â¨õ[A©óSÂ¨À_ÖóS½©õ[©÷ ùý{¿©ý ö ªô*óª 4É@ù*¡@©
ëÁ  T(a@9 4h@¹	  HË @ù~@ë1âª2âÿÊ@ùH@ù	I ùÊ@ùH	@ù	I	 ùÊ@ùHa@9ýÿ5¿ë  T h ¹  h@¹©i ¹ý{Á¨÷@ùõ[A©óSÃ¨À_Ö    óS½©õ[©÷ ùý{¿©ý ö ªô*óª 4É@ù*¡@©
ëÁ  T(a@9 4h@¹	  HË @ù~@ë1¢úÓ âÿÊ@ùH@ù	I ùÊ@ùH	@ù	I	 ùÊ@ùHa@9ýÿ5¿ë  T h ¹  h@¹©i ¹ý{Á¨÷@ùõ[A©óSÃ¨À_Ö    óS¼©õ[©÷c©ùk©ý{¿©ý ø ªóªôªõª÷ªùªúª7 ´µ  µ³  µÔ µ  R9  s ´T ´ëi T¯
 åª @¹äªàªãª¢ áªaôÿ 1Á T¤
  @¹ q¡ T 
   ¹"  
 åª @¹äªàªãªâªáªOôÿhñ8 1A T¿ ±! T
  @¹ qá T
   ¹  ø6 9 1 T
 HR  
 ÈR  ¹óÿ  ý{Á¨ùkC©÷cB©õ[A©óSÄ¨À_Ö    óS¼©õ[©÷c©ùk©ý{¿©ý ø ªóªôªõª÷ªùªúª7 ´µ  µ³  µÔ µ  R9  s ´T ´ëi T]
 åª @¹äªàªãª¢ áªqôÿ 1Á TR
  @¹ q¡ TN
   ¹"  K
 åª @¹äªàªãªâªáª_ôÿh 1áxA T¿ ±! T<
  @¹ qá T8
   ¹  ø6 y 1 T1
 HR  .
 ÈR  ¹Åòÿ  ý{Á¨ùkC©÷cB©õ[A©óSÄ¨À_Ö    óS¿©ý{¾©ý óªôª´ ù  @¹[ðÿh@ù @¹	|@*ýFè  °)@	Òyjø)!*á@9  6:  ó *  
 (R  ¹ @¹ðÿà*ý{Â¨óSÁ¨À_Ö    ý{½©ý à ¹ 1á  Tñ   ¹ù (R  ¹   ø7è  °ÁE¹ k T	|@è  °*ýF)@yjø	Ò)!*á@9J 6èS à)àC è ùãc â ás ½ÿÿ  Ó   ¹Û (R  ¹ròÿ  ý{Ã¨À_ÖóS¾©õ ùý{¿©ý ô *óðÿ ±õ  °a  T R  ªâ@ù qa  TH!C9¨  7
 qA THB9 6  Rãðÿó ª@ Ràðÿ ëàýÿTà*Üðÿ  Ð	ýßÈ ?Ö ýÿ5  Ð¡	ýßÈ ?Öó *à*ðÿ~@©ýF
@(ykø	ÒI!?á 9³  4à*       Rý{Á¨õ@ùóSÂ¨À_Ö    ý{¿©ý   Ð	ýßÈ ?Öè  °  ù  ÐÁ 	ýßÈ ?Öè  °  ù  Rý{Á¨À_Ö    è  ° ! À_Ö    è  ° A À_Ö    óS¾©õ[©ý{¿©ý õ ªóªôª`R õ  µt ÈR  ¹òÿÓR"  ¿ ùS  ´ ùôþÿ´àª)  ô ª4 ´éª(Àyh  4)	 ýÿÿ(Ë	ýA6 A Òàªïÿ  ùÀ  µY R  ¹R  âªáª²òÿ` 5S  ´v ù R`R à*ý{Á¨õ[A©óSÂ¨À_Ö Ò R Ò Ò  ÒÃêÿóS¾©õ ùý{¿©ý ô ªI ó ª3 ´ ´Àyéªh  4(-Àxèÿÿ5(Ëi@ùýAé ´(Àyê	ªh  4H-Àxèÿÿ5H	Ë¿ë" T`@ùxuxõ q¡  Tâªáªæ `  4i@øîÿÿh@ù	 	     Òý{Á¨õ@ùóSÂ¨À_Ö     R Ò# Rÿÿý{¿©ý à  µ ÈR  ¹¢ñÿ     @¹¿;Õý{Á¨À_Ö    ý{¼©óS©õ[©÷c©ý Ëáÿø ô ªõªöªô  µõ ÈR  ¹ñÿÀRl  áªàª$áÿ ëc  T yôÿÿÈ@ù @ùÀ µ@yJ 4ë÷RH	= S?e qh  TH  y.@x*ÿÿ5  RU   R Ò âª Rç ÷ *÷  5Ð HR  ¹Í   @¹G  è~@¿ë T yÆ HR  ¹]ñÿ@R=  ùÓ	A ?ë   ´ ñ T<  ëL  Tèß|²ýDÓ áÿÿs/Ëó s ´R  Þ ó ªÓ  ´¨»Rh ¹sB    Òó  µ¥ R  ¹¢  @¹  È@ùå*äª âª @ù R¬ à  4âªáªàªóñÿô *   HR  ¹TRó  ´h_¸©»R	ka  T`B Ñâ à* [áÿ÷cC©õ[B©óSA©ý{Ä¨À_Ö     Ò  óS¿©ý{½©ý ô ªóªáªàC _ôÿâc áªàªoÿÿè£@9¨  4ê@ùH©C¹	yI©¹ý{Ã¨óSÁ¨À_Ö    ÿC ÑÿÿèÿßÿC ¼     í ªb  µ  R  ª%@x+$@xHQe qI hQLi e qhK  5l  4B ÑBþÿµÀ_Öý{¿©ý è  }A¹h 5à  µD ÈR  ¹Ûðÿ  °  Aÿÿ´ßÿÿ   Ò  ý{Á¨À_Ö    óS½©õ[©÷ ùý{½©ý õ ªöªóªõ  µ- ÈR  ¹Äðÿ  °=  Vÿÿ´s  µ  R9  áªàC 
ôÿë@ùh@ùÈ  µâªáªàª¼ÿÿ(    ðÁ &@x qB T@Óè
 	ylx  6h@ùil8   S  ác A ë@ù< SÀ&@x qB T@Óè
 	ylx  6h@ù	il8  	 S  ác 1 ë@ù	< S	K  5t  4s Ñûÿµè£@9¨  4ê@ùH©C¹	yI©¹ý{Ã¨÷@ùõ[A©óSÃ¨À_ÖóS»©õ[©÷c©ùk©û# ùý{½©ý ù ªõªøªûªóªø  ´Û  ´¹ µ×
 ÖR  ¹nðÿ  Òý{Ã¨û#@ùùkC©÷cB©õ[A©óSÅ¨À_Ö³  ´ 	Øë T¿ ±   Tâª Ràª¹àÿ3ýÿ´ 	Øë¨üÿTh@¹¿;Õ	R	j`  Ti"@¹  	 Rêªé ¹ê¯©úªôª
 ´ÖRh@¹¿;ÕRj  Tw@¹÷ 4÷
ø7Â7ëB  T÷*_C7ë	 Ta@ùâ~@Ó ´
 ´à
ªa  ´¸Þÿ  âª Ràÿ
   ¹+ðÿh@¹B7Ëj@ùZC7Ë	KHA7i ¹h ùè~@Ó  B)ë£ Tê{@²
ë
 °WÉ  4I  5 >Ôè
É	Ý	÷	K_C7ëC Th@ùàª ¹h ùfþÿá@ùâ*¿   4@ø7Â Ë|@ZÃ Ëé@¹ê@ù
  àªO  1 Tº ´ê@ù ÑZ Ñ( Ò@ 9i"@¹é ¹

ê ùôõÿµàªÿÿ¿ ±   Tâª RàªJàÿQ
 HR  ¹zÿÿjR Iý_)2Iý¨ÿÿ5  jR Iý_)2Iý¨ÿÿ5¿;Õè@ùË 	Ølÿÿ    äªãªâª       óS½©õ[©÷ ùý{¾©ý ö ªôª÷ªõªóª³ ù ´u ´ µ ±  Tâª Ràÿ#
 ÈR  ¹ºïÿ  Òý{Â¨÷@ùõ[A©óSÃ¨À_ÖàªÌîÿäªãªâªáªàª,ÿÿô ªàªÉîÿàªïÿÿ<     óS½©õ[©÷ ùý{¿©ý ô *öª× ó ªs ´j@ùK_ëé
ªÀ  T(A¸k T?ëÿÿT Òè ´@ùµ ´¿ ñÁ  T ù  Ra  (A Ñ÷ÿÿ¿ ña  T  [  w@ùv ù@¹" q	 TIÁ +A  ? ù)A ?ë¡ÿÿT@¹I
 v@¹	kÈ T@ TÉ	 	k T	 	kÀ TI	 	k  T		 	kô*! T(R4R%  ÈRÔR"  hRtR  HRTR  RR  É 	k T 	kÀ TI 	k  T	 	kô*¡ T¨R´R	  ÈRÔR  ¨R´R  HRTRh ¹  °}Aùïª ?Öá* R ?Öv ¹   ù  °}Aùïª ?Öà* ?Öw ù¦ÿÿ  Rý{Á¨÷@ùõ[A©óSÃ¨À_Ö  À  À  À  À  À  À  À´ Àµ À    è   1@¹À_Ö    è   1 ¹À_Ö    È  ð	@ùë  h@ù* )Ê*-Ê_ ñàÀ_Öè    ùÀ_Ö    óS¿©ý{¿©ý È  ð	@ùë  h@ù* ô ª)Ê3-Ês  µ  R    °}Aùïª ?Öàª`?Öý{Á¨óSÁ¨À_Ö    È  ð
@ùRI i	K,É
Êë  h ùÀ_ÖóS¼©õ[©÷c©ù ùý{¿©ý øªùª ù( Ò( ùô ªöªóªv  ´Ó ùÖ"  RÀ8 q¡  Tÿ q÷UR  @ù	 	 ù  ´òß8h 9s òß8 à*ï   4@ù	 	 ù  ´À9h 9s  5 4üÿ5¿ q`  T¿& qüÿT  ´ò8   Ñ RÀ9( 4 q`  T% q¡  T ôªÀ9ùÿÿè 4v  ´Ó ùÖ" (@ùR	 ) ùÀ9+ R
 R  À8J qq ÿÿT q TJ 7Õ  4À9 qa  T   ¿ qõ RJ}S* 4J Qs  ´w 9s @ù	 	 ù*ÿÿ5À9  4  5 qIz  TK 4  ´` 9À9s    4@ù 	 	 ù  ´À9h 9s @ù	 	 ù Éÿÿs  ´ 9s @ù	 	 ù°ÿÿV  ´ß ù(@ù	 ) ùý{Á¨ù@ù÷cB©õ[A©óSÄ¨À_Öóøý{¿©ý  ü ëb T B  µ >Ô	Â? ë¢ T)|è ª	ë) T 
 ! ÒÐ ó ª  Òù àª    Òý{Á¨óAøÀ_ÖóS¾©õ[©ý{½©ý õ *u 4¨ Q qé  T ÈR  ¹$îÿÓRS  e ô   R  ÒV é  ( ùé  3@ùs  ´hÀ9H  5ä ÿÿ©ãc  Ò Òàª,ÿÿöA©" Òàª¼ÿÿô ª µk R  ¹  ÒÃ R0  ä ãc áªàªÿÿ¿ q! Tè@ùë  t	 ù  Ò Qê  H	 ¹  áC ÿ ùàªÙ ó *ó  4à@ù© àªÿ ù¦   ê@ù	 ÒH@ùë
ª  ´h@ø) Èÿÿµë  i	 ¹ÿ ùè  
	 ù  Ò ÿ ùàª  Rà*ý{Ã¨õ[A©óSÂ¨À_ÖóS¾©õ[©ý{¿©ý è  !`@ù  µh@ùH ´N  @ 4t@ùÔ ´@ùÈ ´ R Ò âª R  Rì |@v ´A ÒàªE õ ª ´@ùå*äª  R  RÞ @ 4 Ràª®    Òb @øüÿµ`@ù  àª    ÒZ   Òý{Á¨õ[A©óSÂ¨À_ÖóS¿©ý{¿©ý Ô  ð¦@ùh  ´  R  Î  ó ªs  µ   àª/  `  µ   È  ð ± ù¦ ù R  Ò< àª: à*ý{Á¨óSÁ¨À_Ö    óS¿©ý{¿©ý Ô  ðª@ùh  ´  R  < ó ªs  µ   àªZ  `  µ   È  ð ­ ùª ù R  Ò àª à*ý{Á¨óSÁ¨À_ÖóS½©õ[©÷ ùý{¿©ý ô ªÀ9êª	 Ò 4õ q)h  4HÀ8èÿÿ5HÀ8Hÿÿ5Ò  × ó ªÓ ´öªÀ9 4êªi  4HÀ8èÿÿ5HË ?õ qÀ T! ÒàªÇ õ ªu ´âªáª ` 5Õ ù  ÒÖ" é ôèÿÿh@ùôª¨  ´àªâ @ø¨ÿÿµàªÞ   ÒÜ  Ò  ÒÙ àªý{Á¨÷@ùõ[A©óSÃ¨À_Ö Ò R Ò Ò  ÒóåÿóS½©õ[©÷ ùý{¿©ý ô ª@yìª Ò¨ 4õ qkéªh  4(-Àxèÿÿ5(Ë	ýA* 
@y¨þÿ5Ò`  ó ª3 ´öª@yè 4= 
= Séªh  4(-Àxèÿÿ5(Ë	ýA7 _õ qÀ TA Òàªu õ ªu ´âªáª íÿ` 5Õ ù  ÒÖ"  åÿÿh@ùôª¨  ´àª @ø¨ÿÿµàª   Ò  Ò  Ò àªý{Á¨÷@ùõ[A©óSÃ¨À_Ö Ò R Ò Ò  Ò¡åÿóS¿©ý{¿©ý È  ð±@ù @ùë` TS ´h@ùôª¨  ´àªm @ø¨ÿÿµàªi ý{Á¨óSÁ¨À_Ö    óS¿©ý{¿©ý È  ð­@ù @ùë` TS ´h@ùôª¨  ´àªW @ø¨ÿÿµàªS ý{Á¨óSÁ¨À_Ö    Âþÿ    óS¿©ý{¿©ý È  ð!àªÌÿÿ`" àÿÿÈ  ð±@ùS ´h@ùôª¨  ´àª< @ø¨ÿÿµàª8 È  ð­@ùS ´h@ùôª¨  ´àª0 @ø¨ÿÿµàª, ý{Á¨óSÁ¨À_ÖÔþÿ    óS¿©ý{¿©ý ¥ È  ð	@ùÊ  ðH¡? ñ Ri@9? qh  T) 4t 4? qa  T qôà	* @  4s s òÿÿ? q  Th@8é*ÿÿ5àªý{Á¨óSÁ¨À_Ö    óS½©õ[©÷ ùý{¿©ý õ ª( Ë	 *ýCÓ¿ëö Òv ´  ´@ø´  ´è~Aùïª ?Ö?Ös ëÿÿTý{Á¨÷@ùõ[A©óSÃ¨À_ÖóS¾©õ[©ý{¿©ý ó ªôªë` T  u@øÕ  ´È~Aùïª ?Ö ?Ö  5ëÿÿT  Rý{Á¨õ[A©óSÂ¨À_Ö    óS¿©ý{¾©ý ôªóª³ ù  @¹ý
 àª  `@¹ ý{Â¨óSÁ¨À_Ö    óS¾©õ ùý{¿©ý ô ªÕ  ð¨âE9è 5) RÈ  ð±	ý¿;Õ@ù	@¹© 5È  Ð
@ùK É  ð(¹@ù
ë` TIÊ3-Ëïª  }Aù ?Ö Ò R  Ò`?ÖÈ  ð !  ? q  TÈ  ð p @ù	@¹É  5  Á
   A
ÿÿ     á
ÿÿ@ù	@¹É  5( R¨â9
@ù) R	 9ý{Á¨õ@ùóSÂ¨À_Ö        kàÀ_Öcsmà    óøý{¼©ý ó *â)b 5  a	ýßÈ  Ò ?Ö  ´ @y©IR	k! T<@¹ªR
À(I@¹?ka TH1@y-q TH@¹9 q©  THù@¹h  4à*3  èc ÿC 9è ùéS èC é#©H RI Ré£)ãs â£ á àG yÿÿè@¹  4ý{Ä¨óAøÀ_Öà*      óøý{¿©ý ó *  qà Tèª1@ù	½@¹*!SJ 5  A	ýßÈ ?Ö  a	ýßÈá* ?Öà*    ¡	ýßÈà* ?ÖóS¿©ý{¾©ý   °¡ÿ ù  (	ýßÈô *âC   R ?Ö  4  °à@ù  a	ýßÈ ?Öó ªó  ´  }Aùïª ?Öà*`?Öà@ù   ´  á	ýßÈ ?Öý{Â¨óSÁ¨À_ÖÈ  ð ¹ ùÀ_Ö    " RA R  Rÿÿ" R R  R}ÿÿ RA Rzÿÿ    È  Ð
@ùÌ  ð¹@ùRI k	K
ë¡  T	,Ë*
Ê¹ ùÀ_Ög  R Rhÿÿ    ý{¿©ý à  µ{ ÈR  ¹ëÿÀR  È  ð	J¹¿;Õ  ¹  Rý{Á¨À_Öý{¿©ý @Qur! T0@qà  TÈ  ð!( ý¿;Õ  R  a ÈR  ¹øêÿÀRý{Á¨À_Ö|@?@qÉ  ð-ýF@¨ylø	ÒÉ!*á@9+åÀ9OÀ T? @q  T(@@Qyr@ T? Aq TH2(á 9( R©yløÊ%Hå 9
  H2(á 9H RùÿÿH (á 9  H2(á 9©yløÊ%_å 9o  5  R  k  5  R   q  R(  R À_ÖóS¾©õ[©ý{½©ý õªµ ù  @¹³	 ¿C 9È  ð'óªÖ  Ð³ ù" ë` TÉ
h@ù	ë   TÁ
àª-  ` ùs" óÿÿ @¹Ä	 ý{Ã¨õ[A©óSÂ¨À_Ö    È  ðñ) R	ý¿;ÕÀ_Öý{¾©ý ãS âC ác àC  R Rè§)Ïÿÿý{Â¨À_Öóøý{¿©ý ó *Z ¨C¹J R) RrI 1  Ts 4 q` T
 qà  Tã ÈR  ¹zêÿ  
  y  2¨¹   Ê  ÐHñ	¹à	*ý{Á¨óAøÀ_Ö    È  ð A¹¿;ÕÀ_Öý{¿©ý  qé  TÈ ÈR  ¹_êÿ    È  ð
Hý_@ý	Éÿÿ5¿;Õà*ý{Á¨À_Ö    È  ð À_Ö    óS¿©ý{¾©ý óªôª´ ù  @¹?	 àª  ó *@¹`	 à*ý{Â¨óSÁ¨À_Ö    óS¿©ý{¾©ý óªôª´ ù  @¹-	 àªy  ó *@¹N	 à*ý{Â¨óSÁ¨À_Ö    óS½©õ[©÷c©ý{¿©ý ÷ ªè@ù
@ù- ´Ø  Ð@ù©@ù*Ê©@ù V-Ë*Ê©	@ùN-Ë*ÊM-Ëß
ë¡ T¨ËýCñ	@Ò(	«
ÒU¿ë# TÒáªàª¦ ô ª  ÒÅ T µu áªÒàª ô ª  Ò¼  ´@ùöª Òïª¨Ë	 *ýCÓß
ëèÈ  ´k ì øë¡ÿÿT@ùè@ù 
RJ	K  R	@ù*-ÊKÊË ù@ù
R I	Kê@ùÈ.ÉÊÈ! I@ù
R+ ù@ù J	K	-Êê@ù+ÊH@ù
R ù@ù HKê@ù©-È+ÊH@ù	 ù    ý{Á¨÷cB©õ[A©óSÃ¨À_Ö    óS»©õ[©÷c©ùk©û# ùý{¿©ý ö ªÈ@ù@ùk  µ  ?  Ú  °L@ùi@ù*Êi@ù U-Î*Ê© Ñ?
 ±T-ÎH Tùª÷ªøª{  ð" Ñë£ T@ùë`ÿÿT	Ê ùhAù3-Îïª ?Ö`?ÖÉ@ùL@ù+@ù h@ù
Êh@ùM-Î¿ë
ÊK-Î`XúàüÿT÷
ªõ
ªøªôªâÿÿ¿ ±  Tàª= L@ùÈ@ù	@ù, ùÊ@ùH@ù ùÉ@ù*@ùL	 ù  Rý{Á¨û#@ùùkC©÷cB©õ[A©óSÅ¨À_Öá ªÈ  Ð !  ý{½©ý ãS à ùâ£ ác àC è è ùI RH Rè§)ÿÿý{Ã¨À_Ö    `  µ  
  	@ù @ù	ë¡  TÈ  °@ù  © ù  RÀ_Ö    ý{¼©ý ãS à©âÃ ác àC è é£ è'©H RI Rè§)ëþÿý{Ä¨À_ÖÈ  °
É  Ð(ñù  RÀ_Öý{¿©ý È  Ð !ØÿÿÈ  Ð Õÿÿ  Rý{Á¨À_Ö    ý{¿©ý üÿ  Rý{Á¨À_Öóøý{¿©ý È  °@ùàªèèÿàª6 àª àªúÿàªÖýÿ  Rý{Á¨óAøÀ_Ö    ý{¿©ý   R¿ãÿ  Sý{Á¨À_Ö    óS¿©ý{¿©ý Ó  ÐjþDùHý_ QHý	©ÿÿ5¿;Õ( 5`þDùÔ  °B ë  T´ Bhþù  Rý{Á¨óSÁ¨À_Ö    óøý{¿©ý Ó  Ð`êDù§ êùÓ  Ð`îDù£ îùÓ  Ð`
@ù 
 ùÓ  Ð`@ù  ù  Rý{Á¨óAøÀ_Ö    ý{¿©ý    A ¥   Sý{Á¨À_Ö    ý{¿©ý  Sè  4È  °õGùH  ´   R     A Ã   Sý{Á¨À_Ö    óøý{¿©ý 
 @ùó  ´ïªh  ð}Aù ?Ö`?Ö  "      ý{¿©ý   ñ$@úè  T	 ÈR  ¹ èÿÀR  b  µ  9øÿÿé ªJ  ËHié8( 8h  4! Ñÿÿµ µ  9÷ HR  ¹èÿ@R    Rý{Á¨À_Öý{¿©ý þ `  ´ÀR
 È  °)A¹H 6` >Ô` ROýÿÀ 7  6À 6 °R? k©  T  RÀ_Ö °ûÿÿ  RüÿÿóS¼©õ[©÷c©ù ùý{½©ý óªh@ùõ*w SÈ  µË ØR  ¹bèÿ    4¨
 Q qÿÿTá ªàC ¬ëÿy@ù Rî@ù- 4À9m ùì
ªÈ@ù S
ÙixÊ 6¬ ´À9íªl ùøÿÿ¶ qè2÷¶ qéª`  T® q  T, 4À9l ùèªØRu  4¿B qa TìªB	 S?% qh  TÂ Q
  ~	 S?e qh  T^Q  þ	 S?e qÞ QI  T h  4HR  À9 êRk ù¨ S	aQ?
jà T¿ qRl Ñµl ùí 4À9
k Tx   ¹èÿl@ù  l tÀ9l ùR¿ qµ U  5 >Ô
	ÕK¡B	 S?% qh  TÂ Q
  ~	 S?e qh  T^Q  þ	 S?e qÞ QI  T  1@ Tk Tß
kÃ  Tß
k
Kzi  TR  Ö"	Rh@ù7* À9l ùÜÿÿ Ñh ùô  4À9k  T=   ¹Õçÿ×7è£@9y ù¨  4ê@ùH©C¹	yI©¹i@ùi  ´h@ù( ù  R1  á*à*Hÿÿ Sè 4' HR  ¹w  7   è£@96¨  4ê@ùH©C¹	yI©¹i@ùi  ´h@ù( ù  °R  ¨  4ê@ùH©C¹	yI©¹i@ùi  ´h@ù( ù  °  W 6öKè£@9¨  4ê@ùH©C¹	yI©¹i@ùi  ´h@ù( ùà*ý{Ã¨ù@ù÷cB©õ[A©óSÄ¨À_ÖóS¼©õ[©÷c©ù ùý{½©ý ôª@ùö*u SÈ  µë ÕR  ¹çÿo   4È
 Q qÿÿTá ªàC Ìêÿ@ù R3@y(   @ù%@xà* ùR!çÿ@ÿÿ5¨2¶ q¸h® Q©ÿR	j  T@ù%@x ùßzrÕR TÂ qÃ Tê qb  ThÂ Qp  	âR	kâ Tq£
 Tªqb  ThQg  Âqã Têqb  ThÂQa  %q# TÂ%qb  Th%Q[  'qc TÂ'qb  Th'QU  )q£
 TÂ)qb  Th)QO  +qã	 TÂ+qb  Th+QI  -q#	 TÂ-qb  Th-QC  1qc TÂ1qb  Th1Q=  3q£ TÂ3qb  Th3Q7  5qã TÂ5qb  Th5Q1  B9q# Tj9qb  ThB9Q+  B;qc Tj;qb  ThB;Q%  <q£ Tª<qb  Th<Q  	R	kÃ TH	Rk  TRhK  	üR	k£ THýRkb  TüR÷ÿÿþRh	= S?% qh TRðÿÿIãR	kb  TâRëÿÿ  1¡ ThQe qiQ©  T?e qi  T   h Q?e qhÝ Q¨  4ß qHRÖ  @ùéûR@y
	  ùhaQ	jÀ TRß qÖH	 Ñ ùË 4@yk` T-   ¹Åæÿ  H	 S@yß q ù	RÖ V  5 >Ô
	ÖK¡Â qÃ Tê qb  ThÂ Qp  	âR	kâ Tq£
 Tªqb  ThQg  Âqã Têqb  ThÂQa  %q# TÂ%qb  Th%Q[  'qc TÂ'qb  Th'QU  )q£
 TÂ)qb  Th)QO  +qã	 TÂ+qb  Th+QI  -q#	 TÂ-qb  Th-QC  1qc TÂ1qb  Th1Q=  3q£ TÂ3qb  Th3Q7  5qã TÂ5qb  Th5Q1  B9q# Tj9qb  ThB9Q+  B;qc Tj;qb  ThB;Q%  <q£ Tª<qb  Th<Q  	R	kÃ TH	Rk  TRhK  	üR	k£ THýRkb  TüR÷ÿÿþRh	= S?% qh TRðÿÿIãR	kb  TâRëÿÿ  1¡ ThQe qiQ©  T?e qi  T   h Q?e qhÝ Q 1Vzâ Tÿ
kÃ  Tÿ
k
Kzi  TR  ÷"	R@ù8*%@x ùmÿÿ@ù		 Ñ ùó  4(@yk  T    ¹æÿØ7è£@9 ù¨  4ê@ùH©C¹	yI©¹@ùi  ´@ù( ù  R1  á*à*ýÿ Sè 4m  HR  ¹x  7   è£@96¨  4ê@ùH©C¹	yI©¹@ùi  ´@ù( ù  °R  ¨  4ê@ùH©C¹	yI©¹@ùi  ´@ù( ù  °  X 6÷Kè£@9¨  4ê@ùH©C¹	yI©¹@ùi  ´@ù( ùà*ý{Ã¨ù@ù÷cB©õ[A©óSÄ¨À_Ö  A
 RL}@Óñ}Ó	ik¸ 	kà TJ _µ q#ÿÿTL QE qh  T R
  ðQ9 q
RÉR@  ñ}Óh  ih¸À_Öóøý{¿©ý ó *ò
   µÈ  Á   à* ¹Úÿÿó *è
   µÈ  ±    ¹ý{Á¨óAøÀ_Öý{¿©ý Ü
   µÈ   Á    ý{Á¨À_Öý{¿©ý Ò
   µÈ   ±    ý{Á¨À_ÖóS¼©õ[©÷c©ù ùû ùý{¾©ý ó *³ ¹õªö*
 1á  Tßÿÿ  ¹çÿÿ(R  ¹,  ³ø7È  °ÁE¹k" Th~@ýFÉ  °8@	Ò{wø)#*á@9ê 6à*ãÿ {wø)#*á@9ê  7Íÿÿ(R  ¹Àÿÿ  ¹  â*áªà*  ô ªà*Gãÿàª  ´ÿÿ  ¹¼ÿÿ(R  ¹Såÿ  ý{Â¨û@ùù@ù÷cB©õ[A©óSÄ¨À_ÖóS¾©õ ùý{¾©ý ó *ôªõ*Íãÿ ±Á  T¦ÿÿ(R  ¹    h  Ð¡	ýßÈã*âC áª ?Öà  5h  Ð¡	ýßÈ ?Ösÿÿñÿÿà@ù ±ÀýÿTi~@È  °*ýF)@yjø	Ò+!¨Rjá@9H
há 9ý{Â¨õ@ùóSÂ¨À_Öÿÿ    Îÿÿ    óS»©õ[©÷c©ùk©û# ùý{¾©ý ú *H@É  °8ýF@{wø	Òôª)#;@ùâ  ´À9) q  T(á@92  (á@9jR

(á 9ëõªóªb
 T©À9?i qÀ T¨ ?5 q  Ti 9õª<  ëb TÀ9) q  TIRH Ò  ( Òi 90  õªh  Ðá	ýßÈ ÒãS " RáC àª ?Ö@ 4è@¹ 4{wø	Ò)#	R*á@9_j@ TêCÀ9_) q` T¨Rh 9{wø)#*é 9  èCÀ9) q`Túa  THR  " R à*¡ÿÿèCÀ9	Ò) qÀ  T  	Ò¨Rh 9s ¿ëC÷ÿT  {wø)#*á@9 07H2(á 9  HRh 9s `Ký{Â¨û#@ùùkC©÷cB©õ[A©óSÅ¨À_ÖóS»©õ[©÷c©ùk©û# ùý{¾©ý ú *H@É  °8ýF@{wø	Òôª)#;@ùâ  ´@y) q  T(á@92  (á@9jR

(á 9õªóªë T©@y?i qà	 T¨
 ?5 q  Ti yõªE  ëb T@y) q  TIR Ò  H Òi y9  õªh  Ðá	ýßÈ ÒãS B RáC àª ?Ö` 4è@¹( 4{wø	Ò)#	R*á@9_jè#@y` T) q T©Rè' yi y{wøéCÀ9*#Ié 9{wøéOÀ9+#ií 9{wø)#HR(ñ 9  ) q`Túa  THR  " R! à*ÿÿè#@y	Ò) qÀ  T  	Ò¨Rh ys
 ¿ë#öÿT  {wø)#*á@9 07H2(á 9  HRh ys
 hË	ýA ySý{Â¨û#@ùùkC©÷cB©õ[A©óSÅ¨À_Ö    óS»©õ[©÷c©ùk©û# ùý{¿©ý ÷ *øªùªúªñþÿ`  5  Rc  è~@É  °5ýF@¨ztø	ÒÊ"IåÀ9) 4Ã  ÑiÀ9i ø7óª9  Ë  h) S, R	Éé8) 5i q`Xú£  Thþ_8 (Éè8Hÿÿ4mÀ9h© SÉé8Ë  5FþÿHR  ¹  ;  h ka  TsB,  Há@9		R	j` TMé 9k 	 qÃ  T¨ztøiÀ9k Ê"Ií 9
 qÁ  T¨ztøiÀ9k Ê"Iñ 9sA,Ë  èK}@" Rà*¤þÿsKã*å*äªâª R ½Rì à  5h  Ð¡	ýßÈ ?ÖòýÿÐÿÿ¨ztø k xSË"¨Riõ@9*
H RI*iõ 9ý{Á¨û#@ùùkC©÷cB©õ[A©óSÅ¨À_ÖóS¼©õ[©÷c©ù ùû ùý{¾©ý ó *³ ¹öªõ*
 1á  Téýÿ  ¹ñýÿ(R  ¹4  ³ø7È  °ÁE¹k" Th~@ýFÉ  °8@	Ò{wø)#*á@9ê 6 °¿kÉ  TÑýÿ  ¹ÙýÿÈR  à*áÿ {wø)#*á@9ê  7Ïýÿ(R  ¹Âýÿ  ¹  â*áªà*  ô *à*Iáÿà*  ¶ýÿ  ¹¾ýÿ(R  ¹Uãÿ  ý{Â¨û@ùù@ù÷cB©õ[A©óSÄ¨À_ÖóS»©õ[©÷c©ùk©û# ùý{¼©ý ö *á ùß
 1U|@Óá  Týÿ  ¹¤ýÿ(R  ¹ v!ø7È  °ÁE¹ßkâ  TÈ~@É  °:ýF@I{yø
	Ò
'
Ká@9« 6 °¿kÉ  Týÿ  ¹ýÿÈRù  U 4+7!ÿÿ´H@ù Òÿ£©[åÀ9 qÀ T q! T 6sýÿ  ¹{ýÿÈR  ¹ãÿÓ  ô*óª  Õþ7¨~S q R41àª ó ª  ÒÆ   Òó ùÃ ó  µeýÿR  ¹XýÿR»  " R Òà*ÞýÿH{yø
	Ò	#
  ùI{yø
'
		Rÿ ¹÷ªHá@9	j  THéÀ9) q@z  Th 9( Rè ¹H{yøKRs  Q	#
+é 9û 4H{yø	#
*íÀ9_) q@z  TH Rj 9è ¹H{yøs  Q q	#
+í 9á TH{yø	#
*ñÀ9_) q@z  Th Rj 9è ¹H{yøs  Q	#
+ñ 9à*à   4H{yø		Ò	#	*áÀ9
ø6h  ÐÁà@ù	ýßÈá  ?Ö  4( RèC 9 qÁ Ti  Ð(áà@ù	ýßÈ Òãc ~Sáª ?Ö  5h  Ð¡	ýßÈ ?Öàüÿó@ù\  é£B)4  ÿC 9i  Ð(áà@ù	ýßÈ Òãs â*áª ?Öè@¹  q
UzÈ Té@¹	H{yø
	Ò	#
*áÀ9	ø6~@ q  Tã@ù¤þAÓâ	ªáªà*gþÿô *A  èC@9"ýAÓ¨ 4ìéªëªÿë T*@y_i q T_5 qA T(	 ëâ  T@y) q  TJR Ò  H Ò		j yh	 ëª?ëýÿT  H{yø
#
Iá@9(2Há 9hË	ýA4yS  áªà*³ýÿÔÿÿh  Ð¡	ýßÈ ?Ö qA T«üÿ(R  ¹üÿó@ù¨ R  ¹   ´qa  T R  |üÿ ó@ùàªö  à*
    R  üÿ  ¹üÿ(R  ¹*âÿ  ý{Ä¨û#@ùùkC©÷cB©õ[A©óSÅ¨À_Ö    óS¼©õ[©÷c©ù ùý{¸©ý h  Ð 	ýßÈàC  ?Öè§@y¨ 4è/@ùh ´@¹	 R 
@q²à*ßÿÈ  °ÁE¹´Â4kÁÖ 4É  °8h  Ð Ò	Ò@ø ±  T ±à T©@9© 6 7èþßÈ ?Ö  4hþF{høi@*!_øI ù¨@9Há 9s µ Ö QVýÿ5ý{È¨ù@ù÷cB©õ[A©óSÄ¨À_Ö    óS»©õ[©÷c©ùk©û# ùý{¿©ý È  °h  Ðá i  Ð8 R: 
	Ò;R~@ÈþFèzhøÉ@3!
i@ù*	 _ ñ©  Thâ@92hâ 9*  {â 9ô  4 q`  T`  @   (ÿßÈ ?Öõ ª¨  ñ  TÿßÈ ?Ö    R  4 u ù	 q  Thâ@92äÿÿ
 q¡ Thâ@92ßÿÿhâ@9z ù2hâ 9¨  ð	õGùi  ´(yvø ¹  q
	ÒáøÿTý{Á¨û#@ùùkC©÷cB©õ[A©óSÅ¨À_Öóøý{¿©ý à R   R  RÿÞÿ  5eÿÿ¤ÿÿ3 Rà R  à*ý{Á¨óAøÀ_ÖóS¿©ý{¿©ý È   Ò`jtø`  ´ÒÞÿj4øs" ñCÿÿT  Rý{Á¨óSÁ¨À_Ö    óS¾©õ ùý{¿©ý    ´è	Àë T|) ÒÕ   Eù ñ3h  °	ýßÈâªR ?Ö` µh  °èöÿ` 4àªs   4 EùâªþßÈR ?ÖÀþÿ´  ¬ûÿR  ¹  Òý{Á¨õ@ùóSÂ¨À_Öóøý{¿©ý â ª" ´È   
Eùh  °!	ýßÈ R ?Ö  5h  °¡	ýßÈ ?ÖWûÿó *ûÿ  ¹ý{Á¨óAøÀ_ÖóS¾©õ[©ý{¿©ý È  A RÕ  Òh~@Ó Q RôR±   4¨H¹s : q	 ©¹£þÿT  R    R    Rý{Á¨õ[A©óSÂ¨À_ÖÈ  A	|@
Ò !
j  °IA(ýßÈ Ö    óS½©õ[©÷ ùý{¿©ý Ö  ÓH¹Ó 4È  Ah  °¡Òs Q©þßÈ`R ?ÖÈH¹	 QÉ¹3ÿÿ5  Rý{Á¨÷@ùõ[A©óSÃ¨À_Ö    È  A	|@
Ò !
j  °Ia(ýßÈ Ö    óS»©õ[©÷c©ùk©û# ùý{½©ý È  A á ùú|@ÓöªI{yøøª¿;Õ´  ð@ùj i	Ê -Ê ±`
 T`
 µßë 	 Th  Ð	$h  °
áé+©k  °{áÔF@¸óztø¿;Õ  ´ ±À T4  5ytø RHýßÈ Òàª ?Öó ª³ µi  °(¡ýßÈ ?Ö\qÁ Th  Ð!:â Òàª~   4h  Ða:â Òàªx @ 4i  °(áýßÈ R Òàª ?Öó ª   ÒÓ  µè	 	ýÈ¿;Õ  êHý_ÈSý	ÈÉÿÿ5¿;Õ  ´hÿßÈàª ?Ö3 µé+A©ßëaøÿT´  ð@ù ÒÓ ´h  °aá@ù	ýßÈàª ?ÖÀ ´@ùRI i	K,ÉI

Ê*ýÈ¿;Õ  ´  ð@ùìÿÿ@ùi 
RJ	KI -ÊÊ+ýÈ¿;Õ  Òý{Ã¨û#@ùùkC©÷cB©õ[A©óSÅ¨À_Ö    óS¿©ý{¿©ý h  Ð1>h  ÐA>ô ªC Rlÿÿó ª3 ´h  °}Aùïª ?Öáª  `?Ö     ý{Á¨óSÁ¨À_Ö Õ% À    óøý{¿©ý h  Ð¡:h  ÐÁ:C   RQÿÿó ªó  ´h  °}Aùïª ?Ö`?Ö    Rý{Á¨óAøÀ_ÖóS»©õ[©÷c©ùk©û# ùý{¿©ý ÿC Ñõªh  Ð;ó ªô*h  Ð!;ö*C    R÷ªø*úªûª.ÿÿù ª9 ´h  °}Aùïª ?Öè;@ùçªæªå*äªã*è ùâªá*àª ?Ö
   Ràªë  h  °		ýßÈå*äªã*âªá* ?ÖÿC ý{Á¨û#@ùùkC©÷cB©õ[A©óSÅ¨À_Ö    óS¿©ý{¿©ý h  Ða;h  Ð;ô ªC  ` Rüþÿó ª ´h  °}Aùïª ?Öàª`?Ö  h  °a	ýßÈ ?Öý{Á¨óSÁ¨À_Ö    óS¿©ý{¿©ý h  ÐÁ;h  Ðá;ó *C   Ràþÿô ª ´h  °}Aùïª ?Öà*?Ö  h  °Á	ýßÈà* ?Öý{Á¨óSÁ¨À_ÖóS¿©ý{¿©ý h  Ð<h  Ð!<ó *C    RÄþÿô ª ´h  °}Aùïª ?Öà*?Ö  h  °	ýßÈà* ?Öý{Á¨óSÁ¨À_ÖóS¾©õ ùý{¿©ý h  Ða<ó *ôªh  Ð<C  À R¦þÿõ ª5 ´h  °}Aùïª ?Öáªà* ?Ö  h  °¡	ýßÈáªà* ?Öý{Á¨õ@ùóSÂ¨À_Ö    óS¾©õ[©ý{¿©ý ö*h  ÐÁ<ó ªô*h  Ðá<C  @Rþÿõ ªU ´h  °}Aùïª ?Öâ*á*àª ?Ö  h  °A	ýßÈá*àª ?Öý{Á¨õ[A©óSÂ¨À_Ö    óS»©õ[©÷c©ùk©û# ùý{¿©ý ÿC Ñõªh  Ða=ó ªô*h  Ð=ö*C  R÷ªø*úªûªVþÿù ª9 ´h  °}Aùïª ?Öè;@ùçªæªå*äªã*è ùâªá*àª ?Ö
   Ràª  h  °!		ýßÈå*äªã*âªá* ?ÖÿC ý{Á¨û#@ùùkC©÷cB©õ[A©óSÅ¨À_Ö    óS¾©õ ùý{¿©ý h  ÐÁ=ó ªõ*h  Ðá=C  ÀR"þÿô ª4 ´h  °}Aùïª ?Öá*àª?Ö  àª2 ý{Á¨õ@ùóSÂ¨À_Ö    É  *Á"¨  ð@ùHALÒ_ë	 Òì) K ø?ë¡ÿÿT  RÀ_Ö    óS¾©õ ùý{¿©ý  Sè 5È  A i  °5át`@øÀ  ´ ±`  T¨þßÈ ?ÖøëÿÿT  Rý{Á¨õ@ùóSÂ¨À_Ö    óS¾©õ[©ý{¾©ý  R¿ ¹ R¯ýÿs Rµ  ð¶  ð³ ¹ÈâO¹k  T¨öGù	ÙsøI  µ  © ù(@¹¿;Õ5
S 4¨öGù Ùsø8Þÿ 1`  T ¨ ¹¨öGù	Ùsø Á j  °H¡	ýßÈ ?Ö¨öGù ÙsøXýÿ¨öGùÙ3ø´@¹s Þÿÿ R­ýÿà*ý{Â¨õ[A©óSÂ¨À_Ö    óS¿©ý{¾©ý óªôª´ ù  @ùÝÿj@ùh@ù	@ù) ´)@¹¿;Õ(5
S¨ 4( 	 qa  T?rA  T	X6h
@ù	@9é  5h@ù@ù	@¹¿;Õ(SÈ 4h@ù @ù   1À  Tj@ùH@¹	 I ¹  h@ù	 	 ¹@ù{Ýÿý{Â¨óSÁ¨À_Ö    óS¾©õ[©ý{º©ý õªôª´ ù  @¹Fýÿ¨  ðõGù©  ð(á¹v³ ùë  Th@ù¨ ùª@ùÈ ´	@¹¿;Õ(5
SH 4( 	 qa  T?rá  TÉ X7H@¹	 I ¹s" ëÿÿª
@ù©@ù¨@ù«c «# ù¨' ù©+ ùª/ ù¨@ù¨ ù¨ ù£ ¢¡£  C ÿÿîÿÿ@¹>ýÿý{Æ¨õ[A©óSÂ¨À_Ö    ý{¼©ý èS àC 9è ùéC èc é#©Rÿÿ)	Ré£)ãs â£ á àG ´ÿÿèC@9é@¹ qè@¹ ý{Ä¨À_ÖóS¿©ý{¿©ý ó ªi@¹¿;Õ( 	 q! T?rà Th.@©Kk ù q ¹- TIìÿa@ùâ*ä  k  TjR Iý_)2Iý¨ÿÿ5¿;Õ    h@¹¿;Õ	Sè  4jR Iý_)yIý¨ÿÿ5¿;Õ  Rý{Á¨óSÁ¨À_Ö    óøý{¿©ý ó ª  µ  R´ÿÿ  àªÉÿÿ` 5h@¹¿;Õ-S¨  4àªìÿc `  5  R    ý{Á¨óAøÀ_Ö      Rÿÿóøý{¿©ý ó ªh@¹¿;Õ5
S 4h@¹¿;ÕS 4`@ùmüÿjR (Iý_)
Iý¨ÿÿ5¿;Õ~ © ¹ý{Á¨óAøÀ_Öóøý{¾©ý ó ª ù Rüÿ C    @ùh ùè  ´ ¹ ù ù ù	 	 ¹ R©üÿàªý{Â¨óAøÀ_Ö | © ¹P  ¹Àø ùý¿;ÕÀ_ÖóS¾©õ[©ý{¿©ý ¨  ÐõGù©  Ð)á¹a ô ª(
 Ñ¶¿ëÀ T³@øS ´h@¹¿;Õ5
S(ÿÿ5àªÜÿkR hý_	2iý
ªÿÿ5¿;Õé7h* 7àª}ÜÿìÿÿÒ  Òïûÿ ø  Òüÿ¨_øh ´	 	 ¹¨_ø RôR Á åýÿ³_øjR Iý_)2Iý¨ÿÿ5¿;Õàª^Üÿ ù   ùàªý{Á¨õ[A©óSÂ¨À_Ö    óS¾©õ ùý{¾©ý èC 	 @y ù	 ¹¨  ðA¹è ¹  	,@x? qÀÿÿT5 R?q` T?Éq   T?Ýq! T3`R   Rÿ ¹ê*  3!RJ Ró ¹ê ¹
  R R R R) RD R RE Ò¨@yë*ì*è
 4MqÈ Tà T qÀ	 T­ q T± q  Tq@ T9qÀ  TIqa
 TÏ 5s2  s2=  r¡ Ts22  ' R4  f 5& R37j 3ê ¹ 30    5s2/ Ró ¹ q$  Qq Tq Tq T¹qà TÑq  Táqá Tr`  Ts2ó ¹é  r Ts2
  î  5Jy    5J2. Rê ¹ q  ra  Ts2ó ¹é  s `6	 R  s2ó ¹) R? q¨

éôÿ5¨	 ÿ  q´@y  .@x qÀÿÿT§ 5@yH 4÷ÿÈR  ¹©Üÿá@¹à@ùý{Â¨õ@ùóSÂ¨À_Öh  °á>b Òàª~  þÿ5 (@y  (-@x qÀÿÿTõ q!ýÿT4	 @y  .@x qÀÿÿTh  °?¢ Òàª¦ëÿ  5h2IÒ  h  °A?Òàªëÿ  5h2	Ò	  h  °?â Òàªëÿ`ùÿ5h2ÉÒè ¹jix q¡  T	H-@x qÀÿÿTøÿ5õc 9Âÿÿ    óS¾©õ ùý{½©ý ô ªàªõ*óª&ÿÿá# ¹è@9à ùh  5 Ò  â@¹0Rã*áªàC B  ÿÿ5ª  ÐHñO¹ë@¹	 Iñ¹jR Iý_)*Iý¨ÿÿ5¿;Õè@¹ ¹ ù~ ©h ¹àªý{Ã¨õ@ùóSÂ¨À_Ö    h  A		ýßÈ Öý{¾©ý  áC H@ùè ùÜ è@ù @ùý{Â¨À_Ö    óS¿©ý{¾©ý ôªóª³ ù  @¹ûÿ@ù	@ù*E@ùIý_) Iý¨ÿÿ5¿;Õ`@¹9ûÿý{Â¨óSÁ¨À_Ö    óS¿©ý{¾©ý óªôª´ ù  @¹ûÿh@ù@ù`J@ùÀ ´0 `J@ù¨  ðñDù ë  T¨  Ð
 ë  T@¹H  5 J ù@¹ûÿý{Â¨óSÁ¨À_Ö    óS¿©ý{¾©ý ôªóª³ ù  @¹çúÿ@ù	@ù@ù!@ù@@ù  `@¹ûÿý{Â¨óSÁ¨À_Ö    óS¿©ý{¾©ý ôªóª³ ù  @¹Óúÿ@ù	@ù E@ù ´ü_ Qü	©ÿÿ5¿;ÕÈ  5¨  ÐA ë@  Túÿ`@¹èúÿý{Â¨óSÁ¨À_Öý{»©ý èc à ùè ù¨ Rè# ¹èc è# ù R© Ré£)¨  ð'éÃ è ù+ Ré' ù R( ¹ã é/ ¹h  °	Aè@ùâã á àC 	 ùê@ù¨  ÐAK©¹é@ù(E ùê@ùiRIyyè@ù	yè@ùÑùpÿÿã£ âá³ àC ¡ÿÿý{Å¨À_Öóøý{¿©ý ó ª  ´  àªOúÿý{Á¨óAøÀ_Ö    ý{¼©ý è£ à£©¨ Rè ¹© Rè£ é ¹è ù R Rè§)	 @ùh  °A?ë  Tà	ª7úÿà@ù 8@ù4úÿè@ù -@ù1úÿè@ù 1@ù.úÿè@ù 5@ù+úÿè@ù %@ù(úÿè@ù )@ù%úÿè@ù =@ù"úÿè@ù A@ùúÿè@ù áAùúÿãS âÃ ác àC sÿÿãs âã á àC :ÿÿý{Ä¨À_Ö    óS¿©ý{¿©ý ô ªJ@ùóªÀ ´k ¨  ðñDùJ@ù ë  T¨  Ð
 ë  T@¹H  5Ù J ùs  ´àª ý{Á¨óSÁ¨À_Ö    óS¾©õ ùý{¿©ý h  ¡	ýßÈ ?Öó *µ  Ð B¹ 1  T}ûÿô ª´  ´ ±Á T Ò   B¹ ûÿ`ÿÿ4yÒ  Ò¬ùÿô ª B¹Ô  µ Òûÿ  ÒÑùÿðÿÿáªûÿÀ  5 B¹ Ò~ûÿàª÷ÿÿàª>ÿÿ  ÒÄùÿh  ¡	ýßÈà* ?ÖÔ  ´àªý{Á¨õ@ùóSÂ¨À_Önòÿ    óS¿©ý{¿©ý ´  ÐB¹ 1  TGûÿó ª  ´ ±@ T  B¹ [ûÿ  4yÒ  Òwùÿó ªB¹Ó  µ ÒRûÿ  Òùÿ  áªMûÿÀ  5B¹ ÒIûÿàª÷ÿÿàª	ÿÿ  Òùÿ³  ´àªý{Á¨óSÁ¨À_Ö?òÿóS¾©õ ùý{¿©ý h  ¡	ýßÈ ?Öó *µ  Ð B¹ 1  Tûÿô ª´  ´ ±Á T Ò   B¹ &ûÿ`ÿÿ4yÒ  ÒBùÿô ª B¹Ô  µ Òûÿ  ÒgùÿðÿÿáªûÿÀ  5 B¹ Òûÿàª÷ÿÿàªÔþÿ  ÒZùÿh  ¡	ýßÈà* ?Öàªý{Á¨õ@ùóSÂ¨À_Ö    ý{¿©ý    á"ªúÿ¨  Ð ¹ 1a  T  R  »ÿÿ  µ  R  úÿÿ  Rý{Á¨À_Ö    óøý{¿©ý ³  Ð`B¹ 1  T¯úÿ h¹  Rý{Á¨óAøÀ_ÖóS¾©õ ùý{¿©ý  ±h T  ñ( Òh  µ  ð Eù	ýßÈâª R ?Ö` µh  ìïÿ` 4àªw   4 EùâªþßÈ R ?ÖÀþÿ´  °ôÿR  ¹  Òý{Á¨õ@ùóSÂ¨À_Öý{¾©ý à©A  ´   ù# RáC   ÒÊñÿý{Â¨À_Ö    ý{¾©ý à©A  ´   ù# RáC   Òòÿý{Â¨À_Ö    óS¾©õ ùý{½©ý ó ªôªõªô	 ´Õ	 ´À9  5³	 ´ yK  áªàC lÝÿé@ù*½R(
@¹
ka T¨  ð'âªáªàª 	   q ±  (@ù µs  ´@9h y  Rè£@9H 4ê@ùH©C¹	yI©¹-  @9ác ñ à 4é@ù#	@¹ q T¿kK T 
@¹ ñåäªâª!R% é@ùÀ  5(	@¹¿Â(ëã TÀ9¨ 4 	@¹àÿÿè@ù ñåäª# R 
@¹âª!R  úÿ5?ôÿHR  ¹  Ñÿÿ¨  ðáù  Rý{Ã¨õ@ùóSÂ¨À_Ö     Ò¡ÿÿóS¾©õ ùý{¼©ý ôªã# y ñõª¤
@úó ª©  TS  ´ ¹  R7  s  ´ h ¹è{@²¿ëé  TôÿÈR  ¹²ÙÿÀR+  áªà ÿÜÿè@ù)½R 
@¹ 	k¡ Tá#@yâc ÿ ùàª- S  ´` ¹ qm Tôÿ  @¹  @ù µè#@yýqÉ T ñ¤@ú©  Tâª RàªîÉÿõóÿHR  ¹@Rèã@9¨  4ê@ùH©C¹	yI©¹ý{Ä¨õ@ùóSÂ¨À_Öt  ´u ´ 9S ´( Rh ¹  å*ÿ ¹çS  Òäª# RâC  RÌ
 à  4è@¹üÿ5S  ´` ¹  RàÿÿH  ð¡	ýßÈ ?ÖèqÁúÿT ñ¤@ú©  Tâª Ràª¼ÉÿÃóÿHR  ¹ZÙÿ@RÍÿÿ    óøý{¿©ý óª¨  ÐñDùi@ù?ë  T¨  °ñI¹	¨C¹?ja  T® ` ùý{Á¨óAøÀ_Ö    óøý{¿©ý óª¨  ÐýDùi@ù?ë  T¨  °ñI¹	¨C¹?ja  T	 ` ùý{Á¨óAøÀ_Ö    óS»©õ[©÷c©ùk©û# ùý{½©ý ÿC ÑóªáK@ùõ ª 9¿  qà ÷ªøªùªÖ Sú*´ lÜÿ. ÿÂ(ëè  T|óÿHR  ¹Ùÿ@R±  ª@ùHùtÓýña Tè@¹ç*ÿ ù Rå*äªãªè ¹âªáªàª¯  `  4 9  ¡Ràª}&   ´È 	 R*iSKA  9 9  ª ø¶¨Rh 9ª@ùs È R IS6 øÒy _)LòRá  T{ 9¨@ùÉÒÍ@ò8  (Rh 9w s
 t  5 R  è@ù}@ù	@ù(À9( 9¨@ù	Í@I ´RáàÒ qm T¨@ù	+Í@h%Â	= S+Á j= S_å qi  TH
= SH Qj 9= s !üDÓ Q¢ýÿ6bø7ã@¹àª  SÈ 4k ÑíRlÀ9 S	Q?
ja  T{õ8úÿÿë  Tå qÈê @  T 	 i 9  hñß8 hñ8 qÍ  Tâ*Ràª÷ÈÿsB4èÀ9­R qHkSk	Ai 9ª@ùl	 HùtÓ	ËË? ñ*¡? ñhR¨±h 9_¡ñ 9ëª T	}ÒH
É 
©	 	Á  9ëa  T_ñ TÒH
É
©	 	Á i 9k ëD	Jú TIÒH
É
©	 	Á i 9k H 	Á i 9 9  Rèã@9¨  4ê@ùH©C¹	yI©¹ÿC ý{Ã¨û#@ùùkC©÷cB©õ[A©óSÅ¨À_ÖóS½©õ[©÷ ùý{¾©ý ô*
 ë ª
 `@ý_ëõªóªâªC1áC  Ö S÷* è@¹å[@¹ä *ãC  µ që qê×¨
Ë	ËH¿ ± ¡% `  4 9
  ç+@ù RåC ä*ã*â*áªàª  ý{Â¨÷@ùõ[A©óSÃ¨À_Ö    óS¼©õ[©÷c©ùk©ý{½©ý ó* qhÂ	% øªÃ)ëô ªw Sù*õªÖ S TpòÿHR  ¹Øÿ@Rý{Ã¨ùkC©÷cB©õ[A©óSÄ¨À_ÖáªàC OÛÿ6 4¨@¹µ qé* qm THÀ9é
ªh  4(À8èÿÿ5(
Ë á
ª@ rÆÿ¨@¹ëªºRµ qa  T 9  q
 ThÀ9é@ùh 9(}@ù	@ù*À9j 8È@Ò	Á3 ±3ËHi  °"1#àª)ïÿ  5`
 w  4¨Rh 9¨@ù	À9?Á q  T¨@¹
 Qm ø6í
Kz 9¿qk T ¨}(	ý`Óh
À9+}l}KRµ	h
 9¿) qk T¨ ¨}(	ý`ÓhÀ9+}l}Kh 9	­KhÀ9
h 9? qá  T À9Á q  Tb Ò &Æÿè£@9¨  4ê@ùH©C¹	yI©¹  Rÿÿ Ò R Ò Ò  ÒzÐÿ ÕëQgfffóS½©õ[©÷c©ý{½©ý ó ªàC áªö*õª SÕÚÿª@¹Rw 4H Qk T¨@¹µ qé*Á*H_i38ñ8¨@¹µ q  T¨Rh 9s ¨@¹ q, TÈ  5¨@ù	À9( R?Á q@  T R  4h  4t   hÀ9éªh  4(À8èÿÿ5(Ët  àªáªÝÅÿx 9  tÂ(ß qÍ TÀ9éªh  4(À8èÿÿ5(Ë áª ÎÅÿè@ù }@ù	@ù*À9 9¨@¹ø6èKÿ q
VzÔ¢t 4hÀ9éªh  4(À8èÿÿ5(Ë`Â4 áª·Åÿ~@RàªÇÿè£@9¨  4ê@ùH©C¹	yI©¹  Rý{Ã¨÷cB©õ[A©óSÃ¨À_ÖóS¼©õ[©÷c©ù ùý{¾©ý è ª @ýöªõ*ôªâªéC ãª?} ©áC à*Ø Sù*S è@¹åc@¹ä *ãC â*µ qè@¹é3ß ± QÈ	ËÁàªô `  4 9  è@¹	 Q? 1$¡UzÊ Tÿ	k  ThÀ8èÿÿ5â8å7@ù$ RãC â*áªàª\ÿÿ
  ç7@ù& RåC ä*ã*â*áªàªÄþÿý{Â¨ù@ù÷cB©õ[A©óSÄ¨À_Ö    ý{¿©ý ) S( ê * ëàª¢  T  9Rý{Á¨À_Öé  4¨R  9 ± 8@  Tc Ñ S	 R-ySN Qo  °é «	,ykøÀ9êªh  4HÀ8èÿÿ5HË ëè	
+	è áªykøîÿ`  5  Rßÿÿ Ò R Ò Ò  ÒÏÿóS¾©ö_©ý{¿©ý ô ª@ùöªW< 	*Í@K%×s= S  5" qà7*  n  5@ùh	Í@*%×L= S! qi  T  R  £ T( Ò!×	 Ñ*_Í@òÿÿTÿÂ qÀ  TÈK	½@*%×K S  )Lòë` 
   q¡  T3 4@ùè ø·çÿÿ q  Ts  4@ùHüÿ·  Rý{Á¨ö_A©óSÂ¨À_Ö    óS¾©õ[©ý{¾©ý ÿC Ñí ªóªôªëªõ*ó  µÃðÿÈR  ¹ZÖÿÀRw  Tÿÿ´+ÿÿ´ÿÿ´¿q   T¨Q	 q RH  T& RG7¬@ùùtÓýñÁ TÍ@òa  T  R  Ì ø¶	àÒ	ëa  T R  ýsÓê(*K `2ýÓ Sä*ãªâª]ÿÿS  èDÓ2è[@¹ÿ {ò¿ql T¨Qyr   T¿q  T¿q  è+@ùç*ö ¹å*ãªâªáªè ùà
ªîüÿ:  ¿qÀ T¿q Tè+@ùç*ö ¹å*ãªâªáªè ùà
ªíþÿ+   @ýè ãª} ©âªá à*J è#@¹å*ä *ã µ qè'@¹é ± 	Ëí `  4 9  å+@ù Rã â*áªàª_þÿ  è+@ùç*ö ¹å*ãªâªáªè ùà
ªýÿÿC ý{Â¨õ[A©óSÂ¨À_Ö¨  °@ù©  Ð)åDù
@²?
ëàÀ_Öý{¿©ý ¨  Ð}A¹È 5à  µ4ðÿÈR  ¹ËÕÿ  °	  Aÿÿ´è{@²_ ëèþÿTÌäÿ   Ò  ý{Á¨À_ÖóS¾©õ ùý{½©ý ô ªõªóªs  µ  R*  ô  µðÿÈR  ¹°Õÿ  °#  Uÿÿ´è{@²ëèþÿTáªàC ùØÿè@ù @ùÀ  µâªáªàª¨äÿ  ã*å*äªâª! Rw À  5ýïÿÈR  ¹  °    Qè£@9¨  4ê@ùH©C¹	yI©¹ý{Ã¨õ@ùóSÂ¨À_Ö    óS½©õ[©÷c©ý{¿©ý ÿC Ñó* qõ ªö*ôª÷ªø*í  Ta~@àªÅÿ k   Òÿ ù Òå*äªã*âªá*àª%öÿÿC ý{Á¨÷cB©õ[A©óSÃ¨À_Öý{¼©ý < SéÿRè# y	ka  TàÿR%  àc ªØÿà#@y q Th  É@Ó	ykx©  6è@ù@ù ik8    S  è@ù	@ù ´% RäK # RâC  Rà	ªºÿÿ`  5à#@y  à'@yèÃ@9¨  4ê@ùH©C¹	yI©¹ý{Ä¨À_Ö    óS¿©ý{¿©ý ó ª3 µïÿÈR  ¹*Õÿ  ý{Á¨óSÁ¨À_Öh@¹¿;Õ5
S(ÿÿ4h@¹¿;Õ1S¨þÿ5h@¹¿;ÕSjR è  4Iý_)2Iý¨ÿÿ5¿;ÕêÿÿIý_) 2Iý¨ÿÿ5¿;Õh@¹¿;Õ	R	ja  Tàª h@ùàªh ù[ãÿb"@¹a@ùfñÿ ` ¹ q¨ T  q	RR+jR Iý_)*Iý¨ÿÿ5¿;Õ ¹Çÿÿh@¹¿;Õr TàªBãÿ 1` Tàª>ãÿ 1à Tàª:ãÿô *àª7ãÿ~@©  °)ýF
@)ykø	ÒH%  ©  (	á@9IR	
	qá  TjR Iý_)2Iý¨ÿÿ5¿;Õh"@¹qa Th@¹¿;ÕSè  4h@¹¿;Õ!Sh  5 Rh" ¹h@¹j@ù	 Qi ¹H @@9h ùÿÿ    ÿÿ     ëb  T     ëàÀ_Ö    óS¾©õ[©ý{¿©ý ô ªóªö*4 µh¢@9  4`
@ù_óÿ¢ 9~© ùN  À9 5h@ùh µh¢@9  4`
@ùSóÿ¢ 9@ Ò$úÿR  ñ`
 ù   qé  qèh¢ 9i ù  5h
@ù yæÿÿ R Ò âª!Rà*± |@5 µH  Ð¡	ýßÈ ?Ö¶îÿ×îÿ  @¹%  i@ù¿	ëi Th¢@9  4`
@ù*óÿ¢ 9 úÓûùÿR  ñ`
 ù   q©  qèh¢ 9i ù  5d
@ùå	* âª!Rà* |@  µI  Ð(¡Úÿÿ Ñh ù  Rý{Á¨õ[A©óSÂ¨À_ÖóS¾©õ ù÷ ùý{¿©ý ô ªóª÷*4 µh¢@9  4`
@ùüòÿ¢ 9~© ùR  @y 5h@ùh µh¢@9  4`
@ùðòÿ¢ 9  ÒÁùÿR  ñ`
 ù   qé  qèh¢ 9i ù  5h
@ù 9æÿÿ Ò Ò R Ò âª Rà*n |@5 µH  Ð¡	ýßÈ ?ÖQîÿrîÿ  @¹'  i@ù¿	ëi Th¢@9  4`
@ùÅòÿ¢ 9àªùÿR  ñ`
 ù   q©  qèh¢ 9i ù@ 5d
@ùå	* Ò Ò âª Rà*F |@  µI  Ð(¡Øÿÿ Ñh ù  Rý{Á¨÷@ùõ@ùóSÂ¨À_ÖóS»©õ[©÷c©ùk©û# ùý{¼©ý ö ªøªø  µ:îÿÈR  ¹ÑÓÿÀRq   ù ÒÈ@ùÿ© Òÿ ùH ´SRõRáC óC 9àªõG 9ÿK 96 È@ùà  µã  Ò Òàªi    á ªàªâ È  ô *t 5È@øhýÿµóWB©©Ë(ýC ( ëª	ýCÓëí Ò Ò­ ´j@øHÀ9é
ªh  4(À8èÿÿ5(
Ë  
ë¡þÿT" ÒáªàªHåÿö ª¶  µ    óWB©   Úôªë÷ªà TÛË@ùH À9éªh  4(À8èÿÿ5(Ë IËè ùãª!àª¸ @ 5è@ùwk4ø" ëýÿT ù R  Ò1òÿöª¨Ë	 *ýCÓßëõ ÒÕ  ´À@ø'òÿ÷ ÿëÿÿTàª"òÿà*ý{Ä¨û#@ùùkC©÷cB©õ[A©óSÅ¨À_Ö Ò R Ò Ò  Ò:Ìÿ    óS¼©õ[©÷c©ù ùý{¿©ý ö ªÈÀ9éªùªôªóªh  4(À8èÿÿ5(Ë è4ªÿë	 TRý{Á¨ù@ù÷cB©õ[A©óSÄ¨À_Öè àª! ÒÇñÿõ ªô  ´ãªâªáªàªh à 5Ëãªâª b   5i¢@©?ë T`@ù µÒ Ò±ñÿ` ù  ÒÚñÿi@ù	 ´( i¢ ©   ËýC	 ð	ë TúÓáªÒª @ µ  ÒÉñÿàªÇñÿR  ÒÄñÿà*Åÿÿ`" ©	  Òi
 ù¼ñÿi@ù5 ùh@ù	! i ù Rðÿÿ Ò R Ò Ò  ÒÕËÿý{»©óS©õ[©÷c©ù# ùý ÃÿÿÃÑô ªàªöª³ X   À9½ Q	 S?µ qh  Ti&ÈÉ  7á ªàªx  ë¡þÿT	 À9?é qA T  ëà  Tãª Ò Òàªyÿÿ¬  (½ Q	 S?µ q¨  Th&Èh  6) R  	 R Ëÿ©? qÿ©à ÿK ù Òÿc9ùÖÿè@ù)½R
@¹	k! Tèc@9¨  4ê@ùH©C¹	yI©¹"½R  uòÿèc@9  5¨  4ê@ùH©C¹	yI©¹" R  ¨  4ê@ùH©C¹	yI©¹ RáÃàªíýÿèC@ù R  q Ò RàH  Ð		ýßÈâ R ?Öø ª ± Tãª Ò Òàª1ÿÿó *^  È&@©)Ë7ýC Òÿ©à ÿ©ÿ3 ùÿ£9ÇÕÿè@ù)½R
@¹	k! Tèã@9¨  4ê@ùH©C¹	yI©¹"½R  5òÿèã@9  5¨  4ê@ùH©C¹	yI©¹" R  ¨  4ê@ùH©C¹	yI©¹ Ráà3þÿõ+@ù  qà À9¹ qá  TÀ9h 4¹ qa  TÀ9è  4ãªâªáªõþÿó *3 5è£A9h  4àªñÿH  Ð¡		ýßÈáàª ?Ö ÷ÿ5Ê"@©	
Ë+ýCÿëà  T  !@
aËÒe  R  è£A9h  4àªéðÿH  Ða		ýßÈàª ?ÖècB9h  4àC@ùàðÿà*ÿÃYÂÿù#@ù÷cC©õ[B©óSA©ý{Å¨À_Ö      4þÿ    óS¾©ö ùý{¿©ý ô ªóªö*ô  µh¢@9H  4¢ 9~© ù8  @y 5h@ùh µh¢@9H  4¢ 9aìÿHR  ¹@R¢ 9 ù+  h
@ù 9îÿÿ Ò Ò R Ò âª Rà*C 	|@) µH  Ð¡	ýßÈ ?Ö&ìÿGìÿ  @¹  h@ù?ëÈûÿTd
@ùå* Ò Ò âª Rà*- |@  µI  Ð(¡êÿÿ Ñh ù  Rý{Á¨ö@ùóSÂ¨À_Öý{¾©óS©ý ùÁÿÿ	ÑH  °!	ýßÈóªT|@Ó¢ RáC ?Ö  5H  °¡	ýßÈ ?Öøëÿ  R)   ÒóS©à óS©ÿ# ùÿ#9ýÔÿè@ù)½R
@¹	k! Tèc@9¨  4ê@ùH©C¹	yI©¹"½R  kñÿèc@9  5¨  4ê@ùH©C¹	yI©¹" R  ¨  4ê@ùH©C¹	yI©¹ Rá àC{ÿÿà#@ùÿ	ÆÁÿóSA©ý{Â¨À_ÖóS¾©õ[©ý{¾©ý ôªöª¶ ù  @¹tðÿ@ù	@ù*E@ùAa ¨  ¡' @ù  ´¡  ´" R÷¿ÿÓR  " Ò RÊÁÿÑëÿÓR  ¹hÑÿ@ù	@ù*E@ùLe«@ù ´ì  ´%Á¨h%¨
ë¡ÿÿT  h}¨ëÁÿÿT¼ëÿ  ¹TÑÿ@ù	@ù*@ùHý_ QHý	©ÿÿ5¿;Õ( 5@ù	@ù @ù  ðA ë@  Tðÿ@ù@ù@ù*@ùhE@ùH ù@ù*@ùKE@ùiý_) iý¨ÿÿ5¿;ÕÀ@¹Qðÿý{Â¨õ[A©óSÂ¨À_Öq  T q` TÔqÀ  TH  ðA>Øqà	  H  ð >  H  ð Á=  H  ð =À_Öóøý{½©ý ó *àC  ÒfÔÿ©  ?
¹
 1Á  T( R(
¹I  °(
   1! T( R(
¹I  °(á		ýßÈ ?Öó *   1¡  T( R(
¹è@ù
@¹è£@9¨  4ê@ùH©C¹	yI©¹à*ý{Ã¨óAøÀ_ÖóS¿©ý{¿©ý ô ªb àª" R RFÁÿ  ðAha B øù) RÂ ø
Ë ¹His8) Qh 8©ÿÿ5fhe	Ë
 Rhii8J Q( 8ªÿÿ5ý{Á¨óSÁ¨À_Ö    ý{¾©ó ùý ÁÿÿÑó ª`@¹(½R kÀ
 TH  °!
	ýßÈáC  ?Ö 
 4 Ré£ ( 8 q£ÿÿTRè[@9ë£ 9é[  4ì£ *@9  q¢  TI(8 
kiÿÿT(-@8èþÿ5e@¹ Rä£ Râ£ ! R  Ò g@¹ RaAùå£ÿ ¹ Rã£  R  Ò) g@¹ RaAùå£ÿ ¹ Rã£ @R  Ò of, Rî£
 Ò
 Rç£æ£É%@xé  6iB,Kig8(a@92(a 9	  é 6iB,Kif8(a@92(a 9   RKi/8 J ­ Qýÿ5    ÒR
 RhQe q Th} QjB(n SIa@9(2Ha 9
  hQe q( Th} QjB(Ia@9(2iHa 9. S   Rhe9k  ­ Q­üÿ5ÿÀÿó@ùý{Â¨À_Ö    óS¾©õ[©ý{¼©ý ó *â©6 SáªàªS  à*%ÿÿè@ùô *E@ù	@¹	ka  T  R   EÒËõÿõ ªóªõ ´è@ùERE@ù´¾ÿáª¿ ¹à*  ô * 1 TêÿÈR  ¹ àªãîÿà*ý{Ä¨õ[A©óSÂ¨À_ÖV  5zåÿè@ù
E@ùHý_ QHý	©ÿÿ5¿;Õ 5è@ù E@ù  ð(A ë@  TÍîÿ( R¨ ¹è@ù ÒE ùé@ù  ðñI¹*©C¹_jÁûÿTè é£ è'©¨ R© Rè§)ãS âÃ ác àC qþÿVúÿ4è@ù	@ù  ðIùÍÿÿóS¾©õ ùý{¿©ý ô ªõªªC¹  ðñI¹?j   TJ@ùh  ´F@ù    RÖîÿF@ù¨@ùë  T³ ´hþ_ Qhþ	©ÿÿ5¿;Õè  5  ðAë`  Tàªîÿ³@ùF ùiþ_) iþ¨ÿÿ5¿;Õ  RâîÿÓ  ´àªý{Á¨õ@ùóSÂ¨À_Ö5çÿóS¿©ý{¿©ý ´  h9h 5¨  ¡'  ð(Ah
 ù  ð)A  ðh& ©¸ôÿâ ª@ cB ! R]ÿÿ( R(9  Rý{Á¨óSÁ¨À_Öý{¿©ý nôÿ¨  á'­ÿÿý{Á¨À_Öý{¼©óS©õ[©÷ ùý É¿ÿÿC Ñóªvþÿô * 4  ð!
 RÒU}@Ó¨~	iv¸?k@
 TJ _ q#ÿÿT½Rk@	 TH  °Á		ýßÈ> S ?Ö 4(½Rka Th ¹ù ¹: y
 ¹Â ø ¹àªþÿp  H  °!
	ýßÈá à* ?Ö  4ub àª" R R¾¿ÿè@¹t ¹ù	 q Tè@9é ( 4(@9è 4+@9kH TKj  ¨Jj8k Q2¨J*8J kÿÿ5(-@8(þÿ5) R) ¨Ji8?ýq2¨J)8cÿÿT`@¹þÿ) R`ù  	 Ri
 ¹Éÿÿ¨  J¹ 5  9  wb àª" R R¿ÿ  ðA! Ò RÆ ÒÏB ¨2ë
j@9j 4h@9( 4_k¨ TM ¿qB TèJm8J ig8(*èJ-8h@9­ _kÉþÿTj-@8êýÿ5 Î Qýÿ5( Rt¢ )à*Þýÿ
 Ò`ùl2 Ë RÒÍ ¨*k QJ ©yhx% xkÿÿ5ÿÿàª
þÿ  RÿC 8¿ÿ÷@ùõ[B©óSA©ý{Ä¨À_ÖóS¾©õ ùý{½©ý ó*á ªàC õ*ô*=Òÿè@ùj SÁ*	e@9?ja TÕ  4è@ù@ù	Ùjx*
  
 Rj  5  R    Rè£@9¨  4ê@ùH©C¹	yI©¹ý{Ã¨õ@ùóSÂ¨À_Ö    á *  Ò R RÖÿÿ    ¨R k TR K% q  TéTR(%Èh  7¨ qa T R  ÓR k  T(ÕR ki ThÖR kÉþÿT½R k`þÿT(½R kA  T! H  °a	ýßÈ Ö½R K q¨Ré kH TR K% q  TêTRH%È 7¨ q  ÓR kà T(ÕR kI ThÖR k) T½R kÀ  T(½R k`  T!x   R? qè? qæi  4G  ´ÿ  ¹çªH  °A
	ýßÈ ÖóS½©õ[©÷ ùý{¿©ý H  °	ýßÈ ?Öõ ªU ´¨@yëª 4éª= h  4(-Àxèÿÿ5(Ë	ýA* k
h@yÈþÿ5hË		 7ýAã* Ò Ò R Òâª R  R®ÿÿ|@Ö ´àªæóÿô ªóª´ ´å* Ò Òäªã*âª R  Rÿÿ`  4 Ò   Òàª íÿ   ÒÕ  ´H  °a	ýßÈàª ?Öàªý{Á¨÷@ùõ[A©óSÃ¨À_Ö    óS¾©õ ùý{¿©ý H  °	ýßÈ ?Öô ªt  µ Ò#  @yëª 4éª= h  4(-Àxèÿÿ5(Ë	ýA* k
h@yÈþÿ5hË		 5ýA úÓ¦óÿó ªs  µ Ò  ¢úÓáªàª¼ÿ  ÒÈìÿH  °a	ýßÈàª ?Öàªý{Á¨õ@ùóSÂ¨À_Ö    óS¼©õ[©÷c©ùk©ý{¾©ý ö ª÷*Ö  µWèÿÈR  ¹  ³  óª¡Ró ùàªlÇÿõ ª¿ ñ¤Vú` Tº  T«@ù¸@y¹  (¯@ùë¡  Tàª­  ô ªT« ù µ´  ¦@ù· 4 ´Gáÿ  ´T«@ù(¯@ùëA Tàª  ô ªT« ù  ¸ 4h µÒ  ÒZìÿ¦ ù  Òìÿ¦@ù( ´T«@ù4 µÒ  ÒPìÿ@« ù  ÒyìÿT«@ùô ´Ô ´¨ËýA@ùõª ´âªáªàª×÷ÿÀ  5¨@ù	yyx?õ q$@z`  T¨@øôÿÿ¨ËýC  ¨ËõËø·@ùH ´zuø[ìÿx 5zuø ´(@ùµ ( ù(@ùhÿÿµÒáªàª+ ô ª  ÒJìÿT ´   Òÿ ùz5ø  Ø 4õË¡
 ? ëã T ü? ë TÒàª ô ª  Ò6ìÿ´ ´ Òÿ ù} ©T« ùW 4ÈÀyéªh  4(-Àxèÿÿ5(ËýA
 A Òùëÿõ ªu  µ R  âª
 àª!ÎÿÀ 5( ©H  A q?áxá	ýßÈàª ?Ö  5´çÿHRó@ù  ¹ àª
ìÿ
  àªìÿó@ù R  §çÿÈR  ¹ àªþëÿà*ý{Â¨ùkC©÷cB©õ[A©óSÄ¨À_Ö Ò R Ò Ò  ÒÆÿóS¾©õ[©ý{¿©ý ó ªÓ  µ  Òý{Á¨õ[A©óSÂ¨À_Öh@ù	 Òêª  ´H@ø) ÈÿÿµÒ  °ëÿô ªt ´i@ùé ´Ë(Àyê	ªh  4H-Àxèÿÿ5H	ËýA  A Ò¡ëÿÀj3ø  ÒÊëÿÀjsø  ´b@ù¡ ÉÍÿà  5i@øýÿµ  ÒÀëÿàªÕÿÿ Ò R Ò Ò  ÒÞÅÿmäÿúþÿ    ý{¾©ý èªÿ ¹	1@ù*@ùK	@¹ë ø7àC ìÿè@¹  R q@  T  Rý{Â¨À_Ö      ðH	J¹	 R  R q(H	
¹À_ÖóS¿©ý{¿©ý ó ª ´  ÐA%`@ù@ù ë@  Tëÿ`@ù@ù ë@  Tëÿ`@ù@ù ë@  Tëÿ`@ù@ù ë@  Tëÿ`@ù@ù ë@  T{ëÿ`"@ù"@ù ë@  Tvëÿ`&@ù&@ù ë@  Tqëÿ`6@ù6@ù ë@  Tlëÿ`:@ù:@ù ë@  Tgëÿ`>@ù>@ù ë@  Tbëÿ`B@ùB@ù ë@  T]ëÿ`F@ùF@ù ë@  TXëÿ`J@ùJ@ù ë@  TSëÿý{Á¨óSÁ¨À_Ö    óS¿©ý{¿©ý ó ª ´  ÐA%`@ù@ù ë@  TCëÿ`@ù@ù ë@  T>ëÿ`
@ù
@ù ë@  T9ëÿ`.@ù.@ù ë@  T4ëÿ`2@ù2@ù ë@  T/ëÿý{Á¨óSÁ¨À_Ö    óS¾©õ ùý{¿©ý ô ª(ð@ Ò	ëõÕ  ´@øëÿs ëÿÿTý{Á¨õ@ùóSÂ¨À_Öóøý{¿©ý ó ª ´á Òæÿÿá Ò`â ãÿÿÒ`ÂàÿÿÒ`BÝÿÿA Ò`ÂÚÿÿ`¢@ùëÿ`¦@ù ëÿ`ª@ùþêÿá Ò`Ñÿÿá Ò`bÎÿÿÒ`BËÿÿÒ`ÂÈÿÿA Ò`B
Åÿÿ`RAùíêÿ`VAùëêÿ`ZAùéêÿ`^Aùçêÿý{Á¨óAøÀ_Ö    b  µ  R  I ÑI ´
 @y
 4( @y_k¡  T  ! ) Ñ	ÿÿµ	 @y( @y KÀ_Öý{º©óS©õ[©÷c©ùk©û+ ùý =¼ÿÿ Ñú ù*á ªàª÷ªø*ûªô*ó*NÏÿt  5H@ù
@¹ q)R( R! R Òã*âªà*'ýÿö *v  5 R;  Õ~@¨úÓ	A ?ë   ´ ñ T<  ëL  Tèß|²ýDÓ/¼ÿÿs/Ëó s ´R  mñÿó ªÓ  ´¨»Rh ¹sB    Òó ´¢úÓ Ràª)¼ÿå*äªã*âª! Rà*üüÿ` 4H  A		ýßÈâ *ãªáªà* ?Öô *   Ró  ´h_¸©»R	ka  T`B ÑsêÿHc@9¨  4J@ùH©C¹	yI©¹à*_ ÿ å»ÿû+@ùùkD©÷cC©õ[B©óSA©ý{Æ¨À_Ö    
@ Iý_) Iý¨ÿÿ5¿;Õ
p@ùÊ  ´Iý_) Iý¨ÿÿ5¿;Õ
x@ùÊ  ´Iý_) Iý¨ÿÿ5¿;Õ
t@ùÊ  ´Iý_) Iý¨ÿÿ5¿;Õ
@ùÊ  ´Iý_) Iý¨ÿÿ5¿;Õ  Ð
!
à Ë RH_ø
ë  TL@ùÌ  ´ý_) ý¨ÿÿ5¿;ÕH^ø ´L_øÌ  ´ý_) ý¨ÿÿ5¿;ÕJ k Qkýÿ5 @ùU  óS½©õ[©÷ ùý{¿©ý ó ªi~@ùi ´  ÐA%?ëà Thr@ù¨ ´@¹h 5`z@ùÀ  ´ @¹  5êÿ`~@ùrþÿ`v@ùÀ  ´ @¹  5êÿ`~@ù·þÿ`r@ùêÿ`~@ùêÿh@ùÈ ´@¹ 5h@ù ùÑúéÿh@ù Ñ÷éÿh@ù Ñôéÿ`@ùòéÿ`@ù2    Ð!v¢tâ Õ R_øë  T@ùÀ  ´ @¹  5ãéÿÀ@ùáéÿ^øÈ  ´_ø  ´ @¹H  5ÚéÿÖ"  µ Qýÿ5àªÔéÿý{Á¨÷@ùõ[A©óSÃ¨À_Ö  ´H  Ð# ë  T
pHý_ Hý	©ÿÿ5¿;Õà*    °À_Ö    óøý{¿©ý ó ªs ´H  Ð#ëà  Th^A¹¿;Õ  5þÿàª°éÿý{Á¨óAøÀ_Ö  ´H  Ð# ë  T
pHý_ QHý	©ÿÿ5¿;Õà*    °À_Ö    à ´
@ Iý_) QIý¨ÿÿ5¿;Õ
p@ùÊ  ´Iý_) QIý¨ÿÿ5¿;Õ
x@ùÊ  ´Iý_) QIý¨ÿÿ5¿;Õ
t@ùÊ  ´Iý_) QIý¨ÿÿ5¿;Õ
@ùÊ  ´Iý_) QIý¨ÿÿ5¿;Õ  Ð
!
à Ë RH_ø
ë  TL@ùÌ  ´ý_) Qý¨ÿÿ5¿;ÕH^ø ´L_øÌ  ´ý_) Qý¨ÿÿ5¿;ÕJ k Qkýÿ5 @ù²ÿÿÀ_ÖóS¿©ý{¿©ý gïÿô ªªC¹  ÐñI¹?j`  TJ@ùS µ Réÿ  ðñDùB  ó ª R¤éÿ³  ´àªý{Á¨óSÁ¨À_Öøáÿ    óS¿©ý{¿©ý óªÓ ´  ´ @ùëa  Tàª    ùàªÓþÿtÿÿ´àªÿÿ@¹èþÿ5  Ð
ë`þÿTàªÿÿðÿÿ  Òý{Á¨óSÁ¨À_ÖóS¾©õ[©ý{¿©ý ô ªõªöªU ´è	ÕëÂ  TºäÿR  ¹  Ò  ´  ´àª ó ª   Òµ~àªáª ô ª ñnUú¢  T¢Ë Rºÿàªý{Á¨õ[A©óSÂ¨À_Öý{¿©ý H  !	ýßÈ ?Ö  ð 
ù  ñàý{Á¨À_Ö  ð
ù  RÀ_ÖóS½©õ[©÷ ùý{¿©ý ô ªõªë@ TóªW  v@ùö  ´è~Aùïª ?ÖÀ?Ö S  4sB ëÁþÿTë` Tëà Ts" Ñh_ø ´u@ùÕ  ´è~Aùïª ?Ö  R ?ÖsB Ñh" ëþÿT  R    Rý{Á¨÷@ùõ[A©óSÃ¨À_ÖóS¾©õ[©ý{¿©ý ô ªóªë TV  u_øÕ  ´È~Aùïª ?Ö  R ?ÖsB ÑëáþÿT  Rý{Á¨õ[A©óSÂ¨À_Ö  ð ùÀ_Ö    óS¿©ý{¿©ý ô ª  ó ªS ´H  }Aùïª ?Öàª`?Ö`  4  R    Rý{Á¨óSÁ¨À_Öóøý{¿©ý   R¼èÿ  Ð	@ù+   ÐHEù*ÊS-Ë  RÙèÿàªý{Á¨óAøÀ_ÖóS¿©ý{¾©ý óª³ ù  @¹¨èÿ  °	@ù+   ÐHEù*ÊT-Ë`@¹Åèÿàªý{Â¨óSÁ¨À_Ö qÀ T q  T< q` TT q   TX q` T  Ò    Ð¡( ! 
    Ð¡( a     Ð á(    Ð ¡(À_Öý{¾©ý ãS âC ác àC h Ri Rè§)Éÿÿý{Â¨À_Ö  Ð¡(  © ©À_Ö    óS¼©õ[©÷c©ù ùû ùý{½©ý ô * Ò R3 R³C 9" q, T` T
 q  T qà T q  T$  . q@ T> q  TV Q q¨ Tà*¶ÿÿ÷ ª!  îÿõ ª5 µ  ý{Ã¨û@ùù@ù÷cB©õ[A©óSÄ¨À_Ö©@ùH  )Cù*  (@¹k   T)A ?
ëaÿÿT	 ÒÉ  µ£ãÿÈR  ¹:Éÿçÿÿ7!  R¿C 9 Òs  4` R*èÿö@ù  ° ³  4(@ù ÊÊV-Ëß ñ` TÖ ´. qè T"R%Ô 6¸@ù¸ ù¿ ù" qÁ Tìíÿ@¹» ¹éíÿR ¹" qÁ TH  	-Cù¨@ù
	K  i1CùH	ª ù_ëÀ  T_ ùJA ûÿÿ(@ùè ùs  4` R!èÿß ña  T  R®ÿÿ" qa TÌíÿó ªïª(  ð}Aù ?Öa@¹ RÀ?Ö  ïª(  ð}Aù ?Öà*À?Ö. qhýÿT"R%Ôý6¸ ù" q¡üÿT´íÿ ¹âÿÿs  4` Rýçÿ` R¯Ýÿý{¿©ý  1¡  T>ãÿ(R  ¹   ø7  ÐÁE¹ k T	|@  Ð*ýF)@yjø	Ò)!*á@9@  *ãÿ(R  ¹ÁÈÿ  Rý{Á¨À_Ö    óS½©õ[©÷c©ý{¿©ý õ ªU ´H  ð( RtR	}H¢
Òàª6}Ø~@ï|Óiwø±×ÿ  4` ø6Ô Q  Ó k-þÿT   	ï|Óè" (ih¸ø7qÂ  T	}|J  °HÁ> ih¸    Rý{Á¨÷cB©õ[A©óSÃ¨À_ÖóS¿©ý{¾©ý óªôª´ ù  @¹-Æÿh@ù @¹	|@*ýF  Ð)@	Òyjø)!*á@9
 6Çÿ(  ð	ýßÈ ?Ö`  4 R  (  ð¡	ýßÈ ?Öó *Éâÿ  ¹Ñâÿ(R  ¹ @¹RÆÿà*ý{Â¨óSÁ¨À_Ö    ý{½©ý à ¹ 1¡  TÁâÿ(R  ¹   ø7  ÐÁE¹ k T	|@  Ð*ýF)@yjø	Ò)!*á@9J 6èS à)àC è ùãc â ás ³ÿÿ  ¥âÿ(R  ¹<Èÿ  ý{Ã¨À_Öý{º©óS©õ[©÷c©ùk©û+ ùý g¸ÿÿÃÑö *È~@  Ð:ýF@H{yø		ÒûªxC"û3 ùé"	ø ù(@ùè/ ùhC"è ù)  ð(á	ýßÈ ?Ö Òà# ¹àãiËÿèC@ùÿ ù Rÿ ¹ Róª

@¹ëê' ¹ TÈ~@  Ð)ýFè§©+½R{À9ÿ ¹_k  °8 R T+yhø
 R	ÒhÁ-é"*ùÀ9  4­ ¿ qKÿÿTè@ù¿ qËÍ TH{yøé"È*ù@9	Éê8. Ö
KÁ6ë TèchËé"êcë
*,ù iê8k QH 8«ÿÿ5
 Rß q- TëªìchÀ8I
J _kÉ)8kÿÿT ÒH{yø­ Q	ê&k _ù 9Mÿÿ5ècÿ£©H Rß q) R8@Óãã áà â  ±` TÖ Q  i@9ÈÉé8È Á(ëk T qÿÏ©* RI RX@Óã#áCà Î  ±à TsÂ6*  I{yø
	Òë&
lõ@9 q Tè&
jÀ9B Òá	ùÀ9hR
ê9hõ 9é9  _ëÿjÀ9H S	Øèx©ø6è@ùv ßë
 TB Òáªà ¿íÿ 1 Tóª  " Òáªà ·íÿ 1
 Tà#@¹ Ò Ò¥ Rä£ã*â  Rs Ñøÿö * 4(  ð!ø/@ù	ýßÈ Òãs â*á£àª ?Öà	 4è3@ùõ@¹jKè@¹Tô ¹k£	 T+ q T¨Rè3 y(  ð!	ýßÈ Òãs " Rác àª ?Ö  4è@¹ 4è@¹ ô ¹ õ ¹è@ùë¢ Tè§F©ê'@¹@ÿÿ R ñ T
 ÒH{yøÉ
Jió8Î 	Á)ë&jù 9Ê}@_ëëþÿTè ¹!  
 R ñmÿÿT
 ÒH{yø­ é"+
Jió8jù 9ª}@_ëÿÿTðÿÿH{yø	Òé"*ù 9J{yø é ¹ë*hõ@92hõ 9  (  ð¡	ýßÈ ?Öà ¹õ@¹èCB9¨  4ê?@ùH©C¹	yI©¹à@ùá*ÿÃJ·ÿû+@ùùkD©÷cC©õ[B©óSA©ý{Æ¨À_Öý{¼©óS©õ[©÷ ùý 5·ÿ/(ÒO·ÿÿs/Ë	|@ÿ ù  Ðÿ ¹*ýF)@yjø	Òóª RtB")!ë7@ù¢ Töc èc «RñÒêc1ëb TiÀ9s ?) q  T 9!  	 8
ë£þÿTKá ¹(  ð!	ýßÈ ÒãC â*ác àª ?Ö@ 4è@)é@¹	è ¹?kC Të£ûÿT  (  ð¡	ýßÈ ?Öá@¹à ¹à@ù/(Òÿs/ú¶ÿ÷@ùõ[B©óSA©ý{Ä¨À_Öý{½©óS©õ[©ý è¶ÿ/(Ò·ÿÿs/Ë	|@ÿ ù  Ðÿ ¹*ýF)@yjø	Òóª RtB")!6@ù%  èc «RÑÒêc1ëb Ti@ys
 ?) q  T y! 	 	% x
ë£þÿTéc á ¹	ËýA(  ð!	ýßÈ ÒãC ¢zSác àª ?Ö@ 4è@)é@¹	?kè ¹C TëcûÿT  (  ð¡	ýßÈ ?Öá@¹à ¹à@ù/(Òÿs/­¶ÿõ[B©óSA©ý{Ã¨À_Öý{º©óS©õ[©÷c©ùk©û+ ùý ¶ÿO(Ò³¶ÿÿs/Ë	|@  Ð*ýF)@yjø	ÒóªvB")!è  ùë	 ¹9@ù" T(  ð!úc »R÷*ëc êèªëB Ti@ys
 ?) qa  T y	 	% x
ëÃþÿTËýA Ò Ò¥ªRä#âc  R ½R÷ÿõ *µ 4 RÕ 4è#A4ÿßÈ¢K ÒãC àª ?Ö@ 4è@¹kþÿTiKé ¹ëâ  TÓÿÿ(  ð¡	ýßÈ ?Öà ¹à@ùá@¹O(Òÿs/Q¶ÿû+@ùùkD©÷cC©õ[B©óSA©ý{Æ¨À_Ö    óS¼©õ[©÷c©ù ùû ùý{¾©ý ó *³ ¹õªö*
 1á  TYàÿ  ¹aàÿ(R  ¹,  ³ø7  ÐÁE¹k" Th~@ýF  Ð8@	Ò{wø)#*á@9ê 6à*Ãÿ {wø)#*á@9ê  7Gàÿ(R  ¹:àÿ  ¹  â*áªà*  ô *à*ÁÃÿà*  .àÿ  ¹6àÿ(R  ¹ÍÅÿ  ý{Â¨û@ùù@ù÷cB©õ[A©óSÄ¨À_Öý{º©óS©õ[©÷c©ùk©û+ ùý óµÿÿÑö *óªõ*Õ 43 µàÿ  ¹àÿÈR  ¹±Åÿ  ®  È~@  °;ýF@h{zø	Ò÷ ùê"TåÀ9þ	 S? qH  TUý7Há@9¨ (6B R Òà*àÿà*¼üÿ  4h{zøé"*áÀ9*ø6bêÿH@ù	@ù©  µh{zøé"*åÀ9* 4h{zøá é"(  ÐÁ @ù	ýßÈ ?Ö  4T 4 qÊBz¬
 TyB5ÿ ù R Rÿ ¹ë÷ª Tõ&@xà*}
 ¿" k! Tø* ô ¹¿* q! T Rt
 < S5 qá  T Ö ôÛ)ÿëâ  Tìÿÿ(  Ð¡	ýßÈ ?Öà ¹	Ò÷@ùéC 2  â*áªà*ýÿ  h{zøê"IáÀ9Éø6ô 4 q  T
 q! Tâ*áªà*þÿ
  â*áªà*×þÿ  â*áªà*8þÿà ù  èÃ @@ù ù Ò	 ¹(  Ð!	ýßÈãÓ â*áª ?ÖÀ  5(  Ð¡	ýßÈ ?Öà3 ¹éÃ (@ùê )	@¹H ùI	 ¹á@¹è@¹h 5à@¹ 4 q Tßÿ(R  ¹sßÿ¨ R  ¹dÿÿWßÿbÿÿh{zøé"*á@9 06hÀ9i q  TpßÿR  ¹cßÿ  ¹Uÿÿ K    Rÿ>µÿû+@ùùkD©÷cC©õ[B©óSA©ý{Æ¨À_ÖóS¾©õ ùý{¾©ý óª³ ùS µWßÿÈR  ¹îÄÿÀRý{Â¨õ@ùóSÂ¨À_Ö u ¹ þÿ´e  4trAþÿT¿ ¹¿ ¹æ*å*ä*ã*â ªáª C ¥ ô *´ ¹¨@¹è 4 4i¹*ýF  °)@	Òyjø*!Iá@9(Há 9`@¹³ÂÿT  4u ¹à*×ÿÿóS¼©õ[©÷c©ùk©ý{¾©ý ÷ *é~@  °ôª*ýF 9)@yjø	Òöªó*)!*áÀ9êø6u j! TàC ÿ ¹Ùÿà 5è@¹	jA Ts2i
?@q: RX R T(A@Qyr` T(@Qyr T(AQyr T 9
  3*ïÿÿ(`Rh
q  T 9   9
r  TÈÀ9è
07Õ@¹
 ¨R	 R R ¨
kà  T
 °R
kÀ T
 ¸R
k! TÈ
@¹è 4	 q©  T q	 T q! T3 R© 4b Rÿ ¹áC à*áÿ  q`ÊAzó 1  Tè@¹ qà T q Tka T 9*  B R Òà*?ßÿÀ ´ R Òà*:ßÿ ±  TµÞÿ  @¹7  ©~SÝÿÿ= ÉÿR	k¡  T¬ÞÿÈR  ¹ôÿÿéßR	k! T RA Òà*$ßÿ ±`ýÿT 9   R Òà*ßÿ ±`üÿTS 4À9 Rÿ ¹ qà  T	 qá  TèßRè ¹S R  ù ¹s R 4 RõC ¡Â4bKà*þÿ 1ùÿT kÿÿT  Rý{Â¨ùkC©÷cB©õ[A©óSÄ¨À_Ö Ò R Ò Ò  Òó¼ÿ @ ï»¿ óS½©õ[©÷ ùý{¾©ý óªô * 9 rõ*ö*×R  T q  T	 q  T]Þÿ  ¹õÃÿ 	  ´ 6
r`  T ¸R   ¨R   °R
h ¹?qè T?yr` T?qà  T?q  T?q¡ TI R   R  i R  ?q  T?q  T?q  T8Þÿ  ¹ÐÃÿh@¹	   © R  ) Ri
 ¹¿B q  T¿ q T¿Â q  T¿q T¿qÀ  T$Þÿ  ¹¼Ãÿ   	 °R	kè  h R  H R  ( R   R	Rh¦) ¹ 86hÀ92h 9´x7H já  TàC ØÿÀ 5è@¹!@q  ThÀ9a2h 9@6  °IJ¹é(**
j 87( Rh ¹T06h@¹j@¹	2i ¹i@¹H2h ¹*2j ¹ `6h@¹	2i ¹ h6h@¹	2i ¹ (6h@¹	2    6h@¹	2i ¹ý{Â¨÷@ùõ[A©óSÃ¨À_Ö Ò R Ò Ò  ÒV¼ÿ Õ @     óS¿©ý{¾©ý ó *i~@  °*ýF	Òyjø)@)!	R+á@9ja TK86B R ?Þÿô ª ± T¯Ýÿ @¹
q  TµÝÿ  @¹  " Rÿ# yáC à*üßÿè#@y  q 	ZzÁ  Táªà*[  1 þÿT R Òà*#Þÿ ±@ýÿT  Rý{Â¨óSÁ¨À_ÖóS»©õ[©÷c©ùk©û# ùý{¸©ý ó*ö ªôªùªà*â*á*èÃ ÿÿêÃ õ?@¹H%@©ëc J	@ù¿ 1h% ©j	 ù TwÝÿ   ¹ ¹}Ýÿ  @¹ü  Áÿ ¹ 1! TlÝÿ   ¹ ¹rÝÿR  ¹òÿÿ( RêG@¹ÿ+ ùÈ ¹RáF)èK ¹ès*	 èC@¹é[ ¹ Òã#â*E*(  ÐÁ	ýßÈàª ?ÖûkE)äD)÷ ªÿ ±Á Té7@¹ ¸R(k Tó 6(  ÐÁ6y 	ýßÈE* Òö ¹ã#á*àª ?Ö÷ ªÿ ±a T¹  °	Ò*ýFyjø)@*!Iá@9(+  Ði¡Há 9(ýßÈ ?ÖÝÿ´ÿÿö@¹(  Ð	ýßÈàª ?Ö` 5(  Ð¡	ýßÈ ?Öó *Ýÿ¹  °	Ò*ýF)@yjøàª*!Iá@9(Há 9)  Ð(	ýßÈ ?ÖÓòÿ5Ýÿ¨R ÿÿ q  TècÀ92   q  TècÀ92  õcÀ9@¹áªNÀÿ¹  °	Ò¸ 2*ýFøc 9yjø)@)!	Ò8á 9¹KýFykøI@)!?å 936@¹ÿÿõ *µ  4@¹Ðÿà*g  êc @¹ÿC 9H%@©ëJ	@ùãC â*áh% ©j	 ù²ýÿ@¹õ *u  4à*íÿÿ}@  °©ýF
@(ykø	ÒéCÀ9K!¨iå 9¹KýFykøI@,!õ@9(ASJ* S		R h
Jõ 9	j Ts6¹¨	Ò*ýFyjø)@+!iá@9(2há 9È	 ¸R	k¡ T 6(  Ð	ýßÈàª ?Ö(  ÐÁ	ýßÈÁz äD)E* Òã#àª ?Ö ±a T(  Ð¡	ýßÈ ?ÖtÜÿ¹¨	Ò*ýFyjø)@+!iá@9(há 9@¹rÀÿÿÿ¹¨	Ò*ýFyjø)@)!  ù  Rý{È¨û#@ùùkC©÷cB©õ[A©óSÅ¨À_Öèªá*â*ã*ä ªàª% Rýÿóøý{½©ý ó *àC WÅÿh qÈ  Tè@ù@ù	Ùsx     Rè£@9¨  4ê@ùH©C¹	yI©¹ý{Ã¨óAøÀ_Öóøý{¾©ý ó ªàC s
  ñ Tè@¹éÿR	k©ÿR)S  ´i yý{Â¨óAøÀ_ÖóS»©õ[©÷c©ùk©û# ùý{¾©ý ÷ªó@ùö ªõªøª6 ´ôª ´y Ò ÒûÿRhÀ9h  5" Ò  hÀ9h  5B Ò  h
À9 q"ãªáªàC F
  ±à T` ´è@¹k© T¿ ñI T
A@Q Rµ Ñ)J*ê ¹ yèR
U3. x   y
 
  µ ÑUûÿµôªËó ù ýA	   Ò yúÿÿó ùÜÿHR  ¹  ý{Â¨û#@ùùkC©÷cB©õ[A©óSÅ¨À_Ö Òu Ò ÒhÀ9h  5" Ò  hÀ9h  5B Ò  h
À9 q¢ãªáª  Ò
  ±@üÿTà  ´ ñA  T   éÿÿàªÝÿÿý{¿©ý   µ_  ù  Ò.  a  5  9ûÿÿ?`ra  T  9øÿÿ?Pr  T* ÒR  ?<r T R( Kýqé TJ ÒR  ?(rA Tèý¿kã Tj ÒRì
ª( 	a2i 8!|S Ñlÿÿµh*  9@ _  ù  _  ù­ÛÿHR  ¹  ý{Á¨À_Ö    óS¾©õ ùý{¿©ý ó ªô*õ*£  5hÀ9Õ qà·&   @ 5hÀ9Õ q¬ Të Ti U 4(À9  (À8Á qÀÿÿT  5hò_8      R   q ThÀ9Á q  T¶ q  Ra T	   qá  ThÀ9Á q  T¶ q  R@  T  Rý{Á¨õ@ùóSÂ¨À_Ö    óS¾©õ[©ý{¿©ý ó ªôªó  µiÛÿÓR  ¹ ÁÿÀRD  a ´_  q 9HÀ	 ?À)ë  T\ÛÿSR  ô  µXÛÿÓR  ¹ïÀÿà*3  R@ùv 9u    À9h  4    R¨ 8B Q_  qÿÿT¿ 9ø7@¹ã*â*ÿÿ SH 4© Ñ(À9  6 9(ýß8å q ÿÿT ( 9hÀ9Å q¡  T@¹	  ¹  j HÀ9é
ªh  4(À8èÿÿ5(
Ë a àªB¯ÿ  Rý{Á¨õ[A©óSÂ¨À_ÖóS¾©õ[©ÿC Ñ @¹H 4' @¹ 4 Që Q 5*@¹_ q T@¹  ¹àªÿC õ[A©óSÂ¨À_Öì 5@¹J  5 >Ô		Ê(¡
 q ¹è  ¹à	ªÿC õ[A©óSÂ¨À_Ö
 Ò Ò 1à Tî
ª}@Ó	 
xi¸KªN  µ >Ôh	Î Q­}@Ó

 1þÿThý`Ó  ) q( RK Rh  ¹à
ªÿC õ[A©óSÂ¨À_Ök TK
kê*ë Th}@	 H}@.xi¸	 xi¸ßkÁ  TJ Q_
kk QªþÿT  B  T­ 
 4è Q
 .xj¸è Q
 5xj¸( RRÊÀZJK	 S? qTRK 4©&ÖÈ!Ô.*µ"Ôÿ qÉ  Tè Q
 +xj¸h%Ö* Ò¥ Q%
ø7Ã}@Ó¦ ß k¨  TÈ|@Ó	 xi¸   RÂ QI 
xi¸È Qê ù
 
xj¸ä ¹Ô 4é@ùª%Ö­!Ôß q(!ÔOª TÈ Q
 xj¸h%Ö

*  ï@ùC  µ >Ôî	Ãê@²È½ß
ë	}@Ó©  Tè`²È	%î@²è@²?ë¨ T«~@Ó¯}@Ój}í@²è	ª_ëÉ  Ti 	?
ëÎ ÑJË)ÿÿT ´ Ò R' 4è}@Ó	 *xi¸H-í*ý`Óè 
xl¸ï _
kH
Kk%x,¸ÿk#þÿTA$ëI T
 Rç 4 Ò¨ª}@Ó H 	xl¸+xh¸­ ¿k(A+

x,¸Oý`ÓþÿTÎ Ñì*È}@Ó¥ QÆ Qeóÿ6 @¹ ê*_k TH}@Ó	 x)¸ @¹J _kCÿÿT  ¹ë  4k Qi 
xi¸j  5  ¹kÿÿ5àªÿC õ[A©óSÂ¨À_Ö  ÒÿC õ[A©óSÂ¨À_Ö    ý{º©óS©õ[©÷c©ùk©û+ ùý é¯ÿÿ,Ñô *à ýöªõªö×©àc ûªÂ è@¹7 R } qa  Tÿ 9  àc ß ÷ 9ó@ù©RÛ ùR R R ñ(±à£ È ¹ iútÓ) µÎ@ò`  Tè+@¹¨ À6H  ð±1ß ¹  ?ýñÁ ThÎ@òa  T( R  Ó ø¶	àÒ	ëa  T R  hþsÓê(*K h2× ¹ q  T	 q  T
 q` T qá TH  ð!2áªàªÅÖÿ  53 R  H  ð2øÿÿH  ðá1õÿÿH  ðÁ1áªàª·Öÿ@ 5 Rò hú@ è ù g
ýtÓé ¹) R_)@òé 9àÒà ýÍ@é3( RL RJ) T Àd °lþ`Óù*ù³	)ZR	x(Kyrõ qõ ¹) RH R+ëK ¹Òqc Tè3 ¹X R Rø¹è¹, 4
 Rì3í3©Yj¸Yj¸	kA
 TJ _	 qAÿÿTÊQÊQ
}S' RK) Ò(!Æ Qé3h Q(Yh¸* RìRä%*	ÀZHIK	K
 S_ qèZ©?Íq  Tÿ kè	
6ßÎqH T¯ QÌ Qk T
K	 Qk  Tê3NYh¸   R?k  Tè3Yi¸   R
É

%Æ(!ÇJ*ë3jY,¸ Qk`  TëK@¹çÿÿùO@¹ Rí  4é3?Y(¸ 
k¡ÿÿTùO@¹öK ¹   RÿK ¹ R÷¹ø¹Ù  ÎQÎQ
}S' RK) Ò(!Æ Qé3h Q(Yh¸* RìRä%*	ÀZHIK	K
 S_ qèZ©?Íq  Tÿ kè	
6ßÎqH T¯ QÌ Qk T
K	 Qk  Tê3NYh¸   R?k  Tè3Yi¸   R
É

%Æ(!ÇJ*ë3jY,¸ Qk`  TëK@¹çÿÿùO@¹ Rí  4é3?Y(¸ 
k¡ÿÿTùO@¹öK ¹¶ÿÿ RÿK ¹³ÿÿÚ q 
 Tès% ¹X R Rø[	¹èc	¹Ì	 4
 Rís%î3ÉYj¸¨Yj¸	ká TJ _	 qAÿÿTÀZ( RIKìR	K
 S_ qèZ	 ?	 qê'VßÎq  T RÿK ¹  É Q? 1à T( Q?k  Tê3JYi¸  
 Rk  Të3hYh¸   RHyë3hY)¸) Q? 1`  TëK@¹ìÿÿùO@¹öK ¹ÈRKt~S~~Ó Rà³¥®ÿh ) R)!È ê³÷*IY4¸÷¹}~Óèë¹¢ ´às_0ñh Tá³½¬ÿ6   q	ÀZ* RHIKìR	K
 S_ qèZ	 ? qê'VßÎq  T RÿK ¹  É Q? 1à T( Q?k  Tê3JYi¸  
 Rk  Të3hYh¸   RH}ë3hY)¸) Q? 1`  TëK@¹ìÿÿùO@¹öK ¹¨R»ÿÿ9Ò Rb®ÿiØÿ  ¹¾ÿ÷B¹øB¹HU !ø7¨~¨ý`ÓYS¹ 4I  ðÈR? qè ¹ Q)Á.3	 Rà³t
@9u@9ö~Óèë¹G®ÿi@yH  ð
ê³¢ö~Ó		@	g¬ÿéëC¹? q TèïC¹  5 Rÿ¹¦   q Tw 4	 R Rìªís¨Yk¸}
A)ªY+¸k kIý`Ó!ÿÿT 4èB¹Íqâ  TêsIY(¸èB¹ ÷¹  øB¹ Rÿ¹	 R  ÿ q¨ T÷	*÷¹@Ó"}~Ó ´_0ñàs  Tá³5¬ÿ  9Ò R	®ÿØÿHR  ¹§½ÿ÷B¹øB¹3ùÿ4 qà
 T×
 4	 R Rís¨Yk¸}
A)ªY+¸k kIý`Ó!ÿÿTÌÿÿ?kÿ»¹è'?kë³êsc1?kësê³b1?k$1 qå R R¤ 4fXn¸ 5ßkÁ TéóÈ ?Y.¸è»¹1   Rí* Re 4¿Íq  T¿kÁ  TèóY-¸è 	 é»¹LXg¸áó+Xm¸ç ÿ k}¦	A/=*A+	ê ù)X-¸ï7@¹­ è»E¹ýÿT/ 4¿Íqà T¿k¡  TèóY-¸¨ è»¹êóHYm¸	A/IY-¸/ý`Óè»E¹­ /þÿ5¿Íqà
 TÎ ßk¡øÿT÷*÷¹}~Ó ´_0ñàs  TáóÄ«ÿ  9Ò R­ÿ×ÿHR  ¹6½ÿ÷B¹øB¹) Ré 4è@¹I  Ð9Kùæÿ5õ@¹HS	uS*
Z«
KË 4H  Ð!1i Q
Yi¸
 4_ qà T× 4	 R Rì
ªís¨Yk¸}
A)ªY+¸k kIý`Ó!ÿÿT) 4èB¹Íq¢ TêsIY(¸èB¹ è¹Ö" 4	 R Rì3MÒYk¸}

A)Y+¸k kIý`Ó!ÿÿT)! 4èK@¹Íqâ Tê3IY(¸èK@¹ èK ¹  ÿ¹èÿÿúKH¨ý`ÓSw 4I  ÐÈRÿ qè ¹ Q)Á.3	 Rà³t
@9u@9ö~Óèë¹;­ÿi@yH  Ð
ê³¢ö~Ó		@	[«ÿéëC¹? q TèïC¹  5 RÿK ¹¥   q` TV 4	 R Rìªí3¨Yk¸}
A)ªY+¸k kIý`Ó!ÿÿTi 4èK@¹Íqâ  Tê3IY(¸èK@¹ öK ¹  ùO@¹ RÿK ¹ R  ß q Tö	*öK ¹3@Ó"}~Óâ ´_0ñà3  Tá³)«ÿ  9Ò Rý¬ÿ×ÿHR  ¹¼ÿögI)Sùÿ4 qà
 TÖ
 4	 R Rí3¨Yk¸}
A)ªY+¸k kIý`Ó!ÿÿTÍÿÿ?kÿ»¹è'?kë³ê3c1?kë3ê³b1?k$1 qÅ R RÄ 4fXn¸ 5ßká TèóÖ Y.¸ö»¹2   Rí* R 4¿Íq  T¿kÁ  TèóY-¸è 	 é»¹LXg¸áó+Xm¸ç ÿ kÈ|¬	A+È,*A/	ê ù)X-¸ï7@¹­ ö»E¹ýÿTO 4¿Íq@
 T¿k¡  TèóY-¸¨ è»¹ëóiYm¸è}@Ó
A)jY-¸Oý`Óö»E¹­ þÿ5¿Íq  TÎ ßkøÿTöK ¹Â~~Ó ´_0ñà3  Táó¹ªÿ  9Ò R¬ÿÖÿHR  ¹+¼ÿöK@¹ùO@¹( RH 4è@¹I  Ð÷Kçÿ5S	uS*
XK
Kâÿ4H  Ð!1i Q
Yi¸ 4_ q áÿTáÿ4	 R Rì
ªí3¨Yk¸}
A)ªY+¸k kIý`Ó!ÿÿTI 4èK@¹Íq" Tê3IY(¸èK@¹ öK ¹öþÿöK@¹ôþÿÿK ¹   Òÿë¹â³ÿK ¹9Òà3£  ácà#<ûÿô@¹( q¡ T)RìB¹i 9 s Ì 4	 R RísNÒ¨Yk¸}
A)ªY+¸k kIý`Ó!ÿÿT) 4èB¹Íqâ  TêsIY(¸èB¹ è¹   Òÿë¹â³ÿ¹9Òàsz      5 Qóª  À h 9s è@ùê@¹ ¹´ ø7 °_k

è#@ù	 Ñ?A*ëH}@Ó)14ë5  TîK@¹¶ N 4	 R Rì3Í
 XYk¸}

A)Y+¸k kIý`Ó!ÿÿT) 4èK@¹Íqâ  Tê3IY(¸èK@¹ èK ¹   Òÿë¹â³ÿK ¹9Òà3A  ácà#ÚúÿîK@¹
Rë *Kß qçç 9h}¶ÿ
ký`Ó}SHuS	
Lk	KjÁ H }S  TÁ qç   hJ-8­ Q¿ 1áýÿT¨Ëç 9% ñ)Ò(Áëá÷ÿTè@9 9 qóè@9h  4àc  à*ÿ,¢«ÿû+@ùùkD©÷cC©õ[B©óSA©ý{Æ¨À_Ö Ò R Ò Ò  Ò?´ÿ Ê;    ÍÌÌÌ    óS¾©õ ùý{¿©ý ôªõªóªs  µ  R  @ µ­ÕÿÓR  ¹D»ÿÀRý{Á¨õ@ùóSÂ¨À_Ö¿ ñSú£  Tâªáª¿©ÿîÿÿâª R«ÿ  µÕÿÓR  ëýÿTÕÿSR  ¹+»ÿà*çÿÿý{¿©ý   ý{Á¨À_ÖóS½©õ[©÷c©ý{¿©ý ÿC Ñô* q÷ ªø*õªöªó*­  T~@àª¯ªÿô * q­  Ta~@àª©ªÿó *´ 4 4 Òÿ ù Òå*äªã*âªá*àªãÚÿ  kh}	y*
 H R ÿC ý{Á¨÷cB©õ[A©óSÃ¨À_Ö    óøý{¿©ý j  ÐHñO¹ó ª! Ò	   ÒIñ¹|Ùÿ` ù  Ò¥Ùÿh@ùjR  ´Iý_)2Iý¨ÿÿ5¿;Õ R	  Iý_)2Iý¨ÿÿ5¿;Õhr h ùH Rh" ¹h@ù ¹h ùý{Á¨óAøÀ_Ö    ý{º©óS©õ[©÷c©ùk©û+ ùý ÷ªÿÿÃÑú ªöªùªú µÁ ´ ÕÿÈR  ¹·ºÿÿÃóªÿû+@ùùkD©÷cC©õ[B©óSA©ý{Æ¨À_Övþÿ´Yþÿ´? ñþÿT( Ñÿ ùûc iõ#õï © Ò7  Ë		Ö* _! ñH Tëé TÓëôª Tè~Aùïª ?Öáªàª ?Ö  qtÂÓëÉþÿTëªêªë  TËHÀ9k Ñiê8i*8I 8kÿÿµËëüÿTë@ù°  HýAÓ}è~Aùïªt ?Öáªàª ?Ö  q Tìªëª_ë  TjËhÀ8IÀ9 ÑH 9iñ8Lÿÿµè~Aùïª ?Öáªàª ?Ö  q Tëªêª_ë  TLËHÀ9k Ñiê8i*8I 8kÿÿµè~Aùïª ?Öáªàª ?Ö  q Tëªêªë  TËHÀ9k Ñiê8i*8I 8kÿÿµóªõªë© TÓëB Tè~Aùïª ?Öáªàª ?Ö  qÍþÿT  Óë( Tè~Aùïª ?Öáªàª ?Ö  qÍþÿT;  ÷ªµË¿ë) ThAùïª ?Öáªàª ?Ö  q¬þÿT¿ë Tëªêªë  TlËHÀ9k Ñiê8i*8I 8kÿÿµë7  Êÿÿû@ùë¢ T÷ËÿëI T(  }Aùïª ?Öáªàª ?ÖÀþÿ4
  ;  ÷Ëÿë	 ThAùïª ?Öáªàª ?Öàþÿ4û@ù	ËëW@©èË	ëË T_ëâ  Tw ùk {# º øõï ©ë ùë7   Túª9ÿÿëâ  Tx ùk {# ³ øõï ©ë ù_ëb  Tøª,ÿÿ7  k Ñµ" ÑëW ©{# Ñû ù+âÿ·º@ùx@ù#ÿÿ    ý{¿©ý £  µ   µA µ  R
  à  ´Á  ´c  µ  9úÿÿ" µ  9ÔÿÈR  ¹±¹ÿÀRý{Á¨À_Öë ªéªêªL  Ë ±á  Tië8h 8¨ 4) Ñÿÿµ
  ië8h 8¨  4) Ñi  ´J ÑJÿÿµJ  µ 9iûÿµ ±¡  T ñ8 
Rãÿÿ  9öÓÿHR  ¹¹ÿ@RÜÿÿý{¿©ý ¾©ÿÿ Ñ Rê 	}@? ñB T ?i*8 qKÿÿT) @9i 4ì - R+ýCÓ(	 iil8ª!ÈH	*)@8hi,8)ÿÿ5	 @9i 4+ Rì (	 )ýCÓj!È(il8_j  T	@8)ÿÿ5  Òÿ ¡©ÿý{Á¨À_Ö`°ÿ     Ò  óS¿©ý{½©ý ô ªóªô  µ¼ÓÿÈR  ¹S¹ÿ  Ò  Sÿÿ´ëÿÿTáªàC ¼ÿì@ù	@¹h  5` Ñ
  k Ñk Ñë¨  Th@9	e@9Iÿ7hË	@j	Ë@ Ñè£@9¨  4ê@ùH©C¹	yI©¹ý{Ã¨óSÁ¨À_Öý{º©óS©õ[©÷c©ùk©û+ ùý _©ÿÿC ÑúC ó*E ù qô ªûªù*õªö*÷*í  Ta~@àª®  k  w  5@ù
@¹Hs@¹*R) R R Ò qAã*âªà*Aêÿø *x  5  R  	A ?ë R  ´ ñ T<  ëL  Tèß|²ýDÓI©ÿÿs/ËôC t ´ ¹  Þÿô ªÔ  ´¨»R ¹B    ÒÔ ´å*äªã*âª! Rà*êÿÀ
 4 Òÿ ù Ò R Òã*âªá*àªÙÿõ *U	 49P66	 4¿kÌ TD@ù Òÿ ù Òå*ã*âªá*àªÙÿõ *u 59  ¨~	A ?ë   ´ ñ T<  ëL  Tèß|²ýDÓ	©ÿÿs/ËóC s ´R  GÞÿó ªÓ  ´¨»Rh ¹sB    ÒÓ ´ Òÿ ù Òå*äªã*âªá*àª[Ùÿ  4 Ò Òã*âª Rà*ö 5 R Òîéÿõ *µ 5h_¸©»R	ka  T`B ÑN×ÿ Rô  ´_¸©»R	ka  TB ÑF×ÿà*_C ÑÿC ¾¨ÿû+@ùùkD©÷cC©õ[B©óSA©ý{Æ¨À_ÖD@ùå*âÿÿh_¸©»R	kýÿT`B Ñ2×ÿåÿÿóS¼©õ[©÷c©ù ùý{½©ý ÿC Ñùªá ªà ø*÷ªö*õªô*ó*°»ÿè@¹ç*æ*åªä*è ¹ãªâ*áªà£ #ÿÿèã@9¨  4ê@ùH©C¹	yI©¹ÿC ý{Ã¨ù@ù÷cB©õ[A©óSÄ¨À_Ö    ý{¿©ý èÿ S qàý{Á¨À_Öý{¿©ý à  µÒÿÈR  ¹6¸ÿ  	  â ªh  Ð 
Eù	  ð(¡	ýßÈ R ?Öý{Á¨À_Ö    óS¾©õ[©ý{¿©ý ô ªóª  µàª¶Ýÿ$    µàªÞÖÿ   ±H T  ðv  ÐÀEù	ýßÈãªâª R ?Ö µ  ð¢Íÿ 4àª-îÿ  4ÀEùãª¨þßÈâª R ?Ö þÿ´  eÒÿR  ¹  Òý{Á¨õ[A©óSÂ¨À_Ö    ý{¾©ý à# y   4âS ! RàC ° `  4à#@y  àÿRý{Â¨À_Ö    óS½©õ[©÷c©ý{¿©ý ôª Ò" Rõ *ÅÒÿ÷ ªà*B R ÒÀÒÿÿ ± ËÀ	 T ±	 T ñM T! Ò  ÒdÖÿô ª  µ1ÒÿR   Rà*ÒÌÿ@ñ	 Rö *"¡áªà*ûñÿ 1 T RsÂ Ëà* ñm T@ñáª£ðñÿ 1áþÿT
Òÿ @¹ q  TÒÿ¨R  ¹Òÿ @¹àªiÖÿ!  á*°ÌÿàªdÖÿ R  Óÿÿ¶ Ráªà*Òÿ ±@ Tà*!¶ÿ  ða	ýßÈ ?Ö þÿ5÷Ñÿ¨R  ¹	  ð(¡	ýßÈ ?Öó *åÑÿ  ¹íÑÿ @¹ Ráªà*jÒÿà*ý{Á¨÷cB©õ[A©óSÃ¨À_Ö    ý{¿©ý ®§ÿÿC Ñh  ÐA)  ñj  ð	.?  ñ.?  ñ( ÒG?  ñg  µ  [  H
@yè 5Ë@9Î Ë 87O  ´ë ¹ qàQ  h	qa  TL R
  h
qa  Tl R  hÁqá T Rè R) RK(!È	 Q+
í*  L@9
 SK@¹ù	 S?	 q AzÃ T¿k T¿ëé ÇË  ÆÀ8ç Èqa TÈ *ÿ 	ëÿÿT?
ëâ  T¨)KK ¹L	 y	 SI
 yÀÿÿ RhKýqi TADq" TRè ¹	 R(  Ré£ )	 Ñé (yh¸kã  TO  ´ë ¹ q_ ùà  _ ùvÑÿHR  ¹  ÿC I§ÿý{Á¨À_Öóøý{¿©ý ó ªà*Ax 
é 	j T³  ´ R  R9 ` ¹_ÑÿÈR  ¹ö¶ÿÀR    ´0 ` ¹  -   Rý{Á¨óAøÀ_Öàüðü    óøý{¿©ý ó ªÔ  ` ¹ ` ¹  Rý{Á¨óAøÀ_Öóøý{¾©ý ó ª`@¹ `@¹I àC ÿ ùêÿÿ@ 5é@¹h@¹	kÁ  Té@¹  Rh@¹	k@  T  Rý{Â¨óAøÀ_Ö    óøý{¾©ý ó ªÿ ùàC Ôÿÿ 5è@ùàC é@¹h ù( 2è ¹Øÿÿ  5ê   R    Rý{Â¨óAøÀ_Ö     f	þïÒÈ)L	ë TßÍ@ò`  Tàª î
ø¶%RR# RÿÿÒH  Ð ¡ä /& RaR; ßù@òÁ  TER RC RþÿÒôÿÿîýÿ·È XÈÉ X	ëÈ Tn`t \8pp \ \¾ \+qf	}`r;g;{y*sz
|Ó
 \8yOT´
 \¶RXy×BXøêu+qR}yK]Yg^`g^;  àÒßë" TzàÒ	 \ÈªgR1:p.f   RÈÍnÓ2 \2lÈµmÓ} \l~ \bÉÒèª(-L³gÉùtÓ+KiýQ}@Ó8b
ÑH  °A2u
rymüH  °::uP \VQU \q \st \KT7yöBUymüÓFWö \t
wfY÷*u_VX}yc]Rg^`K^À_Ö Õ    VðÀ    ø ðÿ]È4<?æTUUUUµ?5q(7©¨>    xËÛ?Qñ#Ib?ÔÆº?      Ð      ?Þ^?AGÙ;BIb?WUUUUUµ?   àB.æ?<y5ï9ún> À_ÖD;Õ
àR
Jè}Sè
r  TPq  T`q   Tpq	`Rî   R  @R   Rÿr	Rêé_ qRëè q R**ìè qK RI*íè¿ q**éè}
SK	*	j	*K*`*À_Ö(D;Õî*ßr	RÊé_ q RËè qO R**Íè¿ qJ*éÈ}SK	*	j	*Ì @*À_Ö    r  Tq  Tq   Tq	 Òå   Ò   Ò   Ò
     D;Õ	}@Ó( X+ Sjª  q  ÒèIª¿ q Òèß qÒ*ªèÿ q@ÒIªèÿ  q Ò*ªè Òß  qIªè)ª*ªàÒHÊDÕÀ_Öÿ`?ü       
  r(D;Õ X
 S	ÒKªè¿ qjªéß qH ÒèK	ªÿ q Òiªèÿ  qÒ*ªèIª)DÕÀ_Ö`ÿÿÿ    é ª(À9  ÒÈ  4 ë  T  hé8ÿÿ5À_Öóøý{¿©ý s  `þDù ±Á TH  ° Á	  Ð(Á	ýßÈ Ò Rd R Òb R ¨R ?Ö`þù ±àý{Á¨óAøÀ_Ö    h   ýDù ±¨  T  Ð	ýßÈ ÖÀ_Ö    óS½©õ[©÷ ùý{¿©ý   ÐAô ªw  àþDù	ýßÈõ*öª Òãªâ*áª ?Öó * 5  Ð¡	ýßÈ ?Ö qÁ TàþDù ±¨  T  Ð	ýßÈ ?ÖH  ° Á	  Ð(Á	ýßÈ Ò Rd R Òb R ¨R ?Ö  ÐA Òàþù	ýßÈãªâ*áª ?Öó *à*ý{Á¨÷@ùõ[A©óSÃ¨À_Ö    |S
H2 rKh2 rjH2 rKh 2 rjH
2 rK
r TPq  T`q   TpqÁ  Tk2  k2  k2 rh2`À_Öì *èRj  R  TSH2rKh2rjH2rKh 2r`L 86  
2À_Ö    (D;Õ }@Óè (DÕåÿÿý{¿©ý  , 
í *D;Õ
àR
Jà*¹ÿÿé,** 
¨
N*ß k  TÈ
mSH2ßrKh2ßrjH2ßrKh2ß rjH2ß
rKÈr Tq  Tq   TqÁ  Tk
2  k
2  k	2h2ßréRjè	
@*àÒ ÊDÕÿÿý{Á¨À_Ö    óS¾©õ ùý{¿©ý õ *³ ôªÕ 6´ @6  Ò¤ sz  Õ 6´ H6@ Ò sz
  Õ  6´ P6 Ò sz  Õ 6´ X6u  6 Ò szµ  6 `6 Ò sz qàý{Á¨õ@ùóSÂ¨À_Öý{»©óS©õ[©÷c©ù# ùè' ýý ¤ÿÿÃÑy Xà ý(@`ø ª÷*áª àÒóªô*ö*õ*b pgà ùá ªà*ð ý¼ÿÿà 5¿
 qÁ  Tè@¹i Rè; ý( 3è ¹å# äC ã*â*á à)  "Åÿ S( 4 4ñÃ@máªð£mà@ùô ¹ø ùñ ýA àc #Åÿ`  5à*& à@ý  à*" à@ùáª5 à@ýÿÃV¤ÿè'@ýù#@ù÷cC©õ[B©óSA©ý{Å¨À_Ö À     M² gÀ_Ö     R  óS½©õ[©÷c©ý{¾©ý à ùóª ¹è@ùø*÷ªõªö*	 ¹é@ùô ?
 ¹Â  6ê@ù H@¹	 2I ¹Â 6ê@ùô H@¹	2I ¹Â  6ê@ùT H@¹	2I ¹Â 6ê@ù´ H@¹	2I ¹Â 6ê@ù H@¹	2I ¹h@ùí@ù	ýHÓ¨	@¹ë)*iJê*,
J¨	 ¹h@ùî@ù	ýIÓÈ	@¹ë)*iJê*,
JÈ	 ¹h@ùí@ù	ýJÓ¨	@¹ë)*iJê*,
J¨	 ¹h@ùî@ù	ýKÓÈ	@¹ë)*iJê*,
JÈ	 ¹h@ùí@ù	ýLÓ¨	@¹ë)*h 3¨	 ¹Ø     6ê@ùH
@¹	2I
 ¹  6ê@ùH
@¹	2I
 ¹  6ê@ùH
@¹	2I
 ¹  6ê@ùH
@¹	2I
 ¹   6ê@ùH
@¹	 2I
 ¹h@ù

r` T_Pq` T_`qà  T_pq! Tê@ùH@¹	 2  * R  J Ré@ù(@¹H 3( ¹  ê@ùH@¹	uI ¹ì@ù@¹	Jê*+-h
J ¹ê@ùH!@¹	 2I! ¹ë@ùh!@¹V 4	mi! ¹ê@ùð@½P ½ë@ùha@¹	 2ia ¹ê@ùHa@¹	mIa ¹ê@ù±@½QQ ½  ) R(
3h! ¹é@ùð@ý0	 ýê@ùHa@¹	 2Ia ¹ë@ù) Rha@¹(
3ha ¹é@ù±@ý1) ýZ    ÐÁ	ýßÈãC " R Rà* ?Öê@ùH	@¹¨  6h@ù	ùwi ùH	@¹¨ 6h@ù	ùvi ùH	@¹¨ 6h@ù	ùui ùH	@¹¨ 6h@ù	ùti ùH	@¹  6h@ù	ùsi ùH@¹	 r  T? q  T?	 qÀ  T?
 qÁ Th@ù	j²
  ) Òh@ù(j³h ù  I Òûÿÿh@ù	õhi ù  4PQ@½° ½  Q)@ý± ýý{Â¨÷cB©õ[A©óSÃ¨À_Ö
  À  À  À  À  À  Àý{¿©ý  qà  T Q qè  T[ÍÿHR  XÍÿ(R  ¹ý{Á¨À_Ö    (D;Õ }@Ó
 Ò*DÕÀ_Ö    D;Õ
àR
Jé!*-)|@Ó|@Ó	«ª	àÒi	Ê	DÕàªÀ_Ö(D;Õ
}@K ª+DÕÀ_Ö    (D;Õ }@ÓÀ_Ö    <@¹ R
À(I)@yL
@y(
 a Ì 4
  I@¹?@)ë£  TH@¹		?@)ëã  Tk k   J¡ £þÿT  ÒÀ_Ö    óS¿©ý{¿©ý ó ªTÿÿ   `  5  R
   aË Ûÿÿ`  µ  R  $@¹éh*      Rý{Á¨óSÁ¨À_Ö     @y©IR	ka T<@¹ªR
À(I@¹?k¡  TH1@y  R-q@  T  RÀ_Öý{¿©ý h@ù	@¹+u(Èkøj}@IË*@! ÑÀ ÿ  Rý{Á¨À_Ö Ò! 5 À9 4
 ì|j7pÀ=S %È N2
 NI>N*ê`  TIÀÚ  H>N	ÀÚ)I87(}@Ó`
Hw  ð}@ýH	S
 ¨%È 1
 )>N*ê   THÀÚ	}@Ó
Ii  lA Á< N0:°n>Nÿÿ´1
 N(>N  ´ÀÚ
}S  (>N	ÀÚ+j}SA* A ÑV  4Nì|ð À=	 
  N4n1
 Nr
 N,>NO>N	7S)>NJ%ÈH>N-

  (! Q	qSJ%ÉOL Ò
 ÒRí  µk  µL  µÏ ´ÀÚ
  ªÀÚk  ´iÀÚ  èÀÚ	_	kc Tl>Nk>NJ86k  ´iÀÚ  ÀÚ	È 	KîHðÁ<4n Nq
 NR
 N+>N/>NM>NL>NÞÿÿ) Ò
 ´(!Ê	 Ñ*KÀÚR)K  HQ(!È	 Ñ*ê`  TIÀÚ  ÀÚ	É 	K(}@ÓàH  àªÀ_Ö_  ñB TÂ  ´@8!k`  TB Ñÿÿµ Ñ_  ñt  3 @ý3.1
 (>N	ÀÚ?qà  T(}@
	 _	ë@1g  J  Ñ_A ñ  c T6N_ñ TpE@­iÁ r	À=ìªmA n 6n0À=+A 76nJÑT6n6n¹·N¸N1°N2:°nH>N( µ_ñýÿT_A ñ# TpÁ<JA Ñ6n0:°n>N µ_A ñ"ÿÿT_! ñÃ Tp@ý3.1
 (>N	ÀÚ?q  T(}@`
5  3;°nh>N( ´´:°n>Nh  ´°
 N  ì
ªð
 N	  :°n>N  ´ìª
 N  ì	ª N>Nh  ´	ÀÚ  >N	ÀÚ)(}@
  1
 N(>Nh  ´	ÀÚ  (>N	ÀÚ)(}@i
 A Ñ  J! Ñk! Ê  ´h@8!k`  TJ Ñÿÿµh Ñ_ ñàÀ_Öý{¿©ýªá ª( @ù @¹ÅÁÿ Õý{Á¨À_Öa  Ôý{¿©ýª @ù	@¹Ê  ?
kàý{Á¨À_Öa  Ô  Àóøý{¿©ýª  ù±  þÈ¨C@9È 4± (þßÈ	@ù±c )þÈ±c *þßÈé H@¹	ka T±c (þßÈ	@¹? qÁ T±c (þßÈ© !@¹	k  T±c (þßÈ	 !@¹	kà  T±c (þßÈi !@¹	k T5¬ÿ±c (þßÈ ù± )þßÈ3@ù.¬ÿ ùpÈÿ Õ±S ?þ±S  þßý{Á¨óAøÀ_Öa  Ô Õcsmà !"ý{¿©ýª @ù4°ÿ Õý{Á¨À_Öa  Ôý{¿©ýªà R*Ðÿ Õý{Á¨À_Öa  Ôý{¿©ýª¨@ù  µ @ù|Óÿ Õ @ù°ÿ Õý{Á¨À_Öa  Ôý{¿©ýª¨@ù @¹â®ÿ Õý{Á¨À_Öa  Ôý{¿©ýª`RÐÿ Õý{Á¨À_Öa  Ôý{¿©ýª¨@ù @¹Ðÿ Õý{Á¨À_Öa  Ôý{¿©ýª @ù @¹$Åÿ Õý{Á¨À_Öa  Ôý{¿©ýª¨@ù @¹ñÏÿ Õý{Á¨À_Öa  Ôý{¿©ýª @¹·®ÿ Õý{Á¨À_Öa  Ôý{¿©ýª RáÏÿ Õý{Á¨À_Öa  Ôý{¿©ýª¨@ù @ùÚ¯ÿ Õý{Á¨À_Öa  Ôý{¿©ýª¨@ù @¹ÏÏÿ Õý{Á¨À_Öa  Ôý{¿©ýª  RÇÏÿ Õý{Á¨À_Öa  Ôý{¿©ýª R¿Ïÿ Õý{Á¨À_Öa  Ôý{¿©ýª  R·Ïÿ Õý{Á¨À_Öa  Ôý{¿©ýª¨C@9  4` R­Ïÿ Õý{Á¨À_Öa  Ôý{¿©ýª¨@¹H 4¨@¹«@ù 4i¹*ýFh  )@	Òyjø*!Iá@9(Há 9`@¹c®ÿ Õý{Á¨À_Öa  Ôý{¿©ýª @ù	@¹ª R
 ¸r?
kàý{Á¨À_Öa  Ô                                                                                                                                                    +     "+     :+     T+     p+     ~+     +     ¨+     ¸+     Ô+     ê+     ú+     ,     ",     2,     B,     Z,     h,     x,     ,     ¢,     ¶,     Ä,     Ö,     ä,     ò,     Æ1     ¶1     ¨1     1     1     x1     d1     R1     81     1     1     Ä-     Þ-     ô-     
.     $.     :.     X.     l.     z.     .     .     ¤.     ².     ¼.     Ô.     ì.     
/     "/     4/     @/     R/     ^/     r/     /     /     °/     Â/     Ò/     Þ/     ê/     0     0     ,0     :0     D0     V0     h0     x0     0     0     ª0     º0     Ì0     Ö0     â0     î0             -     -     ¬-             L-     :-     &-     -     \-     l-             ð& @           4 @                   83 @   ð3 @   ÀQ @   øu@   #@                    ¬ @   è@   øR @                                   J@   °J@   B @           °ª@          Àª@          Èª@          Øª@   	       èª@   
       øª@   
       «@          «@   	       $«@          0«@   	       @«@   	       P«@          X«@   
       h«@          x«@   	       «@           «@          «@          «@          «@           «@          ¤«@          ¨«@          ¬«@          °«@          ¸«@          Ä«@          È«@          Ì«@          Ð«@          Ô«@          Ø«@          Ü«@          à«@          ä«@          è«@          ì«@          ð«@          ô«@          ø«@          ü«@           ¬@          ¬@          ¬@          ¬@          ¬@          ¬@          ¬@          ¬@           ¬@          $¬@          (¬@          ,¬@          0¬@          4¬@          8¬@          <¬@          @¬@   	       P¬@   	       `¬@          h¬@          x¬@          ¬@           ¬@          ¸¬@          Ø¬@          ø¬@          ­@          8­@          X­@   #       ­@           ­@           È­@          è­@   &       ®@          0®@          @®@          D®@          P®@          `®@   #       ®@          ®@   	        ®@          °®@          Ð®@          ð®@   %       ¯@   $       @¯@   %       h¯@   +       ¯@          ¸¯@           à¯@   "       °@   (       8°@   *       h°@          °@          °@          °°@          «@           À°@          Ø°@          ø°@          ±@          0±@          «@           È«@          Ü«@          ¬@          ¬@          è«@          ¬@          P±@          __based(        __cdecl __pascal        __stdcall       __thiscall      __fastcall      __vectorcall    __clrcall   __eabi      __swift_1       __swift_2       __ptr64 __restrict      __unaligned     restrict(    new         delete =   >>  <<  !   ==  !=  []      operator    ->  *   ++  --  -   +   &   ->* /   %   <   <=  >   >=  ,   ()  ~   ^   |   &&  ||  *=  +=  -=  /=  %=  >>= <<= &=  |=  ^=  `vftable'       `vbtable'       `vcall' `typeof'        `local static guard'    `string'        `vbase destructor'      `vector deleting destructor'    `default constructor closure'   `scalar deleting destructor'    `vector constructor iterator'   `vector destructor iterator'    `vector vbase constructor iterator'     `virtual displacement map'      `eh vector constructor iterator'        `eh vector destructor iterator' `eh vector vbase constructor iterator'  `copy constructor closure'      `udt returning' `EH `RTTI       `local vftable' `local vftable constructor closure'  new[]       delete[]       `omni callsig'  `placement delete closure'      `placement delete[] closure'    `managed vector constructor iterator'   `managed vector destructor iterator'    `eh vector copy constructor iterator'   `eh vector vbase copy constructor iterator'     `dynamic initializer for '      `dynamic atexit destructor for '        `vector copy constructor iterator'      `vector vbase copy constructor iterator'        `managed vector copy constructor iterator'      `local static thread guard'     operator ""     operator co_await       operator<=>      Type Descriptor'        Base Class Descriptor at (      Base Class Array'       Class Hierarchy Descriptor'     Complete Object Locator'       `anonymous namespace'                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ( n u l l )     (null)            À             À             À             À             À             À             À             À             À             À           ´ À           µ À                         	       m s c o r e e . d l l   CorExitProcess  0² @           ² @           hÛ @   ¨Û @    : @    : @   pÒ @   Ó @   (.@   X.@           à² @   Øì @   (í @   ÐÐ @   Ñ @   @ @    : @   @                    : @           `³ @            ³ @    : @   x² @   H² @    : @                              
      	               	      
                  
               
               !   
   5      A   
   C      P      R   
   S   
   W      Y      l   
   m       p      r   	      
      
      	            
      )      
   ¡      ¤      §   
   ·      Î      ×      Y  *                 ¹@   à¹@    º@   `º@   °º@   »@   `»@    »@   à»@    ¼@   `¼@    ¼@   ð¼@   P½@    ½@   ð½@   ¾@    ¾@   0¾@   x¾@   a p i - m s - w i n - c o r e - d a t e t i m e - l 1 - 1 - 1   a p i - m s - w i n - c o r e - f i b e r s - l 1 - 1 - 1       a p i - m s - w i n - c o r e - f i l e - l 1 - 2 - 2           a p i - m s - w i n - c o r e - l o c a l i z a t i o n - l 1 - 2 - 1           a p i - m s - w i n - c o r e - l o c a l i z a t i o n - o b s o l e t e - l 1 - 2 - 0         a p i - m s - w i n - c o r e - p r o c e s s t h r e a d s - l 1 - 1 - 2       a p i - m s - w i n - c o r e - s t r i n g - l 1 - 1 - 0       a p i - m s - w i n - c o r e - s y n c h - l 1 - 2 - 0         a p i - m s - w i n - c o r e - s y s i n f o - l 1 - 2 - 1     a p i - m s - w i n - c o r e - w i n r t - l 1 - 1 - 0         a p i - m s - w i n - c o r e - x s t a t e - l 2 - 1 - 0       a p i - m s - w i n - r t c o r e - n t u s e r - w i n d o w - l 1 - 1 - 0     a p i - m s - w i n - s e c u r i t y - s y s t e m f u n c t i o n s - l 1 - 1 - 0             e x t - m s - w i n - n t u s e r - d i a l o g b o x - l 1 - 1 - 0             e x t - m s - w i n - n t u s e r - w i n d o w s t a t i o n - l 1 - 1 - 0     a d v a p i 3 2         k e r n e l 3 2         n t d l l       a p i - m s - w i n - a p p m o d e l - r u n t i m e - l 1 - 1 - 2     u s e r 3 2     a p i - m s -   e x t - m s -          AreFileApisANSI       CompareStringEx       FlsAlloc              FlsFree       FlsGetValue           FlsSetValue           InitializeCriticalSectionEx           LCMapStringEx         LocaleNameToLCID       AppPolicyGetProcessTerminationMethod    c c s   U T F - 8       U T F - 1 6 L E U N I C O D E                                                                                                                                                                                                                                                                                     ( ( ( ( (                                     H                                                                                                                                                                                                                                                                                                                                                                  ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ 	

 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ 	

 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ                    ( ( ( ( (                                     H                                                       (                                                                 0                               È@   È@   È@   È@   È@   È@   È@   È@   È@   È@    È@   È@   °È@   È@   ÀÈ@   È@   INF inf NAN nan NAN(SNAN)       nan(snan)       NAN(IND)        nan(ind)    e+000                Ë@   ¤Ë@   ¨Ë@   ¬Ë@   °Ë@   ´Ë@   ¸Ë@   ¼Ë@   ÄË@   ÐË@   ØË@   èË@   ôË@    Ì@   Ì@   Ì@   Ì@   Ì@   Ì@    Ì@   $Ì@   (Ì@   ,Ì@   0Ì@   4Ì@   8Ì@   @Ì@   HÌ@   TÌ@   \Ì@   Ì@   dÌ@   lÌ@   tÌ@   Ì@   Ì@   Ì@   ¨Ì@   ´Ì@   ¸Ì@   ÀÌ@   ÐÌ@   èÌ@          øÌ@    Í@   Í@   Í@   Í@    Í@   (Í@   0Í@   @Í@   PÍ@   `Í@   xÍ@   Í@    Í@   ¸Í@   ÀÍ@   ÈÍ@   ÐÍ@   ØÍ@   àÍ@   èÍ@   ðÍ@   øÍ@    Î@   Î@   Î@   Î@   (Î@   @Î@   PÎ@   ØÍ@   `Î@   pÎ@   Î@   Î@   ¨Î@   ¸Î@   ÐÎ@   äÎ@   ìÎ@   øÎ@   Ï@   8Ï@   PÏ@   Sun Mon Tue Wed Thu Fri Sat Sunday  Monday      Tuesday Wednesday       Thursday    Friday      Saturday    Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec     January February    March   April   June    July    August      September       October November        December    AM  PM      MM/dd/yy        dddd, MMMM dd, yyyy     HH:mm:ss        S u n   M o n   T u e   W e d   T h u   F r i   S a t   S u n d a y     M o n d a y     T u e s d a y   W e d n e s d a y       T h u r s d a y         F r i d a y     S a t u r d a y         J a n   F e b   M a r   A p r   M a y   J u n   J u l   A u g   S e p   O c t   N o v   D e c   J a n u a r y   F e b r u a r y         M a r c h       A p r i l       J u n e         J u l y         A u g u s t     S e p t e m b e r       O c t o b e r   N o v e m b e r         D e c e m b e r     A M     P M         M M / d d / y y         d d d d ,   M M M M   d d ,   y y y y   H H : m m : s s         e n - U S       j a - J P       z h - C N       k o - K R       z h - T W   u k                        ðÝ@          øÝ@           Þ@          Þ@          Þ@           Þ@          (Þ@          0Þ@   	       8Þ@   
       @Þ@          HÞ@          PÞ@   
       XÞ@          `Þ@          hÞ@          pÞ@          xÞ@          Þ@          Þ@          Þ@          Þ@           Þ@          ¨Þ@          °Þ@          ¸Þ@          ÀÞ@          ÈÞ@          ÐÞ@          ØÞ@          àÞ@           èÞ@   !       ðÞ@   "       Ï@   #       øÞ@   $        ß@   %       ß@   &       ß@   '       ß@   )        ß@   *       (ß@   +       0ß@   ,       8ß@   -       @ß@   /       Hß@   6       Pß@   7       Xß@   8       `ß@   9       hß@   >       pß@   ?       xß@   @       ß@   A       ß@   C       ß@   D       ß@   F        ß@   G       ¨ß@   I       °ß@   J       ¸ß@   K       Àß@   N       Èß@   O       Ðß@   P       Øß@   V       àß@   W       èß@   Z       ðß@   e       øß@          Ì@          à@         à@          à@         Ï@         0à@         @à@         Pà@         `à@   	      PÏ@         pà@         à@   
      à@          à@         °à@         Àà@         `Ï@         Ï@         Ðà@         àà@         ðà@          á@         á@          á@         0á@         @á@         Pá@         `á@         pá@         á@          á@   !       á@   "      °á@   #      Àá@   $      Ðá@   %      àá@   &      ðá@   '       â@   )      â@   *       â@   +      0â@   ,      @â@   -      Xâ@   /      hâ@   2      xâ@   4      â@   5      â@   6      ¨â@   7      ¸â@   8      Èâ@   9      Øâ@   :      èâ@   ;      øâ@   >      ã@   ?      ã@   @      (ã@   A      8ã@   C      Hã@   D      `ã@   E      pã@   F      ã@   G      ã@   I       ã@   J      °ã@   K      Àã@   L      Ðã@   N      àã@   O      ðã@   P       ä@   R      ä@   V       ä@   W      0ä@   Z      @ä@   e      Pä@   k      `ä@   l      pä@         ä@         ä@         pÏ@          ä@   	      °ä@   
      Àä@         Ðä@         àä@         ðä@          å@         å@          å@         8å@   ,      Hå@   ;      `å@   >      på@   C      å@   k      å@         ¨å@         ¸å@         Èå@   	      Øå@   
      èå@         øå@         æ@   ;       æ@   k      0æ@         @æ@         Pæ@         `æ@   	      pæ@   
      æ@         æ@          æ@   ;      °æ@         Àæ@         Ðæ@         àæ@   	      ðæ@   
       ç@         ç@          ç@   ;      8ç@         Hç@   	      Xç@   
      hç@         xç@         ç@   ;       ç@         °ç@   	      Àç@   
      Ðç@         àç@   ;      øç@          è@   	       è@   
       (è@   ;       8è@   $      Hè@   	$      Xè@   
$      hè@   ;$      xè@   (      è@   	(      è@   
(      ¨è@   ,      ¸è@   	,      Èè@   
,      Øè@   0      èè@   	0      øè@   
0      é@   4      é@   	4      (é@   
4      8é@   8      Hé@   
8      Xé@   <      hé@   
<      xé@   @      é@   
@      é@   
D      ¨é@   
H      ¸é@   
L      Èé@   
P      Øé@   |      èé@   |      øé@   a r     b g     c a     z h - C H S     c s     d a     d e     e l     e n     e s     f i     f r     h e     h u     i s     i t     j a     k o     n l     n o     p l     p t     r o     r u     h r     s k     s q     s v     t h     t r     u r     i d     b e     s l     e t     l v     l t     f a     v i     h y     a z     e u     m k     a f     k a     f o     h i     m s     k k     k y     s w     u z     t t     p a     g u     t a     t e     k n     m r     s a     m n     g l     k o k   s y r   d i v   a r - S A       b g - B G       c a - E S       c s - C Z       d a - D K       d e - D E       e l - G R       f i - F I       f r - F R       h e - I L       h u - H U       i s - I S       i t - I T       n l - N L       n b - N O       p l - P L       p t - B R       r o - R O       r u - R U       h r - H R       s k - S K       s q - A L       s v - S E       t h - T H       t r - T R       u r - P K       i d - I D       u k - U A       b e - B Y       s l - S I       e t - E E       l v - L V       l t - L T       f a - I R       v i - V N       h y - A M       a z - A Z - L a t n     e u - E S       m k - M K       t n - Z A       x h - Z A       z u - Z A       a f - Z A       k a - G E       f o - F O       h i - I N       m t - M T       s e - N O       m s - M Y       k k - K Z       k y - K G       s w - K E       u z - U Z - L a t n     t t - R U       b n - I N       p a - I N       g u - I N       t a - I N       t e - I N       k n - I N       m l - I N       m r - I N       s a - I N       m n - M N       c y - G B       g l - E S       k o k - I N     s y r - S Y     d i v - M V     q u z - B O     n s - Z A       m i - N Z       a r - I Q       d e - C H       e n - G B       e s - M X       f r - B E       i t - C H       n l - B E       n n - N O       p t - P T       s r - S P - L a t n     s v - F I       a z - A Z - C y r l     s e - S E       m s - B N       u z - U Z - C y r l     q u z - E C     a r - E G       z h - H K       d e - A T       e n - A U       e s - E S       f r - C A       s r - S P - C y r l     s e - F I       q u z - P E     a r - L Y       z h - S G       d e - L U       e n - C A       e s - G T       f r - C H       h r - B A       s m j - N O     a r - D Z       z h - M O       d e - L I       e n - N Z       e s - C R       f r - L U       b s - B A - L a t n     s m j - S E     a r - M A       e n - I E       e s - P A       f r - M C       s r - B A - L a t n     s m a - N O     a r - T N       e n - Z A       e s - D O       s r - B A - C y r l     s m a - S E     a r - O M       e n - J M       e s - V E       s m s - F I     a r - Y E       e n - C B       e s - C O       s m n - F I     a r - S Y       e n - B Z       e s - P E       a r - J O       e n - T T       e s - A R       a r - L B       e n - Z W       e s - E C       a r - K W       e n - P H       e s - C L       a r - A E       e s - U Y       a r - B H       e s - P Y       a r - Q A       e s - B O       e s - S V       e s - H N       e s - N I       e s - P R       z h - C H T     s r     Ì@   B       Pß@   ,       @ø@   q       ðÝ@           Pø@   Ø       `ø@   Ú       pø@   ±       ø@           ø@           ø@   Ï       °ø@   Õ       Àø@   Ò       Ðø@   ©       àø@   ¹       ðø@   Ä        ù@   Ü       ù@   C        ù@   Ì       0ù@   ¿       @ù@   È       8ß@   )       Pù@          hù@   k       øÞ@   !       ù@   c       øÝ@          ù@   D        ù@   }       °ù@   ·        Þ@          Èù@   E       Þ@          Øù@   G       èù@           Þ@          øù@   H       (Þ@          ú@   ¢       ú@          (ú@   I       8ú@   ³       Hú@   «       øß@   A       Xú@          0Þ@          hú@   J       8Þ@          xú@   £       ú@   Í       ú@   ¬       ¨ú@   É       ¸ú@          Èú@   º       Øú@   Å       èú@   ´       øú@   Ö       û@   Ð       û@   K       (û@   À       8û@   Ó       @Þ@   	       Hû@   Ñ       Xû@   Ý       hû@   ×       xû@   Ê       û@   µ       û@   Á       ¨û@   Ô       ¸û@   ¤       Èû@   ­       Øû@   ß       èû@          øû@   à       ü@   »       ü@   Î       (ü@   á       8ü@   Û       Hü@   Þ       Xü@   Ù       hü@   Æ       ß@   #       xü@   e       @ß@   *       ü@   l        ß@   &       ü@   h       HÞ@   
       ¨ü@   L       `ß@   .       ¸ü@   s       PÞ@          Èü@          Øü@   ¥       èü@   ®       øü@   M       ý@   ¶       ý@   ¼       àß@   >       (ý@          ¨ß@   7       8ý@          XÞ@          Hý@   N       hß@   /       Xý@   t       ¸Þ@          hý@   ¯       xý@   Z       `Þ@   
       ý@   O       0ß@   (       ý@   j       ðÞ@          ¨ý@   a       hÞ@          ¸ý@   P       pÞ@          Èý@          Øý@   Q       xÞ@          èý@   R       Xß@   -       øý@   r       xß@   1       þ@   x       Àß@   :       þ@          Þ@          èß@   ?       (þ@          8þ@   S       ß@   2       Hþ@   y       ß@   %       Xþ@   g       ß@   $       hþ@   f       xþ@          Hß@   +       þ@   m       þ@          Øß@   =       ¨þ@          Èß@   ;       ¸þ@          pß@   0       Èþ@          Øþ@   w       èþ@   u       øþ@   U       Þ@          ÿ@          ÿ@   T       (ÿ@          Þ@          8ÿ@           ß@   6       Hÿ@   ~       Þ@          Xÿ@   V        Þ@          hÿ@   W       xÿ@          ÿ@          ÿ@          ¨ÿ@   ¨       ¨Þ@          ¸ÿ@   X       °Þ@          Èÿ@   Y       Ðß@   <       Øÿ@          èÿ@   §       øÿ@   v        @          ÀÞ@           @   [        ß@   "       ( @   d       8 @   ¾       H @   Ã       X @   °       h @   ¸       x @   Ë        @   Ç       ÈÞ@           @   \       øé@   ã       ¨ @   Â       À @   ½       Ø @   ¦       ð @          ÐÞ@          @          @   ]       ß@   3       (@   z       ðß@   @       8@          °ß@   8       H@          ¸ß@   9       X@          ØÞ@          h@   ^       x@   n       àÞ@          @   _       ß@   5       @   |       Ï@           ¨@   b       èÞ@          ¸@   `       ß@   4       È@          à@   {       (ß@   '       ø@   i       @   o       @          (@   â       8@          H@   ¡       X@   ²       h@   ª       x@   F       @   p       a f - z a       a r - a e       a r - b h       a r - d z       a r - e g       a r - i q       a r - j o       a r - k w       a r - l b       a r - l y       a r - m a       a r - o m       a r - q a       a r - s a       a r - s y       a r - t n       a r - y e       a z - a z - c y r l     a z - a z - l a t n     b e - b y       b g - b g       b n - i n       b s - b a - l a t n     c a - e s       c s - c z       c y - g b       d a - d k       d e - a t       d e - c h       d e - d e       d e - l i       d e - l u       d i v - m v     e l - g r       e n - a u       e n - b z       e n - c a       e n - c b       e n - g b       e n - i e       e n - j m       e n - n z       e n - p h       e n - t t       e n - u s       e n - z a       e n - z w       e s - a r       e s - b o       e s - c l       e s - c o       e s - c r       e s - d o       e s - e c       e s - e s       e s - g t       e s - h n       e s - m x       e s - n i       e s - p a       e s - p e       e s - p r       e s - p y       e s - s v       e s - u y       e s - v e       e t - e e       e u - e s       f a - i r       f i - f i       f o - f o       f r - b e       f r - c a       f r - c h       f r - f r       f r - l u       f r - m c       g l - e s       g u - i n       h e - i l       h i - i n       h r - b a       h r - h r       h u - h u       h y - a m       i d - i d       i s - i s       i t - c h       i t - i t       j a - j p       k a - g e       k k - k z       k n - i n       k o k - i n     k o - k r       k y - k g       l t - l t       l v - l v       m i - n z       m k - m k       m l - i n       m n - m n       m r - i n       m s - b n       m s - m y       m t - m t       n b - n o       n l - b e       n l - n l       n n - n o       n s - z a       p a - i n       p l - p l       p t - b r       p t - p t       q u z - b o     q u z - e c     q u z - p e     r o - r o       r u - r u       s a - i n       s e - f i       s e - n o       s e - s e       s k - s k       s l - s i       s m a - n o     s m a - s e     s m j - n o     s m j - s e     s m n - f i     s m s - f i     s q - a l       s r - b a - c y r l     s r - b a - l a t n     s r - s p - c y r l     s r - s p - l a t n     s v - f i       s v - s e       s w - k e       s y r - s y     t a - i n       t e - i n       t h - t h       t n - z a       t r - t r       t t - r u       u k - u a       u r - p k       u z - u z - c y r l     u z - u z - l a t n     v i - v n       x h - z a       z h - c h s     z h - c h t     z h - c n       z h - h k       z h - m o       z h - s g       z h - t w       z u - z a                äT     c-^Çk      @êítFÐ,    aõ¹«¿¤\Ãñ)c     dµý4ÄÒfù;lD      Ùe,Bb×E"&'O   @ÁV$§úÅgmÈsÜm­ër    ÁÎd'¢cÊ¤ï%{ÑÍpïßk>ê_     änþÃÍj¼f29.EZ%øÒqVJÂÃÚ  .¨C²ª|!@ÎóÎÄ'ë|Ã%­I   @ÝÚTÌ¿aYÜ««\ÇDõg¼ÑR¯·û)`*     !»¤¯V©G6²K]à_Ü
ªþð@Ù¨Ðk#c  d8L2ÇWÕBJäa"©Ù=<½róåtYÀ
¦ìlÙ*Óæ   [aOni*{âP+4Ý/î'PcqÉ¦éJ(.onIn   @2&@­PrùÕÑ)»Í[f.;¢Û}úe¬SÞw¢ °Sù¿Æ«%KMã -ÃûôÐ"RP(·óòWBÜ}]9ÖYø8 Ö³¹w¥zaþ·ja  ägÃV :6	ip½¾ev ëÄ&ègn	+ò2qQH¾Î¢åER   »x÷Àt ]ð°uÆÛ©¹ÙâßreLK(wàömÂCQÏÉ'U«âÖ'æ¨¦±=    @JÐìôð#Åm
Xo¿CÃ]-øHîY ú(ðôÍ?¥. qÖ¼Di}nùVyu¤  á²¹<u?Ík:´ÞFEMh¦Ûý$ßìh0'D´îA¶ÃÊXñQhÙ¢%v}qN  dûæZò­Wµ fµ) ÏÒÅ×}m?¥M·ÍÞpÚ=A·NÊÐqä×:@Oâ?«ùowM&æ¯
   1U«	ÒX¦Ë&aVjÁôuvèD,ÏG AÉ>º èÈÏçUÀúá²Dï°~ $s%rÑù¸ä®@b;zO]¤Î3AâOmm!ò3VåVÁ%×ë(ëÓw;I®-G 8­ÑÎúÛÍÞNÀhU¡]i²<$qE}  A'JnW®bìª"ïÝû¢¶äïáò½f3´7>,¸¿Þ¬dôÔNjÿ5jVg¹Û@Ê;*xh2kÙÅ¯õ¼id&   äô_û¯ÑUí¨ JøW«
þ®{¦,Ji¿)ÄÇªÒÕØvÇ6ÑUÚÇ¨ËK%vð
	¨÷t:üHå­cYçËèi×&>rä´ª["93uzKéG-wùnç@Äøð_òlÃ%BùÉs¯|ÿ-C°iu+-,W¦ïÐ @zÇåb¸èjØåÍÈÅUU¶YÐÔ¾ûX1¸EL9ÉM¬ ÅâÀLy¡É;Ñ-±éø"m^8{ØyÎrvÆx¹åyNä      ¡éÔ\lo}äçÙ;ù¡obwQ4ÆèY+ÞXÞ<ÏXÿF"|W¨Yuç&Sgwc·æë_
ýãi9è35 ¨¹1öC!ÛCZØõ«¢?h   dþ}¾/ÉK°íõáÚN¡sÛ	äîOg
©Öµµö8sÂIëÌ+_?8ö³ 7xÑßBÑÁÞ">Wß¯_åõwÊç£[R/=OçB
    ÝôR	E]áB´®.4³£o£Í?nz(´÷wÁKÐÈÒgàø¨®g;É­³VÈl ÁH[=¾Jô6ÙRMèÛqÅ!ù	EJjØª×|Lá¥u <ä     @Ôñ¾rdÁ6û«x)¯Qü9ë%0+L¡;<þ(ºüwXC¸¤ä=sÂòF|bt!Û®¶£.²Pª«9êB4©ßßþÓóÒy 7   Pñ­ÜÇ,­=87MÆsÐgmê¨QøòÄ¢áR :#×©sDºÙÏp:ÜRèR²åNû/¦M¾á×«
Oíb{ì¹Î!@fÔ ¡æuãÌò)/    äwdûõÓq=v é/}fLô3.ñ¸ó
iLs¨&`@<
qÌ!-¥7ïÉÚ´1»BALùÖlÈ¸â|íRÄaÃbªØÚÞê3¸ahð½ÌjÕÁ-    è6zÆ)ô
?IóÏ¦¥w£#¾¤[¢Ì/r5D¾¸Â¨N2LÉ­3¼ºþ¬v2!L.2Í>´þp6Ù\»BýÌFøÝ8æÒiÑþñµ>®«¹Ãoî¾     @ªÂ@Ùwø,=×áq/çÕ	cQrÝ¨¯FZ*ÖÎÜ*þÝFÎ$'­Ò#·»Ä+Ì·Êë±GÜK	ÊÜÅQæ1VÃ¨X/4Bå¿þüÿycgý6ÕfvPá¹b   a°g
ÒÀáÐ;sÛ?.£â²aâÜc*¼&Õpa%ãÂ¹u!,`j¸¢;Òs}ñ`ß×ÊÆ+ßi7¸$ífënIoÛut^6nÅ1·6ÅB(Èy®$Þ    dAÁÕ,CÙç¢.=ök=yIC©çyJæý"pÖàïÏÊ×¤½l dã³ÜN¥n¨¡EtÈTüWÆtÌÔÃ¸BncÙWÌ[µ5éþlaQÄÛºµNñ¡PçùÜqc+/Þ"     ½^<V7wã8£Ë=OÒ,÷¤tÇùÃçj8ä_¬óúìÕ¬ÁZ>ÎÌ¯p?Óm-è}oi^á,dH9¡à4X<´öH'½W&|.Úu ;¶Û-HÏm~ä$P                 	 
    % - 5 	> 
H 
R ] i u 
   ® ¾ Ï à ò -C	Y	p	
 
¹
Ó
î	%
   d   è  '    @B   áõ Ê;0   1#INF   1#QNAN  1#SNAN  1#IND               ¨À?    ?    Xt§?    0
¯?    ×A³?    Òð¶?    mº?    '¾?    ~×À?   RÂ?    +MÄ?    0ÿÅ?    «Ç?   ZRÉ?    ÉóÊ?   ÷Ì?    'Î?    ¹Ï?   À$£Ð?   \gÑ?   ÀA)Ò?   âèÒ?   @L¦Ó?   ÀaÔ?   ­Õ?   ½ÑÕ?    ÈÖ?   À×9×?    øê×?   3Ø?    GÙ?   À#óÙ?   ìÚ?   @÷DÛ?   MëÛ?   À÷Ü?   @þ2Ý?    jÔÝ?   @BtÞ?   @ß?   X¯ß?    R%à?   @>rà?   àr¾à?   ó	á?   ÀÃTá?    æá?   @_èá?   À01â?    ^yâ?   àéÀâ?    ×ã?   (Nã?   Ààã?   `Ùã?   àä?   Àaä?   @ø¤ä?    Øçä?    -*å?   Àùkå?   @@­å?    îå?   àB.æ?                Ûóy|6>ÈgÁsh>Æ[Æ^>/ÌT,X>0S:zÃb>|si­\a>é²±j%M>¢zz¹¼[>Ü¥Y#4o>wÓHýn>öôGß2k>øòôä)l>YßHÈ>0Av´VôL>3¶ü/ c>v	k¦æa>¢zz¹¼k>RU£Wk>ü¹¯qÈ9a>dÎÓÕe>B!Ñ²¼çm>dNpm>6/ÇéEiU>Ú[èöâ >ö$'´à·<>ÇF(å¬o>¾BÄ®^>&qNè]k>ÓY²áWÁm>bÖj	;>ÝLºú!\>G[ù%Ì_f>PHIZ>w_F±Gæm>÷{§]>`°hj>>dï°êu o>û3>Ò¾ñÃCë`>\³ì¯_>h_³=æñN>¥qûCF>WN@ßl>^bÚ
ª@>ìãýL-n>4©éÕôb>¾\ÌnÉgd>Zì=Ð@pn>6ÞB¿¾g>?xë±b>8õrZ>µ¾Oc>ëÓám>BÄ©*Vc>LHõ­âT>zÉÈ\åP>Ú[èöâ0>¿'»>°m>°°[·a>"ß¹«oI>bAó³e>USöY>kX>¬áê,HR><y5ï9ún>log10   C O N O U T $   user32.dll      MessageBoxTimeoutA      MessageBoxTimeoutW      F a t a l   E r r o r   i n   L a u n c h e r   Fatal Error in Launcher r b     Failed to open executable       Unable to find an appended archive.     Unable to read from file    #!  P A T H E X T   ;       P y L a u n c h e r     S T A T I C     Job creation failed     Job information querying failed Job information setting failed  making stdin inheritable failed making stdout inheritable failed        making stderr inheritable failed        U n a b l e   t o   c r e a t e   p r o c e s s   u s i n g   ' % l s ' :   % l s       control handler setting failed  Failed to get exit code of process      . e x e         / u s r / b i n / e n v         Expected to find a command ending in '.exe' in shebang line: %ls        Expected to find whitespace after '/usr/bin/env': %ls   Unable to find executable in environment: %ls   Expected terminating double-quote for executable in shebang line: %ls   < l a u n c h e r _ d i r > \           Terminating quote without starting quote for executable in shebang line: %ls    Failed to find shebang  Expected to find terminator in shebang line     Expected to decode shebang line using UTF-8     Expected to find '#' at start of shebang line   Expected to find '!' following '#' in shebang line      Expected to find executable in shebang line     Expected to find arguments (even if empty) in shebang line      Expected to be able to allocate command line memory     " % l s "   % l s   " % l s "   % l s       îb       Z         îb          Ü Ü     îb    
   ¤  ð ð             8                                                                                       @@                   ø¢@                                                                                                                                                                                          ¨N@                                                           RSDSÀªè=Iñ×¤U+   C:\Users\Vinay\Projects\simple_launcher\ARM64\Release\w64-arm.pdb       Ô   Ô       Ó   GCTL     .text     Hs .text$mn    P   .text$x    ø  .idata$5    ø¢    .00cfg   £    .CRT$XCA    £    .CRT$XCAA   £    .CRT$XCZ    £    .CRT$XIA     £    .CRT$XIAA   (£    .CRT$XIAC   0£    .CRT$XIC    H£    .CRT$XIZ    P£    .CRT$XPA    X£    .CRT$XPX    h£    .CRT$XPXA   p£    .CRT$XPZ    x£    .CRT$XTA    £    .CRT$XTZ    £ ðt  .rdata     .rdata$zzzdbg       .rtc$IAA         .rtc$IZZ    ¨    .rtc$TAA    °    .rtc$TZZ    À   .xdata  È' <   .idata$2    (    .idata$3    ( ø  .idata$4    + Æ  .idata$6     @ 
  .data   J 8  .bss     p è  .pdata    P  .rsrc$01    P ÈQ  .rsrc$02                                                  *áããÑÈ*äÑÈ*äããã °áãããäÀäãØ ¸ÿÿÿ °áãããäÀ@äãØ ¸ÿÿÿ9 0áÈÈäãØ Èÿÿÿ°  âBÀÑÈ&äãí  á@ÀtÉÈ&äãã  áäã @ @ ää    áä - @( @ áÔäãããh P\ @ áÐ$äãã ?     P4  x5  P x5  °5  À5  P x5  
 @   äãã4 páäã ?     X7  8  x 8   @   äãã @ @ áäã' @" @ á"ä! @ @ á"ä. P( @ á"ä ?     dB  xB  ¤ xB  B @9   Ôä @  ää  ä    @0 @â
JÊÉÉÈ,äJÊÉÉÈ,ä @0 @â
JÊÉÉÈ,äJÊÉÉÈ,ä @ @ áäã  ä   9  ä     ä   H  ä   ) @8! @ÊÉÉÈÈBäÊÉÉÈÈBä  b 0áÉÉÈÈäãØ ¨ÿÿÿ P @ á"ä ?      F  LF  ¬      @   äããV P$ @ áÉÈ&ä ?     O  lO  Ì     O  @P  Ì     . P
 @ áÉÈ&ä ?     <M  xM  Ì     M   M  Ì     / P
 @ áÐ$äãã ?     (T  @T  ì     
 @
   äãã P @ á"ä ?     °U  ¼U  ¬     + @ @ áÉÈ&ä P @ áÐ$äãã ?     °W  ÄW  ¬     b PR   áÉÈÈäãããØ ¸ÿÿÿc PS   áÉÈÈäãããØ ¸ÿÿÿ2 0áÐÈäãØ ÈÿÿÿÒ P   áÈÈäãØ Èÿÿÿ! pá"ä ?     8          	 @   äãã> P4 @ áÈ$äãã ?     Ì  l  D          D      0áÉÈÈäãããØ ¸ÿÿÿ  äãã* P @ áÑÈ&ä ?     D  `  ¬     © @ @ áÒÉÉÈ*äJ @? @ áÑÈ&äR @G @ áÑÈ&ä  áÔäããã5 @0 @ áÔäãããC P> @ áÐ$äãã ?     L§  ¼§    ¨   pá"ä ?     ø¦   §  d     ! páÈ$äãã ?      ¬  l¬  ¬      pá"ä ?     ð­  ü­  d      pá"ä ?     8®  D®  d     
 áÔäããã ?     H´  `´     `´    áäãF páÒÑÉÈ(ä ?     \Á  Á  Ð     N páÒÑÉÈ(ä ?     TÉ  É  Ð      páÔäããã ?     èÐ   Ñ  Ì     5 páÈ$äãã ?     0Ü  ÈÜ  ð     1 pá"ä ?     Ý  Ý       ; páÈ$äãã ?     ÔÝ  Þ  4      páÔäããã ?     ¬à  Øà  ð     Ñ @ @ áÐ$äãã; @6 @ áÐ$äãã. @* @ á"ä pá"ä ?     xæ  æ  d      pá"ä ?     Pç  hç  d      pá"ä ?      ç  Üç  d      pá"ä ?     Ðæ  ç  d     s @E @ áÐ$äãã/  ä   7  ä   *  ä   5  ä   2 @
 @ áäã @ @ áÉÉÈ(äãã= `áÈÂ$äãã @
 @ á"äh `áÑÐ$ä @ @ áÒÉÉÈ*äd @ @ áÑÉÈ(äããÚ PÑ   áÑÉÈÈäãØ ¨ÿÿÿB 0áÈäãããØ ØÿÿÿJ `áÐÂ$äãã¤ 0áÑÈÈäãããØ ¸ÿÿÿ2 P- @ áÐ$äãã ?      ô X     \ @+ @ áÈ$äãã 0áÐäãããØ ØÿÿÿV páÈ$äãã ?      8 d     Ì @À @ áÉÉÈ(äãã: @ @ áÈ$äãão 0 áÒ
ÉÉÈÈäãããØ ÿÿÿ P @ á"ä ?     Ø, ì, x      páÔäããã ?     ü/ 0       P% @ áÒÑÉÈ(ä ?     D2 ô2 ¸     3 3 ¸      pá"ä ?     L0 h0 d     - pá"ä ?     ð4 l5       F páÒÑÉÈ(ä ?     t? °? Ð     Ì 0 áÒ
ÉÉÈÈäãããØ ÿÿÿ40 áÒ
ÉÉÈÈäãããØ ÿÿÿN 0áÑÈÈäãããØ ¸ÿÿÿL 0áÈÈäãØ Èÿÿÿ_ 0 áÒ
ÉÉÈÈäãããØ ÿÿÿ6 P @ áÐ$äãã ?     C °C à      @   äãã @ @ áÑÈ&äº @¬ @ áÉÉÈ(äããj @F @ áÒÉÉÈ*ä* @ @ áÐ$äããgP V  áÒ
ÉÉÈÈäãããØ ÿÿÿû @      =   ò   ÷   È$äãããP    áÒ
ÉÉÈÈäãããØ ÿÿÿ8 @ @ áäã+ P'   áäãØ èÿÿÿÂ P °   áÒ
ÉÉÈÈäãããØ ÿÿÿr 0áäãØ èÿÿÿN P D   áÜ	ÑÉÈÈäãããØ ¨ÿÿÿ pá"ä ?     @  @   @   äãã @  ää  @ @ äìää    @  âBäBä    ä   c  ä   ô  ä       (         -    Ø*         z- À¢ ¸*         ¸-  ¢                     +     "+     :+     T+     p+     ~+     +     ¨+     ¸+     Ô+     ê+     ú+     ,     ",     2,     B,     Z,     h,     x,     ,     ¢,     ¶,     Ä,     Ö,     ä,     ò,     Æ1     ¶1     ¨1     1     1     x1     d1     R1     81     1     1     Ä-     Þ-     ô-     
.     $.     :.     X.     l.     z.     .     .     ¤.     ².     ¼.     Ô.     ì.     
/     "/     4/     @/     R/     ^/     r/     /     /     °/     Â/     Ò/     Þ/     ê/     0     0     ,0     :0     D0     V0     h0     x0     0     0     ª0     º0     Ì0     Ö0     â0     î0             -     -     ¬-             L-     :-     &-     -     \-     l-             ÐGetStartupInfoW éSetConsoleCtrlHandler .SetInformationJobObject AQueryInformationJobObject ØSearchPathW -SetHandleInformation  ÙGetCommandLineW ÒGetStdHandle  $ AssignProcessToJobObject  tGetModuleFileNameW  öGetTempPathW  èMultiByteToWideChar ©FormatMessageW  aGetLastError  »LoadLibraryA  ØWaitForSingleObjectEx  CloseHandle KSetStdHandle  	SetCurrentDirectoryW  ®GetProcAddress  Ô CreateJobObjectA  `ExitProcess è CreateProcessW  ­FreeLibrary OGetFileType =GetExitCodeProcess  KERNEL32.dll  «PeekMessageW  ÜWaitForInputIdle  v CreateWindowExW µ DestroyWindow ¯PostMessageW  GetMessageW USER32.dll  = PathCombineW   PathRemoveFileSpecW OStrStrIW  SHLWAPI.dll DQueryPerformanceCounter GetCurrentProcessId GetCurrentThreadId  éGetSystemTimeAsFileTime bInitializeSListHead nSetUnhandledExceptionFilter xGetModuleHandleW  ÒRtlUnwindEx 1SetLastError  FlsAlloc  FlsGetValue FlsSetValue FlsFree 3EnterCriticalSection  ·LeaveCriticalSection  _InitializeCriticalSectionEx DeleteCriticalSection YRaiseException  jReadFile  ØGetCommandLineA WriteFile GetCurrentProcess TerminateProcess  wGetModuleHandleExW  #SetFilePointerEx  þGetConsoleMode  gReadConsoleW  DHeapAlloc HHeapFree  ^InitializeCriticalSectionAndSpinCount TlsAlloc   TlsGetValue ¡TlsSetValue TlsFree ½LoadLibraryExW   CompareStringW  «LCMapStringW  ×GetStringTypeW  wFindClose }FindFirstFileExW  FindNextFileW IsValidCodePage ´GetACP  GetOEMCP  ÃGetCPInfo þWideCharToMultiByte 8GetEnvironmentStringsW  ¬FreeEnvironmentStringsW SetEnvironmentVariableW ´GetProcessHeap  ¡FlushFileBuffers  GetConsoleOutputCP  Î CreateFileW MHeapSize  KHeapReAlloc SetEndOfFile  WriteConsoleW                                           2¢ß-+  Í] ÒfÔÿÿÿÿÿÿ   ÿÿÿÿ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ÿÿÿÿÿÿÿÿ         


           òÅ@   ÿÿÿÿ            ðÀ@                                                                D@                           D@                           D@                           D@                           D@                                           PI@                   pÃ@   ðÄ@   àÈ@                                                    B@   D@   C                                                                                                                                                                                                                                                                                                                                       abcdefghijklmnopqrstuvwxyz      ABCDEFGHIJKLMNOPQRSTUVWXYZ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   abcdefghijklmnopqrstuvwxyz      ABCDEFGHIJKLMNOPQRSTUVWXYZ                                                                                                                                                 ¤  `y!       ¦ß      ¡¥      àü    @~ü    ¨  Á£Ú£                        þ      @þ      µ  Á£Ú£                        þ      Aþ      ¶  Ï¢ä¢ å¢è¢[                 þ      @~¡þ    Q  QÚ^Ú  _ÚjÚ2                 ÓØÞàù  1~þ    èI@   Z@   Z@   Z@   Z@   Z@   Z@   Z@   Z@   Z@   ìI@   Z@   Z@   Z@   Z@   Z@   Z@   Z@   .   .   þÿÿÿ    þÿÿÿÿÿÿÿu   K                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           D   P H  , d  8 p  @ Ä  `           à  ¤    ¬ À  # |  # `  #   $# à  '    ' 0  ' P  ¬'   ´'    ¼'   ] ãx  À ð  ] ãP  ¥ ã    ¥ ã°   Ø !  ð `!   fè!  Qe8$  
eH%  ] à ¨%  å á&  ] aø&  U bP'  ùfH)   0*   ð,  -e /  , Ø2  < ð2    3   à  3    83  X ð3   à 4   à (4  h È5   à à5  Ø P6  ] à °6  ä P7  ¬  8  9 aX8  E a 8  I aè8   à 9  Ý b8:  5 à °:  Y `;  } à ¨;  ð 0<  e ä<  e ä ?  ¡i¨A  = à èA  % à B  ü ÐB   à èB   à  C   @C  äXD  y aÐD  E aE  U à pE  m eàE  è `F  ebÈG  ÁéI  Ð °K  Í fL  e äèL  P ÐM  å fèN   @P  í e0Q   à ÀQ  !èøR  u ä S   `T  a aÀT   bXU  ¼ ÐU  y áXV  à XW  ð ØW  
bèX  -ã Z   à H[  A à [   ]  4  ^  ¥ ãH_  ¥ ãpc  m eàc  m ePd   af  ­ d¸f  ­ dhg  5b¨i  )b¸l   a@m  µà  o  ¹à Àp  ect  d Pw  © ãøw  © ã x  âÀz  âà|  Õ a¸}  Å c~  5fÀ  =ç  ­ bÀ  Á ã  õ ãx  P @  ¹ dø  Å eÀ  Å e  EèÐ  Eè  |    ± àP  í ã@  E à ¨  ¨    µ ãh  5 à    à ¸  U b  ø x  M à È  Ae  (  È     x  	e   ] b  QçØ  q aH  äà  á äÀ   } b@¡  y b¸¡  <  à¢  L  (¤  U b¤  U bà¤   bx¥   b¦  q ex¦  ] äØ¦     §  x  @¨  h  ©  \  ©   â¨ª  A à èª  Q à  ¬  À   ¬  1 `Ð¬   ap­  M à Ð­  ä  ®  ! `®  ½f °  Iix±  = àð±  A `H²  - à x²   à ²  M aà²   à  ³  ] b`³  ] aÀ³  % à è³  E à 0´  $! h´   à è´  H! Hµ  çÈ¸  éçÀ  a axÀ  ) à  À  ) à ÈÀ  P! àÁ  Á c°Â  ñé Ä  éÀÆ  ái È  x! ØÉ  ­éÎ  ý gÏ  IiÐÐ   ! Ñ  E b`Ñ  ± ãÒ  a apÒ  y äÓ  m e¨Ó  %iÐÕ  e b@Ö  Y aÖ  õ i×  m b Ø  q bpØ  q bàØ   ãhÙ   äøÙ  õ iðÚ  u ã¨Û  e ãÜ  Ä! èÜ  è! °Ý  "  Þ  a ` ß  µ b¸ß  e a(à  i aà  ," á  ä â  P" hå  ­ ã(æ  - `Xæ  |" °æ  Ü" 0ç  " ç  ¼" ðç  É à¸è  - aèè  í `Øé  m bHê  `" 8ë  p" ðë  å ãØì  M à (í  9 a`í  ¡ ã î  - `0î  - ``î  uãàï  ü" °ñ  M a ò  M aPò  qiÀõ  Õ åö  8# Ðø  ¹fú  g¨û  ,# pü  L# hý  1d¸ÿ  Y à   Ý ãð   f ½ `@ X# h äð d#  p# È	 # X # È È# ð ´# ø 8$   © aH  bÐ $$ à $ P ì#  q b ! à ¨ Ô# 8  ã( %eP Í ã  \$ P" p$ @# E `¨# -bØ$  bh% Q ã¸% Í aÐ& $ ) Qe+ I a , $ - y b- ¡ ä(. 1 à h. Á e(/ a ä/ Q bè/ À$ 00  % è0 1 `01 ä$ 3 } à 4 ¹ fÐ4 @% 5 ¡ à(6 ¤% ø: À% 0< Ø% `= ì% à> `% ø? % (C &  D L& èF <& `I Ù â8J éàN a a@O I áO `& 0Q Õ à R Õ ãàR Qä0T ¤&  X & Ài t& hj  à j Å fHk  aèk Ä&  p ä& àp ð& q ± bHr ' Pu ¥ çøu ! à v M à hv Å ä0w = `pw ­f y $' èz y ah{ 1 a{ e á | ] á e a õ e  é à ð © ã 4' è æ = à 0 T' Ø 9 à P   x Ì ¤   ¬  Ì  ì °    D  d    ¬  Ð  ð    4  X  x    ¸   à 0& @ t'                                           0     x          ¨                    À     Ø     ð              8    P                e   h                f                                          °                     À                     Ð                     à                     ð                                                                                      0                 	  @  P è          8 (          ` ¨           h          p ¨%          º ¨          ÀÊ h          (Ï h           Ï           Ò }          (       @                                 ... GGG WWW iii uuu        §§§ ¹¹¹ ÀÀÀ ××× þþþ ÿÿÿ        ÿÿÿð     Ì ÇwwÏ    Ïÿïüüww||ð   ïÿÌüÏÿÌ÷wwÏÇð  üÏÿïÿÿÿ÷wwwwð  èÏÌÌÌÿÿ÷wwÿÿÿÿ ÿÿÿïÿüf÷wwwww|ðìÏÿÌÿÆf÷wwwwwwÏøÏÿïÿffüwwwwwwÿÿÿÌÏffÏÇwwwwwüÏÿïÿfflÿÿÿüwwèÏÌüÏffffffÏÇwÿÿÿïÿffffffl÷wüÏÌÌÏÆffffff÷wÏøÏßïÿüffffff÷|ðÿÿÏÌÿÿÿÿüffÿÿ üÏùßÿÿÿöffffð  èüÌüÌöÏÆffð  þR\Ißÿÿülfflð  ¼É)ÌÏÿÆffÏ   Ø­ïÿÿÿÿÿÿø   ý2LÌÏÌÏÿð   ü©18ïÿÿÿÿÿð   øÍÏ¤"¬Ìø      ÿÿÿìA<ÿøÿÿø   üÏÌÎ£TÌøüÏÀ   øÏÿÿýU¿øüø    ÿÿÌÌÌéøÿÀ    üÏÿÿÿÿìèø     øÏÌÌÌÌÌØÀ     ÿÿÿÿÿÿÿø      À      üÀà?                                           ?  ?  ?  ?  ?  ?    ÿ ÿ ÿ ÿ ÿ ÿ(                                        444 MMM SSS zzz        ªªª ´´´ ÀÀÀ ÖÖÖ ååå þþþ ÿÿÿ p   °  p°·ÿÿð {p{ÿ¶f¿ ¿ï¿fko ïÿÿf¿ÿÿ¿ë_fffkîõ_¶fffå[ÿÿûf}ÉåUUU¿fL4«UUU_kJqOÿÿµ_ÿ~'¿[U_ ÿ£¿µU¿ ¿¹ÿÿð ÿÿí÷÷° wwwww{  ~ÿÿ ÿ ÿ  ÿ  ÿ  ÿ  ÿ  ÿ  ÿ  ÿ ÿ ÿ ÿ ÿ ÿ(       @                                 %%% +++ 000 === AAA III MMM QQQ VVV YYY ]]] ~dF ggg jjj mmm rrr uuu }}} ¡u? «z= ³~; gE kC oA r@ »: ­I b ·p ÆK Ð£k (¾ÿ ,Âÿ 1Æÿ ?Äÿ 5Êÿ <Îÿ \Íÿ CÔÿ KÚÿ Qßÿ sßÿ Uâÿ [çÿ càÿ bìÿ           ¥¥¥ ªªª °°° µµµ ¹¹¹ ¼¼¼ ÓÃ° ñÿ µðÿ ÅÅÅ ÉÉÉ ÍÍÍ ÑÑÑ ÔÔÔ ÚÚÚ ÝÝÝ ïåØ Óòÿ ááá ååå ééé ôïê ãùÿ ððð ÷÷÷ þþþ     /  P  p    
°  Ï  ð   ÿ =ÿ1 [ÿQ yÿq ÿ µÿ± ÔÿÑ ÿÿÿ     /  "P  0p  =  L°  YÏ  gð  xÿ ÿ1 ÿQ ®ÿq Àÿ Òÿ± äÿÑ ÿÿÿ     &/  @P  Zp  t  °  ©Ï  Âð  Ñÿ Øÿ1 ÞÿQ ãÿq éÿ ïÿ± öÿÑ ÿÿÿ     /&  PA  p[  t  °  Ï©  ðÃ  ÿÒ ÿØ1 ÿÝQ ÿäq ÿê ÿð± ÿöÑ ÿÿÿ     /  P"  p0  >  °M  Ï[  ði  ÿy ÿ1 ÿQ ÿ¯q ÿÁ ÿÒ± ÿåÑ ÿÿÿ     /  P  p  	  °
  Ï  ð  ÿ  ÿ>1 ÿ\Q ÿzq ÿ ÿ¶± ÿÔÑ ÿÿÿ     /  P  p !  + ° 6 Ï @ ð I ÿZ ÿ1p ÿQ ÿq ÿ² ÿ±È ÿÑß ÿÿÿ     /   P 6 p L  b ° x Ï  ð ¤ ÿ³ ÿ1¾ ÿQÇ ÿqÑ ÿÜ ÿ±å ÿÑð ÿÿÿ     , / K P i p   ¥ ° Ä Ï á ð ðÿ ò1ÿ ôQÿ öqÿ ÷ÿ ù±ÿ ûÑÿ ÿÿÿ      / - P ? p R  c ° v Ï  ð ÿ ¦1ÿ ´Qÿ Âqÿ Ïÿ Ü±ÿ ëÑÿ ÿÿÿ      /  P  p   ! ° & Ï , ð >ÿ X1ÿ qQÿ qÿ ¦ÿ ¿±ÿ ÚÑÿ ÿÿÿ                   _______            CCBABAD     L*(%$""&G         ABJIIDDJC??AD_-(''%$GG#_       DIJIIJIIIDIJDD_+)(''%GG _      JMCEJ?ABAECA?BA_,+)('%%"!_      IM@AJACDCIDI____.,++>________   JMJJJJJJJJJF_..,+)('%$"! #G  IMCEJJJI?J__...,+(('%$"! &_ JM?AJJJJCJ__...,+)(''%$"  _ IMJJJJJJJJ_K=...,++(''%$! _ JMCDJJJJAJ_K_______L*%$"!_ I_?AMNJJEJ_L'%$"_ I_MMMMMMJJ__('%%_ I_CEMIJJMEM_(''*_ I_?BMDJEMDMF_)(-L  I_MMMCMMMMM_________<____   I_CEM1;MACDMEJM__      I_?A_D1@IJJMJMM_FF_      I__6_@/EMMMNMM_FF_      I_C80EJDMJCJFF       ?:AA20?_M_MIEM______M        IC4BC/
N______MMMMJIDA        I_9/	HJJMMJMMMJ??BA        I_A7503	IJMMCBCBA44CC        I___BAO;6___C_MJIDIDM        I_CI___O;
@__C_C?J?AJ         I_?A_DJJI@O_CM?;I?J          I_________H9MAIJJIJ           I_CD_____JJI73C;IJIJ            I_?AMDJJDIMJIE5:JIJ             I__________MMIA:IJ              JJJJJJJJJJJJJJJMJ              ÿÿÀø?à  À                                         ?            ÿ ÿ ÿ ÿ ÿ ÿ ?ÿ(                                        444 MMM RRR YYY ~eG uuu }}} §x> iE rC ´E °~ 7Èÿ ?Ñÿ H×ÿ Vâÿ bìÿ xâÿ    ¡¡¡ ¤¤¤ ªªª ³³³ ´´´ ººº ¼¼¼ ÕÀ§ çÿ °ðÿ ÄÄÄ ÎÎÎ ÝÝÝ äâß âââ äää ëëë ììì òñï ãùÿ õõõ ýýý ÷ÿ ±ùÿ Ñûÿ ÿÿÿ      /!  P7  pL  c  °y  Ï  ð¦ ÿ´ 1ÿ¾ QÿÈ qÿÓ ÿÜ ±ÿå Ñÿð ÿÿÿ      /  P  p"  ,  °6  Ï@  ðJ ÿ[ 1ÿq Qÿ qÿ ÿ² ±ÿÉ Ñÿß ÿÿÿ     /  P  p    
°  Ï  ð   ÿ =ÿ1 [ÿQ yÿq ÿ µÿ± ÔÿÑ ÿÿÿ     /  "P  0p  =  L°  YÏ  gð  xÿ ÿ1 ÿQ ®ÿq Àÿ Òÿ± äÿÑ ÿÿÿ     &/  @P  Zp  t  °  ©Ï  Âð  Ñÿ Øÿ1 ÞÿQ ãÿq éÿ ïÿ± öÿÑ ÿÿÿ     /&  PA  p[  t  °  Ï©  ðÃ  ÿÒ ÿØ1 ÿÝQ ÿäq ÿê ÿð± ÿöÑ ÿÿÿ     /  P"  p0  >  °M  Ï[  ði  ÿy ÿ1 ÿQ ÿ¯q ÿÁ ÿÒ± ÿåÑ ÿÿÿ     /  P  p  	  °
  Ï  ð  ÿ  ÿ>1 ÿ\Q ÿzq ÿ ÿ¶± ÿÔÑ ÿÿÿ     /  P  p !  + ° 6 Ï @ ð I ÿZ ÿ1p ÿQ ÿq ÿ² ÿ±È ÿÑß ÿÿÿ     /   P 6 p L  b ° x Ï  ð ¤ ÿ³ ÿ1¾ ÿQÇ ÿqÑ ÿÜ ÿ±å ÿÑð ÿÿÿ     , / K P i p   ¥ ° Ä Ï á ð ðÿ ò1ÿ ôQÿ öqÿ ÷ÿ ù±ÿ ûÑÿ ÿÿÿ      / - P ? p R  c ° v Ï  ð ÿ ¦1ÿ ´Qÿ Âqÿ Ïÿ Ü±ÿ ëÑÿ ÿÿÿ      /  P  p   ! ° & Ï , ð >ÿ X1ÿ qQÿ qÿ ¦ÿ ¿±ÿ ÚÑÿ ÿÿÿ        !        %///*    !*/  "(%%'%/)
/  !#''////+/+ "*(/
/

!%(/
(

  (*/(///)
*/
	)*

	/"/////	/+ ///#
		+   !%//
+  "*+'#+//+'   !%*++$++!+!        !!!       <                                                 (   0   `                                                                                                                                                                                                                                                       !   !   $   &			&   "            
                                                                                    
                                                    Wâââ»ïïïæîîîçëëëâíííåëëëßôôôïðððäÜÜÜ±ÇÇÇ+<<</            	                                                       &&&#   &                                          [[[?6666   ×××éééÿ¿¿¿ÿçççÿÎÎÎÿÖÖÖÿÌÌÌÿßßßÿÔÔÔÿéééÿÜÜÜÿÝÝÝÝèèèéïïïáÒÒÒÁÁÁBBB3   "                  
   
      
            mmm3øøøú   ,                                          âââÏ!!!4   777&éééÿèèèÿçççÿÊÊÊÿ¹¹¹ÿÒÒÒÿ¸¸¸ÿÜÜÜÿåååÿæææÿÐÐÐÿÑÑÑÿçççÿéééÿìììÿæææäÊÊÊ±±±}···}___EOpppDP,   )   +3Z2226   DDD(æææÿ   ,                                          óóóÿ¼¼¼###5ÁÁÁêêêÿÀÀÀÿéééÿÜÜÜÿÏÏÏÿÙÙÙÿçççÿ×××ÿæææÿçççÿàààÿÛÛÛÿæææÿåååÿåååÿåååÿäääÿåååÿëëëôñññøôôôûêêêèúúúÿòòòóÕÕÕ¹ãããßÁÁÁùåååÿ···5¼¼¼äääÿ   ,                                          õõõÿëëëÿëëëÿëëëÿêêêÿêêêÿêêêÿéééÿéééÿéééÿèèèÿèèèÿèèèÿçççÿæææÿçççÿçççÿæææÿæææÿæææÿåååÿåååÿåååÿäääÿäääÿäääÿãããÿãããÿãããÿâââÿâââÿâââÿãããÿãããÿãããÿãããÿ   ,                                          õõõÿÃÃÃ222"ÐÐÐëëëÿÂÂÂÿêêêÿÑÑÑÿÚÚÚÿÏÏÏÿáááÿÑÑÑÿæææÿÖÖÖÿÇÇÇÿÖÖÖÿÓÓÓÿÓÓÓÿÔÔÔÿÛÛÛÿÔÔÔÿÜÜÜÿÎÎÎÿáááÿËËËÿäääÿÙÙÙÿðððÿúúúÿþþþÿÿÿÿÿÿÿÿÿÿÿÿÿþþþûúúúüðððÿ&&&2                                          öööÿ   4   888&ìììÿìììÿêêêÿÍÍÍÿ»»»ÿÕÕÕÿºººÿßßßÿèèèÿéééÿÉÉÉÿÉÉÉÿÓÓÓÿÈÈÈÿÊÊÊÿØØØÿÈÈÈÿÔÔÔÿ¿¿¿ÿ×××ÿÐÐÐÿçççÿðððÿ¶îÿÿeÚÿÿ?Îÿÿ4Éÿÿ/Åÿÿ+Áÿÿ.ÀÿÿRÊÿÿªåÿÿõööÓ                                       öööÿ¾¾¾$$$5ÄÄÄíííÿÃÃÃÿìììÿßßßÿÑÑÑÿÛÛÛÿêêêÿÚÚÚÿéééÿêêêÿâââÿÞÞÞÿÞÞÞÿâââÿÜÜÜÿáááÿÐÐÐÿãããÿØØØÿçççÿËËËÿõõõÿ¢ìÿÿDÖÿÿ@Òÿÿ;Ïÿÿ7Ìÿÿ3Èÿÿ/Äÿÿ*Áÿÿ&½ÿÿ"ºÿÿÜÿÿüüü                                       öööÿîîîÿîîîÿîîîÿíííÿíííÿíííÿìììÿìììÿìììÿìììÿëëëÿëëëÿëëëÿêêêÿêêêÿêêêÿéééÿéééÿéééÿèèèÿèèèÿèèèÿçççÿåååÿþþþÿWÞÿÿGØÿÿCÕÿÿ?Òÿÿ;Îÿÿ6Ëÿÿ2Èÿÿn×ÿÿöüÿÿfÑÿÿ0¾ÿÿÿÿÿð                                       ÷÷÷ÿÇÇÇ333"ÓÓÓîîîÿÄÄÄÿîîîÿíííÿíííÿíííÿçççÿÕÕÕÿéééÿëëëÿëëëÿëëëÿêêêÿêêêÿÐÐÐÿØØØÿÚÚÚÿ×××ÿÎÎÎÿÒÒÒÿ³³³ÿÿÿÿÿOÞÿÿKÛÿÿGØÿÿBÔÿÿ>Ñÿÿ:Îÿÿ5ÊÿÿpØÿÿöüÿÿiÓÿÿ$¼ÿÿÿÿÿÿ                                       øøøÿ!!!4   888&ïïïÿïïïÿîîîÿîîîÿîîîÿíííÿÓÓÓÿÈÈÈÿèèèÿìììÿÑÑÑÿËËËÿëëëÿëëëÿÏÏÏÿÛÛÛÿ¿¿¿ÿÉÉÉÿ¿¿¿ÿÉÉÉÿÊÊÊÿÿÿÿÿSáÿÿNÞÿÿJÚÿÿF×ÿÿBÔÿÿ=Ðÿÿ9Íÿÿ5Êÿÿ0Åÿÿ,Âÿÿ(¿ÿÿÿÿÿÿ                                       øøøÿÁÁÁ%%%5ÇÇÇðððÿÇÇÇÿïïïÿïïïÿîîîÿîîîÿîîîÿÞÞÞÿíííÿíííÿíííÿìììÿìììÿìììÿÐÐÐÿÞÞÞÿàààÿïïïÿúúúÿÿÿÿÿÿÿÿÿÿÿÿÿVäÿÿRáÿÿNÝÿÿIÚÿÿE×ÿÿ°íÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿñÿÿÿ                       ùùùÿñññÿñññÿñññÿñññÿðððÿðððÿðððÿïïïÿïïïÿïïïÿîîîÿîîîÿîîîÿíííÿíííÿíííÿìììÿìììÿìììÿûûûÿÑ¹ÿ¥|Jÿq?ÿo@ÿÿÿÿÿZæÿÿUãÿÿQàÿÿMÝÿÿIÙÿÿDÖÿÿ@Óÿÿ<Ïÿÿ7Ìÿÿ3Éÿÿ/Äÿÿ+Áÿÿ&¾ÿÿ"ºÿÿ-¼ÿÿÜÿÿþÿÿÌ                   ùùùÿÉÉÉ444"ÖÖÖñññÿÈÈÈÿñññÿðððÿðððÿðððÿéééÿ×××ÿïïïÿîîîÿîîîÿîîîÿîîîÿíííÿÒÒÒÿëëëÿßÌ´ÿ§w<ÿ£u=ÿs>ÿq?ÿÿÿÿÿ]éÿÿYæÿÿUãÿÿPßÿÿLÜÿÿHÙÿÿCÕÿÿ?Òÿÿ;Ïÿÿ7Ëÿÿ2Èÿÿ.Äÿÿ*Àÿÿ%½ÿÿ!ºÿÿ¸ÿÿªåÿÿÿÿÿ               ùùùÿ"""4   888&òòòÿòòòÿñññÿñññÿñññÿðððÿçççÿÍÍÍÿïïïÿïïïÿÓÓÓÿÍÍÍÿîîîÿîîîÿÒÒÒÿüüüÿÀdÿ«y<ÿ¦w=ÿ¢u=ÿs>ÿÿÿÿÿaìÿÿ\éÿÿXåÿÿTâÿÿPßÿÿKÛÿÿGØÿÿCÕÿÿ>Ñÿÿ:Îÿÿ6Ëÿÿ1Çÿÿ-Ãÿÿ)Àÿÿ%¼ÿÿ ¹ÿÿOÈÿÿÿÿÿÎ               ùùùÿÃÃÃ%%%5ÊÊÊóóóÿÊÊÊÿòòòÿòòòÿòòòÿñññÿðððÿßßßÿðððÿðððÿðððÿïïïÿïïïÿïïïÿÒÒÒÿþþþÿµAÿ®{;ÿªy<ÿ¥w=ÿ¡t>ÿÿÿÿÿsïÿÿ`ëÿÿ\èÿÿWåÿÿSáÿÿOÞÿÿJÛÿÿF×ÿÿBÔÿÿ>Ñÿÿ9Íÿÿ5Êÿÿ1Çÿÿ,Âÿÿ(¿ÿÿ$¼ÿÿ(»ÿÿÿÿÿ÷               úúúÿõõõÿôôôÿôôôÿôôôÿóóóÿóóóÿóóóÿòòòÿòòòÿòòòÿñññÿñññÿñññÿðððÿðððÿðððÿðððÿïïïÿÿÿÿÿ·9ÿ²|:ÿ®z;ÿ©x<ÿ¥v=ÿõðêÿ×úÿÿsïÿÿ_ëÿÿ[çÿÿWäÿÿRáÿÿNÝÿÿJÚÿÿE×ÿÿAÓÿÿ=Ðÿÿ8Íÿÿ4Éÿÿ0Åÿÿ,Âÿÿ'¿ÿÿ#»ÿÿÿÿÿÿ               úúúÿÌÌÌ555"ÙÙÙôôôÿËËËÿôôôÿçççÿóóóÿæææÿóóóÿòòòÿçççÿÜÜÜÿäääÿäääÿæææÿãããÿÔÔÔÿÿÿÿÿº9ÿ¶~9ÿ±|:ÿ­z;ÿ¨x<ÿ¼oÿôïéÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿéúÿÿmÛÿÿ8Ìÿÿ3Éÿÿ/Åÿÿ+Áÿÿ'¾ÿÿÿÿÿÿ               ûûûÿ"""4   :::&õõõÿõõõÿõõõÿ×××ÿóóóÿÔÔÔÿòòòÿóóóÿæææÿÑÑÑÿÏÏÏÿÌÌÌÿÐÐÐÿÎÎÎÿÕÕÕÿÿÿÿÿ¾8ÿ¹9ÿµ~:ÿ°|;ÿ¬z;ÿ§w<ÿ£u=ÿs>ÿq?ÿo@ÿmAÿkBÿiCÿgCÿdDÿuZÿÞ×Ðÿéúÿÿ;Ïÿÿ7Ìÿÿ3Èÿÿ.Äÿÿ*Áÿÿÿÿÿÿ               ûûûÿÇÇÇ%%%5ÌÌÌõõõÿÌÌÌÿõõõÿÕÕÕÿòòòÿÊÊÊÿæææÿôôôÿçççÿàààÿåååÿäääÿäääÿêêêÿÔÔÔÿþþþÿÃ>ÿ½8ÿ¸9ÿ´}:ÿ°{;ÿ«y<ÿ§w<ÿ¢u=ÿs>ÿq?ÿo@ÿmAÿjBÿhCÿfDÿ~dEÿuZÿÿÿÿÿ?Òÿÿ:Îÿÿ6Ëÿÿ2Èÿÿ5Åÿÿÿÿÿ÷               üüüÿøøøÿ÷÷÷ÿ÷÷÷ÿ¨¨¨ÿ«««ÿöööÿöööÿöööÿõõõÿõõõÿõõõÿôôôÿôôôÿôôôÿóóóÿóóóÿóóóÿòòòÿýýýÿÐaÿÁ7ÿ¼8ÿ¸9ÿ³}:ÿ¯{;ÿªy<ÿ¦w=ÿ¡u>ÿr>ÿp?ÿn@ÿlAÿjBÿhCÿfDÿ}dEÿÿÿÿÿBÔÿÿ>Ñÿÿ:Îÿÿ5Êÿÿ^ÓÿÿÿÿÿÎ               üüüÿÏÏÏ555"ÜÜÜøøøÿÿ¬¬¬ÿ÷÷÷ÿöööÿöööÿöööÿõõõÿõõõÿõõõÿôôôÿôôôÿôôôÿôôôÿóóóÿøøøÿèÑ³ÿÂ7ÿÀ7ÿ»8ÿ·9ÿ²}:ÿ®{;ÿ©x<ÿ¥v=ÿ t>ÿr?ÿp@ÿn@ÿlAÿjBÿgCÿeDÿÿÿÿÿF×ÿÿAÔÿÿ=Ðÿÿ9Íÿÿ³ëÿÿÿÿÿ               üüüÿ"""4   ;;;&øøøÿõõõÿÿ¬¬¬ÿ÷÷÷ÿ÷÷÷ÿöööÿöööÿöööÿöööÿõõõÿõõõÿõõõÿôôôÿôôôÿôôôÿýýüÿáÁÿÅCÿ¿8ÿ»9ÿ¶~9ÿ²|:ÿ­z;ÿ¨x<ÿ¤v=ÿ t>ÿr?ÿp@ÿmAÿkAÿiBÿgCÿÿÿÿÿIÚÿÿEÖÿÿLÖÿÿçÿÿþÿÿË                   ýýýÿÉÉÉQQQJnnnÊ÷÷÷ÿÎÎÎÿÌÌÌÿ~~~ÿ¬¬¬ÿøøøÿ÷÷÷ÿ÷÷÷ÿ÷÷÷ÿöööÿöööÿöööÿõõõÿõõõÿõõõÿôôôÿõõõÿûûûÿþþþÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ×Ä®ÿq?ÿo@ÿmAÿkBÿiCÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿñÿÿÿ                       ýýýÿóóóÿHHHÿ"""ÿ©©©ÿúúúÿìììÿÿvvvÿ¬¬¬ÿøøøÿøøøÿ÷÷÷ÿ÷÷÷ÿ÷÷÷ÿöööÿöööÿöööÿöööÿõõõÿõõõÿõõõÿôôôÿôôôÿôôôÿÿÿÿÿ¹9ÿ´~:ÿ°{;ÿ«y<ÿ§w<ÿ¢u=ÿs>ÿq?ÿo@ÿmAÿkBÿÿÿÿÿ                                       þþþÿÁ:::ÿ'''ÿ___ÿ¥¥¥ÿùùùÿsssÿtttÿÿ¨¨¨ÿÝÝÝÿåååÿéééÿøøøÿ÷÷÷ÿ÷÷÷ÿ÷÷÷ÿöööÿõõõÿÜÜÜÿæææÿëëëÿÞÞÞÿÚÚÚÿÿÿÿÿ¼8ÿÏ¦uÿüú÷ÿÇ£vÿªy<ÿ¦w=ÿ¢u=ÿs>ÿp?ÿn@ÿlAÿÿÿÿÿ                            ¼¼¼888T   þþþÿ---6fffndddë%%%ÿ"""ÿ¢¢¢ÿOOOÿSSSÿÿÿÿÚÚÚÿÂÂÂÿöööÿøøøÿÑÑÑÿ×××ÿ÷÷÷ÿ÷÷÷ÿØØØÿÜÜÜÿÔÔÔÿÎÎÎÿËËËÿþþþÿÄDÿÒ§uÿüúöÿÊ¤vÿ®{;ÿªy<ÿ¥v=ÿ¡t>ÿr?ÿp?ÿxMÿÿÿÿð                                <<<MMMýýýÿÌÌÌ&&&5µµµ¬;;;ÿ<<<ÿxxxÿQQQÿ;;;ÿKKKÿðððÿÅÅÅÿôôôÿöööÿ÷÷÷ÿùùùÿøøøÿøøøÿøøøÿ÷÷÷ÿÚÚÚÿìììÿèèèÿîîîÿæææÿûûûÿáÁÿ¿8ÿ»8ÿ¶~9ÿ²|:ÿ­z;ÿ©x<ÿ¤v=ÿ t>ÿr?ÿÌ·ÿüüü                                    999ÿÖÖÖÿ÷÷÷ÿýýýÿÉÉÉÿÿVVVÿ###ÿ)))ÿ444ÿîîîÿûûûÿúúúÿúúúÿúúúÿúúúÿùùùÿùùùÿùùùÿøøøÿøøøÿøøøÿ÷÷÷ÿ÷÷÷ÿõõõÿ÷÷÷ÿýýýÿèÑ³ÿÍbÿ¼@ÿµ~9ÿ±|:ÿ¬z;ÿ«}Cÿ·gÿÛË¶ÿöõõÓ                                       ÿóÿõZZZÿlllÿ;;;ÿ!!!ÿ"""ÿ)))ÿ___ÿÖÖÖÿøøøÿûûûÿûûûÿúúúÿúúúÿúúúÿâââÿêêêÿëëëÿçççÿÝÝÝÿáááÿ¿¿¿ÿëëëÿãããÿôôôÿ÷÷÷ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿùùùùÞîîîÿ&&&2                                          ÿÿÿÿ::: pppß{{{þ___ÿWWWÿWWWÿ:::ÿ!!!ÿ"""ÿ***ÿwwwÿîîîÿüüüÿ×××ÿÐÐÐÿûûûÿúúúÿÝÝÝÿêêêÿÎÎÎÿÖÖÖÿÍÍÍÿÖÖÖÿØØØÿÑÑÑÿÔÔÔÿ÷÷÷ÿ÷÷÷ÿ÷÷÷ÿöööÿòòòÿ"""4   888&ÛÛÛÿ   ,                                          þþþÿÌÌÌ999¡ÔÿJJJÿ|||ÿlllÿ:::ÿ"""ÿBBBÿXXXÿ|||ÿøøøÿüüüÿüüüÿüüüÿûûûÿàààÿïïïÿíííÿñññÿæææÿ÷÷÷ÿæææÿõõõÿêêêÿøøøÿøøøÿ÷÷÷ÿÊÊÊÿïïïÿ¼¼¼$$$6´´´ÒÒÒÿ   ,                                          þþþÿýýýÿýýýÿÿ¹¹¹ÿþþþÿüüüÿ¸¸¸ÿuuuÿKKKÿCCCÿ@@@ÿ...ÿwwwÿüüüÿýýýÿüüüÿüüüÿüüüÿûûûÿûûûÿûûûÿúúúÿúúúÿúúúÿùùùÿøøøÿùùùÿøøøÿôôôÿðððÿëëëÿåååÿÝÝÝÿÓÓÓÿÈÈÈÿ   *                                          þþþÿÒÒÒ666"àààÿ½½½ÿþþþÿïïïÿºººÿÿKKKÿaaaÿLLLÿWWWÿ¤¤¤ÿýýýÿñññÿíííÿýýýÿûûûÿâââÿìììÿñññÿäääÿØØØÿÏÏÏÿ¿¿¿ÿãããÿáááÿïïïÿÂÂÂÿåååþ¤¤¤@¢ÄÄÄè   $                                          ýýýÿ"""4   ;;;&üüüÿýýýÿýýýÿßßßÿâââÿ´´´ÿnnnÿfffÿ!!!ÿ$$$ÿ999ÿÊÊÊÿÞÞÞÿúúúÿýýýÿýýýÿÞÞÞÿâââÿÚÚÚÿÓÓÓÿËËËÿ²²²ÿ®®®ÿ¨¨¨ÿ¯¯¯ÿÊÊÊÿÈÈÈÿ½½½è444]ttt|ÄÄÄÂÈÈÈ                                             üüüÿÉÉÉ&&&5ÐÐÐüüüÿÑÑÑÿüüüÿÞÞÞÿøøøÿîîîÿ¼¼¼ÿvvvÿmmmÿVVVÿ{{{ÿOOOÿçççÿõõõÿþþþÿýýýÿàààÿòòòÿíííÿôôôÿäääÿÉÉÉÿþþþÿÿÿÿÿÿÿÿÿþþþÿøøøÿñññÿáááÿéééÿÚÚÚ¥                                                 üüüÿúúúÿúúúÿúúúÿûûûÿûûûÿûûûÿüüüÿüüüÿüüüÿýýýÿÑÑÑÿaaaÿCCCÿÿpppÿ¢¢¢ÿÿÿÿÿÿÿÿÿÿÿÿÿþþþÿþþþÿþþþÿýýýÿöööÿÍÍÍÿÿÿÿÿãããÿÕÕÕÿÕÕÕÿñññÿÉÉÉÿÿ³³³                                                   üüüÿÏÏÏ555"ÞÞÞúúúÿÐÐÐÿûûûÿûûûÿûûûÿüüüÿüüüÿüüüÿçççÿ|||ÿMMMÿÿfffÿèèèÿþþþÿÿÿÿÿÿÿÿÿÿÿÿÿþþþÿýýýÿõõõÿËËËÿþþþÿÀÀÀÿÂÂÂÿ®®®ÿéééÿ¤¤¤ÿ                                                         üüüÿ"""4   ;;;&ùùùÿúúúÿúúúÿúúúÿúúúÿûûûÿûûûÿûûûÿüüüÿûûûÿÃÃÃÿ\\\ÿÿ²²²ÿþþþÿþþþÿþþþÿþþþÿþþþÿûûûÿòòòÿÈÈÈÿþþþÿÔÔÔÿ®®®ÿÂÂÂÿêêêÿ¬¬¬                                                             ûûûÿÇÇÇ%%%5ÎÎÎøøøÿÎÎÎÿùùùÿÚÚÚÿéééÿÏÏÏÿëëëÿÖÖÖÿûûûÿûûûÿüüüÿõõõÿ¶¶¶ÿÿøøøÿýýýÿýýýÿýýýÿúúúÿöööÿîîîÿÅÅÅÿúúúÿñññÿéééÿêêêÿÝÝÝ§                                                              ûûûÿ÷÷÷ÿ÷÷÷ÿ÷÷÷ÿøøøÿøøøÿøøøÿùùùÿùùùÿùùùÿúúúÿúúúÿúúúÿúúúÿûûûÿûûûÿûûûÿûûûÿ   ÿ÷÷÷ÿüüüÿùùùÿõõõÿñññÿèèèÿ¿¿¿ÿöööÿéééÿêêêÿÜÜÜ¦                                                                  úúúÿÍÍÍ555"ÛÛÛ÷÷÷ÿÎÎÎÿ÷÷÷ÿøøøÿøøøÿøøøÿùùùÿùùùÿùùùÿîîîÿíííÿçççÿçççÿëëëÿîîîÿÿâââÿãããÿÏÏÏÿàààÿÄÄÄÿ»»»ÿñññÿêêêÿÛÛÛ¥                                                                         úúúÿ"""4   :::&öööÿöööÿ÷÷÷ÿ÷÷÷ÿ÷÷÷ÿøøøÿøøøÿøøøÿùùùÿÜÜÜÿ×××ÿøøøÿÙÙÙÿÙÙÙÿÖÖÖÿÙÙÙÿÆÆÆÿÞÞÞÿÎÎÎÿÀÀÀÿ®®®ÿ»»»ÿòòòÿÚÚÚ¤                                                                             ùùùÿÃÃÃ%%%5ËËËõõõÿÌÌÌÿöööÿØØØÿæææÿÍÍÍÿèèèÿÓÓÓÿïïïÿâââÿóóóÿçççÿíííÿðððÿçççÿëëëÿíííÿäääÿÑÑÑÿÐÐÐÿµµµÿÛÛÛÿÜÜÜ¤                                                                                 ûûûÿùùùÿùùùÿùùùÿúúúÿúúúÿúúúÿúúúÿúúúÿúúúÿûûûÿûûûÿûûûÿûûûÿûûûÿüüüÿûûûÿúúúÿøøøÿõõõÿòòòÿïïïÿéééÿãããþåååè×××                                                                                                                                                                   
                                                                       ÿÿÿÿ¿wwü ÿþ?wwà  ?ð?wwà    ?wwà    ?wwà    ?wwà    ?wwà    ?wwà    ?wwà    ?wwà    ?wwà    ?wwà    ?wwà    wwà    wwà     wwà     wwà     wwà     wwà     wwà     wwà     wwà     wwà     wwà    wwà    wwà    ?wwà    ?ww    ?wwÀ    ?wwà    ?wwà    ?wwà    ?wwà    ?wwà    ?wwà    ?wwà    ?wwà    wwà    ÿwwà   ÿwwà   ÿwwà   ÿwwà   ÿwwà   ÿwwà   ?ÿwwà   ÿwwà   ÿÿwwà  ÿÿww(       @                                                                                             ÿÿÿÿÿÿÉÿÿÿöÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿöÿÿÿÈÿÿÿ                                          !!!0\\\JeeeQ666D555A   0   $      
       ÿÿÿÝøÿÿvâÿÿHÖÿÿ<Ïÿÿ6Ëÿÿ0Åÿÿ2Ãÿÿ\ÎÿÿÖòÿÿÿÿÿ                              7qéééøæææÿáááõÖÖÖéÛÛÛìÜÜÜÚ´´´¢vvvj&&&D   1   "þþþïgäÿÿLÜÿÿF×ÿÿ@Óÿÿ;Îÿÿ5ÊÿÿÔóÿÿÏñÿÿ?Äÿÿÿÿÿî                           ÀÀÀ£æææøèèèÿçççÿåååÿæææÿæææÿäääÿäääÿÞÞÞÿâââþâââóØØØÓÐÐÐºÿÿÿÿVäÿÿQàÿÿKÛÿÿE×ÿÿ?Òÿÿ9ÍÿÿÕôÿÿÐòÿÿ(¿ÿÿÿÿÿÿ                           óóóÿaVèèèÿÂÂÂÿÊÊÊÿÏÏÏÿÍÍÍÿÜÜÜÿÑÑÑÿÉÉÉÿÅÅÅÿÊÊÊÿÉÉÉÿÿÿÿÿ[èÿÿUãÿÿPßÿÿJÚÿÿDÖÿÿ>Ñÿÿ8Íÿÿ2Èÿÿ-Ãÿÿÿÿÿÿ                           ôôôÿuuun{{{jêêêÿÎÎÎÿÒÒÒÿÜÜÜÿÕÕÕÿçççÿÞÞÞÿâââÿýýýÿÿÿÿÿÿÿÿÿÿÿÿÿ`ëÿÿZçÿÿTâÿÿOÞÿÿ´ðÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿïÿÿÿ           ôôôÿìììÿëëëÿëëëÿêêêÿêêêÿéééÿéééÿèèèÿðððÿíåÚÿ§Vÿo@ÿlAÿÿÿÿÿbíÿÿ_êÿÿYæÿÿSâÿÿMÝÿÿGØÿÿBÔÿÿ<Ïÿÿ6Ëÿÿ0Åÿÿ+Áÿÿ%¼ÿÿ<ÁÿÿÕòÿÿÿÿÿ       õõõÿaVìììÿìììÿëëëÿæææÿÃÃÃÿêêêÿúúúÿ»mÿ t>ÿq?ÿn@ÿÿÿÿÿbíÿÿbíÿÿ^êÿÿXåÿÿRáÿÿLÜÿÿFØÿÿAÓÿÿ;Ïÿÿ5Êÿÿ/Åÿÿ)Àÿÿ$¼ÿÿYËÿÿÿÿÿÈ       öööÿwwwn}}}jíííÿíííÿìììÿëëëÿÖÖÖÿëëëÿþþþÿ®~Cÿ¥v=ÿs>ÿp?ÿÿÿÿÿbíÿÿbíÿÿaìÿÿ]éÿÿWäÿÿQàÿÿKÛÿÿE×ÿÿ@Òÿÿ:Îÿÿ4Éÿÿ.Äÿÿ(¿ÿÿ+½ÿÿÿÿÿö       ÷÷÷ÿðððÿïïïÿïïïÿîîîÿîîîÿíííÿíííÿìììÿÿÿÿÿ°{;ÿ©x<ÿ£v=ÿs>ÿôïêÿñÿÿbíÿÿbíÿÿaìÿÿ[èÿÿVãÿÿPßÿÿJÚÿÿDÖÿÿ?Ñÿÿ9Íÿÿ3Èÿÿ-Ãÿÿ'¾ÿÿÿÿÿÿ       ÷÷÷ÿaVðððÿïïïÿïïïÿíííÿÉÉÉÿíííÿÿÿÿÿµ~:ÿ®{;ÿ¨x<ÿ¢u=ÿ¶pÿôïéÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿêúÿÿrßÿÿ=Ñÿÿ7Ìÿÿ2Èÿÿ,Âÿÿÿÿÿÿ       øøøÿyyynjñññÿñññÿðððÿïïïÿÝÝÝÿîîîÿÿÿÿÿ¹9ÿ³}:ÿ­z;ÿ§w<ÿ¡u>ÿr?ÿo@ÿlAÿiBÿfDÿ}dEÿ|cEÿ|cEÿiÿêúÿÿBÔÿÿ<Ðÿÿ6Ëÿÿ1Çÿÿÿÿÿÿ       øøøÿóóóÿóóóÿòòòÿòòòÿñññÿñññÿðððÿðððÿþþþÿÁ?ÿ¸9ÿ²}:ÿ¬z;ÿ¦w=ÿ t>ÿq?ÿn@ÿkAÿiCÿfDÿ}cEÿ|cEÿ}dFÿÿÿÿÿGØÿÿAÓÿÿ;Ïÿÿ=Ìÿÿÿÿÿö       ùùùÿaVôôôÿáááÿãããÿîîîÿòòòÿÝÝÝÿòòòÿÒ£iÿ½8ÿ·9ÿ±|:ÿ«y<ÿ¥v=ÿs>ÿq?ÿn@ÿkBÿhCÿeDÿ|cEÿ|cEÿÿÿÿÿLÜÿÿF×ÿÿ@ÓÿÿmÛÿÿÿÿÿÈ       úúúÿzzznjõõõÿÜÜÜÿàààÿÚÚÚÿóóóÿÞÞÞÿñññÿôèÙÿÊPÿ¼8ÿ¶~9ÿ°{;ÿªy<ÿ¤v=ÿs>ÿp?ÿmAÿjBÿgCÿeDÿ|cEÿÿÿÿÿPßÿÿJÛÿÿ\ÛÿÿÜ÷ÿÿÿÿÿ       ûûûÿ÷÷÷ÿöööÿ×××ÿöööÿõõõÿõõõÿôôôÿôôôÿóóóÿùùùÿþþþÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÓÂ¯ÿmAÿjBÿgCÿ~dEÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿïÿÿÿ           ûûûÿaV©©©ÿµµµÿ×××ÿòòòÿÈÈÈÿÔÔÔÿÛÛÛÿôôôÿÞÞÞÿêêêÿòòòÿÿÿÿÿ´}:ÿ®z;ÿ¨x<ÿ¢u=ÿr?ÿo@ÿlAÿiBÿfDÿÿÿÿÿ                           üüüÿ|||nm÷÷÷ÿÿÃÃÃÿèèèÿäääÿçççÿîîîÿõõõÿðððÿòòòÿôôôÿÿÿÿÿ¹9ÿîâÔÿíâÖÿ§w=ÿ t>ÿq?ÿn@ÿlAÿiCÿÿÿÿÿ                           ýýýÿ¤¤¤ÿJJJÿùùùÿÆÆÆÿÿÖÖÖÿøøøÿ÷÷÷ÿ÷÷÷ÿöööÿöööÿõõõÿõõõÿþþþÿÅPÿðäÔÿïãÖÿ«y<ÿ¥v=ÿt>ÿq?ÿn@ÿ~Yÿÿÿÿî                    ÖÖÖ   ýýýÿVVVá???ÿwwwÿ«««ÿiiiÿÿÀÀÀÿùùùÿïïïÿÝÝÝÿ÷÷÷ÿðððÿ×××ÿäääÿóèÚÿÎ¡kÿ¹Aÿ°|;ÿªy<ÿ¤v=ÿ¢yFÿ²pÿëäÜÿÿÿÿ                    >>>3@@@yþþþÿ~~~obbbÇ000ÿkkkÿ@@@ÿÿ¶¶¶ÿúúúÿøøøÿôôôÿøøøÿòòòÿâââÿÞÞÞÿöööÿýýýÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿþþþÿòòòÒûûû                            ---UÿÐÐÐÿÕÕÕÿÿ<<<ÿ&&&ÿ[[[ÿïïïÿûûûÿúúúÿúúúÿúúúÿùùùÿøøøÿøøøÿ÷÷÷ÿ÷÷÷ÿöööÿôôôÿìììÿãããÿØØØÿ   6                                  ÐÐÐÿuuuêsssÿWWWÿIIIÿ$$$ÿ&&&ÿqqqÿÝÝÝÿàààÿëëëÿãããÿöööÿõõõÿìììÿñññÿõõõÿõõõÿíííülllg|||sÊÊÊþ   4                                  þþþÿbbbhhhÆÿÿUUUÿ000ÿQQQÿ}}}ÿñññÿæææÿâââÿöööÿöööÿÑÑÑÿÏÏÏÿÑÑÑÿÏÏÏÿÉÉÉú---{bbbÌÌÌí   (                                   ýýýÿüüüÿÏÏÏÿÊÊÊÿûûûÿ¼¼¼ÿiiiÿLLLÿBBBÿ¤¤¤ÿþþþÿýýýÿýýýÿùùùÿÔÔÔÿüüüÿöööÿìììÿáááÿÚÚÚÿæææÿ¿¿¿                                      üüüÿa¡¡¡Vûûûÿüüüÿúúúÿ¼¼¼ÿgggÿ+++ÿNNNÿÊÊÊÿþþþÿþþþÿüüüÿ×××ÿúúúÿÕÕÕÿÃÃÃÿèèèÿÇÇÇÿ²²²¡                                          ûûûÿ|||njúúúÿßßßÿíííÿîîîÿºººÿ]]]ÿtttÿkkkÿûûûÿÿÿÿÿýýýÿÕÕÕÿñññÿÂÂÂÿ¹¹¹ÿåååÿ¡¡¡                                              ûûûÿøøøÿøøøÿùùùÿùùùÿúúúÿúúúÿûûûÿÜÜÜÿrrrÿwwwÿ³³³ÿüüüÿõõõÿÏÏÏÿæææÿèèèÿêêêÿÓÓÓ¦                                                  úúúÿaVøøøÿøøøÿùùùÿùùùÿúúúÿéééÿèèèÿ±±±ÿÿËËËÿÖÖÖÿ»»»ÿâââÿêêêÿÓÓÓ¦                                                      ùùùÿzzznjöööÿÜÜÜÿêêêÿêêêÿÝÝÝÿãããÿôôôÿèèèÿáááÿ¨¨¨ÿÌÌÌÿ···ÿïïïÿÓÓÓ¦                                                          úúúÿùùùÿùùùÿúúúÿúúúÿúúúÿúúúÿûûûÿûûûÿûûûÿ÷÷÷ÿòòòÿåååÿ°°°ÿ×××íËËË                                                                                                                                                                      ü?à                                                  ?  ?  ?      ÿ ÿ ÿ ÿ ÿ ÿ ?ÿ(                                     «««                        C´¢¢¢ö¤¤¤î¥¥¥¦¦¦            ¬¬¬ï«««oªªª    ¥¥¥£££I   ¾­­­ÿåååÿýýýÿÿÿÿÿûûûÿñññÖ            ¯¯¯ÿÁÁÁÿ®®®ûªªªà¨¨¨ô³³³ÿÍÍÍÿöööÿ®ñÿÿSÛÿÿ=Ðÿÿ?Ëÿÿâÿÿÿÿÿ·        ³³³ÿÜÜÜÿóóóÿäääÿçççÿéééÿèèèÿþþþÿ_éÿÿQàÿÿF×ÿÿÒôÿÿ4Çÿÿÿÿÿö        ¶¶¶ÿÍÍÍÿâââÿíííÿíííÿùùùÿþþþÿÿÿÿÿaíÿÿZçÿÿ·òÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿõÿÿÿ¶¹¹¹ÿÝÝÝÿöööÿðððÿúúúÿÐ¼¤ÿoEÿÿÿÿÿcíÿÿaìÿÿXåÿÿMÝÿÿBÔÿÿ7Ìÿÿ0Ãÿÿàÿÿ½½½ÿÎÎÎÿäääÿòòòÿþþþÿ©~Iÿq?ÿóïêÿôÿÿcíÿÿ`ëÿÿVãÿÿKÛÿÿ@Òÿÿ5Êÿÿ8ÅÿÿÀÀÀÿÆÆÆÿíííÿõõõÿÿÿÿÿ­z;ÿ¢u=ÿ³qÿóïêÿÿÿÿÿÿÿÿÿÿÿÿÿëûÿÿvâÿÿ>Ñÿÿ3Èÿÿ³³³ÿ­­­ÿ¤¤¤ÿïïïÿÿÿÿÿ»Eÿ«y<ÿ t>ÿn@ÿiBÿ~dEÿ}dFÿ¬ÿëûÿÿGØÿÿHÒÿÿ¯¯¯ÿYYYÿuuuÿ±±±ÿöööÿàÄ¡ÿ¶=ÿ©x<ÿs>ÿmAÿhCÿ}dEÿ}eGÿÿÿÿÿSßÿÿ¨ìÿÿÿÿ444ÿ|||ÿÜÜÜÿýýýÿþþþÿÿÿÿÿÿÿÿÿÿÿÿÿÐÁ°ÿgCÿ}cEÿÿÿÿÿÿÿÿõÿÿÿµ½½½ÿ¡¡¡ÿ¨¨¨ÿMMMÿÿþþþÿýýýÿÿÿÿÿ±~>ÿêàÓÿq?ÿkAÿiGÿÿÿÿô        ÁÁÁÿÏÏÏÿåååÿ¹¹¹ÿRRRÿÀÀÀÿøøøÿúúúÿÞÂ¢ÿ²Gÿ£u=ÿxKÿÊº§ÿÿÿÿµ        ¾¾¾ÿÞÞÞÿ÷÷÷ÿùùùÿ»»»ÿÿíííÿáááÿþþþÿýýýÿÿÿÿÿþþþÿìììÿ            »»»ÿÎÎÎÿäääÿöööÿøøøÿ÷÷÷ÿßßßÿúúúÿüüüÿÈÈÈÿùùùÿÌÌÌÿ¿¿¿            ···ÿ¹¹¹ÿ»»»ÿ½½½ÿ¿¿¿ÿÁÁÁÿÃÃÃÿÅÅÅÿÈÈÈÿÉÉÉÿÇÇÇÿÄÄÄ                ~¬A¬A ¬A ¬A  ¬A  ¬A  ¬A  ¬A  ¬A  ¬A  ¬A ¬A ¬A ¬A ¬A ¬A         è      (         ¨       h   00     ¨%          ¨        h   4   V S _ V E R S I O N _ I N F O     ½ïþ             ?                        f   S t r i n g F i l e I n f o   B   0 8 0 9 0 4 b 0   J   C o m p a n y N a m e     S i m p l e   L a u n c h e r   U s e r     ^   F i l e D e s c r i p t i o n     S i m p l e   L a u n c h e r   E x e c u t a b l e     2 	  F i l e V e r s i o n     1 . 1 . 0 . 1 4     0   I n t e r n a l N a m e   w 3 2 . e x e   j #  L e g a l C o p y r i g h t   C o p y r i g h t   ( C )   S i m p l e   L a u n c h e r   U s e r     8   O r i g i n a l F i l e n a m e   w 3 2 . e x e   @   P r o d u c t N a m e     S i m p l e   L a u n c h e r   6 	  P r o d u c t V e r s i o n   1 . 1 . 0 . 1 4     D    V a r F i l e I n f o     $    T r a n s l a t i o n     	°<?xml version='1.0' encoding='UTF-8' standalone='yes'?>
<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">
    <security>
      <requestedPrivileges>
        <requestedExecutionLevel level='asInvoker' uiAccess='false' />
      </requestedPrivileges>
    </security>
  </trustInfo>
</assembly>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ø¢£ £(£0£8£@£X£`£h£££ £°£À£Ð£à£ð£ ¤¤ ¤0¤@¤P¤`¤p¤¤¤ ¤°¤À¤Ð¤à¤ð¤ ¥¥ ¥0¥@¥P¥`¥p¥¥¥ ¥°¥À¥Ð¥à¥ð¥ ¦¦ ¦0¦@¦P¦`¦p¦¦¦ ¦°¦À¦Ð¦à¦ð¦ §§ §0§@§P§`§p§§§ §°§À§Ð§à§ð§ ¨¨ ¨0¨@¨P¨`¨p¨¨¨ ¨°¨À¨Ð¨à¨ð¨ ©© ©0©@©P©`©p©©© ©°©À©Ð©à©ð© ªª ª0ª@ªPª`ªpªªª ª   ° d   ¦ ¦°¦¸¦À¦È¦Ð¦Ø¦à¦è¦ø¦ §§§§ §(§0§H§X§h§p§x§§§ ©©©© ©(©0©8©@©H©P©X©`©h©p©x©©©©©   À à    ¨¨¨¨ ¨(¨0¨8¨@¨H¨P¨X¨`¨h¨p¨x¨à¨è¨ð¨ø¨ ©©©© ©(©0©8©@©H©P©X©`©h©p©x©©©©© ©¨©°©¸©À©È©Ð©Ø©à©è©ð©ø© ªªªª ª(ª0ª@ªHªPªXª`ªhªpªxªªªªª ª¨ª°ª¸ªÀªÈªÐªØªàªèªðªøª «««« «(«0«8«@«H«P«X«`«h«p«x«««««¸¯È¯Ø¯è¯ø¯ Ð È    ( 8 H X h x   ¨ ¸ È Ø è ø ¡¡(¡8¡H¡X¡h¡x¡¡¡¨¡¸¡È¡Ø¡è¡ø¡¢¢(¢8¢H¢X¢h¢x¢¢¢¨¢¸¢È¢Ø¢è¢ø¢££(£8£H£X£h£x£££¨£¸£È£Ø£è£ø£¤¤(¤8¤H¤X¤h¤x¤¤¤¨¤¸¤È¤Ø¤è¤ø¤¥¥(¥8¥H¥X¥h¥x¥¥¥¨¥¸¥È¥Ø¥è¥ø¥¦¦(¦8¦H¦X¦h¦x¦¦¦¨¦¸¦È¦Ø¦è¦ø¦§§(§8§H§X§h§x§§§¨§¸§È§Ø§è§ø§¨¨(¨8¨H¨X¨h¨x¨¨¨¨¨¸¨È¨Ø¨è¨ø¨©©(©8©H©X©h©x©©©¨©¸©È©Ø©è©ø©ªª(ª8ªHªXªhªxªªª¨ª¸ªÈªØªèªøª««(«8«H«X«h«x«««¨«¸«È«Ø«è«ø«¬¬(¬8¬H¬X¬h¬x¬¬¬¨¬¸¬È¬Ø¬è¬ø¬­­(­8­H­X­h­x­­­¨­¸­È­Ø­è­   à È    ªª ª0ª@ªPª`ªpªªª ª°ªÀªÐªàªðª «« «0«@«P«`«p««« «°«À«Ð«à«ð« ¬¬ ¬0¬@¬P¬`¬p¬¬¬ ¬°¬À¬Ð¬à¬ð¬ ­­ ­0­@­P­`­p­­­ ­°­À­Ð­à­ð­ ®® ®0®@®P®`®p®®® ®°®À®Ð®à®ð® ¯¯ ¯0¯@¯P¯`¯p¯¯¯ ¯°¯À¯Ð¯à¯ð¯ ð        0 @ P ` p     ° À Ð à ð  ¡¡ ¡0¡@¡P¡`¡p¡¡¡ ¡°¡À¡Ð¡à¡ð¡ ¢¢ ¢0¢@¢P¢`¢p¢¢¢ ¢°¢À¢Ð¢à¢ð¢ ££ £0£@£P£`£p£££ £°£À£Ð£à£ð£ ¤¤ ¤0¤@¤P¤`¤p¤¤¤ ¤°¤À¤Ð¤à¤ð¤ ¥¥ ¥0¥@¥P¥`¥p¥¥¥ ¥°¥À¥Ð¥à¥ð¥ ¦¦ ¦0¦@¦P¦`¦p¦¦¦ ¦°¦À¦Ð¦à¦ð¦ §§ §0§@§P§`§p§§§ §°§À§Ð§à§ð§ ¨¨ ¨0¨     h§§@¨   @ H   ¢ ¢è¢£(£H£h££°£¸£À£ø£ ¤P©X©`©h©p©x©©©©©¨©°©¸©À©È©Ð©Ø©à©                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
MZ       ÿÿ  ¸       @                                   ø   º ´	Í!¸LÍ!This program cannot be run in DOS mode.

$       Ñ>iîmiîmiîm'vmiîmôEm´iîmôpmiîmôDmãiîm}miîmiïmóiîmô@miîmôtmiîmôsmiîmRichiîm                        PE  L 
îb        à 
  À   ¢      I>      Ð    @                    °    i   @                           ô  P    @ ôS                     l	  ÀÑ                              ð  @            Ð                            .text   :¾      À                    `.rdata  X-   Ð   .   Ä              @  @.data   \7         ò              @  À.rsrc   ôS   @  T                @  @.reloc           V             @  B                                                                                                                                                                                                                                                                                                                                        UìVh\ê@ ÿTÐ@ ð¡ø%A Àuöt6hhê@ VÿLÐ@ £ø%A Àth¸  j h  hÀê@ ÿuj ÿÐë	VÿÐ@ 3À^]ÃUìVh\ê@ ÿTÐ@ ð¡ü%A Àuöt6h|ê@ VÿLÐ@ £ü%A Àth¸  j h  hê@ ÿuj ÿÐë	VÿÐ@ 3À^]ÃUìì  ¡A 3ÅEü} u4EPÿuü÷ÿÿhÿ  h   Pè&  ü÷ÿÿPèeÿÿÿÄjÿ Ð@ Mü3Íè
  ÉÃUìì  ¡A 3ÅEü} u4EPÿuüûÿÿhÿ  h   PèQV  üûÿÿPè³þÿÿÄjÿ Ð@ Mü3Íè@
  ÉÃUìMW3ÿFüP¾ÀA PQè!  ÄÀt¹ÀA 	;uøHE+ÁD0üëÏÇ_]ÃUìì,VWhØê@ Eü3ÿhàA P}ü}ðè¦
  3É;ÇÁhàê@ Qè0ÿÿÿjWÿuüè;&  ÿuüèo  EèüþÿÿÄ$UìEø;Ç}}øWÿuøÿuüè&  ÿuüh  jSèo  Sðè9ÿÿÿÄ ;Çtð+ÃEøjY}Ôó¥Eèòë~¾  Vèø  EôEè  ðûYEø;Ç}}øWÿuøÿuüè«%  ÿuüVjÿuôè  ÿuôðèÖþÿÿð3À;÷Àhüê@ uìPèfþÿÿEì+EôjEøYÿuô}Ôó¥Eèòè  Ä,MäMàj )MèÿuèÿuüÞ èA%  ÿuü¿  WjSè¡  3É;ÈÀ¾ ë@ ÷ØVPèþÿÿf¸<ë@ Ä$f;u]ðëTEèüþÿÿy3Àj Pÿuüèð$  ÿuüWjSèU  ø3À;ÇÀ÷ØVPè½ýÿÿÄ$Dÿëf¹<ë@ f;tH;ÃsîëEðÿuüèi'  EðY_^ÉÃUììVj.ÿu3öuøè"  YYÀtVhøA h   VÿuVÿÐ@ ÀttFëqWh@ë@ EôPEüPèn%  ÿuôøÿuüè9  Ä;þuIEøP¿Pë@ Wÿuüë VhøA h   PÿuVÿÐ@ ÀuEøPWVèÙ  Ä;ÆuÔë3öFÿuüè¢  Y_Æ^ÉÃUì}t}v)}w#¡hA Àt%A ÿßÿÿjphpA j	PÿÐ@ 3À@]ÃUììVW3öVVVVÿdÑ@ VVVEäPÿtÑ@ jÿÿ5èA ÿhÑ@ VVVjýVVVVVhXë@ hpë@ VÿpÑ@ VVøVWEäPÿlÑ@ WÿxÑ@ _^ÉÃUìÿuÿXÐ@ ÀtøuöEujjÿuÿÐ@ ]Ã3À@]ÃÃUìQf}roÀtk·UW8ÏkÉÁ;ÑrWSVhþ@ tè1  <¾^YEü};ßs+û+þÀtøÿtøþtÇÁøPè&  YÃÇ;]rÙÿuüèí  Y^[_ÉÃUìVWhþ@ èØ  ÿuøèp  YYÀxPè)  YðëÎÿWè´  Y_Æ^]ÃUììVWè  Pè³ÿÿÿøè  À Pè£ÿÿÿðuôèþ  À@PèÿÿÿÄEðÿÿt;þ
  ;ø  þÿt;÷õ   ;ðí   øÿt;Çà   ;ÆØ   5DÐ@ SjöÿÖjõØÿÖjôEüÿÖEøè  Pè$  è  À Pè{$  5PÐ@ YY;ût9]ôu3ÛSjöÿÖEü;øt9Eôu
j jõÿÖeü Eø;øt9Eôu
j jôÿÖeø Eð;Ãu3Û;Eüueü ;Eøueø =dÐ@ Ûtûÿt	Sÿ×j jöÿÖ3Û9]üt}üÿt
ÿuüÿ×SjõÿÖ9]øt}øÿt
ÿuøÿ×SjôÿÖ[_^ÉÃUììd
  ¡A 3ÅEüESVW3ÿWWèõÿÿÿ@Ð@ 3É;ÇÁhë@ £hA Qè¿ùÿÿYYìõÿÿPjp¾pA Vj	ÿ5hA ÿ0Ð@ Àt½ìõÿÿpu3À@ë3Àhë@ Pèùÿÿ
A  0  YYjpVj	ÿ5hA ÿÐ@ h´ë@ PèYùÿÿjDõÿÿWPè/Z  ÄõÿÿPÿ8Ð@ ÷Èõÿÿ      5DÐ@ jöÿÖjõØÿÖjôàõÿÿÿÖSäõÿÿèÈüÿÿÇ$Ôë@ Pè÷øÿÿµàõÿÿVè¯üÿÿhôë@ Pèàøÿÿÿµäõÿÿèüÿÿhì@ PèÊøÿÿäõÿÿÄ Èõÿÿ   ÔõÿÿµØõÿÿÜõÿÿ¾èA VõÿÿPWWWjWWÿµèõÿÿWÿÐ@ ;Çu=ÿHÐ@ W¹   QðõÿÿRQPWh   ÿ$Ð@ ðõÿÿPÿµèõÿÿh@ì@ Wèí÷ÿÿÄÿ5èA ÿ5hA ÿ Ð@ ÿµÎõÿÿÐõÿÿèüÿÿYèÄüÿÿðýÿÿPh  ÿ<Ð@ H=  w
ðýÿÿPÿ`Ð@ jh-@ ÿ\Ð@ hì@ PèÛ÷ÿÿVè4ûÿÿÄÿ5ìA ÿdÐ@ Wjÿÿ5èA ÿÐ@ ìõÿÿPÿ5èA ÿ(Ð@ h´ì@ Pè÷ÿÿYYÿµìõÿÿÿ Ð@ ÌUìQSVW=XÑ@ »Øì@ Sÿuÿ×ðöt>FEü· fÀtø"tjPèõ  YYÀuSÿuüÿ×ðöuÓöt
]ÆûéÍ   ]jhäì@ SèÁ
  3ÉÀÁSh í@ Qè÷ÿÿ{·ÄfÀtjPè  YYÀt3À@ë3ÀShDí@ PèÜöÿÿÄÇ·fÀtjPèj  YYÀuçf? ÷t·jPèQ  YYÀuÆf9uç·jPè8  YYÀt3ÀfÆWèóøÿÿS÷Øh|í@ ÿj XçøA ÀPèdöÿÿÄf;"u&3Àf>"SÀh°í@ PèFöÿÿ3ÀfÄÆÃÇjhøí@ SèË	  ÄÀtf{"t3Àf>"SÀhî@ PèöÿÿÄ·fÀt&jPè  YYÀt3ÀfëjPè  YYÀtÆ·fÀuçE0Ç_^[ÉÃUìì0  ¡A 3ÅEüSVWÿÐ@ f8"tj ëj"ÀYQPè8  YYÀuÇÔøÿÿTë@ ë$pëjPè  YYÀtÆ·fÀuçµÔøÿÿ¿  W¾àA Vj ÿ,Ð@ f=àA "tµÜøÿÿë
ÇÜøÿÿâA èÜøÿÿ3ÉàøÿÿfBÆÀA Pè¡õÿÿØ3ÀÛÀhhî@ PèòôÿÿY  3öYË;Øsú
tú
tA;Èrïëñ3ÀöÀhî@ Pè»ôÿÿYYWôýÿÿPÆ +óVSjhéý  ÿ4Ð@ ð3À3Û;óÀh¬î@ Pèôÿÿ3ÀfuôýÿÿYYµôýÿÿf9ôýÿÿt·jPè  YYÀtÆf9uç3Àf>#hØî@ ÀPè?ôÿÿYYj_ëjPèÔ  YYÀt
÷·f;Ãuè3Àf>!hï@ ÀPèôÿÿYYëjPè¤  YYÀt
÷·f;ÃuèØøÿÿPVØøÿÿèSüÿÿø3ÀÿÀh<ï@ PèÉóÿÿ3À9Øøÿÿhhï@ ÀPè³óÿÿj[SWhøí@ èG  Ä$ÀuvhàA ìûÿÿh  Pè  ÄìûÿÿPÿ\Ñ@ f"u+j[G j"Pè
  ð3ÀöÀWh°í@ PèMóÿÿÄ3Àf_PìûÿÿPäùÿÿPÿTÑ@ ½äùÿÿÇPfÀfÉuõ+ÂÑøðØøÿÿHfÀfÒuõ+ÁÑøÐøÿÿÜøÿÿHfÀfÒuõ+ÁÑøÈÔøÿÿPfÀfÛuõ+ÂÑøÈÐøÿÿjt1Vè¤  Ø3ÀÛÀh¤ï@ PèòÿÿÿµÔøÿÿÿµÜøÿÿÿµØøÿÿWhØï@ VVSè  Ä0SèqøÿÿÌèªüÿÿÌ;
A uóÃé¢  jhÀð@ è%  3ÿ}ä3À];ßÀ;Çuè²$  Ç    èû  3Àë{3Àu;÷À;ÇtÞ3Àf9>À;ÇtÒè#  E;Çu
èx$  Ç    ëÉ}üf9;u èc$  Ç    jþEðPhA è&  Äë¡PÿuVSè   ÄEäÇEüþÿÿÿè	   Eäè±$  Ãÿuè½  YÃÿUìVuöuè$  j^0èP  Æë$h   ÿuÿuèÿÿÿÄÀt3ÀëèÖ#   ^]ÃÿUìEfUëf;ÊtÀ·fÉuðf9t3À]ÃÿUìhìÑ@ ÿÐ@ ÀthÜÑ@ PÿLÐ@ ÀtÿuÿÐ]ÃÿUìÿuèÈÿÿÿYÿuÿ Ð@ Ìjèe(  YÃjè'  YÃÿVè)+  ðVèê*  Vèâ  VèÏ*  Vèº*  Vè¯(  Vè(  Ä^ÃÿUìVu3ÀëÀuÉtÿÑÆ;urì^]ÃÿUì=T7A  thT7A èo1  YÀt
ÿuÿT7A Yè¨0  h Ñ@ hÑ@ è¡ÿÿÿYYÀuTVWh7Q@ è$0  ¸Ñ@ ¾Ñ@ Yø;ÆsÀtÿÐÇ;þrñ=X7A  _^thX7A è1  YÀtj jj ÿX7A 3À]Ãj hàð@ è¤"  jèY'  Yeü 3À@9A Ø   £A E¢A }     ÿ5L7A 5Ð@ ÿÖØ]ÐÛthÿ5H7A ÿÖø}Ô]Ü}Øï}Ô;ûrKèÌ)  9tí;ûr>ÿ7ÿÖØè¹)  ÿÓÿ5L7A ÿÖØÿ5H7A ÿÖ9]Üu9EØt]Ü]ÐEØø}Ô]Ðë«ÇEä¤Ñ@ }ä°Ñ@ sEä ÀtÿÐEäëæÇEà´Ñ@ }à¸Ñ@ sEà ÀtÿÐEàëæÇEüþÿÿÿè    } u)ÇA    jèq%  Yÿuè½ýÿÿ} tjè[%  YÃè¶!  ÃÿUìj j ÿuè¯þÿÿÄ]ÃÿUìj jÿuèþÿÿÄ]Ãjj j èþÿÿÄÃjjj èzþÿÿÄÃÿUìèí1  ÿuè60  Yhÿ   è¯ÿÿÿÌÿUì} t-ÿuj ÿ5 A ÿÐ@ ÀuVè   ðÿHÐ@ PèI   Y^]ÃÿUìQeü VEüPÿuÿuèÜ1  ðÄöu9EütèX   Àt
èO   MüÆ^ÉÃÿUìEVñÆF Àucè¹)  FHlHhN;
¸A t
p
A Hpuè;  F;x	A tF
p
A Hpuèû3  FFö@puHpÆFë
@FÆ^]Â ÿUìì3ÀSW9EÌ   ]Ûuè  Ç    èæ
  ¸ÿÿÿé«   }ÿtßVÿuMðè0ÿÿÿEðx uA+ß·;øAr
øZwÀ ·ðëð·øArøZwÀ ·ÀÇÿMtDföt?f;ðtÃë8EðP·Pè.;  ·ðEðP·Pè;  ÄÃÇÿM·Àt
fötf;ðtÈ·È·Æ+Á}ü ^tMøapý_[ÉÃÿUì= A  Vuy3À9E   uöuè³  Ç    èü	  ¸ÿÿÿëcMÉtâ+ñ·øAr
øZwÀ ·ÐëÐ·øArøZwÀ ·ÀÁÿMt
fÒtf;ÐtÃ·È·Â+Áëj ÿuÿuÿuèþÿÿÄ^]ÃÿUìS]ûàwoVW= A  uè7/  jè-  hÿ   èúÿÿYYÛtÃë3À@Pj ÿ5 A ÿÐ@ øÿu&j^9$A t
Sè%  YÀu©ëèÍ  0èÆ  0Ç_^ëSèl%  Yè²  Ç    3À[]Ã¸  A Ã¡@7A Vj^Àu¸   ë;Æ}Æ£@7A jPè´<  YY£,'A ÀujV5@7A è<  YY£,'A ÀujX^Ã3Ò¹  A ë¡,'A Á ÂùA |êjþ^3Ò¹ A WÂÁø &A úçÁçøÿt;ÆtÀu1Á Bùp A |Î_3À^Ãè7?  =A  tè=  ÿ5,'A èüÿÿYÃÿUìVu¸  A ;ðr"þ`A wÎ+ÈÁùÁQè«!  N   Yë
Æ VÿÐ@ ^]ÃÿUìEø}ÀPè~!  EH   Y]ÃEÀ PÿÐ@ ]ÃÿUìE¹  A ;Ár=`A w`ÿÿÿ+ÁÁøÀPè\   Y]ÃÀ Pÿ Ð@ ]ÃÿUìMEù}`ÿÿÿÁQè-   Y]ÃÀ Pÿ Ð@ ]ÃÌÌÌÌÌÌÌÌÌÌÌD$SÀtRT$3Û\$÷Â   t
Â2Ëtrèt2÷Â   uêèrWûÁãßûÁãßë_Àt
Â2Ët@èuò[Ãèrå
3Ë¿ÿþþ~ùñÿ3ÏÂá tàJü2Ët#2ëtÁé2Ët2ëtëÈ_Bÿ[ÃBþ_[ÃBý_[ÃBü_[ÃÿUìEÀtè8ÝÝ  uPè^úÿÿY]ÃÿUìQQ¡A 3ÅEüSVñ3ÛW;óuèù  j^0èC  é,  ÿuVè;?  YY;Er3ÀfëÕE @;Ãu)Æf9t·ùArùZwÁ fÀf9uå3Àéâ   SSjÿV¿   WPè¸>  ÈÄMø;Ëuè|  Ç *   èq   é®   9Ms3Àfè[  j"é]ÿÿÿ;Ë~Cjà3ÒX÷ñør7D	=   wè½>  Ä;ÃtÇ ÌÌ  ëPèåûÿÿY;Ãt	Ç ÝÝ  ÀMøØÛu
è  Ç    ëE QSjÿVWÿpè>  ÄÀtSÿuVè`  ÄðëèÌ  j*YñSèþÿÿYÆeì_^[Mü3ÍèÇôÿÿÉÃÿUììÿuMðèRùÿÿMEðPÿuènþÿÿ}ü YYtMøapýÉÃÿUìj ÿuÿuè»ÿÿÿÄ]ÃÿUìEPj ÿuÿuÿuÿuèD  Ä]ÃÿUììMS]VW}Mø]üÿt} tÉuè  Ç    è[  3À_^[ÉÃuötÈÿ3Ò÷÷9Ev!ûÿtSj QèHG  ÄötÁÈÿ3Ò÷÷9Ewµ¯}÷F  }ðßtFEôëÇEô   ÿÚ   ÷F  tDFÀt=ò   û;Ørø;}ü»   Wÿ6ÿuüÿuøèVF  )~>}ø+ßÄ)}ü}ðé   ;]ôr\}ô t¹ÿÿÿ3Ò;Ùv	Á÷uôÁëÃ÷uôÃ+Âë¸ÿÿÿ;ØwÃ;Eüw[PÿuøVè  YPèýD  ÄÀt{øÿtdEø+Ø)Eüë$Vè>  YøÿtR}ü t"MøÿEøFKÿMüEôÛ&ÿÿÿEé¼þÿÿ}ÿtÿuj ÿuèF  Äè¦  Ç "   éþÿÿN Ç+Ã3Ò÷uéþÿÿNëìjh ñ@ èÀ  3öuä9ut/9ut*9uu-}ÿtÿuVÿuèºE  ÄèI  Ç    è  3ÀèÅ  Ãÿuè^úÿÿYuüÿuÿuÿuÿuÿuè×ýÿÿÄEäÇEüþÿÿÿè   EäëÃÿuèúÿÿYÃÿUìÿuÿuÿujÿÿuèZÿÿÿÄ]ÃÿUìQ¸ÿÿ  f9Eu3ÀÉÃ¸   f9Es·E
A ·AëEüPjEPjÿ¤Ð@ Àu!Eü·Eü·M#ÁÉÃÿUìEÀuèr  Ç    è»  Èÿ]Ã@]ÃÿUìE£A ]ÃÿUìì(  ¡A 3ÅEüS]WûÿtSèE  Y¥àüÿÿ jLäüÿÿj PèzD  àüÿÿØüÿÿ0ýÿÿÄÜüÿÿàýÿÿÜýÿÿØýÿÿÔýÿÿµÐýÿÿ½ÌýÿÿføýÿÿfìýÿÿfÈýÿÿfÄýÿÿf¥Àýÿÿf­¼ýÿÿðýÿÿEMôýÿÿÇ0ýÿÿ  èýÿÿIüäýÿÿMàüÿÿMäüÿÿìüÿÿÿ°Ð@ j øÿ¬Ð@ ØüÿÿPÿ¨Ð@ ÀuÿuûÿtSèD  YMü_3Í[èBðÿÿÉÃÿUìVÿ5A ÿÐ@ ÿuðÿ´Ð@ £A Æ^]ÃÿVj¾ ÀVjèþÿÿÄVÿ¼Ð@ Pÿ¸Ð@ ^ÃÿUìÿ5A ÿÐ@ Àt]ÿàÿuÿuÿuÿuÿuè¯ÿÿÿÌ3ÀPPPPPèÇÿÿÿÄÃÿUìQEÀuè  Ç    èÓÿÿÿ3ÀÉÃVuöt
MÉuÉuèa  Ç    èªÿÿÿ3Àé   ·WfÒt.·>ufÿtÇf;ÂtÆ·fÀuðf> tÁ·fÒuÕf9 Müt<E·8Ufÿt·1Çf;ÆtÂ·fÀuðf: uÁf9 uÔë3ÀfÁEEü+Á÷ØÀ#Eü_^ÉÃÿUììSW}3Û;ûuè¦  Ç    èïþÿÿÈÿée  VWè	ýÿÿðYuø9_}_jSVèÕB  ÄEü;Ãû   W÷Â  u+Gé%  OØ+Ù]ôöÂt<ÖÁú &A æÁæöD2tÑ;Ðsð:
uCB;Örõ]ô}ü uÃéØ   Òxïèþ  Ç    é   öG´   WÒu!Uôé¥   ]øuø+ÁÂÁûæ &A EÁæöD0tyjj ÿuøèB  Ä;Eüu GMÈë	8
uÿE@;Áró÷G    ë@j ÿuüÿuøèÓA  ÄÀyÈÿë8¸   9EwOöÁt÷Á   tGEöD0tÿEE)EüEôEü^_[ÉÃjh ñ@ èg  3À9EÀÀuè
  Ç    èVýÿÿÈÿë(ÿuè%õÿÿYeü ÿuè*þÿÿYEäÇEüþÿÿÿè	   Eäè^  ÃÿuèjõÿÿYÃÿUìEVWÀxY;&A sQÈÁùðæ< &A Áæ<ÿu5=A S]uè tHtHuSjôëSjõëSjöÿPÐ@ 3À[ëèY  Ç 	   èa    Èÿ_^]ÃÿUìMS3ÛVW;Ë|[;
&A sSÁÁøñæ< &A ÁæöD0t6<0ÿt0=A u+ËtItIuSjôëSjõëSjöÿPÐ@ ÿ3ÀëèÓ  Ç 	   èÛ  Èÿ_^[]ÃÿUìEøþuè¿    è¤  Ç 	   Èÿ]ÃÀx;&A rè    è  Ç 	   èÉûÿÿëÕÈÁù &A àÁàöDtÍ]Ãjh@ñ@ è  }ÇÁø÷æÁæ4 &A ÇEä   3Û9^u5j
è"  Y]ü9^uh   FPÿÀÐ@ Àu]äÿFÇEüþÿÿÿè0   9]ätÇÁøçÁç &A D8PÿÐ@ EäèS  Ã3Û}j
èä  YÃÿUìEÈàÁù &A ÁàDPÿ Ð@ ]Ãjh`ñ@ èÌ  Mäÿ3ÿ}Üjè¶  YÀuÈÿéa  jèd  Y}ü}Øÿ@;  4½ &A ö¹   uà½ &A    ;ð   öFu[~ u8j
è  Y3ÛC]ü~ uh   FPÿÀÐ@ Àu]ÜëÿFeü è(   }Ü u^SÿÐ@ öFtSÿ Ð@ Æ@ë}Øuàj
èâ  YÃ}Ü uæÆFÿ+4½ &A ÁþÇÁàðuä}äÿuyGé,ÿÿÿj@j è¸-  YYEàÀta½ &A &A  Â   ;ÂsÆ@ ÿÆ@
` À@EàëÝÁç}äÇÁøÏáÁá &A ÆDWèÈýÿÿYÀuMäÿÇEüþÿÿÿè	   Eäè  Ãjè$  YÃÿUìì SW3Ûj3ÀY}ä]àó«9]uèÓ
  Ç    èùÿÿÈÿé¼   }Vu;ût;óuè¬
  Ç    èõøÿÿÈÿé   ÇEìB   uèuàÿÿÿÿ?v	ÇEäÿÿÿë?EäÿuEàÿuÿuPÿUÄE;ótV;Ã|BÿMäx
EàÿEàëEàPSèó1  YYøÿt"ÿMäxEàëEàPSèÖ1  YYøÿtEë3À9]äfD~þÀè^_[ÉÃÿUì} uèð  Ç    è9øÿÿÈÿ]ÃS]VuWÛuöu9uu3Àé®   öt}ÿuè³  Ç    é   è£  ÿuÿuÿu;ûv*8CSVhTt@ èþÿÿÄøþuIèz  8"u]èp  8ëTWVhTt@ èhþÿÿ3ÉÄfL~þøþu}ÿuèD  8"u'è:  ëÀy3Éføþuè#  Ç "   èl÷ÿÿÈÿ_^[]ÃÿUìÿuj ÿuÿuÿuÿuèõþÿÿÄ]ÃÿUìVuF¨uèÛ  Ç    Èÿëgàï}FuVè øÿÿEe YVèr,  FYÀyàüFë¨t¨t©   uÇF   ÿuÿuVèûôÿÿYPè×:  3ÉÄøÿÁAÿ^]Ãjhñ@ è£  3À9EÀÀuèI  Ç    èöÿÿÈÿë?uöt
þtþuÚÿuèPîÿÿYeü VÿuÿuèÿÿÿÄEäÇEüþÿÿÿè	   Eäè  ÃÿuèîÿÿYÃÿUì=D7A  V5øA u3ÀëwWöu.95ðA tgè¤J  £ A è¾I  Ày	è.I  ÀuK5øA ötA} t;ÿuè÷H  Yøë(PèìH  Y;Çvf<x=uWÿuPèH  ÄÀtÆÀuÒ3À_^]ÃDxëôjh¨ñ@ è
  jèA  Y3öuü3À};þÀ;Æuè#
  j^0èmõÿÿuäët7E;Æt03À9uÀ;ÆtÕÿuèÿÿÿYØ;ÞtÕSèOH  pjVèXéÿÿÄ3ÿ;ÇuèÍ	  Ç    èÂ	   EäëSVPè;   Ä;Çu!E;Çt0}äÇEüþÿÿÿè   Eäè
  ÃWWWWWèôÿÿjè¦
  YÃÿUìVuWöt}ÿuè^	  j^0è¨ôÿÿÆ_^]ÃEÀufëßÖ+Ð·fÀfÉtOuî3ÀÿuÔfè	  j"Yñë¼ÿUìVuWÏÿöuèÿ  Ç    èHôÿÿÇëDöFt8Vè¦)  VøèI  VèSòÿÿPè8  ÄÀyÏÿëFÀtPèøçÿÿf Yf Ç_^]ÃjhÈñ@ èå  Mäÿ3ÀuöÀÀuè  Ç    èÎóÿÿÈÿë
öF@t
f Eäèñ  ÃVèëÿÿYeü Vè<ÿÿÿYEäÇEüþÿÿÿè   ëÔuVèÙëÿÿYÃÿUìVuWVèf÷ÿÿYøÿtP¡ &A þu	ö   uþuö@Dtjè;÷ÿÿjøè2÷ÿÿYY;ÇtVè&÷ÿÿYPÿdÐ@ Àu
ÿHÐ@ øë3ÿVèöÿÿÆÁø &A æÁæYÆD0 ÿtWèÊ  YÈÿë3À_^]Ãjhèñ@ èÕ  ]ûþuè    èw  Ç 	   Èÿé   Ûx;&A rèk    èP  Ç 	   èòÿÿëÒÃÁø< &A óæÁæ¾D0àtÆSèÈöÿÿYeü öD0tSèÕþÿÿYEäëèþ  Ç 	   MäÿÇEüþÿÿÿè   Eäèn  Ã]Sè ÷ÿÿYÃÿUì=$A uèÛ  ÿuè$  hÿ   è0ãÿÿYY]ÃjXhò@ èè  EPÿ8Ð@ 3ö95('A uVVjVÿÈÐ@ ¸MZ  f9  @ tuäë6¡< @ ¸  @ PE  uê¹  f9 @ uÜ¸t @ vÓ3É9°è @ ÁMäè  ÀujèSÿÿÿYèö  ÀujèBÿÿÿYè  uüè¸"  Àyjè åÿÿYÿÄÐ@ £$'A èK  £A è¿J  ÀyjèúäÿÿYè8H  Àyj	èéäÿÿYjèÀâÿÿY;ÆtPèÖäÿÿYèµG  öEÄt·MÈëj
YQPVh  @ è¦àÿÿEà9uäuPè\äÿÿèäÿÿë.Eì	MÜPQè)F  YYÃeèEÜEà}ä uPèBäÿÿèbäÿÿÇEüþÿÿÿEàèÍ  ÃèhK  éþÿÿÿUìì(  £0A 
,A (A $A 5 A =A fHA f
<A fA fA f%A f-A @A E £4A E£8A E£DA àüÿÿÇA   ¡8A £4A Ç(A 	 ÀÇ,A    ¡A Øüÿÿ¡A Üüÿÿÿ°Ð@ £xA jèJ3  Yj ÿ¬Ð@ hÒ@ ÿ¨Ð@ =xA  ujè&3  Yh	 Àÿ¼Ð@ Pÿ¸Ð@ ÉÃÿUìì¡8A 3ÒSVuEüUôUøUðëÆf> t÷·øat0ørt#øwtèì  Ç    è5ïÿÿ3Àéa  »  ë
3ÛMüë	»	  MüÆ·3ÉAWf;ÂÖ  yº @  É  ·ÀøS   tè ö   ètRHtCèt-è
t!è¡  9EøÌ   ÇEø   ËéÃ   ßé¼   öÃ@­   Ë@é«   ÇEð   é   öÃ   EüãþàüËÇEüé   }ø utÇEø   Ë ënèTtZètEHt0ètè  ÷Ã À  uEÚëG}ô u;eüÿ¿ÿÿÇEô   ë1}ô u%	UüÇEô   ë÷Ã À  uË   ë¸   Øt3ÉëØÆ·fÀÜþÿÿ}ð     j _ëÆf9>tøjVhÒ@ èBQ  ÄÀ   ÆëÆf9>tøf>=uuÆf9>tøjhÒ@ VèSãÿÿÄÀuÆ
Ë   ëAjh Ò@ Vè4ãÿÿÄÀuÆË   ë"jh4Ò@ VèãÿÿÄÀuÆË   ëÆf> t÷3ÿf9>tèÇ  Ç    èíÿÿëh  ÿuESÿuPèhP  ÄÀt3Àë EÿA MüHMx8xxH_^[ÉÃjh(ò@ è²  3Û3ÿ}äjè`  Y]ü3öuà;5@7A Ê   ¡,'A °9t[ @¨uH©   uAFýøwFPè\  YÀ   ¡,'A ÿ4°VèsäÿÿYY¡,'A °ö@tPVèÊäÿÿYYFëø}äëcj8èÍ  Y
,'A ±;ÃtNh   ¡,'A °À PÿÀÐ@ À¡,'A uÿ4°èãßÿÿY¡,'A °ë°À PÿÐ@ ¡,'A <°}ä_;ûtg   ___OÿÇEüþÿÿÿè   ÇèÝ   Ã}äjèp  YÃÿUìE3É;ÍA tAù-rñHíùwj
X]ÃÍA ]ÃDÿÿÿjY;ÈÀ#ÁÀ]Ãè	  Àu¸øA ÃÀÃèû  Àu¸üA ÃÀÃÿUìVèâÿÿÿMQèÿÿÿYðè¼ÿÿÿ0^]Ãh0D@ dÿ5    D$l$l$+àSVW¡A 1Eü3ÅPeèÿuøEüÇEüþÿÿÿEøEðd£    ÃMðd
    Y__^[å]QÃÌÌÌÌÌÌÌÿUììS]Vs35A WÆEÿ ÇEô   {øþt
NÏ38è9ÚÿÿNFÏ38è)ÚÿÿEö@f  MUèSü[EèMìûþt_I [LDEð EøÉt×èô  ÆEÿÀx@GEøØøþuÎ}ÿ t$øþt
NÏ38è¶ÙÿÿNVÏ3:è¦ÙÿÿEô_^[å]ÃÇEô    ëÉM9csmàu)= 'A  t h 'A èã  ÄÀtUjRÿ 'A ÄMUè  E9XthA WÓÈè  EMøHøþt
NÏ38è ÙÿÿNVÏ3:èÙÿÿEðH×è*  ºþÿÿÿ9SOÿÿÿhA WËèA  éÿÿÿÌSVWT$D$L$URPQQhPF@ dÿ5    ¡A 3ÄD$d%    D$0XL$,3pþþt;T$4úþt;òv.4v\³H{ uÌh  CèM  ¹   Cè¤M  ë°d    Ä_^[ÃL$÷A   ¸   t3D$H3Èè2ØÿÿUhÿpÿpÿpè>ÿÿÿÄ]D$T$¸   ÃUL$)ÿqÿqÿq(èÿÿÿÄ]Â UVWSê3À3Û3Ò3ö3ÿÿÑ[_^]ÃêñÁjèïL  3À3Û3É3Ò3ÿÿæUìSVWj RhöF@ Qè>  _^[]ÃUl$RQÿt$èµþÿÿÄ]Â ÿVW3ö¿PA <õA uõ A 8h   ÿ0ÇÿÀÐ@ ÀtFþ$|Ó3À@_^Ã$õ A  3ÀëñÿSÐÐ@ V¾ A W>ÿt~t
WÿÓWèGÛÿÿ& YÆþ A |Ü¾ A _Àt	~uPÿÓÆþ A |æ^[ÃÿUìEÿ4Å A ÿ Ð@ ]ÃjhHò@ èúûÿÿ3ÿG}ä3Û9 A uè¶  jè   hÿ   èØÿÿYYu4õ A 9tÇëmjèe  Yø;ûuèdûÿÿÇ    3ÀëPj
èX   Y]ü9u+h   WÿÀÐ@ ÀuWèvÚÿÿYè/ûÿÿÇ    ]äë>ëWè[ÚÿÿYÇEüþÿÿÿè	   EäèûÿÿÃj
è)ÿÿÿYÃÿUìEV4Å A > uPè#ÿÿÿYÀujè÷ÙÿÿYÿ6ÿÐ@ ^]Ãjhhò@ èûÿÿèC  @xÀteü ÿÐë3À@ÃeèÇEüþÿÿÿèõJ  èûÿÿÃh¿H@ ÿ´Ð@ £ A ÃÿUìE£¤A £¨A £¬A £°A ]ÃÿUìE
ôè@ V9PtñköuÀ;ÆrìkÉM^;Ás9Pt3À]Ãÿ5¬A ÿÐ@ Ãj hò@ èYúÿÿ3ÿ}ä}Ø]ûKtÃjY+Át"+Át+ÁtY+ÁuCè÷  ø}ØÿuÈÿéT  ¾¤A ¡¤A ëUÿw\Óè]ÿÿÿYpëQÃèt2èt!Htè¡ùÿÿÇ    èêäÿÿë¹¾¬A ¡¬A ë¾¨A ¡¨A ë
¾°A ¡°A ÇEä   PÿÐ@ Eà3À}àÖ   9Eàujè8Øÿÿ9EätPèCþÿÿY3ÀEüût
ûtûuO`MÔG`ûu>OdMÐÇGd   ûu,
èè@ MÜ
ìè@ 
èè@ 9MÜ}MÜkÉW\DÿEÜëÝè´   ÇEüþÿÿÿè   ûuÿwdSÿUàYë]}Ø}ä tj èÔüÿÿYÃSÿUàYût
ûtûuEÔG`ûuEÐGd3ÀèùÿÿÃÿUìE£¸A ]ÃÿUìE£¼A ]ÃÿUìE£ÀA ]ÃÿUìÿ5ÀA ÿÐ@ ÀtÿuÿÐYÀt3À@]Ã3À]Ãj ÿ´Ð@ ÃÿØÐ@ Â ÿVÿ5$A ÿÜÐ@ ðöuÿ5ÈA ÿÐ@ ðVÿ5$A ÿàÐ@ Æ^Ã¡ A øÿtPÿ5ÐA ÿÐ@ ÿÐ
 A ÿ¡$A øÿtPÿäÐ@ 
$A ÿévûÿÿjh¨ò@ èÞ÷ÿÿhDÒ@ ÿÐ@ uÇF\Xè@ f 3ÿG~~pÆÈ   CÆK  CÇFhPA j
è\üÿÿYeü ÿvhÿèÐ@ ÇEüþÿÿÿè>   jè;üÿÿY}üEFlÀu¡¸A Flÿvlèï  YÇEüþÿÿÿè   è÷ÿÿÃ3ÿGuj
è$ûÿÿYÃjèûÿÿYÃÿVWÿHÐ@ ÿ5 A øèÄþÿÿÿÐðöuNh  jèü  ðYYöt:Vÿ5 A ÿ5ÌA ÿÐ@ ÿÐÀtj VèøþÿÿYYÿðÐ@ Nÿë	VèÄÕÿÿY3öWÿìÐ@ _Æ^ÃÿVèÿÿÿðöujèÕÿÿYÆ^ÃjhÐò@ èöÿÿuöø   F$ÀtPèwÕÿÿYF,ÀtPèiÕÿÿYF4ÀtPè[ÕÿÿYF<ÀtPèMÕÿÿYF@ÀtPè?ÕÿÿYFDÀtPè1ÕÿÿYFHÀtPè#ÕÿÿYF\=Xè@ tPèÕÿÿYj
èÎúÿÿYeü ~hÿtWÿôÐ@ ÀuÿPA tWèåÔÿÿYÇEüþÿÿÿèW   jèúÿÿYÇEü   ~lÿt#Wèá  Y;=¸A tÿàA t? uWè^  YÇEüþÿÿÿè   VèÔÿÿYèÔõÿÿÂ uj
èeùÿÿYÃujèYùÿÿYÃÿWhDÒ@ ÿÐ@ øÿu	è4ýÿÿ3À_ÃV5LÐ@ hÒ@ WÿÖhtÒ@ W£ÄA ÿÖhhÒ@ W£ÈA ÿÖh`Ò@ W£ÌA ÿÖ=ÄA  5àÐ@ £ÐA t=ÈA  t
=ÌA  tÀu$¡ÜÐ@ £ÈA ¡äÐ@ ÇÄA lK@ 5ÌA £ÐA ÿØÐ@ £$A øÿÁ   ÿ5ÈA PÿÖÀ°   èÑÿÿÿ5ÄA 5´Ð@ ÿÖÿ5ÈA £ÄA ÿÖÿ5ÌA £ÈA ÿÖÿ5ÐA £ÌA ÿÖ£ÐA è¬÷ÿÿÀtc=Ð@ h-M@ ÿ5ÄA ÿ×ÿÐ£ A øÿtDh  jè,  ðYYöt0Vÿ5 A ÿ5ÌA ÿ×ÿÐÀtj Vè,üÿÿYYÿðÐ@ Nÿ3À@ëè×ûÿÿ3À^_ÃÿUìQSV5Ð@ Wÿ5L7A ÿÖÿ5H7A Ø]üÿÖð;ó   þ+ûGøruSèjG  ØGY;ØsH¸   ;ØsÃÃ;ÃrPÿuüèÒ  YYÀuC;Ãr>Pÿuüè¼  YYÀt/ÁÿP4¸ÿ´Ð@ £L7A ÿu=´Ð@ ÿ×ÆVÿ×£H7A Eë3À_^[ÉÃÿVjj è(  YYðVÿ´Ð@ £L7A £H7A öujX^Ã& 3À^Ãjhøò@ èóÿÿèQÏÿÿeü ÿuèüþÿÿYEäÇEüþÿÿÿè	   Eäè"óÿÿÃè0ÏÿÿÃÿUìÿuè·ÿÿÿ÷ØÀ÷ØYH]ÃÿV¸°ð@ ¾°ð@ Wø;ÆsÀtÿÐÇ;þrñ_^ÃÿV¸¸ð@ ¾¸ð@ Wø;ÆsÀtÿÐÇ;þrñ_^ÃÿVW3ÿÿ·(A ÿ´Ð@ (A Çÿ(ræ_^ÃÿUìM¸MZ  f9t3À]ÃA<Á8PE  uï3Ò¹  f9HÂÂ]ÃÌÌÌÌÌÌÌÌÌÌÌÿUìEH<È·ASV·q3ÒWDöt}H;ùr	XÙ;ûr
BÀ(;Örè3À_^[]ÃÌÌÌÌÌÌÌÌÌÌÌÌÿUìjþhó@ h0D@ d¡    PìSVW¡A 1Eø3ÅPEðd£    eèÇEü    h  @ è*ÿÿÿÄÀtTE-  @ Ph  @ èPÿÿÿÄÀt:@$Áè÷ÐàÇEüþÿÿÿMðd
    Y_^[å]ÃEì3Ò9  ÀÂÂÃeèÇEüþÿÿÿ3ÀMðd
    Y_^[å]ÃÿUì3ÀM;ÅÛ@ t
@ørî3À]ÃÅÛ@ ]ÃÿUììü  ¡A 3ÅEüSVuWVè¹ÿÿÿø3ÛY½þÿÿ;ûl  jèÌG  Yø  jè»G  YÀu
=A î   þü   6  hLÜ@ h  ¿ØA WèæÿÿÄÀ¸   h  ¾
A VSf£A ÿ,Ð@ »û  ÀuhÜ@ SVèfæÿÿÄÀt3ÀPPPPPèÍÚÿÿVè,.  @Yø<v*Vè.  EA È+ÎjÑùhÜ@ +ÙSPè@F  ÄÀu½hÜ@ ¾  VWè³E  ÄÀu¥ÿµþÿÿVWèE  ÄÀuh  hÀÛ@ WèD  Äë^SSSSSéyÿÿÿjôÿDÐ@ ð;ótFþÿtA3ÀGþÿÿf9Gt@=ô  rèSþÿÿPþÿÿP]ûè>C  YPþÿÿPVÿøÐ@ Mü_^3Í[èÊÿÿÉÃjèQF  YøtjèDF  YÀu=A uhü   è%þÿÿhÿ   èþÿÿYYÃj h   j ÿüÐ@ 3ÉÀÁ£ A ÁÃÿUìMÉtjà3ÒX÷ñ;EsèrîÿÿÇ    3À]Ã¯MVñöuF3ÀþàwVjÿ5 A ÿÐ@ Àu2=$A  tVèçõÿÿYÀuÒEÀtÇ    3Àë
MÉtÇ   ^]Ã-¤  t"ètè
tHt3ÀÃ¸  Ã¸  Ã¸  Ã¸  ÃÿVWðh  3ÿFWPè0  3À·ÈÁ~~~ÁáÁ~«««¹PA ÄF+Î¿  @Ou÷  ¾   @Nu÷_^ÃÿUìì  ¡A 3ÅEüSWèúÿÿPÿvÿ Ñ@ ¿   Àü   3Àüþÿÿ@;ÇrôîúÿÿÆüþÿÿ Àt0ïúÿÿ¶È¶;Èw+Á@P
üþÿÿj Rèm  ÄCÃÀuÖj ÿvüúÿÿÿvPWüþÿÿPjj èG  3ÛSÿvüýÿÿWPWüþÿÿPWÿvSèOF  ÄDSÿvüüÿÿWPWüþÿÿPh   ÿvSè*F  Ä$3À·EüúÿÿöÁtLüýÿÿëöÁtL üüÿÿ  ë  @;Çr¿ëR  Çäúÿÿÿÿÿ3É)äúÿÿäúÿÿ  ÐZ ûw
LQ ë
úwL QàëÆ  A;ÏrÆMü_3Í[èÇÿÿÉÃjh8ó@ è'ìÿÿèeõÿÿø¡p
A Gptl twhöuj èÜÊÿÿYÆè?ìÿÿÃj
è®ðÿÿYeü whuä;5x	A t6ötVÿôÐ@ ÀuþPA tVèºÊÿÿY¡x	A Gh5x	A uäVÿèÐ@ ÇEüþÿÿÿè   ëuäj
ètïÿÿYÃÿUììS3ÛSMðèíÊÿÿA þþuÇA    ÿÑ@ 8]ütEMøapýë<þýuÇA    ÿÑ@ ëÛþüuEð@ÇA    ëÄ8]ütEø`pýÆ[ÉÃÿUìì ¡A 3ÅEüS]VuWèdÿÿÿø3ö};þuÃèºüÿÿ3Àé¡  uä3À9¸	A    ÿEäÀ0=ð   rçÿèý  t  ÿéý  h  ·ÇPÿÑ@ ÀV  EèPWÿ Ñ@ À7  h  CVPè  3ÒBÄ{s9Uèü   }î Ó   uïÉÆ   ¶Fÿ¶Éé©   h  CVPèI  MäÄkÉ0uà±	A uäë+FÀt)¶>¶ÀëEà|	A D;¶FG;øvê}Æ> uÐuäÿEàÆ}àuäréÇ{ÇC   èiûÿÿjCC	A Zf1f0ÁÀJuñóè×ûÿÿé´þÿÿL@;ÁvöÆ~ÿ 0ÿÿÿC¹þ   @IuùCèûÿÿCSës3À·ÈÁÁáÁ{«««ë§95A TþÿÿÈÿMü_^3Í[èþÃÿÿÉÃjhXó@ èéÿÿMàÿèXòÿÿø}ÜèØüÿÿ_huèqýÿÿE;CW  h   è  YØÛF  ¹   whûó¥# Sÿuè´ýÿÿYYEàÀü   uÜÿvhÿôÐ@ ÀuFh=PA tPèÇÿÿY^hS=èÐ@ ÿ×öFpê   öp
A Ý   j
è+íÿÿYeü C£A C£A C£A 3ÀEäø}fLCfEA @ëè3ÀEä=  }
LpA @ëé3ÀEä=   }  xA @ëæÿ5x	A ÿôÐ@ Àu¡x	A =PA tPèÙÆÿÿYx	A Sÿ×ÇEüþÿÿÿè   ë0j
è¥ëÿÿYÃë%øÿu ûPA tSè£ÆÿÿYè\çÿÿÇ    ëeà EàèÖçÿÿÃ=P7A  ujýèVþÿÿYÇP7A    3ÀÃÿUìSV5èÐ@ W}WÿÖ°   ÀtPÿÖ¸   ÀtPÿÖ´   ÀtPÿÖÀ   ÀtPÿÖ_PÇE   {øt
A t	ÀtPÿÖ{ü t
CÀtPÿÖÃÿMuÖÔ   ´   PÿÖ_^[]ÃÿUìW}ÿ   SV5ôÐ@ WÿÖ°   ÀtPÿÖ¸   ÀtPÿÖ´   ÀtPÿÖÀ   ÀtPÿÖ_PÇE   {øt
A t	ÀtPÿÖ{ü t
CÀtPÿÖÃÿMuÖÔ   ´   PÿÖ^[Ç_]ÃÿUìSVu¼   3ÛW;Ãto=8A th°   ;Ãt^9uZ¸   ;Ãt9uPèÅÿÿÿ¶¼   èD  YY´   ;Ãt9uPèáÄÿÿÿ¶¼   èD  YYÿ¶°   èÉÄÿÿÿ¶¼   è¾ÄÿÿYYÀ   ;ÃtD9u@Ä   -þ   PèÄÿÿÌ   ¿   +ÇPèÄÿÿÐ   +ÇPè|Äÿÿÿ¶À   èqÄÿÿÄÔ   =x
A t9´   uPè@  ÿ¶Ô   èHÄÿÿYY~PÇE   øt
A t;Ãt9uPè#ÄÿÿY9_ütG;Ãt9uPèÄÿÿYÇÿMuÇVèýÃÿÿY_^[]ÃÿUìW}ÿt;EÀt4V0;÷t(W8èjýÿÿYötVèîýÿÿ> YuþàA tVèsþÿÿYÇ^ë3À_]Ãjhxó@ è¦äÿÿèäíÿÿð¡p
A Fpt"~l tèÍíÿÿplöuj èVÃÿÿYÆè¹äÿÿÃjè(éÿÿYeü ÿ5¸A ÆlVèYÿÿÿYYEäÇEüþÿÿÿè   ë¾jè!èÿÿYuäÃÿUì¸ÿÿ  ìf9E   SVÿuMìèÃÿÿuìN3Û;ËuEH¿fùwfÀ ·ÀëK¸   jf9Esÿuè¾ÌÿÿYÀ·EYt,Ì   ¶ë UüRjURPQè  ÄÀ·Et·Eü8]øtMôapý^[ÉÃÿUììLVE´Pÿ8Ð@ j@j ^Vèl  YY3É;ÁuÈÿé     £ &A 5&A ;Âs6ÀHûÿfÇ@ÿ 
HfÇ@ 
Æ@!
H3H/5 &A À@PûÆ   ;ÖrÍSWf9Mæ  Eè;Á  ÀEüÃ¾   Eø;Þ|Þ9&A }k¿$&A j@j èÌ  YYÀtQ&A     ;Ás1ÀHûÿ` ``3 fÇ@ÿ 
fÇ@ 

Æ@/ À@ÎPû;ÑrÒÇ9&A |¢ë&A 3ÿÛ~rEø øÿt\øþtWMü	öÁtMöÁuPÿXÐ@ Àt=÷æÇÁøÁæ4 &A Eø Eü Fh   FPÿÀÐ@ À¼   ÿFEøGÿEü;û|3ÛóÁæ5 &A øÿtøþtNëqÆFÛujöXë
Cÿ÷ØÀÀõPÿDÐ@ øÿÿtBÿt>WÿXÐ@ Àt3%ÿ   >øuN@ë	øuNh   FPÿÀÐ@ Àt,ÿFë
N@ÇþÿÿÿCûhÿÿÿÿ5&A ÿÑ@ 3À_[^ÉÃÈÿëöÿUìVW3öÿuè¿ÂÿÿøYÿu'9(A vVÿÑ@ è  ;(A vÈÿðøÿuÊÇ_^]ÃÿUìVW3öj ÿuÿuè!òÿÿøÄÿu'9(A vVÿÑ@ è  ;(A vÈÿðøÿuÃÇ_^]ÃÿUìVW3öÿuÿuèÏA  øYYÿu,9Et'9(A vVÿÑ@ è  ;(A vÈÿðøÿuÁÇ_^]ÃÿUìVW3öÿuÿuÿuè+B  øÄÿu,9Et'9(A vVÿÑ@ è  ;(A vÈÿðøÿu½Ç_^]Ãjhó@ èàÿÿ3Û]äjèÇäÿÿY]üj_}à;=@7A }T÷¡,'A 9°tE°ö@tPèíÖÿÿYøÿtÿEäÿ|(¡,'A °À PÿÐÐ@ ¡,'A ÿ4°è©¾ÿÿY¡,'A °Gë¡ÇEüþÿÿÿè	   EäèÖßÿÿÃjèlãÿÿYÃÿUìSVuFÈá3Ûùu@©  t9FW>+øÿ~,WPVèÈÿÿYPèH  Ä;ÇuFÀyàýFëN Ëÿ_Ff ^Ã[]ÃÿUìVuöu	Vè5   Yë/Vè|ÿÿÿYÀtÈÿë÷F @  tVèÈÿÿPèðH  Y÷ØYÀë3À^]Ãjh¸ó@ èËÞÿÿ3ÿ}ä}ÜjèxãÿÿY}ü3öuà;5@7A    ¡,'A °98t^ ö@tVPVè´ÁÿÿYY3ÒBUü¡,'A °HöÁt/9UuPèJÿÿÿYøÿtÿEäë9}uöÁtPè/ÿÿÿYøÿu	EÜ}üè   Fë3ÿuà¡,'A ÿ4°Vè½ÁÿÿYYÃÇEüþÿÿÿè   }EätEÜèLÞÿÿÃjèâáÿÿYÃjèÿÿÿYÃÿUìì SW3Ûj3ÀY}ä]àó«9]uèÝÿÿÇ    èÑÈÿÿÈÿé   }Vu;ût;óuèaÝÿÿÇ    èªÈÿÿÈÿëk¸ÿÿÿEä;øw}äÿuEàÿuÇEìB   ÿuuèPuàÿUÄE;ót5;Ã|"ÿMäxEàëEàPSè¶  YYøÿtEë3À9]ä\>ÿÀè^_[ÉÃÿUì} uèÑÜÿÿÇ    èÈÿÿÈÿ]ÃS]VuWÛuöu9uu3Àéª   öt}ÿuèÜÿÿÇ    é   èÜÿÿÿuÿuÿu;ûv*8CSVhJ¯@ è½þÿÿÄøþuGè[Üÿÿ8"uYèQÜÿÿ8ëPWVhJ¯@ èþÿÿÄÆD>ÿ øþu}ÿuè'Üÿÿ8"u%èÜÿÿëÀyÆ øþuèÜÿÿÇ "   èQÇÿÿÈÿ_^[]ÃÿUìÿuj ÿuÿuÿuÿuèùþÿÿÄ]ÃÿUìEÀ~Pÿuè   YYÿuÿuPÿuÿuÿuÿÑ@ ]ÃÿUì3À9EvMf9 t	@Á;Erñ]ÃÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌQL$+ÈáÁÉÁYéZS  QL$+ÈáÁÉÁYéDS  ÿUìQVuVè¸ÄÿÿEFY¨uè+ÛÿÿÇ 	   N Èÿé/  ¨@t
èÛÿÿÇ "   ëãS3Û¨t^¨   NàþFFàïÈF^]ü©  u,è&½ÿÿÀ ;ðtè½ÿÿÀ@;ðu
ÿuèT  YÀuVè:T  Y÷F  W   F>HN+øIN;û~WPÿuèøC  ÄEüëMÈ FÈÿëyMùÿtùþtÁàÑÁúÁà &A ë¸ÀA ö@ tjSSQèÕR  #ÂÄøÿt%FMë3ÿGWEPÿuèC  ÄEü9}üt	N ÈÿëE%ÿ   _[^ÉÃÿUìVuöuèÕÙÿÿÇ    èÅÿÿéú   F¨ï   ¨@ç   ¨tÈ FéØ   ÈF©  u	Vè#S  YëFÿvÿvVèùÂÿÿYPèg  ÄFÀ   øÿ   öFuQVèÏÂÿÿYøÿt0VèÃÂÿÿYøþt$WVè¶ÂÿÿÁøV< &A è¦ÂÿÿàYÁàY_ë¸ÀA @$<uN    ~   uF¨t©   uÇF   ÿN¶Aë÷ØÀàÀ	Ff Èÿ^]ÃÿUììUVujþXEìUä;ðuè·Øÿÿ  èØÿÿÇ 	   Èÿé}  S3Û;ó|;5&A rèØÿÿèsØÿÿÇ 	   è¼ÃÿÿÈÿéN  ÆÁøWæ< &A ÁæL0öÁuèPØÿÿè6ØÿÿÇ 	   ëhúÿÿÿwN]ô;Ó  öÁý  9]t5D0$ÀÐøEþ¾ÀHjYtHuÂ÷Ð¨tâþU]]ðëzÂ÷Ð¨uèæ×ÿÿèÌ×ÿÿÇ    èÃÿÿë6ÂÑèM;ÁrEÿuèöÿÿØY]ðÛuè×ÿÿÇ    è¢×ÿÿÇ    Èÿén  jj j ÿuèO  D(ÄT,ÎöAHÃtzIù
tr} tlÿM}þ CÇEô   ÆD
tPL%ù
tE} t?@ÿM}þÇEô   ÆD%
u%L&ù
t} t@ÿMÇEô   ÆD&
j MèQÿuPÿ4ÿÑ@ Àx  MèÉm  ;Md  MôDö ä  }þ  Ét
;
uë û]ðEôÃ]Eô;ØÑ   M<¯   <
tCAMé   EôH;ÈsA8
uÁMÆ
ëuEëmÿEj EèPjEÿPÿ4ÿÑ@ Àu
ÿHÐ@ ÀuE}è t?öDHt}ÿ
t¹Æ
MÿLë%;]ðu}ÿ
t jjÿjÿÿuèïM  Ä}ÿ
tÆ
CEô9EFÿÿÿëDö @uëCÃ+Eð}þEôÐ   ÀÈ   KÉxCé   3À@¶Éëø;]ðrK¶@¹ 
A  tè¶Ê¾ 
A Éu
è?ÕÿÿÇ *   ëzA;ÈuØë@öD1Ht%CT1ø|	T%Cøu	T&C+Øë÷ØjRPÿuèM  ÄEä+]ðÑèPÿuSÿuðj héý  ÿ4Ð@ EôÀu4ÿHÐ@ PèäÔÿÿYMìÿEð;EtPèì³ÿÿYEìøþ  Eôé  Eô3É;ÃÁÀEôL0ëÆÉtf;
uë û]ðEôÃ]Eô;Ø  E·ùÙ   ù
tfÃÀEéµ   MôÁþ;ÁsHf9
u
ÀEj
é   Mé   Ej EèPjEøPÿ4ÿÑ@ Àu
ÿHÐ@ Àu[}è tUöDHt(f}ø
t²j
XfMøLMùL%ÆD&
ë*;]ðuf}ø
tjjÿjþÿuè´K  Äf}ø
t	j
XfÃEô9Eÿÿÿëtö@uë	f fÃ+]ð]ôéþÿÿÿHÐ@ j^;Æuè9ÓÿÿÇ 	   èAÓÿÿ0éjþÿÿømZþÿÿeì é\þÿÿ3À_[^ÉÃjhàó@ èKÓÿÿ]ûþuèÓÿÿ  èíÒÿÿÇ 	   Èÿé¶   Ûx;&A rèáÒÿÿ  èÆÒÿÿÇ 	   è¾ÿÿëÒÃÁø< &A óæÁæ¾D0àtÆ¸ÿÿÿ;EÀ@uèÒÿÿ  èÒÿÿÇ    ë·SèÂÿÿYeü öD0tÿuÿuSèùÿÿÄEäëèJÒÿÿÇ 	   èRÒÿÿ  MäÿÇEüþÿÿÿè   Eäè²ÒÿÿÃ]SèdÂÿÿYÃÿUìVuöu3Àëa} uèüÑÿÿj^0èF½ÿÿÆëH} t9urVÿuÿuèp"  ÄëÇÿuj ÿuè.   Ä} t»9usè²Ñÿÿj"Yñë²jX^]ÃÌÌÌÌÌÌÌÌÌÌÌÌT$L$Òti3ÀD$Àuú   r= &A  téYO  Wùúr1÷Ùát+ÑÇéuöÈÁàÁÈÁàÁÊâÁétó«Òt
ÇêuöD$_ÃD$Ã%&A  ÃÿUìVuVèHÀÿÿYøÿuèûÐÿÿÇ 	   ÈÿëMWÿuj ÿuPÿ Ñ@ øÿÿuÿHÐ@ ë3ÀÀtPèëÐÿÿYÈÿëÆÁø &A æÁæD0 ýÇ_^]Ãjh ô@ èÝÐÿÿ]ûþuèÐÿÿ  èÐÿÿÇ 	   Èÿé   Ûx;&A rèsÐÿÿ  èXÐÿÿÇ 	   è¡»ÿÿëÒÃÁø< &A óæÁæ¾D0àtÆSèÐ¿ÿÿYeü öD0tÿuÿuSèöþÿÿÄEäëèþÏÿÿÇ 	   èÐÿÿ  MäÿÇEüþÿÿÿè   EäèfÐÿÿÃ]SèÀÿÿYÃÿUìö@@tx tPÿuèäI  YY¹ÿÿ  f;Áuÿ]Ãÿ]ÃÿUìQöC@VðEüt
{ uEëC' } ~5E· ÿMPÃèÿÿÿE>ÿYu?*uj?Ãè~ÿÿÿY} Ð? uEü^ÉÃÌÌÌÿUììx  ¡A 3ÅEüS]Vu3ÀWÿu}´ûÿÿµÔûÿÿäûÿÿ¬ûÿÿøûÿÿØûÿÿôûÿÿÜûÿÿ°ûÿÿÐûÿÿè®ÿÿèÇÎÿÿûÿÿöu+è¸ÎÿÿÇ    èºÿÿ½Àûÿÿ t
¼ûÿÿ`pýÈÿéí
  3ö;þtÏ·µèûÿÿµìûÿÿµÄûÿÿµ¨ûÿÿàûÿÿf;Ö¤
  jYù½ ûÿÿ9µèûÿÿx
  BàføXw·Â¶Ðé@ àë3ÀµÄûÿÿkÀ	¶0ðé@ jÁè^Äûÿÿ;ÆOÿÿÿø
  ÿ$ô@ 3Àôûÿÿÿûÿÿ°ûÿÿØûÿÿÜûÿÿøûÿÿÐûÿÿéà	  ·Âè tHèt4+Æt$+Átè¶	  	µøûÿÿé·	  øûÿÿé«	  øûÿÿé	  øûÿÿ   é	  	øûÿÿé	  fú*u+ÃäûÿÿØûÿÿÀf	  øûÿÿ÷ØûÿÿéT	  ØûÿÿkÀ
·ÊDÐØûÿÿé9	  ¥ôûÿÿ é-	  fú*u%ÃäûÿÿôûÿÿÀ	  ôûÿÿÿé	  ôûÿÿkÀ
·ÊDÐôûÿÿéç  ·ÂøItQøht@øltøwÌ  øûÿÿ   é½  f?luùøûÿÿ   é¦  øûÿÿé  øûÿÿ é  ·ø6uf4uÇøûÿÿ   ém  ø3uf2uÇ¥øûÿÿÿÿÿéO  ødF  øi=  øo4  øu+  øx"  øX  ¥Äûÿÿ ÔûÿÿRµèûÿÿÇÐûÿÿ   èüÿÿYéð  ·Âød1  ¿  øS  tèAt+ÁtZ+Át+Áá  Â Çûÿÿ   àûÿÿôûÿÿøûÿÿ@½üûÿÿ¸   ½ðûÿÿìûÿÿÉ  Çôûÿÿ   éÞ  ÷øûÿÿ0  É   øûÿÿ é½   ÷øûÿÿ0  uøûÿÿ ½ôûÿÿÿÿu¿ÿÿÿÃöøûÿÿ äûÿÿ[üðûÿÿù  Ûu¡ A ðûÿÿ¥ìûÿÿ µðûÿÿÿ  À  ´ûÿÿ¶ÀQPè½G  YYÀtFFÿìûÿÿ9½ìûÿÿ|ÐéÜ  èXß  +Á   èôþÿÿ+Áº  ·Ã3öFöøûÿÿ µÐûÿÿäûÿÿ¤ûÿÿtBÈûÿÿ´ûÿÿP´ûÿÿÆÉûÿÿ ÿ°¬   ÈûÿÿPüûÿÿPèùE  ÄÀyµ°ûÿÿëfüûÿÿüûÿÿðûÿÿµìûÿÿé6  ÃäûÿÿÀt:HÉt3÷øûÿÿ   ¿ ðûÿÿt+ÂÇÐûÿÿ   éñ  ¥Ðûÿÿ éç  ¡ A ðûÿÿPèÜ  YéÐ  øpå  Í  øe¾  øgçýÿÿøitnønt$øo¢  öøûÿÿµàûÿÿtbøûÿÿ   ëVÃäûÿÿ[üèöD  Àxúÿÿöøûÿÿ tfèûÿÿfëèûÿÿÇ°ûÿÿ   é÷  øûÿÿ@Çàûÿÿ
   ÷øûÿÿ     ÞCøSüéÕ  ufúguWÇôûÿÿ   ëK;È~ôûÿÿÈù£   ~7±]  VèçÿÿàûÿÿY¨ûÿÿÀtðûÿÿµìûÿÿøë
Çôûÿÿ£   5Ð@ ÃûÿÿCüûÿÿ´ûÿÿPÿµûÿÿ¾ÂÿµôûÿÿäûÿÿPÿµìûÿÿûÿÿWPÿ5@A ÿÖÿÐøûÿÿÄã   t½ôûÿÿ u´ûÿÿPWÿ5LA ÿÖÿÐYYf½àûÿÿguÛu´ûÿÿPWÿ5HA ÿÖÿÐYY?-uøûÿÿ   G½ðûÿÿWéþÿÿµôûÿÿÇ¬ûÿÿ   ë$ès{üÿÿ+ÁþÿÿèÎ  Ç¬ûÿÿ'   öøûÿÿÇàûÿÿ   |þÿÿj0XfÌûÿÿ¬ûÿÿÀQfÎûÿÿÜûÿÿéWþÿÿ÷øûÿÿ   WþÿÿÃöøûÿÿ töøûÿÿ@äûÿÿt¿Cüë·Cüëöøûÿÿ@Cütë3Òäûÿÿöøûÿÿ@tÒ|Às÷ØÒ ÷Úøûÿÿ   ÷øûÿÿ   úØu3ÿ½ôûÿÿ }Çôûÿÿ   ë¥øûÿÿ÷¸   9ôûÿÿ~ôûÿÿÃÇu!ÜûÿÿµûýÿÿôûÿÿÿôûÿÿÀÃÇt-àûÿÿRPWSè¼C  Á0ûÿÿØúù9~¬ûÿÿNë½ûýÿÿ+ÆF÷øûÿÿ   ìûÿÿµðûÿÿt^ÀtÆ80tSÿðûÿÿðûÿÿÿìûÿÿÆ 0ë<Ûu¡¤A ðûÿÿðûÿÿÇÐûÿÿ   ë	Of8 tÁÿuó+ðûÿÿÑøìûÿÿ½°ûÿÿ ¨  øûÿÿ¨@t+©   tj-ë¨tj+ë¨tj YfÌûÿÿÇÜûÿÿ   ½Øûÿÿ+½ìûÿÿ+½Üûÿÿ½àûÿÿ¨u$ëÔûÿÿj µèûÿÿOèõÿÿ½èûÿÿÿYtÿÞÿµÜûÿÿ½ûÿÿÔûÿÿÌûÿÿPèûÿÿèõÿÿöøûÿÿYYt/öøûÿÿu&½àûÿÿëj0µèûÿÿÃOè)õÿÿ½èûÿÿÿYtÿâ½Ðûÿÿ ukìûÿÿÛ~a½ðûÿÿ´ûÿÿP´ûÿÿÿ°¬   ¤ûÿÿWPKè|@  ÄûÿÿÀ~$ÿµ¤ûÿÿÔûÿÿµèûÿÿè½ôÿÿ½ûÿÿYÛ°ë.èûÿÿÿë%ÿµìûÿÿ½ûÿÿÿµðûÿÿÔûÿÿèûÿÿè³ôÿÿYY½èûÿÿ |3öøûÿÿt*½àûÿÿëÔûÿÿj µèûÿÿOèTôÿÿ½èûÿÿÿYtÿÞ½¨ûÿÿ tÿµ¨ûÿÿè?£ÿÿ¥¨ûÿÿ Y½ ûÿÿäûÿÿ·3öàûÿÿf;ÆtÐéqõÿÿ9µÄûÿÿt
½Äûÿÿõÿÿ½Àûÿÿ t
¼ûÿÿ`pýèûÿÿMü_^3Í[è³ÿÿÉÃI w@ u@ ½u@ v@ dv@ pv@ ¶v@ ­w@ ÿUììS]Ûu3Àé  } uèQÃÿÿÇ    è®ÿÿ¸ÿÿÿéæ   Vuöuè/ÃÿÿÇ    èx®ÿÿ¸ÿÿÿéÃ   W¿ÿÿÿ;ßvèÃÿÿÇ    èT®ÿÿé   ÿuMðè«¢ÿÿEð@ÀuJU+Ö·2øAr
øZwÀ ·ÈëÈ·øArøZwÀ ·ÀÆKt
fÉtf;ÈtÅ·Ð·Á+Âë7SVSÿuh  PèCA  ÄÀuèÂÿÿ}ü Ç    tEø`pýÇëÀþ}ü tMøapý_^[ÉÃÿUì= A  V   } uè5ÂÿÿÇ    è~­ÿÿ¸ÿÿÿé   MÉtß¾ÿÿÿ9uvè
ÂÿÿÇ    èS­ÿÿÆë_u+ñ·øAr
øZwÀ ·ÐëÐ·øArøZwÀ ·ÀÁÿMt
fÒtf;ÐtÃ·È·Â+Áëj ÿuÿuÿuè,þÿÿÄ^]ÃÿUìEfÀfÉuõ+EÑøH]ÃÿUìQQSV5ðA 3Û]üW;ÃtP=4Ð@ SSjÿPSSÿ×Eø;ÃtAjPèàÿÿYYEü;Ãt0ÿuøPjÿÿ6SSÿ×Àt*EüSPèò@  YYÀxÆ;Ãu¶3À_^[ÉÃÈÿëö9]ütöÿuüè; ÿÿYëëÿV5 A W3ÿöuÈÿé   fø=tGVè9ÿÿÿYtF·fÀuæSjGWèõßÿÿØYYøA ÛuÈÿëe5 A ë5Vèÿÿÿf>=Yxt"jWèÂßÿÿYYÀtAVWPè ·ÿÿÄÀuIÃ4~f> uÅÿ5 A èÿÿ% A  # ÇD7A    3ÀY[_^Ãÿ5øA èuÿÿ%øA  Èÿëä3ÀPPPPPè«ÿÿÌÿVÿ(Ñ@ ð3É;ñu3À^Ãf9tÀf9uøÀf9uðS+ÆXWSèÙÞÿÿøYÿu
Vÿ$Ñ@ Ç_[^ÃSVWèa  ÄëæÿUìVuF¨t¨tÿvèèÿÿf÷ûÿÿ3ÀYFF^]ÃÿUìE 8csmàu*xu$@= t=!t="t= @uèÄÿÿ3À]Â hõ@ ÿ¬Ð@ 3ÀÃÿUìVèJÈÿÿðö2  N\UÁW9t
À¹   ;ÇrïÁ   ;Ás9t3ÀÀtPÒu3Àéõ   úu` 3À@éä   úØ   MS^`N`Hù¶   j$Y~\d9 Áù   |í ~d=  Àu	ÇFd   ë~=  Àu	ÇFd   ën=  Àu	ÇFd   ë^=  Àu	ÇFd   ëN=  Àu	ÇFd   ë>=  Àu	ÇFd   ë.=  Àu	ÇFd   ë=µ Àu	ÇFd   ë=´ ÀuÇFd   ÿvdjÿÒY~dë` QÿÒY^`[Èÿ_^]ÃÿVW3ÿ9=P7A uèÖÿÿ5$'A öu¾Oà@ < wÀt.ÿt$<"u	3ÉÿÁù¶ÀPèU@  YÀtFFëÓ< wFÀuõ_Æ^Ã=P7A  uèDÖÿÿV5A W3ÿöuÈÿé   <=tGVè£  YtÀuêjGWèÜÿÿøYY=ðA ÿtË5A Së3Vèr  >=YXt"jSèbÜÿÿYYÀt?VSPèG  ÄÀuGÇó> uÈÿ5A è=ÿÿ%A  ' ÇD7A    3ÀY[_^Ãÿ5ðA èÿÿ%ðA  Èÿëä3ÀPPPPPèÀ§ÿÿÌÿUìQMS3ÀVòUÇ   9Et	]EEü>"u3À9Eü³"ÀFEüë<ÿÒtBU¶ÃPFè?  YÀtÿ} t
MÿEFUMÛt2}ü u©û tû	uÒtÆBÿ eü > é   < t<	uFëóNëã> Ð   } t	EEÿ3ÛC3ÉëFA>\tù>"u&öÁu}ü tF8"uðë
3À3Û9EüÀEüÑéÉtIÒtÆ\BÿÉuñUÀtU}ü u< tK<	tGÛt=¾ÀPÒt#è!>  YÀt
MÿEFÿMÿEë
èþ=  YÀtFÿÿUFéVÿÿÿÒtÆ BUÿMéÿÿÿE^[Àt  ÿÉÃÿUììS3ÛVW9P7A uèÂÓÿÿh  ¾0A VS4A ÿ,Ñ@ ¡$'A 5 A ;ÃtEü8uuüUüEøPSS}ôè
þÿÿEøÄ=ÿÿÿ?sJMôùÿsBøÁç;Ár6PèÙÿÿðY;ót)UüEøPþWV}ôèÉýÿÿEøÄH£äA 5èA 3ÀëÈÿ_^[ÉÃÿUììSVÿ(Ñ@ Ø3ö;Þu3Àëwf93tÀf90uøÀf90uðW=0Ñ@ VVV+ÃVÑø@PSVVEôÿ×Eø;Æt8PèÙÿÿYEü;Æt*VVÿuøPÿuôSVVÿ×Àuÿuüè0ÿÿYuüSÿ$Ñ@ Eüë	Sÿ$Ñ@ 3À_^[ÉÃÿUìì¡A eø eü SW¿Næ@»»  ÿÿ;Çt
Ãt	÷Ð£A ëeVEøPÿ@Ñ@ uü3uøÿ<Ñ@ 3ðÿðÐ@ 3ðÿ8Ñ@ 3ðEðPÿ4Ñ@ Eô3Eð3ð;÷u¾Oæ@»ëóuÆ
G  Áàð5A ÷Ö5A ^_[ÉÃÿUìì4S3ÛöEVð]Ü]þ]øÇEÌ   ]Ðt	]ÔÆEÿë
ÇEÔ   ]ÿEÜPè>  YÀÞ  ¸   Eu÷E @ u9EÜtMÿEà+Ã¹   Àº   tCHt(Ht èÂ¸ÿÿÿè¥¸ÿÿj^0èï£ÿÿÆéÞ   MôëöEt	÷E   uìÇEô   @ëUôEjY+Át7+Át*+Át+Átè@u¥9UôÀEìëÇEì   ëÇEì   ëÇEì   ë]ìEº   #Â¹   W¿   ;Á3t(;Ãt$;Çt=   tT=   u-ÇEè   ëTÇEè   ëKÇEè   ëB=   t4=   t$;Ât)èà·ÿÿÿèÃ·ÿÿj^0è
£ÿÿÆ_^[ÉÃÇEè   ëÇEè   EÇEð   Çt
àA ÷Ñ#MÉxÇEð   ¨@tMð   Mô   Mì©   t	}ð¨ t	Mð   ë¨tMð   è²§ÿÿËÿ;Ãu!èF·ÿÿ  è)·ÿÿÇ    è·ÿÿ é`ÿÿÿE=DÑ@ j ÿuðÇ    ÿuèEÌPÿuìÿuôÿuÿ×Eà;ÃupMô¸   À#È;Èu+öEt%eôÿÿÿj ÿuðEÌÿuèPÿuìÿuôÿuÿ×Eà;Ãu76ÆÁø &A æÁæD0 þÿHÐ@ Pè°¶ÿÿYè¶ÿÿ Eøéf  ÿuàÿXÐ@ ÀuD6ÆÁø &A æÁæD0 þÿHÐ@ ðVèj¶ÿÿYÿuàÿdÐ@ öu­è1¶ÿÿÇ 
   ë øuMÿ@ë	øuMÿÿuàÿ6èF¤ÿÿÐàÁú &A YÁàYMÿÉLÐàÁú &A ÁàD$ MýeýHMÿuöÁ¨  öEtpjSÿ6èäÿÿøÄ;ûuè°µÿÿ8   tPÿ6èZ­ÿÿéÿþÿÿeØ jEØPÿ6è³ÜÿÿÄÀuf}ØuÇRPÿ6è8  Ä;ÃtÂj j ÿ6è7äÿÿÄ;Ãt°öEÿ(  ¿ @ ¹ @  }uEÜ#Çu	Më	EE#Ç;ÁtD=   t)= @ t"=   t)= @ t"=   t= @ uÆEþëM¸  #È;Èu
ÆEþëÆEþ ÷E   ¬  3ÿöEÿ@}ä  Eô¹   À#Á=   @°   =   tq;Áy  Eè;Çn  øvøv+ø[  ¾Eþ3ÿH  HG  ÇEäÿþ  jé  jWWÿ6èe,  ÄÂtÌWWWÿ6èT,  #ÂÄ;ÃþÿÿjEäPÿ6èQÛÿÿÄ;Ãvþÿÿøtjø¬   }äï»¿ uXÆEþéØ   Eè;ÇÍ   øiÿÿÿøWÿÿÿjWWÿ6èç+  ÄÂJÿÿÿWWWÿ6èÒ+  Ä#Â;Ã   éþÿÿEä%ÿÿ  =þÿ  uÿ6èR«ÿÿYè³ÿÿj^0uøé_  =ÿþ  uWjÿ6èMâÿÿÄ;ÃÂýÿÿÆEþë>WWÿ6è3âÿÿÄëÇEäï»¿ j[Ã+ÇPD=äPÿ6è©  Äøÿýÿÿø;ßÝËÿÈÁù &A àÁàD$2Mþá0ÈÁù &A àÁàD$MÁéÀáâ
Ê}ý u!öEtÈàÁù &A ÁàD Mô¸   À#È;Èu~öEtxÿuàÿdÐ@ j ÿuðEÌjPÿuìEô%ÿÿÿPÿuÿDÑ@ ;Ãu4ÿHÐ@ Pèy²ÿÿÈàÁù &A ÁàD þÿ6èí ÿÿYé¡ûÿÿ6ÎÁù &A æÁæEøéUúÿÿSSSSSèÿÿÌjh ô@ è>²ÿÿ3ÿ}ä3Àu;÷À;ÇuèÝ±ÿÿj^0è'ÿÿÆëYÿ3À9}À;ÇtÞ9}tE%þÿÿ÷ØÀ@tÊ}üÿuÿuÿuÿuEäPÆè\øÿÿÄEàÇEüþÿÿÿè   Eà;Çtÿèÿ±ÿÿÃ3ÿu9}ät(9}àtÈÁùàÁà &A D þÿ6è¡ÿÿYÃÿUìjÿuÿuÿuÿuÿuè!ÿÿÿÄ]ÃÿUì} u3À]ÃUMÿMt·fÀt
f;uÁÂëæ··
+Á]ÃÌÌÌÌÌÌÌÌÌÌÌÌÌUìSVWUj j hÈ@ ÿuèl;  ]_^[å]ÃL$÷A   ¸   t2D$Hü3Èè²ÿÿUhP(RP$Rè   Ä]D$T$¸   ÃSVWD$UPjþhÐ@ dÿ5    ¡A 3ÄPD$d£    D$(Xpþÿt:|$,ÿt;t$,v-4v³L$H|³ uh  D³èI   D³è_   ë·L$d
    Ä_^[Ã3Àd
    yÐ@ uQR9Qu¸   ÃSQ»A ëSQ»A L$KCkUQPXY]Y[Â ÿÐÃèrµÿÿÀtjètµÿÿYö A tjh  @jè*ÿÿÄjè]ÿÿÌÌÌÌÌÌÌUìWVuM}ÁÑÆ;þv;ø   ù   r= &A  tWVçæ;þ^_ué|4  ÷Ç   uÁéâùr)ó¥ÿ$@ Çº   éràÈÿ$¤@ ÿ$ @ ÿ$$@ ´@ à@ @ #ÑFGFÁéGÆÇùrÌó¥ÿ$@ I #ÑFÁéGÆÇùr¦ó¥ÿ$@ #ÑÆÁéÇùró¥ÿ$@ I @ t@ l@ d@ \@ T@ L@ D@ DäDäDèDèDìDìDðDðDôDôDøDøDüDü    ðøÿ$@ ÿ @ ¨@ ´@ È@ E^_ÉÃE^_ÉÃFGE^_ÉÃI FGFGE^_ÉÃt1ü|9ü÷Ç   u$Áéâùr
ýó¥üÿ$,@ ÿ÷Ùÿ$Ü@ I Çº   ùrà+Èÿ$0@ ÿ$,@ @@ d@ @ F#ÑGîÁéïùr²ýó¥üÿ$,@ I F#ÑGFÁéGîïùrýó¥üÿ$,@ F#ÑGFGFÁéGîïùVÿÿÿýó¥üÿ$,@ I à@ è@ ð@ ø@  @ @ @ #@ DDDDDDDDDDDDDD    ðøÿ$,@ ÿ<@ D@ T@ h@ E^_ÉÃFGE^_ÉÃI FGFGE^_ÉÃFGFGFGE^_ÉÃÿUì} uèö«ÿÿÇ    è?ÿÿÈÿ]Ãÿuj ÿ5 A ÿHÑ@ ]ÃjèïÿÿYÃÌÌÌL$÷Á   t$ÁÀtN÷Á   uï    ¤$    ¤$    ºÿþþ~Ððÿ3ÂÁ© tèAüÀt2ät$©  ÿ t©   ÿtëÍAÿL$+ÁÃAþL$+ÁÃAýL$+ÁÃAüL$+ÁÃÿUìì$¡A 3ÅEüESEàEVWEäèò²ÿÿeì =<A  Eèu}h\é@ ÿÔÐ@ ØÛ  =LÐ@ hPé@ Sÿ×Àú   5´Ð@ PÿÖh@é@ S£<A ÿ×PÿÖh,é@ S£@A ÿ×PÿÖhé@ S£DA ÿ×PÿÖ£LA Àthøè@ Sÿ×PÿÖ£HA ¡HA Mè5Ð@ ;ÁtG9
LA t?PÿÖÿ5LA øÿÖØÿt,Ût(ÿ×ÀtMÜQjMðQjPÿÓÀtöEøu	M    ë3¡@A ;Eèt)PÿÖÀt"ÿÐEìÀt¡DA ;EètPÿÖÀtÿuìÿÐEìÿ5<A ÿÖÀtÿuÿuäÿuàÿuìÿÐë3ÀMü_^3Í[èíÿÿÉÃÿUìVuWöt}ÿuè¶©ÿÿj^0è ÿÿÆ_^]ÃMÉu3ÀfëÝÖf: tÂOuôÿtç+Ñ·f
ÁfÀtOuî3ÀÿuÂfèd©ÿÿj"YñëªÿUìUS]VWÛuÒu9Uu3À_^[]ÃÒt}ÿuè)©ÿÿj^0èsÿÿÆëÝÛu3ÀfëÐMÉu3ÀfëÔÂûÿuò+ñ·fÁfÀt'Ouîë"ñ+ò·fÀfÉtOtKuëÛu3Éfÿyÿÿÿ3ÀûÿuMjPfDJþXédÿÿÿfè¨ÿÿj"YñéjÿÿÿÿUìMÉxù~ùu¡$A ]Ã¡$A 
$A ]Ãè_¨ÿÿÇ    è¨ÿÿÈÿ]ÃÿUìì¡A 3ÅEüUS3ÛVW;Ó~EÊI8t@;ËuöÉÿÂ+ÁH;Â}@E]ø9]$uE @E$54Ð@ 3À9](SSÿuÀÿuÅ   Pÿu$ÿÖø}ð;ûu3ÀéR  ~Cjà3ÒX÷÷ør7D?=   wè7ÌÿÿÄ;ÃtÇ ÌÌ  ëPè_ÿÿY;Ãt	Ç ÝÝ  ÀEôë]ô9]ôt¬Wÿuôÿuÿujÿu$ÿÖÀà   5Ñ@ SSWÿuôÿuÿuÿÖEø;ÃÁ   ¹   Mt)E ;Ã¬   9Eø£   PÿuWÿuôÿuÿuÿÖé   }ø;û~Bjà3ÒX÷÷ør6D?;Áwè}Ëÿÿü;ûthÇÌÌ  ÇëPè¢ÿÿY;Ãt	Ç ÝÝ  Àøë3ÿ;ût?ÿuøWÿuðÿuôÿuÿuÿÖÀt"SS9] uSSëÿu ÿuÿuøWSÿu$ÿ0Ñ@ EøWèMÿÿYÿuôèDÿÿEøYeä_^[Mü3ÍèÿÿÉÃÿUììÿuMðèÿÿÿu(Eðÿu$ÿu ÿuÿuÿuÿuÿuPèåýÿÿÄ$}ü tMøapýÉÃÿUìQQ¡A 3ÅEüS3ÛVW]ø9]uE @E54Ð@ 3À9] SSÿuÀÿuÅ   PÿuÿÖø;ûu3Àë~<ÿðÿÿw4D?=   wè;ÊÿÿÄ;ÃtÇ ÌÌ  ëPècÿÿY;Ãt	Ç ÝÝ  ÀØÛtº?Pj SèçÓÿÿÄWSÿuÿujÿuÿÖÀtÿuPSÿuÿ¤Ð@ EøSèÿÿEøYeì_^[Mü3ÍèXÿÿÉÃÿUììÿuMðèãÿÿÿu$EðÿuÿuÿuÿuÿuPèëþÿÿÄ}ü tMøapýÉÃÿUìVuöc  ÿvè#ÿÿÿvèÿÿÿvèÿÿÿvèÿÿÿvèÿÿÿvèûÿÿÿ6èôÿÿÿv èìÿÿÿv$èäÿÿÿv(èÜÿÿÿv,èÔÿÿÿv0èÌÿÿÿv4èÄÿÿÿvè¼ÿÿÿv8è´ÿÿÿv<è¬ÿÿÄ@ÿv@è¡ÿÿÿvDèÿÿÿvHèÿÿÿvLèÿÿÿvPèÿÿÿvTèyÿÿÿvXèqÿÿÿv\èiÿÿÿv`èaÿÿÿvdèYÿÿÿvhèQÿÿÿvlèIÿÿÿvpèAÿÿÿvtè9ÿÿÿvxè1ÿÿÿv|è)ÿÿÄ@ÿ¶   èÿÿÿ¶   èÿÿÿ¶   èÿÿÿ¶   èúÿÿÿ¶   èïÿÿÿ¶   èäÿÿÿ¶   èÙÿÿÿ¶   èÎÿÿÿ¶    èÃÿÿÿ¶¤   è¸ÿÿÿ¶¨   è­ÿÿÿ¶¼   è¢ÿÿÿ¶À   èÿÿÿ¶Ä   èÿÿÿ¶È   èÿÿÿ¶Ì   èvÿÿÄ@ÿ¶Ð   èhÿÿÿ¶¸   è]ÿÿÿ¶Ø   èRÿÿÿ¶Ü   èGÿÿÿ¶à   è<ÿÿÿ¶ä   è1ÿÿÿ¶è   è&ÿÿÿ¶ì   èÿÿÿ¶Ô   èÿÿÿ¶ð   èÿÿÿ¶ô   èúÿÿÿ¶ø   èïÿÿÿ¶ü   èäÿÿÿ¶   èÙÿÿÿ¶  èÎÿÿÿ¶  èÃÿÿÄ@ÿ¶  èµÿÿÿ¶  èªÿÿÿ¶  èÿÿÿ¶  èÿÿÿ¶  èÿÿÿ¶   è~ÿÿÿ¶$  èsÿÿÿ¶(  èhÿÿÿ¶,  è]ÿÿÿ¶0  èRÿÿÿ¶4  èGÿÿÿ¶8  è<ÿÿÿ¶<  è1ÿÿÿ¶@  è&ÿÿÿ¶D  èÿÿÿ¶H  èÿÿÄ@ÿ¶L  èÿÿÿ¶P  è÷ÿÿÿ¶T  èìÿÿÿ¶X  èáÿÿÿ¶\  èÖÿÿÿ¶`  èËÿÿÄ^]ÃÿUìVuötY;8A tPè¨ÿÿYF;<A tPèÿÿYF;@A tPèÿÿYF0;hA tPèrÿÿYv4;5lA tVè`ÿÿY^]ÃÿUìVuöê   F;DA tPè:ÿÿYF;HA tPè(ÿÿYF;LA tPèÿÿYF;PA tPèÿÿYF;TA tPèòÿÿYF ;XA tPèàÿÿYF$;\A tPèÎÿÿYF8;pA tPè¼ÿÿYF<;tA tPèªÿÿYF@;xA tPèÿÿYFD;|A tPèÿÿYFH;A tPètÿÿYvL;5A tVèbÿÿY^]ÃÌÌÌÌÌÌUìV3ÀPPPPPPPPUI 
Àt	Â«$ëñuÉÿI Á
Àt	Æ£$sîÁÄ ^ÉÃÿUìUVWÒt}ÿuè·ÿÿj^0èÿÿÆë3EÀuëâò+ð@ÉtOuóÿuÆ èÿÿj"YñëÆ3À_^]ÃÌÌÌÌÌÌÌÌÌÌÌT$L$÷Â   u<:u.
Àt&:au%
ätÁè:Au
Àt:auÁÂ
äuÒÿ3ÀÃÀÑàÀÃ÷Â   tÂ:uçÁ
ÀtÜ÷Â   t¤fÂ:uÎ
ÀtÆ:auÅ
ät½ÁëÌÌÌÌÌÌÌÌUìV3ÀPPPPPPPPUI 
Àt	Â«$ëñuÿ
ÀtÆ£$sñFÿÄ ^ÉÃÿUì} uÿuèIÿÿY]ÃVuöu
ÿuè²}ÿÿY3ÀëMWë0öuFVÿuj ÿ5 A ÿÐ@ øÿu^9$A t@Vèò¥ÿÿYÀtþàvËVèâ¥ÿÿYè(ÿÿÇ    3À_^]ÃèÿÿðÿHÐ@ PèÇÿÿYëâèÿÿÿðÿHÐ@ Pè¯ÿÿYÇëÊÿUìMS3Û;Ëvjà3ÒX÷ñ;EsèÊÿÿÇ    3ÀëA¯MVWñ9]tÿuè¥ñÿÿYØVÿuèÿÿÿøYYÿt;Þs+óVj ßSèïËÿÿÄÇ_^[]ÃÿUì¸ä  èf  ¡A 3ÅEüEVuW3ÿ4åÿÿ½8åÿÿ½0åÿÿ9}u3Àé®  ;ÇuèEÿÿ8è+ÿÿÇ    ètÿÿÈÿé  ÆÁøþS &A çÁçL8$ÉÐù$åÿÿ?åÿÿùtùu'M÷ÑöÁuèçÿÿ  èÌÿÿÇ    èÿÿé  öD8 tjj j VèÍ  ÄVè|  YÀ  öD  è¦ÿÿ@l3É9H åÿÿÁPÿ4ñÿÐ@ 3É;Á`  ;ñt8?åÿÿP  ÿÐ@ 4åÿÿ åÿÿ3À,åÿÿ9E#  @åÿÿ?åÿÿÀg  µ$åÿÿ3Àù
ÀåÿÿÇx8 tP4UôMõ`8 jEôPëK¾ÁPè  YÀt:4åÿÿ+ËM3À@;È¥  jDåÿÿSPè  Äøÿ  Cÿ@åÿÿëjSDåÿÿPèn  Äøÿn  3ÀPPjMôQjDåÿÿQPÿµ åÿÿCÿ@åÿÿÿ0Ñ@ ðö=  j ,åÿÿPVEôP$åÿÿ ÿ4ÿøÐ@ À
  @åÿÿ0åÿÿÁ8åÿÿ9µ,åÿÿö  ½åÿÿ Í   j ,åÿÿPjEôP$åÿÿ ÆEô
ÿ4ÿøÐ@ À±  ½,åÿÿ°  ÿ0åÿÿÿ8åÿÿé   <t<u!·33Éþ
ÁÃ@åÿÿµDåÿÿåÿÿ<t<uRÿµDåÿÿèÎ   Yf;DåÿÿI  8åÿÿ½åÿÿ t)j
XPDåÿÿè¡   Yf;Dåÿÿ  ÿ8åÿÿÿ0åÿÿE9@åÿÿùýÿÿé  ÿ8åÿÿT4D8éï  3ÉöD8¡  ½?åÿÿ Dåÿÿ¨   4åÿÿ9Mý  Ë3ö+4åÿÿHåÿÿ;Ms&CA åÿÿú
uÿ0åÿÿÆ 
@F@Fþÿ  rÕðHåÿÿ+ðj (åÿÿPVHåÿÿP$åÿÿ ÿ4ÿøÐ@ ÀC  (åÿÿ8åÿÿ;Æ;  Ã+4åÿÿ;Elÿÿÿé%  ½?åÿÿÍ   4åÿÿ9MH  ¥@åÿÿ Ë+4åÿÿjHåÿÿ^;MsC·ÞÎ åÿÿú
uµ0åÿÿj
[f åÿÿÆµ@åÿÿµ@åÿÿfÆ½@åÿÿþ  r¸ðHåÿÿ+ðj (åÿÿPVHåÿÿP$åÿÿ ÿ4ÿøÐ@ Ài  (åÿÿ8åÿÿ;Æa  Ã+4åÿÿ;EGÿÿÿéK  4åÿÿ,åÿÿ9Mu  ,åÿÿ¥@åÿÿ +4åÿÿjHùÿÿ^;Ms;,åÿÿ·µ,åÿÿÎú
uj
[fÆµ@åÿÿµ@åÿÿfÆ½@åÿÿ¨  rÀ3öVVhU
  ðëÿÿQHùÿÿ+Á+ÂÑøPÁPVhéý  ÿ0Ñ@ Ø;Þ   j (åÿÿPÃ+ÆP5ðëÿÿP$åÿÿ ÿ4ÿøÐ@ Àtµ(åÿÿ;ÞËëÿHÐ@ Dåÿÿ;Þ\,åÿÿ+4åÿÿ8åÿÿ;Eÿÿÿë?Q(åÿÿQÿuÿµ4åÿÿÿ48ÿøÐ@ Àt(åÿÿ¥Dåÿÿ 8åÿÿëÿHÐ@ Dåÿÿ½8åÿÿ ul½Dåÿÿ t-j^9µDåÿÿuèíÿÿÇ 	   èõÿÿ0ë?ÿµDåÿÿèùÿÿYë1$åÿÿ öD@t4åÿÿ8u3Àë$è­ÿÿÇ    èµÿÿ  Èÿë8åÿÿ+0åÿÿ[Mü_3Í^èqÿÿÉÃjh@ô@ è¼ÿÿ]ûþuèyÿÿ  è^ÿÿÇ 	   Èÿé   Ûx;&A rèRÿÿ  è7ÿÿÇ 	   èÿÿëÒÃÁø< &A óæÁæ¾D0àtÆSè¯ÿÿYeü öD0tÿuÿuSènøÿÿÄEäëèÝÿÿÇ 	   èåÿÿ  MäÿÇEüþÿÿÿè   EäèEÿÿÃ]Sè÷ÿÿYÃjh`ô@ èèÿÿ]ûþuèÿÿÇ 	   Èÿé¡   Ûx;&A rèsÿÿÇ 	   è¼ÿÿëÚÃÁø< &A óæÁæ¾DàtÎSèëÿÿYeü öDt1SènÿÿYPÿ|Ð@ ÀuÿHÐ@ Eäëeä }ä tèÿÿMäèüÿÿÇ 	   MäÿÇEüþÿÿÿè   EäèlÿÿÃ]SèÿÿYÃöA@ty t$ÿIxÿ¶Àë¾ÀQPèa¹ÿÿYYøÿu	ÃÿÃÿUìQöC@VðEüt
{ uEë>' } ~0E ÿMËèÿÿÿÿE>ÿu?*uË°?è~ÿÿÿ} Õ? uEü^ÉÃÿUìì  ¡A 3ÅEüS]Vu3ÀW}ÿu¬ýÿÿµÐýÿÿ½äýÿÿ¨ýÿÿðýÿÿÈýÿÿèýÿÿÌýÿÿ¤ýÿÿÄýÿÿèsÿÿèÑÿÿýÿÿöu+èÂÿÿÇ    èÿÿ½¸ýÿÿ t
´ýÿÿ`pýÈÿéa  öF@u^Vè
}ÿÿYºÀA øÿtøþtÈáðÁþÁáµ &A ëÊöA$uøÿtøþtÈàÁùÁà &A ëÂö@$qÿÿÿ3ö;ÞgÿÿÿµÜýÿÿµØýÿÿµ¼ýÿÿµ ýÿÿïýÿÿÒ²
  CÀýÿÿ9µÜýÿÿ
  Bà<Xw¾Â¶Ðé@ àë3À¼ýÿÿkÀ	¶ðé@ jÁè^¼ýÿÿ;ÆïþÿÿjY;Á 
  ÿ$^»@ 3Àèýÿÿÿýÿÿ¤ýÿÿÈýÿÿÌýÿÿðýÿÿÄýÿÿéç	  ¾Âè tHèt4+Æt$HHtèÉ	  	µðýÿÿé¾	  ðýÿÿé²	  ðýÿÿé¦	  ðýÿÿ   é	  ðýÿÿé	  ú*u,Ç½äýÿÿü½Èýÿÿÿl	  ðýÿÿ÷ÈýÿÿéZ	  ÈýÿÿkÀ
¾ÊDÐÈýÿÿé?	  ¥èýÿÿ é3	  ú*u&Ç½äýÿÿü½èýÿÿÿ	  èýÿÿÿé	  èýÿÿkÀ
¾ÊDÐèýÿÿéí  úItUúhtDúltúwÕ  ðýÿÿ   éÆ  ;luCðýÿÿ   Àýÿÿé«  ðýÿÿé  ðýÿÿ é  <6u{4uÃðýÿÿ   Àýÿÿéo  <3u{2uÃ¥ðýÿÿÿÿÿÀýÿÿéM  <dE  <i=  <o5  <u-  <x%  <X  ¥¼ýÿÿ ¥Äýÿÿ ¬ýÿÿP¶ÂPè
  YÀïýÿÿYt"ÐýÿÿµÜýÿÿèûÿÿCÀýÿÿÀüÿÿÐýÿÿµÜýÿÿèyûÿÿé»  ¾Âød·  U  øSº   tLèAtHHt$HHtHH¨  Â Çýÿÿ   ïýÿÿéS  ÷ðýÿÿ0     ðýÿÿ   é   ÷ðýÿÿ0  u
ðýÿÿ   èýÿÿùÿu¹ÿÿÿÇ÷ðýÿÿ  ½äýÿÿü½àýÿÿû  ÿu¡¤A àýÿÿàýÿÿÇÄýÿÿ   éÉ  èX  HHt+Á³  HHè  ½äýÿÿÇ÷ðýÿÿ  ½äýÿÿt0·GüPh   ôýÿÿPØýÿÿPè  ÄÀtÇ¤ýÿÿ   ëGüôýÿÿÇØýÿÿ   ôýÿÿàýÿÿéy  Ç½äýÿÿÀt<HÉt5÷ðýÿÿ   ¿ àýÿÿt+ÂÑøÇÄýÿÿ   é4  ¥Äýÿÿ é(  ¡ A àýÿÿPèÂâÿÿYé  øp6  "  øeÿ  øg³   øitxønt*øoã  öðýÿÿ½äýÿÿµØýÿÿtlðýÿÿ   ë`äýÿÿäýÿÿpüèÒ	  ÀJúÿÿöðýÿÿ tfÜýÿÿfëÜýÿÿÇ¤ýÿÿ   é>  ½äýÿÿðýÿÿ@ÇØýÿÿ
   ðýÿÿ÷Á   Ý  þGøWüé	  ½äýÿÿðýÿÿ@½èýÿÿ ôýÿÿ¸   àýÿÿýÿÿ}Çèýÿÿ   ëjuúgucÇèýÿÿ   ëW9èýÿÿ~èýÿÿ½èýÿÿ£   ~=µèýÿÿÆ]  Vè,¬ÿÿïýÿÿY ýÿÿÀtàýÿÿµýÿÿØë
Çèýÿÿ£   5Ð@ ÇýÿÿGüýÿÿ¬ýÿÿPÿµýÿÿ¾Âÿµèýÿÿ½äýÿÿPÿµýÿÿýÿÿSPÿ5@A ÿÖÿÐ½ðýÿÿÄç   t½èýÿÿ u¬ýÿÿPSÿ5LA ÿÖÿÐYY½ïýÿÿguÿu¬ýÿÿPSÿ5HA ÿÖÿÐYY;-uðýÿÿ   CàýÿÿSéÄýÿÿµèýÿÿ¨ýÿÿë*èstüÿÿHH[þÿÿè¾  ½äýÿÿÇ¨ýÿÿ'   öðýÿÿÇØýÿÿ   5þÿÿ¨ýÿÿQÆÔýÿÿ0ÕýÿÿÇÌýÿÿ   éþÿÿ÷Á   þÿÿÇöÁ t½äýÿÿöÁ@t¿Güë·GüëGüöÁ@të3Ò½äýÿÿöÁ@tÒ|Às÷ØÒ ÷Úðýÿÿ   ÷ðýÿÿ   úØu3ÿ½èýÿÿ }Çèýÿÿ   ë¥ðýÿÿ÷¸   9èýÿÿ~èýÿÿÃÇu!ÌýÿÿuóèýÿÿÿèýÿÿÀÃÇt-ØýÿÿRPWSèc  Á0ýÿÿØúù9~¨ýÿÿNë½Eó+ÆF÷ðýÿÿ   ØýÿÿµàýÿÿtcÀtÎ90tXÿàýÿÿàýÿÿÆ0@ë@If8 tÀÉuò+àýÿÿÑøë(ÿu¡ A àýÿÿàýÿÿëI8 t@Éuõ+àýÿÿØýÿÿ½¤ýÿÿ ¸  ðýÿÿöÁ@t5÷Á   t	ÆÔýÿÿ-ëöÁt	ÆÔýÿÿ+ëöÁtÆÔýÿÿ ÇÌýÿÿ   Èýÿÿ+Øýÿÿ+ÌýÿÿýÿÿöÁu%øëÐýÿÿµÜýÿÿ° Oèõÿÿ½ÜýÿÿÿtÿßÿµÌýÿÿ½ýÿÿÐýÿÿÔýÿÿPÜýÿÿèõÿÿöðýÿÿYYt.öðýÿÿu%½ýÿÿëµÜýÿÿË°0Oè»ôÿÿ½Üýÿÿÿtÿã½Äýÿÿ ØýÿÿtuÀ~qµàýÿÿýÿÿ·ÿýÿÿPjEôPýÿÿPÆè5  ÄÀu69ýÿÿt.ÿµýÿÿ½ýÿÿÐýÿÿEôPÜýÿÿèsôÿÿ½ýÿÿ YYu¦ë#Üýÿÿÿë½ýÿÿPÿµàýÿÿÜýÿÿèEôÿÿYY½Üýÿÿ |2öðýÿÿt)½ýÿÿëÐýÿÿµÜýÿÿ° Oèâóÿÿ½Üýÿÿÿtÿß½ ýÿÿ tÿµ ýÿÿèÔgÿÿ¥ ýÿÿ YÀýÿÿïýÿÿÀt½äýÿÿ3öÐédõÿÿ½¼ýÿÿ t
½¼ýÿÿôÿÿ½¸ýÿÿ t
´ýÿÿ`pýÜýÿÿMü_^3Í[èIcÿÿÉÃI æ²@ ã°@ ±@ q±@ ½±@ É±@ ²@ A³@ ÌÌQL$+ÈÀ÷Ð#ÈÄ% ðÿÿ;Èr
ÁY $Ã-    ëéÿUìQQEVuEøEWVEüè wÿÿÏÿY;Çuè±ÿÿÇ 	   Ç×ëJÿuMüQÿuøPÿ Ñ@ Eø;ÇuÿHÐ@ Àt	Pè£ÿÿYëÏÆÁø &A æÁæD0 ýEøUü_^ÉÃjhô@ èÿÿËÿ]Ü]àEøþuèHÿÿ  è-ÿÿÇ 	   ÃÓé¡   Àx;&A rè ÿÿ  èÿÿÇ 	   èNrÿÿëÑÈÁù< &A ðæÁæ¾L1átÆPè}vÿÿYeü öD0tÿuÿuÿuÿuè×þÿÿÄEÜUàëè£ÿÿÇ 	   è«ÿÿ  ]Ü]àÇEüþÿÿÿè   EÜUàèÿÿÃÿuè¹vÿÿYÃÿUìÿA h   èM¥ÿÿYMAÀt
IÇA   ëIAAÇA   Aa ]ÃÿUìEøþuèÿÿÇ 	   3À]ÃÀx;&A rè÷ÿÿÇ 	   è@qÿÿëÞÈàÁù &A Áà¾Dà@]ÃÿUìì¡A 3ÅEüSVuöF@W6  Vè#oÿÿY»ÀA øÿt.VèoÿÿYøþt"VèoÿÿÁøV< &A èönÿÿàYÁàYëÃ@$$<è   VèÕnÿÿYøÿt.VèÉnÿÿYøþt"Vè½nÿÿÁøV< &A è­nÿÿàYÁàYëÃ@$$<   VènÿÿYøÿt.VènÿÿYøþt"VètnÿÿÁøV< &A èdnÿÿàYÁàYëÃö@t]ÿuEôjPEðPè´  ÄÀt¸ÿÿ  ë]3ÿ9}ð~0ÿNxL=ô¶Aë¾D=ôVPè>©ÿÿYYøÿtÈG;}ð|ÐfEë Fþx
Efë
·EVPèh  YYMü_^3Í[èd_ÿÿÉÃ¡A È3É9XA ÁÁÃÿUììSVu3Û;ót9]t8uE;Ãt3Éf3À^[ÉÃÿuMðè³cÿÿEð9XuE;Ãt¶f8]ütEø`pý3À@ëËEðP¶PèÄ   YYÀt}Eð¬   ù~%9M| 3Ò9]ÂRÿuQVj	ÿpÿ4Ð@ ÀEðuM;¬   r 8^t¬   8]üfÿÿÿMøapýéZÿÿÿè\ÿÿÇ *   8]ütEø`pýÈÿé;ÿÿÿ3À9]ÀPÿuEðjVj	ÿpÿ4Ð@ À:ÿÿÿëºÿUìj ÿuÿuÿuèÕþÿÿÄ]ÃÿUììÿuMðè©bÿÿ¶EMðÈ   ·A%   }ü tMøapýÉÃÿUìj ÿuè¹ÿÿÿYY]ÃÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌVD$Àu(L$D$3Ò÷ñØD$÷ñðÃ÷d$ÈÆ÷d$ÑëGÈ\$T$D$ÑéÑÛÑêÑØÉuô÷óð÷d$ÈD$÷æÑr;T$wr;D$v	N+D$T$3Û+D$T$÷Ú÷ØÚ ÊÓÙÈÆ^Â fïÀQSÁàÀuÂâÁèt7¤$    ffAfA fA0fA@fAPfA`fAp   HuÐÒt7ÂÁètëI fIHuöâtÂ3ÛÁêtIJuøàtAHuú[XÃØ÷ÛÃ+Ó3ÀRÓâtAJuúÁëtIKuøZéUÿÿÿj
ÿxÐ@ £ &A 3ÀÃÿUìVuö~
Vÿuè¥ÿÿYYðEÀ~Pÿuèx¥ÿÿYYötÀtPÿuVÿuÿuÿuÿtÐ@ ëÎ+ÈujXë3ÀÉÀD ^]ÃÿUìV5øA ë$WPÿuèz¾ÿÿÄÀu·xø=tfÀtÆÀuÖÆ+øA Áø÷Ø^]ÃÆ+øA ÁøëðÿUìQWø3ÀÏÿtL9t	Á@9 u÷V@jPè¢ÿÿðYYuüöuj	èy_ÿÿYÀt+þPèË	  